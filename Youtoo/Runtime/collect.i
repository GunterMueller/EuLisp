;;; EuLisp system 'youtoo'
;;;   Interface file for module collect

(definterface collect
  (import (telos compare)
   syntax (_telos0)
   full-import (mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl boot boot1 telos callback let-cc dynamic thread event condition compare)
   export (
    ((name . concatenate) (pos . 19) (origin collect . concatenate))
    ((name . sequence?) (pos . 11) (origin collect . sequence?))
    ((name . sort!) (pos . 10) (origin collect . sort!))
    ((name . size) (pos . 9) (origin collect . size))
    ((name . delete) (pos . 28) (origin collect . delete))
    ((name . reverse) (pos . 27) (origin collect . reverse))
    ((name . remove) (pos . 15) (origin collect . remove))
    ((name . reverse!) (pos . 12) (origin collect . reverse!))
    ((name . sort) (pos . 17) (origin collect . sort))
    ((name . all?) (pos . 18) (origin collect . all?))
    ((name . name) (pos . 8) (origin collect . name))
    ((name . accumulate1) (pos . 14) (origin collect . accumulate1))
    ((name . member) (pos . 13) (origin collect . member))
    ((name . any?) (pos . 26) (origin collect . any?))
    ((name . reset) (pos . 20) (origin collect . reset))
    ((name . accumulate) (pos . 25) (origin collect . accumulate))
    ((name . find) (pos . 16) (origin collect . find))
    ((name . <collection>) (pos . 24) (origin collect . <collection>) (class . constant))
    ((name . collectionp) (pos . 23) (origin collect . collectionp))
    ((name . <sequence>) (pos . 7) (origin collect . <sequence>) (class . constant))
    ((name . emptyp) (pos . 3) (origin collect . emptyp))
    ((name . select) (pos . 5) (origin collect . select))
    ((name . element) (pos . 22) (origin collect . element))
    ((name . slice) (pos . 4) (origin collect . slice))
    ((name . do) (pos . 6) (origin collect . do))
    ((name . fill) (pos . 21) (origin collect . fill))
    ((name . map) (pos . 2) (origin collect . map))
   )
   local-literals (
    (top-level . 95)
    ((setter element) . 93)
    (setter . 92)
    (|(method find)| . 91)
    (|(method fill)| . 90)
    (|(method all?)| . 89)
    (|(method any?)| . 88)
    (|(method binary=)| . 87)
    (|(method sequence?)| . 86)
    (|(method collectionp)| . 85)
    (|(method name)| . 84)
    (slice . 83)
    (concatenate . 82)
    (sort! . 81)
    (sort . 80)
    (reverse! . 79)
    (reverse . 78)
    (size . 77)
    (reset . 76)
    (remove . 75)
    (delete . 74)
    (element . 73)
    (select . 72)
    (member . 71)
    (map . 70)
    (find . 69)
    (fill . 68)
    (do . 67)
    (all? . 66)
    (any? . 65)
    (accumulate1 . 64)
    (accumulate . 63)
    (emptyp . 62)
    (sequence? . 61)
    (collectionp . 60)
    (name . 59)
    ((size: fill-value:) . 58)
    (fill-value: . 57)
    (size: . 56)
    (sequence . 55)
    (abstractp: . 54)
    (direct-keywords: . 53)
    (direct-slots: . 52)
    (direct-superclasses: . 51)
    (collection . 50)
    (name: . 49)
    (anonymous . 33)
    ("fill not yet implemented" . 30)
   )
   literals (
   )
))
