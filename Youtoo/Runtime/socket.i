;;; EuLisp system 'youtoo'
;;;   Interface file for module socket

(definterface socket
  (import (telos lock condition convert dynamic stream1 stream2 string)
   syntax (_macros)
   full-import (mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl boot boot1 telos thread event lock let-cc dynamic condition convert stream1 string copy compare callback collect integer number fpi stream2)
   export (
    ((name . socket-host) (pos . 11) (origin socket . socket-host) (inline (G002979 (static-ref2) (binding-ref ? <socket>) (primitive-relative-ref))) (setter (G002991 (stack-ref 1) (static-ref2) (stack-ref 2) (binding-ref ? <socket>) (set-primitive-relative-ref) (nobble 2))))
    ((name . socket-port) (pos . 9) (origin socket . socket-port) (inline (G002981 (static-fpi-ref 3) (binding-ref ? <socket>) (primitive-relative-ref))) (setter (G002993 (stack-ref 1) (static-fpi-ref 3) (stack-ref 2) (binding-ref ? <socket>) (set-primitive-relative-ref) (nobble 2))))
    ((name . socket-queue-size) (pos . 6) (origin socket . socket-queue-size) (inline (G002975 (static-ref0) (binding-ref ? <socket>) (primitive-relative-ref))) (setter (G002987 (stack-ref 1) (static-ref0) (stack-ref 2) (binding-ref ? <socket>) (set-primitive-relative-ref) (nobble 2))))
    ((name . connection-host) (pos . 5) (origin socket . connection-host) (inline (G002985 (static-ref1) (binding-ref ? <connection>) (primitive-relative-ref))) (setter (G002997 (stack-ref 1) (static-ref1) (stack-ref 2) (binding-ref ? <connection>) (set-primitive-relative-ref) (nobble 2))))
    ((name . <connection>) (pos . 2) (origin socket . <connection>) (class . constant))
    ((name . connection-port) (pos . 7) (origin socket . connection-port) (inline (G002983 (static-ref0) (binding-ref ? <connection>) (primitive-relative-ref))) (setter (G002995 (stack-ref 1) (static-ref0) (stack-ref 2) (binding-ref ? <connection>) (set-primitive-relative-ref) (nobble 2))))
    ((name . <socket>) (pos . 8) (origin socket . <socket>) (class . constant))
    ((name . connection?) (pos . 4) (origin socket . connection?))
    ((name . socket-descriptor) (pos . 3) (origin socket . socket-descriptor) (inline (G002977 (static-ref1) (binding-ref ? <socket>) (primitive-relative-ref))) (setter (G002989 (stack-ref 1) (static-ref1) (stack-ref 2) (binding-ref ? <socket>) (set-primitive-relative-ref) (nobble 2))))
   )
   local-literals (
    (top-level . 84)
    (socket-descriptor . 83)
    (connection-host . 82)
    (socket-queue-size . 81)
    (connection-port . 80)
    (socket-port . 79)
    (socket-host . 78)
    (|(method connection?)| . 70)
    (|(setter connection-host)| . 69)
    (|(setter connection-port)| . 68)
    (|(method initialize)| . 67)
    (|(method socket?)| . 66)
    (|(setter socket-port)| . 65)
    (|(setter socket-host)| . 64)
    (|(setter socket-descriptor)| . 63)
    (|(setter socket-queue-size)| . 62)
    (connection? . 61)
    (socket? . 60)
    ((socket: port: host:) . 59)
    (connection . 58)
    ((queue-size: host: port:) . 57)
    (direct-keywords: . 56)
    (direct-slots: . 55)
    (direct-superclasses: . 54)
    (socket . 53)
    (queue-size: . 52)
    (queue-size . 51)
    (descriptor . 50)
    (host: . 49)
    (host . 48)
    (port: . 47)
    (keyword: . 46)
    (default: . 45)
    (port . 44)
    (name: . 43)
    ("tcp" . 30)
    (anonymous . 23)
    (*clean-ups* . 22)
    (w . 21)
    (descriptor: . 20)
    (r . 19)
    (mode: . 18)
    (file-name: . 17)
    ("~a:~a" . 16)
    (value: . 15)
    ("tcp" . 14)
    (socket: . 13)
   )
   literals (
   )
))
