;;; EuLisp system 'youtoo'
;;;   Library interface file for module math

(definterface math
  (import ()
   syntax ()
   full-import (math mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl boot boot1 telos double1 float string convert collect fpi integer number copy compare condition event thread dynamic let-cc callback double)
   export (
    ((name . most-positive-double-float) (pos . 6) (origin double . most-positive-double-float) (class . constant))
    ((name . double-log10) (pos . 29) (origin math . double-log10) (class . ff) (arity . 1) (ff (2) 2 (log10 . ff_stub_log10785)))
    ((name . tan) (pos . 16) (origin math . tan))
    ((name . double-acos) (pos . 17) (origin math . double-acos) (class . ff) (arity . 1) (ff (2) 2 (acos . ff_stub_acos773)))
    ((name . double-tan) (pos . 23) (origin math . double-tan) (class . ff) (arity . 1) (ff (2) 2 (tan . ff_stub_tan779)))
    ((name . log) (pos . 14) (origin math . log))
    ((name . double-cos) (pos . 21) (origin math . double-cos) (class . ff) (arity . 1) (ff (2) 2 (cos . ff_stub_cos777)))
    ((name . double-sinh) (pos . 25) (origin math . double-sinh) (class . ff) (arity . 1) (ff (2) 2 (sinh . ff_stub_sinh781)))
    ((name . least-negative-double-float) (pos . 5) (origin double . least-negative-double-float) (class . constant))
    ((name . sinh) (pos . 13) (origin math . sinh))
    ((name . asin) (pos . 10) (origin math . asin))
    ((name . acos) (pos . 12) (origin math . acos))
    ((name . log10) (pos . 9) (origin math . log10))
    ((name . double-binary=) (pos . 12) (origin double . double-binary=) (class . ff) (arity . 2) (ff (2 2) 6 (eul_dbl_equal . ff_stub_eul_dbl_equal514)))
    ((name . double-truncate) (pos . 11) (origin double1 . double-truncate) (class . ff) (arity . 1) (ff (2) 0 (eul_dbl_truncate . ff_stub_eul_dbl_truncate235)))
    ((name . double-cosh) (pos . 24) (origin math . double-cosh) (class . ff) (arity . 1) (ff (2) 2 (cosh . ff_stub_cosh780)))
    ((name . double-atan2) (pos . 20) (origin math . double-atan2) (class . ff) (arity . 2) (ff (2 2) 2 (atan2 . ff_stub_atan2776)))
    ((name . double-tanh) (pos . 26) (origin math . double-tanh) (class . ff) (arity . 1) (ff (2) 2 (tanh . ff_stub_tanh782)))
    ((name . pi) (pos) (origin math . pi) (class . constant) (value 3.141593))
    ((name . double-round) (pos . 10) (origin double1 . double-round) (class . ff) (arity . 1) (ff (2) 0 (eul_dbl_round . ff_stub_eul_dbl_round234)))
    ((name . int-as-double) (pos . 13) (origin double1 . int-as-double) (class . ff) (arity . 1) (ff (0) 2 (eul_fpi_as_dbl . ff_stub_eul_fpi_as_dbl237)))
    ((name . double-log) (pos . 28) (origin math . double-log) (class . ff) (arity . 1) (ff (2) 2 (log . ff_stub_log784)))
    ((name . pow) (pos . 4) (origin math . pow))
    ((name . double-exp) (pos . 27) (origin math . double-exp) (class . ff) (arity . 1) (ff (2) 2 (exp . ff_stub_exp783)))
    ((name . sqrt) (pos . 11) (origin math . sqrt))
    ((name . double-atan) (pos . 19) (origin math . double-atan) (class . ff) (arity . 1) (ff (2) 2 (atan . ff_stub_atan775)))
    ((name . double-sin) (pos . 22) (origin math . double-sin) (class . ff) (arity . 1) (ff (2) 2 (sin . ff_stub_sin778)))
    ((name . atan2) (pos . 8) (origin math . atan2))
    ((name . exp) (pos . 7) (origin math . exp))
    ((name . double-binary-lcm) (pos . 7) (origin double . double-binary-lcm))
    ((name . double-binary*) (pos . 4) (origin double1 . double-binary*) (class . ff) (arity . 2) (ff (2 2) 2 (eul_dbl_product . ff_stub_eul_dbl_product228)))
    ((name . double-asin) (pos . 18) (origin math . double-asin) (class . ff) (arity . 1) (ff (2) 2 (asin . ff_stub_asin774)))
    ((name . double-binary-mod) (pos . 7) (origin double1 . double-binary-mod) (class . ff) (arity . 2) (ff (2 2) 0 (eul_dbl_mod . ff_stub_eul_dbl_mod231)))
    ((name . double-sqrt) (pos . 31) (origin math . double-sqrt) (class . ff) (arity . 1) (ff (2) 2 (sqrt . ff_stub_sqrt787)))
    ((name . double-ceiling) (pos . 8) (origin double1 . double-ceiling) (class . ff) (arity . 1) (ff (2) 2 (eul_dbl_ceiling . ff_stub_eul_dbl_ceiling232)))
    ((name . cosh) (pos . 15) (origin math . cosh))
    ((name . least-positive-double-float) (pos . 4) (origin double . least-positive-double-float) (class . constant))
    ((name . double-binary-) (pos . 3) (origin double1 . double-binary-) (class . ff) (arity . 2) (ff (2 2) 2 (eul_dbl_difference . ff_stub_eul_dbl_difference227)))
    ((name . <double-float>) (pos . 9) (origin float . <double-float>) (class . constant))
    ((name . double-binary<) (pos . 13) (origin double . double-binary<) (class . ff) (arity . 2) (ff (2 2) 6 (eul_dbl_less . ff_stub_eul_dbl_less515)))
    ((name . double-as-string) (pos . 12) (origin double1 . double-as-string) (class . ff) (arity . 1) (ff (2) 3 (eul_dbl_as_str . ff_stub_eul_dbl_as_str236)))
    ((name . cos) (pos . 6) (origin math . cos))
    ((name . double-pow) (pos . 30) (origin math . double-pow) (class . ff) (arity . 2) (ff (2 2) 2 (pow . ff_stub_pow786)))
    ((name . double-floor) (pos . 9) (origin double1 . double-floor) (class . ff) (arity . 1) (ff (2) 2 (eul_dbl_floor . ff_stub_eul_dbl_floor233)))
    ((name . <double>) (pos . 7) (origin float . <double>) (class . constant))
    ((name . double-binary+) (pos . 2) (origin double1 . double-binary+) (class . ff) (arity . 2) (ff (2 2) 2 (eul_dbl_sum . ff_stub_eul_dbl_sum226)))
    ((name . most-negative-double-float) (pos . 3) (origin double . most-negative-double-float) (class . constant))
    ((name . double-binary/) (pos . 5) (origin double1 . double-binary/) (class . ff) (arity . 2) (ff (2 2) 2 (eul_dbl_quotient . ff_stub_eul_dbl_quotient229)))
    ((name . atan) (pos . 5) (origin math . atan))
    ((name . sin) (pos . 3) (origin math . sin))
    ((name . double?) (pos . 6) (origin float . double?))
    ((name . double-binary%) (pos . 6) (origin double1 . double-binary%) (class . ff) (arity . 2) (ff (2 2) 2 (eul_dbl_remainder . ff_stub_eul_dbl_remainder230)))
    ((name . tanh) (pos . 2) (origin math . tanh))
    ((name . double-binary-gcd) (pos . 2) (origin double . double-binary-gcd))
   )
   literals (
   )
  )
)  ; end of interface