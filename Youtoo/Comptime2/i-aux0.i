;;; EuLisp system 'youtoo'
;;;   Interface file for module i-aux0

(definterface i-aux0
  (import (level1)
   syntax (macros)
   full-import (symbol stream3 random handler read table table1 vector convert1 format list socket stream2 lock stream1 stream float character compare collect fpi number integer copy convert string callback let-cc dynamic thread event condition bit mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl boot boot1 telos level1)
   export (
    ((name . as-foreign-function-stub-name) (pos . 14) (origin i-aux0 . as-foreign-function-stub-name))
    ((name . as-C-library-link-string) (pos . 19) (origin i-aux0 . as-C-library-link-string))
    ((name . main-link-string) (pos . 13) (origin i-aux0 . main-link-string))
    ((name . destination-link-string) (pos . 28) (origin i-aux0 . destination-link-string))
    ((name . as-C-file-name) (pos . 20) (origin i-aux0 . as-C-file-name))
    ((name . as-C-library-dir-link-string) (pos . 29) (origin i-aux0 . as-C-library-dir-link-string))
    ((name . youtoo) (pos . 22) (origin i-aux0 . youtoo))
    ((name . vm-link-string) (pos . 18) (origin i-aux0 . vm-link-string))
    ((name . as-included-C-file-name) (pos . 12) (origin i-aux0 . as-included-C-file-name))
    ((name . full-C-library-dir-link-string) (pos . 25) (origin i-aux0 . full-C-library-dir-link-string))
    ((name . untrace) (pos . 11) (origin i-aux0 . untrace))
    ((name . as-interface-file-name) (pos . 7) (origin i-aux0 . as-interface-file-name))
    ((name . as-source-file-name) (pos . 21) (origin i-aux0 . as-source-file-name))
    ((name . as-C-library-file-name) (pos . 27) (origin i-aux0 . as-C-library-file-name))
    ((name . as-module-init-flag-name) (pos . 26) (origin i-aux0 . as-module-init-flag-name))
    ((name . destination-library-link-string) (pos . 5) (origin i-aux0 . destination-library-link-string))
    ((name . as-module-init-function-name) (pos . 15) (origin i-aux0 . as-module-init-function-name))
    ((name . as-compiled-C-file-name) (pos . 6) (origin i-aux0 . as-compiled-C-file-name))
    ((name . full-C-library-link-string) (pos . 24) (origin i-aux0 . full-C-library-link-string))
    ((name . as-C-library-interface-file-name) (pos . 23) (origin i-aux0 . as-C-library-interface-file-name))
    ((name . with-ct-handler) (pos . 10) (origin i-aux0 . with-ct-handler))
    ((name . destination-object-string) (pos . 3) (origin i-aux0 . destination-object-string))
    ((name . as-C-hook-object-file-name) (pos . 17) (origin i-aux0 . as-C-hook-object-file-name))
    ((name . as-C-hook-source-file-name) (pos . 16) (origin i-aux0 . as-C-hook-source-file-name))
    ((name . gc-link-string) (pos . 8) (origin i-aux0 . gc-link-string))
    ((name . as-C-hook-name) (pos . 9) (origin i-aux0 . as-C-hook-name))
    ((name . destination-object-dir) (pos . 2) (origin i-aux0 . destination-object-dir))
    ((name . trace) (pos . 4) (origin i-aux0 . trace))
   )
   local-literals (
    (destination-object-dir . 168)
    (destination-object-string . 167)
    (trace . 166)
    (destination-library-link-string . 165)
    (as-interface-file-name . 164)
    (gc-link-string . 163)
    (as-C-hook-name . 162)
    (with-ct-handler . 161)
    (untrace . 160)
    (as-included-C-file-name . 159)
    (main-link-string . 158)
    (as-foreign-function-stub-name . 157)
    (as-module-init-function-name . 156)
    (as-C-hook-source-file-name . 155)
    (as-C-hook-object-file-name . 154)
    (vm-link-string . 153)
    (as-C-file-name . 152)
    (as-source-file-name . 151)
    (as-C-library-interface-file-name . 150)
    (full-C-library-link-string . 149)
    (full-C-library-dir-link-string . 148)
    (as-module-init-flag-name . 147)
    (destination-link-string . 146)
    (" -L" . 144)
    ("~a~a~a" . 142)
    ("lib~a.a" . 140)
    ("~a~alib~a.a" . 139)
    ("-init-flag" . 137)
    ((let ((str-list (map1-list (lambda (name) (as-C-library-dir-link-string name)) *C-library-load-path*))) (if (null? str-list) "" (apply concatenate str-list))) . 135)
    (*C-library-load-path* . 134)
    (as-C-library-dir-link-string . 133)
    ((let ((str-list (map1-list (lambda (name) (as-C-library-link-string name)) *linked-C-libraries*))) (if (null? str-list) "" (apply concatenate str-list))) . 131)
    (null? . 130)
    (*linked-C-libraries* . 129)
    (as-C-library-link-string . 128)
    (lambda . 127)
    (map1-list . 126)
    (str-list . 125)
    ("lib~a.i" . 123)
    (main . 121)
    (cons . 120)
    (youtoo . 119)
    (".em" . 117)
    (".c" . 115)
    (" -l" . 113)
    (" -leulvm" . 111)
    ("_.o" . 109)
    ("_.o" . 108)
    ("_.c" . 106)
    (*debug* . 104)
    (make-symbol . 103)
    ("-init-fun" . 102)
    ("ff_stub_" . 100)
    (gensym . 99)
    ((let ((name (format () "Lib.~a/eul-appl.o" (get-config-info (quote ARCH))))) (format () "~a~a~a" *eulysses-dir* *delimiter* name)) . 97)
    (*eulysses-dir* . 96)
    (ARCH . 95)
    (quote . 94)
    (get-config-info . 93)
    (name . 92)
    (".h" . 90)
    (with-handler . 87)
    (generic-lambda . 86)
    (method: . 85)
    (*no-ct-handlers* . 84)
    (error . 83)
    (<ct-error> . 82)
    (ct-error-value: . 81)
    (pprint . 80)
    ("compile time error condition: " . 79)
    (c . 78)
    (f . 77)
    ("_" . 75)
    ((if *no-gc* "" "-lgc") . 73)
    (*no-gc* . 72)
    (".i" . 70)
    (".o" . 68)
    (".o" . 67)
    (symbol-name . 66)
    (string? . 65)
    ("~a~a~a" . 63)
    (as-C-library-file-name . 62)
    (progn . 60)
    (car . 59)
    (named-lambda . 58)
    (let . 57)
    ("<<< ~~aTRACE [~a]: ~~a => ~~a
" . 56)
    (res . 55)
    (dynamic-let . 54)
    (concatenate . 53)
    (" " . 52)
    (stderr . 51)
    (dynamic . 50)
    (*trace-indent* . 49)
    (">>> ~~aTRACE [~a]: ~~a
" . 48)
    (apply . 47)
    (args . 46)
    (setq . 45)
    (list . 44)
    (*redefine-imported-bindings* . 43)
    (deflocal . 42)
    (| | . 41)
    (format . 39)
    ("~a~a~a" . 38)
    (or . 37)
    (*dest-file-name* . 36)
    (as-compiled-C-file-name . 35)
    (if . 33)
    (string-append . 32)
    (*delimiter* . 31)
    (*object-dir* . 30)
   )
   literals (
   )
))
