;;; EuLisp system 'youtoo'
;;;   Interface file for module ex-expr

(definterface ex-expr
  (import (i-all p-env sx-node sx-obj ex-import ex-syntax ex-direct cg-dld sx-write)
   syntax (_macros _i-aux0 _ex-aux0)
   full-import (i-error i-notify i-param i-level-1 boot1 boot symbol stream3 random handler read table table1 vector convert1 format list socket stream2 lock stream1 stream float character compare collect fpi number integer copy convert string callback let-cc dynamic thread event condition bit mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl telos level-1 aux-table i-all sx-obj sx-obj1 sx-obj2 p-env i-ffi sx-node cg-interf i-modify ex-import ex-syntax ex-expose ex-direct cg-dld sx-write)
   export (
    ((name . macroexpand-1) (pos . 6) (origin ex-expr . macroexpand-1))
    ((name . *nil*) (pos . 2) (origin ex-expr . *nil*) (class . constant))
    ((name . filter-vars) (pos . 7) (origin ex-expr . filter-vars))
    ((name . protect-newline) (pos . 38) (origin ex-expr . protect-newline))
    ((name . protect-backslash) (pos . 3) (origin ex-expr . protect-backslash))
    ((name . protect-doublequote) (pos . 30) (origin ex-expr . protect-doublequote))
    ((name . complete-lambda-node) (pos . 31) (origin ex-expr . complete-lambda-node))
    ((name . filter-init-forms) (pos . 35) (origin ex-expr . filter-init-forms))
    ((name . macroexpand) (pos . 11) (origin ex-expr . macroexpand))
    ((name . protect-tilde) (pos . 17) (origin ex-expr . protect-tilde))
   )
   local-literals (
    (top-level . 347)
    (protect-backslash . 346)
    (check-appl-arity . 345)
    (box-binding . 344)
    (macroexpand-1 . 343)
    (filter-vars . 342)
    (labelssetq . 341)
    (get-appl-expander . 340)
    (expand-local-static-vars . 339)
    (macroexpand . 338)
    (labelsvar . 337)
    (expand-local-static-vars* . 336)
    (get-id-expander . 335)
    (default-appl-expander . 334)
    (expand-exprs . 333)
    (protect-tilde . 332)
    (check-id-binding . 331)
    (expand-fun-form . 330)
    (get-keyword-node . 329)
    (unfold-rest-arg-appl . 328)
    (lift-appl . 327)
    (letfunsvar . 326)
    (lambda-rest-args? . 325)
    (lift-let*-vars . 324)
    (expr-expander . 323)
    (macroexpanded? . 322)
    (letfunssetq . 321)
    (protect-doublequote . 320)
    (complete-lambda-node . 319)
    (expand-expr . 318)
    (compute-range-and-domain . 317)
    (get-macro-expander . 316)
    (filter-init-forms . 315)
    (dummy-args . 314)
    (rest-args? . 313)
    (protect-newline . 312)
    (get-t-node . 311)
    (install-expr-expander . 310)
    ("redefinition of expander ~a" . 308)
    ("\n" . 305)
    ("\n" . 304)
    ("\n" . 303)
    ("\n" . 302)
    ("RESULT: ~a" . 294)
    ("APPLY MACRO: ~a" . 293)
    (|(method G006297)| . 292)
    ("bad macro expansion of ~a in ~s" . 290)
    ("compile time error condition: " . 289)
    ("\"" . 281)
    ("\"" . 280)
    ("\"" . 279)
    ("\"" . 278)
    ("    Expanding ~a" . 274)
    (fpi-binary . 265)
    (setter . 261)
    ("no lexical binding ~a available in ~s" . 260)
    (ff . 258)
    (opencoding . 257)
    ("~~" . 255)
    ("~~" . 254)
    ("~~" . 253)
    ("~~" . 252)
    (args: . 248)
    (fun: . 247)
    ("no lexical binding ~a available in ~s" . 243)
    (fpi-zero? . 234)
    (binary= . 233)
    (binary- . 232)
    (fpi-binary- . 231)
    (dec . 230)
    (inc . 229)
    (binary+ . 228)
    (boot1 . 227)
    (fpi-binary+ . 226)
    (<= . 225)
    (fpi-binary= . 224)
    (>= . 223)
    (< . 222)
    (= . 221)
    (fpi-binary< . 220)
    (compare . 219)
    (> . 218)
    (number . 217)
    ((+ - * / %) . 216)
    (% . 215)
    (/ . 214)
    (* . 213)
    (- . 212)
    (+ . 211)
    ("  wrapping lambda in operator position: ~s" . 210)
    ("macroexpand-1: expression ~a is not a cons" . 205)
    ("macroexpand-1: cannot find syntax binding ~a" . 204)
    ("macroexpand-1 cannot find dynamic binding ~a for syntax binding ~a" . 203)
    (execute . 202)
    (arity . 200)
    ("box binding ~a" . 199)
    ("too few arguments calling ~a" . 197)
    ("too many arguments calling ~a" . 196)
    ("too few arguments calling ~a" . 195)
    ("\\" . 193)
    ("\\" . 192)
    ("\\" . 191)
    ("\\" . 190)
    (letfuns . 188)
    (opencoded-lambda . 187)
    (named-lambda . 186)
    (lambda . 185)
    (|(method lift-setq)| . 184)
    (setq . 183)
    (|(method lift-if)| . 182)
    (call-next-method . 181)
    (|(method check-appl)| . 180)
    (lift-setq . 179)
    (lift-if . 178)
    (check-appl . 177)
    ("no applicable object ~a in ~s" . 175)
    ("macro binding ~a should be in syntax import in ~s" . 174)
    (*encl-lambda* . 167)
    ("missing else branch in (if ~a ...) in ~s" . 164)
    ("bad if syntax (if ~a ...) in ~s" . 163)
    (|(method G006786)| . 162)
    ("bad if syntax ~a in ~s" . 160)
    ("compile time error condition: " . 159)
    (else: . 156)
    (then: . 155)
    (pred: . 154)
    ("unknown context" . 149)
    (if . 148)
    (value: . 143)
    (|(method G006877)| . 142)
    ("bad quote syntax" . 140)
    ("compile time error condition: " . 139)
    (quote . 136)
    (|(method G006899)| . 135)
    ("bad quasiquote syntax" . 133)
    ("compile time error condition: " . 132)
    (append . 129)
    (unquote-splicing . 128)
    (cons . 127)
    (unquote . 126)
    (quasiquote . 125)
    ("immutable binding ~a cannot be modified in ~s" . 123)
    ("no binding ~a available in ~s" . 122)
    (*clean-ups* . 121)
    (tail-pos? . 120)
    (|(method G006947)| . 119)
    ("bad setq syntax" . 117)
    ("compile time error condition: " . 116)
    ("body ~a not a list" . 105)
    (|(method G007033)| . 104)
    ("bad lambda syntax" . 102)
    ("compile time error condition: " . 101)
    ("body ~a not a list" . 98)
    ("~a" . 97)
    (|(method G007060)| . 96)
    ("bad named lambda syntax" . 94)
    ("compile time error condition: " . 93)
    ("body ~a not a list" . 90)
    (|(method G007092)| . 89)
    ("bad lambda syntax" . 87)
    ("compile time error condition: " . 86)
    ("body ~a not a list" . 83)
    (|(method G007119)| . 82)
    ("bad opencoded-lambda syntax" . 80)
    ("compile time error condition: " . 79)
    (labels . 76)
    (inlined-lambda . 75)
    (let* . 74)
    (|(method G007148)| . 73)
    ("bad let syntax" . 71)
    ("compile time error condition: " . 70)
    ("" . 66)
    (progn . 65)
    (|(method G007196)| . 64)
    ("bad let* syntax" . 62)
    ("compile time error condition: " . 61)
    (|(method G007233)| . 58)
    ("bad labels syntax" . 56)
    ("compile time error condition: " . 55)
    (let . 52)
    (|(method G007263)| . 51)
    (anonymous . 50)
    (ct-error-value: . 48)
    ("bad letfuns syntax" . 47)
    ("compile time error condition: " . 46)
   )
   literals (
   )
))
