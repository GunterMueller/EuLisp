;;; EuLisp system 'youtoo'
;;;   Interface file for module ex-expr

(definterface ex-expr
  (import (i-all p-env sx-node sx-obj ex-import ex-syntax ex-direct cg-dld)
   syntax (_macros _i-aux0 _ex-aux0)
   full-import (i-error i-notify i-param i-level-1 boot1 boot symbol stream3 random handler read table table1 vector convert1 format list socket stream2 lock stream1 stream float character compare collect fpi number integer copy convert string callback let-cc dynamic thread event condition bit mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl telos level-1 aux-table i-all sx-obj sx-obj1 sx-obj2 p-env i-ffi sx-node cg-interf i-modify ex-import ex-syntax ex-expose ex-direct cg-dld)
   export (
    ((name . *nil*) (pos . 2) (origin ex-expr . *nil*) (class . constant))
    ((name . filter-vars) (pos . 6) (origin ex-expr . filter-vars))
    ((name . protect-newline) (pos . 36) (origin ex-expr . protect-newline))
    ((name . protect-backslash) (pos . 3) (origin ex-expr . protect-backslash))
    ((name . protect-doublequote) (pos . 28) (origin ex-expr . protect-doublequote))
    ((name . complete-lambda-node) (pos . 29) (origin ex-expr . complete-lambda-node))
    ((name . filter-init-forms) (pos . 33) (origin ex-expr . filter-init-forms))
    ((name . macroexpand) (pos . 10) (origin ex-expr . macroexpand))
    ((name . protect-tilde) (pos . 16) (origin ex-expr . protect-tilde))
   )
   local-literals (
    (top-level . 340)
    (protect-backslash . 339)
    (check-appl-arity . 338)
    (box-binding . 337)
    (filter-vars . 336)
    (labelssetq . 335)
    (get-appl-expander . 334)
    (expand-local-static-vars . 333)
    (macroexpand . 332)
    (labelsvar . 331)
    (expand-local-static-vars* . 330)
    (get-id-expander . 329)
    (default-appl-expander . 328)
    (expand-exprs . 327)
    (protect-tilde . 326)
    (check-id-binding . 325)
    (expand-fun-form . 324)
    (get-keyword-node . 323)
    (unfold-rest-arg-appl . 322)
    (lift-appl . 321)
    (letfunsvar . 320)
    (lambda-rest-args? . 319)
    (lift-let*-vars . 318)
    (expr-expander . 317)
    (letfunssetq . 316)
    (protect-doublequote . 315)
    (complete-lambda-node . 314)
    (expand-expr . 313)
    (compute-range-and-domain . 312)
    (get-macro-expander . 311)
    (filter-init-forms . 310)
    (dummy-args . 309)
    (rest-args? . 308)
    (protect-newline . 307)
    (get-t-node . 306)
    (install-expr-expander . 305)
    ("redefinition of expander ~a" . 303)
    ("\n" . 300)
    ("\n" . 299)
    ("\n" . 298)
    ("\n" . 297)
    ("RESULT: ~a" . 289)
    (execute . 288)
    ("APPLY MACRO: ~a" . 287)
    (|(method G005898)| . 286)
    ("bad macro expansion of ~a in ~s" . 284)
    ("compile time error condition: " . 283)
    ("\"" . 275)
    ("\"" . 274)
    ("\"" . 273)
    ("\"" . 272)
    ("    Expanding ~a" . 269)
    (fpi-binary . 260)
    (setter . 256)
    ("no lexical binding ~a available in ~s" . 255)
    (ff . 253)
    (opencoding . 252)
    ("~~" . 250)
    ("~~" . 249)
    ("~~" . 248)
    ("~~" . 247)
    (args: . 243)
    (fun: . 242)
    ("no lexical binding ~a available in ~s" . 238)
    ("macroexpand: cannot find syntax binding ~a" . 233)
    ("macroexpand cannot find dynamic binding ~a for syntax binding ~a" . 232)
    (fpi-zero? . 227)
    (binary= . 226)
    (binary- . 225)
    (fpi-binary- . 224)
    (dec . 223)
    (inc . 222)
    (binary+ . 221)
    (boot1 . 220)
    (fpi-binary+ . 219)
    (<= . 218)
    (fpi-binary= . 217)
    (>= . 216)
    (< . 215)
    (= . 214)
    (fpi-binary< . 213)
    (compare . 212)
    (> . 211)
    (number . 210)
    ((+ - * / %) . 209)
    (% . 208)
    (/ . 207)
    (* . 206)
    (- . 205)
    (+ . 204)
    ("  wrapping lambda in operator position: ~s" . 203)
    (arity . 198)
    ("box binding ~a" . 197)
    ("too few arguments calling ~a" . 195)
    ("too many arguments calling ~a" . 194)
    ("too few arguments calling ~a" . 193)
    ("\\" . 191)
    ("\\" . 190)
    ("\\" . 189)
    ("\\" . 188)
    (letfuns . 186)
    (opencoded-lambda . 185)
    (named-lambda . 184)
    (lambda . 183)
    (|(method lift-setq)| . 182)
    (setq . 181)
    (|(method lift-if)| . 180)
    (call-next-method . 179)
    (|(method check-appl)| . 178)
    (lift-setq . 177)
    (lift-if . 176)
    (check-appl . 175)
    ("no applicable object ~a in ~s" . 173)
    ("macro binding ~a should be in syntax import in ~s" . 172)
    (*encl-lambda* . 165)
    ("missing else branch in (if ~a ...) in ~s" . 162)
    ("bad if syntax (if ~a ...) in ~s" . 161)
    (|(method G006368)| . 160)
    ("bad if syntax ~a in ~s" . 158)
    ("compile time error condition: " . 157)
    (else: . 154)
    (then: . 153)
    (pred: . 152)
    ("unknown context" . 147)
    (if . 146)
    (value: . 141)
    (|(method G006459)| . 140)
    ("bad quote syntax" . 138)
    ("compile time error condition: " . 137)
    (quote . 134)
    (|(method G006481)| . 133)
    ("bad quasiquote syntax" . 131)
    ("compile time error condition: " . 130)
    (append . 127)
    (unquote-splicing . 126)
    (cons . 125)
    (unquote . 124)
    (quasiquote . 123)
    ("immutable binding ~a cannot be modified in ~s" . 121)
    ("no binding ~a available in ~s" . 120)
    (*clean-ups* . 119)
    (tail-pos? . 118)
    (|(method G006529)| . 117)
    ("bad setq syntax" . 115)
    ("compile time error condition: " . 114)
    ("body ~a not a list" . 103)
    (|(method G006615)| . 102)
    ("bad lambda syntax" . 100)
    ("compile time error condition: " . 99)
    ("body ~a not a list" . 96)
    ("~a" . 95)
    (|(method G006642)| . 94)
    ("bad named lambda syntax" . 92)
    ("compile time error condition: " . 91)
    ("body ~a not a list" . 88)
    (|(method G006674)| . 87)
    ("bad lambda syntax" . 85)
    ("compile time error condition: " . 84)
    ("body ~a not a list" . 81)
    (|(method G006701)| . 80)
    ("bad opencoded-lambda syntax" . 78)
    ("compile time error condition: " . 77)
    (labels . 74)
    (inlined-lambda . 73)
    (let* . 72)
    (|(method G006730)| . 71)
    ("bad let syntax" . 69)
    ("compile time error condition: " . 68)
    ("" . 64)
    (progn . 63)
    (|(method G006778)| . 62)
    ("bad let* syntax" . 60)
    ("compile time error condition: " . 59)
    (|(method G006815)| . 56)
    ("bad labels syntax" . 54)
    ("compile time error condition: " . 53)
    (let . 50)
    (|(method G006845)| . 49)
    (anonymous . 48)
    (ct-error-value: . 46)
    ("bad letfuns syntax" . 45)
    ("compile time error condition: " . 44)
   )
   literals (
   )
))
