;;; EuLisp system 'youtoo'
;;;   Interface file for module ex-expr

(definterface ex-expr
  (import (i-all p-env sx-node sx-obj ex-import ex-syntax ex-direct cg-dld)
   syntax (_macros _i-aux0 _ex-aux0)
   full-import (i-error i-notify i-param i-level-1 boot1 boot symbol stream3 random handler read table table1 vector convert1 format list socket stream2 lock stream1 stream float character compare collect fpi number integer copy convert string callback let-cc dynamic thread event condition bit mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl telos level-1 aux-table i-all sx-obj sx-obj1 sx-obj2 p-env i-ffi sx-node cg-interf i-modify ex-import ex-syntax ex-expose ex-direct cg-dld)
   export (
    ((name . *nil*) (pos . 2) (origin ex-expr . *nil*) (class . constant))
    ((name . expand-exprs) (pos . 14) (origin ex-expr . expand-exprs))
    ((name . filter-vars) (pos . 6) (origin ex-expr . filter-vars))
    ((name . expand-expr) (pos . 29) (origin ex-expr . expand-expr))
    ((name . protect-newline) (pos . 35) (origin ex-expr . protect-newline))
    ((name . protect-backslash) (pos . 3) (origin ex-expr . protect-backslash))
    ((name . complete-lambda-node) (pos . 28) (origin ex-expr . complete-lambda-node))
    ((name . filter-init-forms) (pos . 32) (origin ex-expr . filter-init-forms))
    ((name . protect-doublequote) (pos . 27) (origin ex-expr . protect-doublequote))
    ((name . get-macro-expander) (pos . 31) (origin ex-expr . get-macro-expander))
    ((name . protect-tilde) (pos . 15) (origin ex-expr . protect-tilde))
   )
   local-literals (
    (top-level . 334)
    (protect-backslash . 333)
    (check-appl-arity . 332)
    (box-binding . 331)
    (filter-vars . 330)
    (labelssetq . 329)
    (get-appl-expander . 328)
    (expand-local-static-vars . 327)
    (labelsvar . 326)
    (expand-local-static-vars* . 325)
    (get-id-expander . 324)
    (default-appl-expander . 323)
    (expand-exprs . 322)
    (protect-tilde . 321)
    (check-id-binding . 320)
    (expand-fun-form . 319)
    (get-keyword-node . 318)
    (unfold-rest-arg-appl . 317)
    (lift-appl . 316)
    (letfunsvar . 315)
    (lambda-rest-args? . 314)
    (lift-let*-vars . 313)
    (expr-expander . 312)
    (letfunssetq . 311)
    (protect-doublequote . 310)
    (complete-lambda-node . 309)
    (expand-expr . 308)
    (compute-range-and-domain . 307)
    (get-macro-expander . 306)
    (filter-init-forms . 305)
    (dummy-args . 304)
    (rest-args? . 303)
    (protect-newline . 302)
    (get-t-node . 301)
    (install-expr-expander . 300)
    ("redefinition of expander ~a" . 298)
    ("\n" . 295)
    ("\n" . 294)
    ("\n" . 293)
    ("\n" . 292)
    ("RESULT: ~a" . 284)
    (execute . 283)
    ("APPLY MACRO: ~a" . 282)
    (|(method G0018)| . 281)
    ("bad macro expansion of ~a" . 279)
    ("compile time error condition: " . 278)
    ("\"" . 270)
    ("\"" . 269)
    ("\"" . 268)
    ("\"" . 267)
    ("    Expanding ~a" . 264)
    (fpi-binary . 255)
    (setter . 251)
    ("no lexical binding ~a available" . 250)
    (ff . 248)
    (opencoding . 247)
    ("~~" . 245)
    ("~~" . 244)
    ("~~" . 243)
    ("~~" . 242)
    (args: . 238)
    (fun: . 237)
    ("no lexical binding ~a available" . 233)
    (fpi-zero? . 225)
    (binary= . 224)
    (binary- . 223)
    (fpi-binary- . 222)
    (dec . 221)
    (inc . 220)
    (binary+ . 219)
    (boot1 . 218)
    (fpi-binary+ . 217)
    (<= . 216)
    (fpi-binary= . 215)
    (>= . 214)
    (< . 213)
    (= . 212)
    (fpi-binary< . 211)
    (compare . 210)
    (> . 209)
    (number . 208)
    ((+ - * / %) . 207)
    (% . 206)
    (/ . 205)
    (* . 204)
    (- . 203)
    (+ . 202)
    ("  wrapping lambda in operator position: ~s" . 201)
    (arity . 196)
    ("box binding ~a" . 195)
    ("too few arguments calling ~a" . 193)
    ("too many arguments calling ~a" . 192)
    ("too few arguments calling ~a" . 191)
    ("\\" . 189)
    ("\\" . 188)
    ("\\" . 187)
    ("\\" . 186)
    (letfuns . 184)
    (opencoded-lambda . 183)
    (named-lambda . 182)
    (lambda . 181)
    (|(method lift-setq)| . 180)
    (setq . 179)
    (|(method lift-if)| . 178)
    (call-next-method . 177)
    (|(method check-appl)| . 176)
    (lift-setq . 175)
    (lift-if . 174)
    (check-appl . 173)
    ("no applicable object ~a" . 171)
    ("macro binding ~a should be in syntax import" . 170)
    (*encl-lambda* . 163)
    ("missing else branch in (if ~a ...)" . 160)
    ("bad if syntax (if ~a ...)" . 159)
    (|(method G00482)| . 158)
    ("bad if syntax ~a" . 156)
    ("compile time error condition: " . 155)
    (else: . 152)
    (then: . 151)
    (pred: . 150)
    (if . 145)
    (value: . 140)
    (|(method G00573)| . 139)
    ("bad quote syntax" . 137)
    ("compile time error condition: " . 136)
    (quote . 133)
    (|(method G00595)| . 132)
    ("bad quasiquote syntax" . 130)
    ("compile time error condition: " . 129)
    (append . 126)
    (unquote-splicing . 125)
    (cons . 124)
    (unquote . 123)
    (quasiquote . 122)
    ("immutable binding ~a cannot be modified" . 120)
    ("no binding ~a available" . 119)
    (*clean-ups* . 118)
    (tail-pos? . 117)
    (|(method G00643)| . 116)
    ("bad setq syntax" . 114)
    ("compile time error condition: " . 113)
    ("body ~a not a list" . 102)
    (|(method G00729)| . 101)
    ("bad lambda syntax" . 99)
    ("compile time error condition: " . 98)
    ("body ~a not a list" . 95)
    ("~a" . 94)
    (|(method G00756)| . 93)
    ("bad named lambda syntax" . 91)
    ("compile time error condition: " . 90)
    ("body ~a not a list" . 87)
    (|(method G00788)| . 86)
    ("bad lambda syntax" . 84)
    ("compile time error condition: " . 83)
    ("body ~a not a list" . 80)
    (|(method G00815)| . 79)
    ("bad opencoded-lambda syntax" . 77)
    ("compile time error condition: " . 76)
    (labels . 73)
    (inlined-lambda . 72)
    (let* . 71)
    (|(method G00844)| . 70)
    ("bad let syntax" . 68)
    ("compile time error condition: " . 67)
    ("" . 63)
    (progn . 62)
    (|(method G00892)| . 61)
    ("bad let* syntax" . 59)
    ("compile time error condition: " . 58)
    (|(method G00929)| . 55)
    ("bad labels syntax" . 53)
    ("compile time error condition: " . 52)
    (let . 49)
    (|(method G00959)| . 48)
    (anonymous . 47)
    (ct-error-value: . 45)
    ("bad letfuns syntax" . 44)
    ("compile time error condition: " . 43)
   )
   literals (
   )
))
