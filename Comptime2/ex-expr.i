;;; EuLisp system 'youtoo'
;;;   Interface file for module ex-expr

(definterface ex-expr
  (import (i-all p-env sx-node sx-obj ex-import ex-syntax ex-direct cg-dld)
   syntax (_macros _i-aux0 _ex-aux0)
   full-import (i-error i-notify i-param i-level1 boot1 boot symbol stream3 random handler read table table1 vector convert1 format list socket stream2 lock stream1 stream float character compare collect fpi number integer copy convert string callback let-cc dynamic thread event condition bit mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl telos level1 aux-table i-all sx-obj sx-obj1 sx-obj2 p-env i-ffi sx-node cg-interf i-modify ex-import ex-syntax ex-expose ex-direct cg-dld)
   export (
    ((name . *nil*) (pos . 2) (origin ex-expr . *nil*) (class . constant))
    ((name . expand-exprs) (pos . 15) (origin ex-expr . expand-exprs))
    ((name . filter-vars) (pos . 6) (origin ex-expr . filter-vars))
    ((name . expand-expr) (pos . 27) (origin ex-expr . expand-expr))
    ((name . protect-newline) (pos . 33) (origin ex-expr . protect-newline))
    ((name . protect-backslash) (pos . 3) (origin ex-expr . protect-backslash))
    ((name . complete-lambda-node) (pos . 26) (origin ex-expr . complete-lambda-node))
    ((name . filter-init-forms) (pos . 31) (origin ex-expr . filter-init-forms))
    ((name . protect-doublequote) (pos . 25) (origin ex-expr . protect-doublequote))
    ((name . get-macro-expander) (pos . 30) (origin ex-expr . get-macro-expander))
    ((name . protect-tilde) (pos . 16) (origin ex-expr . protect-tilde))
   )
   local-literals (
    (top-level . 309)
    (protect-backslash . 308)
    (check-appl-arity . 307)
    (box-binding . 306)
    (filter-vars . 305)
    (labelssetq . 304)
    (get-appl-expander . 303)
    (lambda-rest-args-p . 302)
    (expand-local-static-vars . 301)
    (labelsvar . 300)
    (expand-local-static-vars* . 299)
    (get-id-expander . 298)
    (default-appl-expander . 297)
    (expand-exprs . 296)
    (protect-tilde . 295)
    (check-id-binding . 294)
    (expand-fun-form . 293)
    (get-keyword-node . 292)
    (unfold-rest-arg-appl . 291)
    (lift-appl . 290)
    (lift-let*-vars . 289)
    (expr-expander . 288)
    (protect-doublequote . 287)
    (complete-lambda-node . 286)
    (expand-expr . 285)
    (rest-args-p . 284)
    (compute-range-and-domain . 283)
    (get-macro-expander . 282)
    (filter-init-forms . 281)
    (dummy-args . 280)
    (protect-newline . 279)
    (get-t-node . 278)
    (install-expr-expander . 277)
    ("redefinition of expander ~a" . 275)
    ("\n" . 272)
    ("\n" . 271)
    ("\n" . 270)
    ("\n" . 269)
    ("RESULT: ~a" . 262)
    (execute . 261)
    ("APPLY MACRO: ~a" . 260)
    (|(method G005778)| . 259)
    ("bad macro expansion of ~a" . 257)
    ("\"" . 248)
    ("\"" . 247)
    ("\"" . 246)
    ("\"" . 245)
    ("    Expanding ~a" . 243)
    (int-binary . 236)
    (setter . 232)
    ("no lexical binding ~a available" . 231)
    (ff . 229)
    (opencoding . 228)
    ("~~" . 226)
    ("~~" . 225)
    ("~~" . 224)
    ("~~" . 223)
    (args: . 219)
    (fun: . 218)
    ("no lexical binding ~a available" . 214)
    (int-zerop . 205)
    (binary= . 204)
    (binary- . 203)
    (int-binary- . 202)
    (dec . 201)
    (inc . 200)
    (binary+ . 199)
    (boot1 . 198)
    (int-binary+ . 197)
    (<= . 196)
    (int-binary= . 195)
    (>= . 194)
    (< . 193)
    (= . 192)
    (int-binary< . 191)
    (compare . 190)
    (> . 189)
    (number . 188)
    ((+ - * / %) . 187)
    (% . 186)
    (/ . 185)
    (* . 184)
    (- . 183)
    (+ . 182)
    ("  wrapping lambda in operator position: ~s" . 181)
    (arity . 176)
    ("box binding ~a" . 175)
    ("too few arguments calling ~a" . 173)
    ("too many arguments calling ~a" . 172)
    ("too few arguments calling ~a" . 171)
    ("\\" . 169)
    ("\\" . 168)
    ("\\" . 167)
    ("\\" . 166)
    (opencoded-lambda . 164)
    (named-lambda . 163)
    (lambda . 162)
    (|(method lift-setq)| . 161)
    (setq . 160)
    (|(method lift-if)| . 159)
    (call-next-method . 158)
    (|(method check-appl)| . 157)
    (lift-setq . 156)
    (lift-if . 155)
    (check-appl . 154)
    ("no applicable object ~a" . 152)
    ("macro binding ~a should be in syntax import" . 151)
    (*encl-lambda* . 144)
    ("missing else branch in (if ~a ...)" . 141)
    ("bad if syntax (if ~a ...)" . 140)
    (|(method G006221)| . 139)
    ("bad if syntax ~a" . 137)
    (else: . 134)
    (then: . 133)
    (pred: . 132)
    (if . 127)
    (value: . 122)
    (|(method G006311)| . 121)
    ("bad quote syntax" . 119)
    (quote . 116)
    (|(method G006332)| . 115)
    ("bad quasiquote syntax" . 113)
    (append . 110)
    (unquote-splicing . 109)
    (cons . 108)
    (unquote . 107)
    (quasiquote . 106)
    ("immutable binding ~a cannot be modified" . 104)
    ("no binding ~a available" . 103)
    (*clean-ups* . 102)
    (tail-pos? . 101)
    (|(method G006379)| . 100)
    ("bad setq syntax" . 98)
    ("body ~a not a list" . 87)
    (|(method G006464)| . 86)
    ("bad lambda syntax" . 84)
    ("body ~a not a list" . 81)
    ("~a" . 80)
    (|(method G006489)| . 79)
    ("bad named lambda syntax" . 77)
    ("body ~a not a list" . 74)
    (|(method G006519)| . 73)
    ("bad lambda syntax" . 71)
    ("body ~a not a list" . 68)
    (|(method G006544)| . 67)
    ("bad opencoded-lambda syntax" . 65)
    (labels . 62)
    (inlined-lambda . 61)
    (let* . 60)
    (|(method G006571)| . 59)
    ("bad let syntax" . 57)
    ("" . 53)
    (progn . 52)
    (|(method G006618)| . 51)
    ("bad let* syntax" . 49)
    (let . 46)
    (|(method G006654)| . 45)
    (anonymous . 44)
    (ct-error-value: . 42)
    ("bad labels syntax" . 41)
   )
   literals (
   )
))
