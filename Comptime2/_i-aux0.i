;;; EuLisp system 'youtoo'
;;;   Interface file for module _i-aux0

(definterface _i-aux0
  (import (level1)
   syntax (macros)
   full-import (read symbol random handler table table1 convert1 format list socket stream2 lock stream1 stream vector stream3 float character compare collect fpi number integer copy convert string callback let-cc dynamic thread event condition bit mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl boot boot1 telos level1)
   export (
    ((name . as-foreign-function-stub-name) (pos . 11) (origin _i-aux0 . as-foreign-function-stub-name))
    ((name . as-C-library-link-string) (pos . 16) (origin _i-aux0 . as-C-library-link-string))
    ((name . main-link-string) (pos . 10) (origin _i-aux0 . main-link-string))
    ((name . destination-link-string) (pos . 25) (origin _i-aux0 . destination-link-string))
    ((name . as-C-file-name) (pos . 17) (origin _i-aux0 . as-C-file-name))
    ((name . as-C-library-dir-link-string) (pos . 26) (origin _i-aux0 . as-C-library-dir-link-string))
    ((name . youtoo) (pos . 19) (origin _i-aux0 . youtoo))
    ((name . vm-link-string) (pos . 15) (origin _i-aux0 . vm-link-string))
    ((name . as-included-C-file-name) (pos . 9) (origin _i-aux0 . as-included-C-file-name))
    ((name . full-C-library-dir-link-string) (pos . 22) (origin _i-aux0 . full-C-library-dir-link-string))
    ((name . as-interface-file-name) (pos . 5) (origin _i-aux0 . as-interface-file-name))
    ((name . as-source-file-name) (pos . 18) (origin _i-aux0 . as-source-file-name))
    ((name . as-C-library-file-name) (pos . 24) (origin _i-aux0 . as-C-library-file-name))
    ((name . as-module-init-flag-name) (pos . 23) (origin _i-aux0 . as-module-init-flag-name))
    ((name . destination-library-link-string) (pos . 3) (origin _i-aux0 . destination-library-link-string))
    ((name . as-module-init-function-name) (pos . 12) (origin _i-aux0 . as-module-init-function-name))
    ((name . as-compiled-C-file-name) (pos . 4) (origin _i-aux0 . as-compiled-C-file-name))
    ((name . full-C-library-link-string) (pos . 21) (origin _i-aux0 . full-C-library-link-string))
    ((name . as-C-library-interface-file-name) (pos . 20) (origin _i-aux0 . as-C-library-interface-file-name))
    ((name . with-ct-handler) (pos . 8) (origin _i-aux0 . with-ct-handler))
    ((name . destination-object-string) (pos . 2) (origin _i-aux0 . destination-object-string))
    ((name . as-C-hook-object-file-name) (pos . 14) (origin _i-aux0 . as-C-hook-object-file-name))
    ((name . as-C-hook-source-file-name) (pos . 13) (origin _i-aux0 . as-C-hook-source-file-name))
    ((name . gc-link-string) (pos . 6) (origin _i-aux0 . gc-link-string))
    ((name . as-C-hook-name) (pos . 7) (origin _i-aux0 . as-C-hook-name))
   )
   local-literals (
    (destination-object-string . 144)
    (destination-library-link-string . 143)
    (as-interface-file-name . 142)
    (gc-link-string . 141)
    (as-C-hook-name . 140)
    (with-ct-handler . 139)
    (as-included-C-file-name . 138)
    (main-link-string . 137)
    (as-foreign-function-stub-name . 136)
    (as-module-init-function-name . 135)
    (as-C-hook-source-file-name . 134)
    (as-C-hook-object-file-name . 133)
    (vm-link-string . 132)
    (as-C-file-name . 131)
    (as-source-file-name . 130)
    (as-C-library-interface-file-name . 129)
    (full-C-library-link-string . 128)
    (full-C-library-dir-link-string . 127)
    (as-module-init-flag-name . 126)
    (destination-link-string . 125)
    (" -L" . 123)
    ("~a~a~a" . 121)
    ("lib~a.a" . 119)
    ("~a~alib~a.a" . 118)
    ("-init-flag" . 116)
    ((let ((str-list (map1-list (lambda (name) (as-C-library-dir-link-string name)) *C-library-load-path*))) (if (null str-list) "" (apply concatenate str-list))) . 114)
    (*C-library-load-path* . 113)
    (as-C-library-dir-link-string . 112)
    ((let ((str-list (map1-list (lambda (name) (as-C-library-link-string name)) *linked-C-libraries*))) (if (null str-list) "" (apply concatenate str-list))) . 110)
    (concatenate . 109)
    (apply . 108)
    (null . 107)
    (*linked-C-libraries* . 106)
    (as-C-library-link-string . 105)
    (lambda . 104)
    (map1-list . 103)
    (str-list . 102)
    ("lib~a.i" . 100)
    (main . 98)
    (cons . 97)
    (youtoo . 96)
    (".em" . 94)
    (".c" . 92)
    (" -l" . 90)
    (" -leulvm" . 88)
    ("_.o" . 86)
    ("_.o" . 85)
    ("_.c" . 83)
    (*debug* . 81)
    (make-symbol . 80)
    ("-init-fun" . 79)
    ("ff_stub_" . 77)
    (gensym . 76)
    ((let ((name (format () "Lib.~a/eul-appl.o" (get-config-info (quote ARCH))))) (format () "~a~a~a" *eulysses-dir* *delimiter* name)) . 74)
    (*eulysses-dir* . 73)
    (ARCH . 72)
    (quote . 71)
    (get-config-info . 70)
    (name . 69)
    (let . 68)
    (".h" . 66)
    (with-handler . 64)
    (progn . 63)
    (generic-lambda . 62)
    (method: . 61)
    (*no-ct-handlers* . 60)
    (error . 59)
    (<ct-error> . 58)
    (ct-error-value: . 57)
    (pprint . 56)
    (stderr . 55)
    ("compile time error condition: " . 54)
    (c . 53)
    (f . 52)
    ("_" . 50)
    ((if *no-gc* "" "-lgc") . 48)
    (*no-gc* . 47)
    (".i" . 45)
    (if . 43)
    (".o" . 42)
    (*object-dir* . 41)
    (string-append . 40)
    (".o" . 39)
    (symbol-name . 38)
    (stringp . 37)
    ("~a~a~a" . 35)
    (as-C-library-file-name . 34)
    (format . 32)
    ("~a~a~a" . 31)
    (*delimiter* . 30)
    (or . 29)
    (*dest-file-name* . 28)
    (as-compiled-C-file-name . 27)
   )
   literals (
   )
))
