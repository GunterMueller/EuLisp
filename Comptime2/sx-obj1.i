;;; EuLisp system 'youtoo'
;;;   Interface file for module sx-obj1

(definterface sx-obj1
  (import (i-level1)
   syntax (_macros _sx-obj0)
   full-import (aux-table level1 telos mop-defcl mop-meth mop-gf mop-inspect mop-init mop-class mop-key mop-prim mop-access mop-alloc bit condition event thread dynamic let-cc callback string convert copy integer number fpi collect compare character float stream3 vector stream stream1 lock stream2 socket list format convert1 table1 table handler random symbol read boot boot1 i-level1)
   export (
    ((name . module-inlined-lambdas?) (pos . 67) (origin sx-obj1 . module-inlined-lambdas?) (inline (G00644 (static-fpi-ref 11) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . binding-local-name!) (pos . 19) (origin sx-obj1 . binding-local-name!) (inline (G00598 (stack-ref 1) (static-fpi-ref 6) (stack-ref 2) (binding-ref ? <binding>) (set-primitive-relative-ref) (nobble 2))))
    ((name . binding-obj!) (pos . 55) (origin sx-obj1 . binding-obj!) (inline (G00582 (stack-ref 1) (static-ref2) (stack-ref 2) (binding-ref ? <binding>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-inlined-lambdas!) (pos . 54) (origin sx-obj1 . module-inlined-lambdas!) (inline (G00646 (stack-ref 1) (static-fpi-ref 11) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-inlined-setters!) (pos . 73) (origin sx-obj1 . module-inlined-setters!) (inline (G00642 (stack-ref 1) (static-fpi-ref 10) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-used-syntax-modules?) (pos . 71) (origin sx-obj1 . module-used-syntax-modules?) (inline (G00608 (static-ref2) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . <interface-binding>) (pos . 72) (origin sx-obj1 . <interface-binding>) (class . constant))
    ((name . module-named-constants!) (pos . 66) (origin sx-obj1 . module-named-constants!) (inline (G00654 (stack-ref 1) (static-fpi-ref 13) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-lexical-env!) (pos . 10) (origin sx-obj1 . module-lexical-env!) (inline (G00666 (stack-ref 1) (static-fpi-ref 16) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-used-syntax-modules!) (pos . 11) (origin sx-obj1 . module-used-syntax-modules!) (inline (G00610 (stack-ref 1) (static-ref2) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-interactive-lexical-env!) (pos . 46) (origin sx-obj1 . module-interactive-lexical-env!) (inline (G00602 (stack-ref 1) (static-ref0) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . binding-obj?) (pos . 18) (origin sx-obj1 . binding-obj?) (inline (G00580 (static-ref2) (binding-ref ? <binding>) (primitive-relative-ref))))
    ((name . module-load-dir!) (pos . 45) (origin sx-obj1 . module-load-dir!) (inline (G00682 (stack-ref 1) (static-fpi-ref 20) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . syntax-expr-encl-lambda?) (pos . 65) (origin sx-obj1 . syntax-expr-encl-lambda?) (inline (G00568 (static-ref0) (binding-ref ? <syntax-expr>) (primitive-relative-ref))))
    ((name . module-max-binding-vector-size?) (pos . 9) (origin sx-obj1 . module-max-binding-vector-size?) (inline (G00668 (static-fpi-ref 17) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-binding-vector-size?) (pos . 17) (origin sx-obj1 . module-binding-vector-size?) (inline (G00672 (static-fpi-ref 18) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . <binding>) (pos . 44) (origin sx-obj1 . <binding>) (class . constant))
    ((name . binding-info!) (pos . 43) (origin sx-obj1 . binding-info!) (inline (G00574 (stack-ref 1) (static-ref0) (stack-ref 2) (binding-ref ? <binding>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-c-module-name?) (pos . 8) (origin sx-obj1 . module-c-module-name?) (inline (G00676 (static-fpi-ref 19) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-top-level-forms!) (pos . 63) (origin sx-obj1 . module-top-level-forms!) (inline (G00626 (stack-ref 1) (static-fpi-ref 6) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-local-literals?) (pos . 64) (origin sx-obj1 . module-local-literals?) (inline (G00616 (static-fpi-ref 4) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . bindingp) (pos . 30) (origin sx-obj1 . bindingp))
    ((name . binding-info?) (pos . 35) (origin sx-obj1 . binding-info?) (inline (G00572 (static-ref0) (binding-ref ? <binding>) (primitive-relative-ref))))
    ((name . modulep) (pos . 7) (origin sx-obj1 . modulep))
    ((name . module-name?) (pos . 29) (origin sx-obj1 . module-name?) (inline (G00684 (static-fpi-ref 21) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-top-level-forms?) (pos . 53) (origin sx-obj1 . module-top-level-forms?) (inline (G00624 (static-fpi-ref 6) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . binding-immutable?) (pos . 52) (origin sx-obj1 . binding-immutable?) (inline (G00588 (static-fpi-ref 4) (binding-ref ? <binding>) (primitive-relative-ref))))
    ((name . binding-imported!) (pos . 62) (origin sx-obj1 . binding-imported!) (inline (G00586 (stack-ref 1) (static-fpi-ref 3) (stack-ref 2) (binding-ref ? <binding>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-c-module-name!) (pos . 15) (origin sx-obj1 . module-c-module-name!) (inline (G00678 (stack-ref 1) (static-fpi-ref 19) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-local-literals!) (pos . 61) (origin sx-obj1 . module-local-literals!) (inline (G00618 (stack-ref 1) (static-fpi-ref 4) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-lexical-env?) (pos . 16) (origin sx-obj1 . module-lexical-env?) (inline (G00664 (static-fpi-ref 16) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-external-env?) (pos . 42) (origin sx-obj1 . module-external-env?) (inline (G00660 (static-fpi-ref 15) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . <module>) (pos . 60) (origin sx-obj1 . <module>) (class . constant))
    ((name . module-used-module-names?) (pos . 51) (origin sx-obj1 . module-used-module-names?) (inline (G00612 (static-fpi-ref 3) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-lexical-binding-refs!) (pos . 41) (origin sx-obj1 . module-lexical-binding-refs!) (inline (G00622 (stack-ref 1) (static-fpi-ref 5) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-named-lambdas?) (pos . 6) (origin sx-obj1 . module-named-lambdas?) (inline (G00636 (static-fpi-ref 9) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-static-variables?) (pos . 28) (origin sx-obj1 . module-static-variables?) (inline (G00648 (static-fpi-ref 12) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . binding-module?) (pos . 50) (origin sx-obj1 . binding-module?) (inline (G00592 (static-fpi-ref 5) (binding-ref ? <binding>) (primitive-relative-ref))))
    ((name . binding-local-index!) (pos . 70) (origin sx-obj1 . binding-local-index!) (inline (G00578 (stack-ref 1) (static-ref1) (stack-ref 2) (binding-ref ? <binding>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-interactive-lexical-env?) (pos . 40) (origin sx-obj1 . module-interactive-lexical-env?) (inline (G00600 (static-ref0) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-foreign-functions!) (pos . 5) (origin sx-obj1 . module-foreign-functions!) (inline (G00630 (stack-ref 1) (static-fpi-ref 7) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-external-env!) (pos . 34) (origin sx-obj1 . module-external-env!) (inline (G00662 (stack-ref 1) (static-fpi-ref 15) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-name!) (pos . 14) (origin sx-obj1 . module-name!) (inline (G00686 (stack-ref 1) (static-fpi-ref 21) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . <syntax-obj>) (pos . 27) (origin sx-obj1 . <syntax-obj>) (class . constant))
    ((name . module-inlined-setters?) (pos . 39) (origin sx-obj1 . module-inlined-setters?) (inline (G00640 (static-fpi-ref 10) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-binding-vector-size!) (pos . 49) (origin sx-obj1 . module-binding-vector-size!) (inline (G00674 (stack-ref 1) (static-fpi-ref 18) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . syntax-expr-p) (pos . 69) (origin sx-obj1 . syntax-expr-p))
    ((name . module-load-dir?) (pos . 13) (origin sx-obj1 . module-load-dir?) (inline (G00680 (static-fpi-ref 20) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . binding-immutable!) (pos . 68) (origin sx-obj1 . binding-immutable!) (inline (G00590 (stack-ref 1) (static-fpi-ref 4) (stack-ref 2) (binding-ref ? <binding>) (set-primitive-relative-ref) (nobble 2))))
    ((name . interface-binding-p) (pos . 4) (origin sx-obj1 . interface-binding-p))
    ((name . module-syntax-env!) (pos . 48) (origin sx-obj1 . module-syntax-env!) (inline (G00658 (stack-ref 1) (static-fpi-ref 14) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . binding-imported?) (pos . 59) (origin sx-obj1 . binding-imported?) (inline (G00584 (static-fpi-ref 3) (binding-ref ? <binding>) (primitive-relative-ref))))
    ((name . syntax-def-p) (pos . 33) (origin sx-obj1 . syntax-def-p))
    ((name . module-syntax-env?) (pos . 22) (origin sx-obj1 . module-syntax-env?) (inline (G00656 (static-fpi-ref 14) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-all-used-module-names!) (pos . 32) (origin sx-obj1 . module-all-used-module-names!) (inline (G00606 (stack-ref 1) (static-ref1) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-anonymous-lambdas?) (pos . 25) (origin sx-obj1 . module-anonymous-lambdas?) (inline (G00632 (static-fpi-ref 8) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . syntax-expr-encl-lambda!) (pos . 26) (origin sx-obj1 . syntax-expr-encl-lambda!) (inline (G00570 (stack-ref 1) (static-ref0) (stack-ref 2) (binding-ref ? <syntax-expr>) (set-primitive-relative-ref) (nobble 2))))
    ((name . binding-module!) (pos . 57) (origin sx-obj1 . binding-module!) (inline (G00594 (stack-ref 1) (static-fpi-ref 5) (stack-ref 2) (binding-ref ? <binding>) (set-primitive-relative-ref) (nobble 2))))
    ((name . syntax-obj-p) (pos . 24) (origin sx-obj1 . syntax-obj-p))
    ((name . module-named-constants?) (pos . 38) (origin sx-obj1 . module-named-constants?) (inline (G00652 (static-fpi-ref 13) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-max-binding-vector-size!) (pos . 58) (origin sx-obj1 . module-max-binding-vector-size!) (inline (G00670 (stack-ref 1) (static-fpi-ref 17) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-anonymous-lambdas!) (pos . 37) (origin sx-obj1 . module-anonymous-lambdas!) (inline (G00634 (stack-ref 1) (static-fpi-ref 8) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . binding-local-index?) (pos . 23) (origin sx-obj1 . binding-local-index?) (inline (G00576 (static-ref1) (binding-ref ? <binding>) (primitive-relative-ref))))
    ((name . <syntax-def>) (pos . 31) (origin sx-obj1 . <syntax-def>) (class . constant))
    ((name . module-foreign-functions?) (pos . 36) (origin sx-obj1 . module-foreign-functions?) (inline (G00628 (static-fpi-ref 7) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-static-variables!) (pos . 21) (origin sx-obj1 . module-static-variables!) (inline (G00650 (stack-ref 1) (static-fpi-ref 12) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . module-used-module-names!) (pos . 12) (origin sx-obj1 . module-used-module-names!) (inline (G00614 (stack-ref 1) (static-fpi-ref 3) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . <syntax-expr>) (pos . 3) (origin sx-obj1 . <syntax-expr>) (class . constant))
    ((name . module-all-used-module-names?) (pos . 47) (origin sx-obj1 . module-all-used-module-names?) (inline (G00604 (static-ref1) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-lexical-binding-refs?) (pos . 56) (origin sx-obj1 . module-lexical-binding-refs?) (inline (G00620 (static-fpi-ref 5) (binding-ref ? <module>) (primitive-relative-ref))))
    ((name . module-named-lambdas!) (pos . 2) (origin sx-obj1 . module-named-lambdas!) (inline (G00638 (stack-ref 1) (static-fpi-ref 9) (stack-ref 2) (binding-ref ? <module>) (set-primitive-relative-ref) (nobble 2))))
    ((name . binding-local-name?) (pos . 20) (origin sx-obj1 . binding-local-name?) (inline (G00596 (static-fpi-ref 6) (binding-ref ? <binding>) (primitive-relative-ref))))
   )
   local-literals (
    (top-level . 326)
    (module-named-lambdas! . 325)
    (module-foreign-functions! . 324)
    (module-named-lambdas? . 323)
    (module-c-module-name? . 322)
    (module-max-binding-vector-size? . 321)
    (module-lexical-env! . 320)
    (module-used-syntax-modules! . 319)
    (module-used-module-names! . 318)
    (module-load-dir? . 317)
    (module-name! . 316)
    (module-c-module-name! . 315)
    (module-lexical-env? . 314)
    (module-binding-vector-size? . 313)
    (binding-obj? . 312)
    (binding-local-name! . 311)
    (binding-local-name? . 310)
    (module-static-variables! . 309)
    (module-syntax-env? . 308)
    (binding-local-index? . 307)
    (module-anonymous-lambdas? . 306)
    (syntax-expr-encl-lambda! . 305)
    (module-static-variables? . 304)
    (module-name? . 303)
    (module-all-used-module-names! . 302)
    (module-external-env! . 301)
    (binding-info? . 300)
    (module-foreign-functions? . 299)
    (module-anonymous-lambdas! . 298)
    (module-named-constants? . 297)
    (module-inlined-setters? . 296)
    (module-interactive-lexical-env? . 295)
    (module-lexical-binding-refs! . 294)
    (module-external-env? . 293)
    (binding-info! . 292)
    (module-load-dir! . 291)
    (module-interactive-lexical-env! . 290)
    (module-all-used-module-names? . 289)
    (module-syntax-env! . 288)
    (module-binding-vector-size! . 287)
    (binding-module? . 286)
    (module-used-module-names? . 285)
    (binding-immutable? . 284)
    (module-top-level-forms? . 283)
    (module-inlined-lambdas! . 282)
    (binding-obj! . 281)
    (module-lexical-binding-refs? . 280)
    (binding-module! . 279)
    (module-max-binding-vector-size! . 278)
    (binding-imported? . 277)
    (module-local-literals! . 276)
    (binding-imported! . 275)
    (module-top-level-forms! . 274)
    (module-local-literals? . 273)
    (syntax-expr-encl-lambda? . 272)
    (module-named-constants! . 271)
    (module-inlined-lambdas? . 270)
    (binding-immutable! . 269)
    (binding-local-index! . 268)
    (module-used-syntax-modules? . 267)
    (module-inlined-setters! . 266)
    (|(method modulep)| . 204)
    (|(method interface-binding-p)| . 203)
    (|(method bindingp)| . 202)
    (|(method initialize)| . 201)
    (|(method syntax-expr-p)| . 200)
    (|(method syntax-def-p)| . 199)
    (|(method syntax-obj-p)| . 198)
    (modulep . 197)
    (interface-binding-p . 196)
    (bindingp . 195)
    (syntax-expr-p . 194)
    (syntax-def-p . 193)
    (syntax-obj-p . 192)
    ((interactive-lexical-env: all-used-module-names: used-syntax-modules: used-module-names: local-literals: lexical-binding-refs: top-level-forms: foreign-functions: anonymous-lambdas: named-lambdas: inlined-setters: inlined-lambdas: static-variables: named-constants: syntax-env: external-env: lexical-env: max-binding-vector-size: binding-vector-size: c-module-name: load-dir: name:) . 191)
    (interactive-lexical-env: . 190)
    (interactive-lexical-env . 189)
    (all-used-module-names: . 188)
    (all-used-module-names . 187)
    (used-syntax-modules: . 186)
    (used-syntax-modules . 185)
    (used-module-names: . 184)
    (used-module-names . 183)
    (local-literals: . 182)
    (local-literals . 181)
    (lexical-binding-refs: . 180)
    (lexical-binding-refs . 179)
    (top-level-forms: . 178)
    (top-level-forms . 177)
    (foreign-functions: . 176)
    (foreign-functions . 175)
    (anonymous-lambdas: . 174)
    (anonymous-lambdas . 173)
    (named-lambdas: . 172)
    (named-lambdas . 171)
    (inlined-setters: . 170)
    (inlined-setters . 169)
    (inlined-lambdas: . 168)
    (inlined-lambdas . 167)
    (static-variables: . 166)
    (static-variables . 165)
    (named-constants: . 164)
    (named-constants . 163)
    (syntax-env: . 162)
    (syntax-env . 161)
    (external-env: . 160)
    (external-env . 159)
    (lexical-env: . 158)
    (lexical-env . 157)
    (max-binding-vector-size: . 156)
    (max-binding-vector-size . 155)
    (binding-vector-size: . 154)
    (binding-vector-size . 153)
    (c-module-name: . 152)
    (c-module-name . 151)
    (load-dir: . 150)
    (load-dir . 149)
    (name . 148)
    (interface-binding . 147)
    ((info: local-index: obj: imported: immutable: module: local-name:) . 146)
    (binding . 145)
    (info: . 144)
    (info . 143)
    (local-index: . 142)
    (local-index . 141)
    (obj: . 140)
    (obj . 139)
    (imported: . 138)
    (imported . 137)
    (immutable: . 136)
    (immutable . 135)
    (module: . 134)
    (module . 133)
    (local-name: . 132)
    (local-name . 131)
    ((encl-lambda:) . 130)
    (syntax-expr . 129)
    (encl-lambda: . 128)
    (keyword: . 127)
    (anonymous . 126)
    (default: . 125)
    (encl-lambda . 124)
    (syntax-def . 123)
    (direct-keywords: . 122)
    (direct-slots: . 121)
    (direct-superclasses: . 120)
    (syntax-obj . 119)
    (name: . 118)
    (*encl-lambda* . 80)
   )
   literals (
   )
))
