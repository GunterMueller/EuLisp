;;; EuLisp system 'youtoo'
;;;   Interface file for module cg-gen

(definterface cg-gen
  (import (i-all cg-state cg-stack sx-obj sx-node p-env an-side)
   syntax (_macros _i-aux0)
   full-import (i-error i-notify i-param i-level1 boot1 boot symbol stream3 random handler read table table1 vector convert1 format list socket stream2 lock stream1 stream float character compare collect fpi number integer copy convert string callback let-cc dynamic thread event condition bit mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl telos level1 aux-table i-all cg-state sx-obj sx-obj1 sx-obj2 cg-stack p-env i-ffi sx-node an-side)
   export (
    ((name . encode) (pos . 9) (origin cg-gen . encode))
    ((name . interactive-encode) (pos . 18) (origin cg-gen . interactive-encode))
   )
   local-literals (
    (top-level . 216)
    (binding-access-params . 215)
    (encode-lambda-display . 214)
    (set-inline-binding-info . 213)
    (add-inline-binding-info . 212)
    (clear-stack . 211)
    (add-asm . 210)
    (add-asm-set-and-get-binding . 209)
    (add-asm-get-binding . 208)
    (binding-read-instr . 207)
    (interactive-encode-top-lexical-bindings . 206)
    (encode-let . 205)
    (stack-to-display . 204)
    (add-asm-set-binding . 203)
    (encode-args . 202)
    (interactive-encode . 201)
    (encode-return . 200)
    (encode-top-lexical-bindings . 199)
    (pre-encode-inlined-lambda . 198)
    (encode-top-lexical-binding . 197)
    (pre-encode-inlined-setter . 196)
    (encode-check-arguments . 195)
    (add-asms . 194)
    (binding-write-instr . 193)
    (gensym-module . 192)
    ("~a~a" . 190)
    (set-stack-ref . 188)
    (set-binding-ref . 187)
    ((tail-call-operator tail-call-next-method) . 185)
    ((label branch branch-nil branch-true) . 183)
    (branch-true . 182)
    (check-arguments . 180)
    (check-arguments2 . 179)
    (check-arguments1 . 178)
    (check-arguments0 . 177)
    (check-arguments-1 . 176)
    (check-arguments-2 . 175)
    ("new inlined setter info: ~a" . 173)
    (setter . 172)
    ("  Pre-encode inlined setter ~a" . 171)
    ("  Code for module binding ~a:" . 169)
    ("  Pre-encode inlined lambda ~a" . 167)
    (return . 162)
    ("  Code for ~a's top-level forms:" . 160)
    ("  Encoding module ~a ..." . 159)
    (|(method G002875)| . 158)
    ("code generation error" . 156)
    (set-display-ref . 147)
    (stack-ref . 140)
    (display-ref . 139)
    (noop . 138)
    (binding-ref . 137)
    (value: . 135)
    (value . 134)
    (constant . 133)
    (set-and-get-binding-ref . 131)
    ("error in code generation" . 129)
    (asm: . 125)
    (handle: . 124)
    ("  Set inlined binding info of ~a" . 122)
    (alloc . 119)
    ("    Captured delegated vars ~a" . 118)
    ("    Captured local vars ~a" . 117)
    ("can't generate code for dummy binding" . 114)
    ("binding-access-params: unknown obj type ~a" . 113)
    (|(method encode-literal)| . 111)
    (|(method encode)| . 110)
    (encode-literal . 109)
    (encode . 107)
    ("  Encoding module ~a ..." . 106)
    (*actual-module* . 105)
    (|(method G003103)| . 104)
    (ct-error-value: . 102)
    ("code generation error" . 101)
    ("  Code for ~a's top-level forms:" . 98)
    (static-ref-t . 94)
    (static-ref-nil . 92)
    (static-character-ref . 90)
    (static-fpi-ref . 88)
    (static-fpi-byte-ref . 87)
    (static-ref-1 . 86)
    (static-ref2 . 85)
    (static-ref1 . 84)
    (static-ref0 . 83)
    (label . 78)
    (branch . 77)
    (branch-nil . 76)
    ("    Gen code for if" . 75)
    (make-lambda . 73)
    (code-vector-ref . 72)
    (static-ref . 71)
    ("    Gen code for lambda naming" . 70)
    ("    Gen code for lambda body" . 69)
    ("    Gen code for lambda display" . 68)
    ("    Args are on stack ~a" . 67)
    ("  Gen code for <lambda>" . 66)
    ("  Gen code for ~a" . 62)
    ("  Gen code for let body ~a" . 60)
    ((pop1) . 59)
    (pop1 . 58)
    (*clean-ups* . 57)
    ("bad call to ~a" . 54)
    ("call to general binding" . 53)
    (nobble . 52)
    (call-foreign-function . 51)
    ("argument mismatch at foreign function ~a" . 50)
    (ff . 49)
    ("argument mismatch at opencoding ~a" . 48)
    (arity . 47)
    (opencoding . 46)
    ("call inlined binding ~a" . 45)
    (inline . 44)
    (class . 43)
    ("call binding ~a" . 42)
    ("call opencoded-lambda ~a" . 41)
    ("call let lambda ~a" . 40)
    (call-operator . 39)
    (tail-call-operator . 38)
    ("call init lambda ~a" . 37)
    ("  Gen code for <appl>" . 36)
    ("  Gen code for <opencoding>" . 34)
    (call-next-method . 32)
    (anonymous . 31)
    (tail-call-next-method . 30)
    (*in-tail-pos* . 29)
   )
   literals (
   )
))
