#!/bin/sh
### Copyright 1997 A. Kind & University of Bath
### Copyright 2010 Henry G. Weller
###-----------------------------------------------------------------------------
##  This file is part of
### ---                         EuLisp System 'Youtoo'
###-----------------------------------------------------------------------------
##
##  Youtoo is free software: you can redistribute it and/or modify it under the
##  terms of the GNU General Public License version 2 as published by the Free
##  Software Foundation.
##
##  Youtoo is distributed in the hope that it will be useful, but WITHOUT ANY
##  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
##  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
##  details.
##
##  You should have received a copy of the GNU General Public License along with
##  this program.  If not, see <http://www.gnu.org/licenses/>.
##
###-----------------------------------------------------------------------------
### Options:
##    The system archicecture may be specified as an argument
##    which overrides the default
### Description:
##    To use a pre-installed version of the Boehm memory management system
##    set EUL_GC_DIR to its directory.
##
##    Give an empty gabage collector directory if you don't want to use the
##    garbage collector at all. This is not recommended as you will have
##    performace drawbacks.
##
##    Set CC if you prefer a particular C compiler.
##
##    See the relevant section in this file for information about using an
##    external thread library (e.g. Solaris threads).
###-----------------------------------------------------------------------------

###-----------------------------------------------------------------------------
### Set platform and architecture
###-----------------------------------------------------------------------------
OSTYPE=`uname -s`

# Check for the command-line architecture option
if [ $# = 1 ]
then
    ARCH=$1
else
    ARCH=`uname -m`
fi

###-----------------------------------------------------------------------------
### Set version, default current installation, bootstrapping installation
##  and GC installation directories
###-----------------------------------------------------------------------------
EUL_VERSION=pre-0.991

EUL_DIR=`pwd`
EUL_GC_DIR=/usr/local

EUL_BOOT_DIR=${EUL_DIR}.boot

###-----------------------------------------------------------------------------
### C compiler
##  leave blank to selected automatically
###-----------------------------------------------------------------------------
CC=

###-----------------------------------------------------------------------------
### Emacs org-mode used to generate README.html files.
##
##    Any version including org-mode will work but newer is better.
##    eemacs is the version used here which includes a more recent
##    org-mode than released with emacs.
###-----------------------------------------------------------------------------
EMACS=eemacs

###-----------------------------------------------------------------------------
### Specify the default shell and where to find mv and rm
###-----------------------------------------------------------------------------
EUL_SHELL=/bin/sh
UNIX_DIR=/bin

###-----------------------------------------------------------------------------
### Foreign thread library
##    If you want to base the EuLisp multi-threading support on a foreign
##    thread library (e.g. PPCR threads, UI alias Solaris threads or POSIX MIT
##    threads), set THRTYPE to one of:
##
##    UI (UNIX International alias Solaris Threads)
##    PPCR (POSIX Portable Common Runtime)
##    MIT (MIT Pthread Library)
###-----------------------------------------------------------------------------
THRTYPE=DEFAULT
#THRTYPE=UI
#THRTYPE=PPCR
#THRTYPE=MIT
#EUL_MIT_THR_DIR=

###-----------------------------------------------------------------------------
### Set paths for Youtoo, binaries, scripts and libraries
###-----------------------------------------------------------------------------
U2_DIR=$EUL_DIR/Youtoo
EUL_BIN_DIR=$EUL_DIR/Bin.$ARCH
EUL_LIB_DIR=$EUL_DIR/Lib.$ARCH

###-----------------------------------------------------------------------------
### Set paths to the bootstrapping installation
##    EUL_BOOT_DIR can be set to EUL_DIR which will use the current local build
##    and over-write it during the build
###-----------------------------------------------------------------------------
EUL_BOOT_BIN_DIR=$EUL_BOOT_DIR/Bin.$ARCH

###-----------------------------------------------------------------------------
### Verify the some settings
###-----------------------------------------------------------------------------
FOO=$EUL_VERSION
touch ./$FOO
if [ ! -f ${EUL_DIR}/${FOO} ]
then
    echo "*** ERROR [configure]: bad EUL_DIR directory: " ${EUL_DIR}
    rm ./$FOO
    exit
fi
rm ./$FOO

if [ ! -z "$EUL_GC_DIR" ]
then
    if [ ! -d $EUL_GC_DIR ]
    then
        echo "*** ERROR [configure]: bad EUL_GC_DIR directory: " $EUL_GC_DIR
    fi
fi

EUL_GC_INCLUDE="-I${EUL_GC_DIR} -I${EUL_GC_DIR}/include"

###-----------------------------------------------------------------------------
### Set CC if currently unset
###-----------------------------------------------------------------------------
if [ -z "$CC" ]
then
    gcc_path=`which gcc 2>/dev/null`
    gcc=`basename "${gcc_path}"`

    if [ "$gcc" = gcc ]
    then
        CC=gcc
        CFLAGS="-std=gnu99 -Wall -Wno-sequence-point -fPIC -O3 -fno-strict-aliasing"
    else
        CC=cc
        CFLAGS=
    fi
fi

###-----------------------------------------------------------------------------
### Set basic flags and libraries
###-----------------------------------------------------------------------------
CLIBS="-leval -lmath -llevel1 -llevel-0 -llevel-1 -leval -ltelos -lboot -leulvm -lm"
CFLAGS="$CFLAGS -I${U2_DIR}/include -I${U2_DIR}/Vm"

###-----------------------------------------------------------------------------
### Readline library (optional)
###-----------------------------------------------------------------------------
CFLAGS="$CFLAGS -DREADLINE"
CLIBS="$CLIBS -lreadline"

###-----------------------------------------------------------------------------
### Tcl/Tk libraries
###-----------------------------------------------------------------------------
EUL_TK_VERSION=8.5
EUL_TK_FLAGS=

###-----------------------------------------------------------------------------
### System-specific settings
###-----------------------------------------------------------------------------

###-----------------------------------------------------------------------------
###  Linux
###-----------------------------------------------------------------------------
case $OSTYPE in
Linux)
    if [ $ARCH = x86_64 ]
    then
        WORD_LENGTH=64
    elif [ $ARCH = i686 ]
    then
        WORD_LENGTH=32
    else
        echo "*** ERROR [configure]: unknown $OSTYPE system type $ARCH" >&2
        exit
    fi

    CC="gcc"
    AR="ar cruv"
    RANLIB="ranlib"
    CFLAGS="$CFLAGS -m$WORD_LENGTH"

    if [ $THRTYPE = PPCR ]
    then
        CFLAGS="$CFLAGS -DWITH_PCR_TREADS -I${EUL_GC_DIR}/posix -I${EUL_GC_DIR} -I${EUL_GC_DIR}/include -I${EUL_GC_DIR}/gc"
    else
        CFLAGS="$CFLAGS ${EUL_GC_INCLUDE}"
        CLIBS="$CLIBS -lpthread"
    fi

    EUXLISP_CFLAGS="-m$WORD_LENGTH -DWORD_LENGTH=$WORD_LENGTH -std=gnu99 -Wall -O3 -DREADLINE"
    EUXLISP_LIBS="-m$WORD_LENGTH -lm -lreadline"
    ;;

###-----------------------------------------------------------------------------
###  FreeBSD
###-----------------------------------------------------------------------------
FreeBSD)
    if [ $ARCH = x86_64 ]
    then
        WORD_LENGTH=64
    elif [ $ARCH = i686 ]
    then
        WORD_LENGTH=32
    else
        echo "*** ERROR [configure]: unknown $OSTYPE system type $ARCH" >&2
        exit
    fi

    CC="gcc"
    AR="ar cruv"
    RANLIB="ranlib"
    CFLAGS="$CFLAGS -m$WORD_LENGTH"

    if [ $THRTYPE = PPCR ]
    then
        CFLAGS="$CFLAGS -DWITH_PCR_TREADS -I${EUL_GC_DIR}/posix -I${EUL_GC_DIR}  -I${EUL_GC_DIR}/gc"
    else
        CFLAGS="$CFLAGS ${EUL_GC_INCLUDE}"
    fi

    EUXLISP_CFLAGS="-m$WORD_LENGTH -DWORD_LENGTH=$WORD_LENGTH -std=gnu99 -Wall -O3 -DREADLINE"
    EUXLISP_LIBS="-m$WORD_LENGTH -lm -lreadline"
    ;;

###-----------------------------------------------------------------------------
###  SunOS (Solaris)
###-----------------------------------------------------------------------------
SunOS)
    WORD_LENGTH=64
    if [ $THRTYPE = UI ]
    then
        CC="cc"
        CFLAGS="$CFLAGS -DWITH_STRERROR -DWITH_UI_THREADS ${EUL_GC_INCLUDE}"
        CLIBS="$CLIBS -lnls -lnsl -lsocket -ldl -lthread"
        AR="ar crsuv"
        RANLIB="echo No ranlib "
    elif [ $CC = gcc ]
    then
        CFLAGS="$CFLAGS -fPIC -DWITH_STRERROR ${EUL_GC_INCLUDE}"
        CLIBS="$CLIBS -lnls -lnsl -lsocket"
        AR="ar crsuv"
        RANLIB="echo No ranlib "
    else
        CFLAGS="$CFLAGS -DWITH_STRERROR ${EUL_GC_INCLUDE}"
        CLIBS="$CLIBS -lnls -lnsl -lsocket"
        AR="ar crsuv"
        RANLIB="echo No ranlib "
    fi
    ;;

###-----------------------------------------------------------------------------
###  IRIX
###-----------------------------------------------------------------------------
IRIX)
    WORD_LENGTH=64
    if [ $THRTYPE = PPCR ]
    then
        CC="cc"
        CFLAGS="$CFLAGS -Olimit 4000 -common -DWITH_PCR_THREADS -I${EUL_GC_DIR}/posix -I${EUL_GC_DIR}/gc"
        AR="ar crsuv"
        RANLIB="echo No ranlib "
    elif [ $THRTYPE = MIT ]
    then
        CC="gcc"
        CFLAGS="$CFLAGS -DMIT_PTHREADS -I${EUL_GC_DIR} -I${EUL_GC_DIR}/include -I${EUL_MIT_THR_DIR}/include -L${EUL_MIT_THR_DIR}/obj"
        CLIBS="-lpthread $CLIBS -lgcc -lpthread"
        AR="ar crsuv"
        RANLIB="echo No ranlib "
    elif [ $CC = gcc ]
    then
        CFLAGS="$CFLAGS ${EUL_GC_INCLUDE}"
        AR="ar crsuv"
        RANLIB="echo No ranlib "
    else
        CFLAGS="$CFLAGS -Olimit 4000 -common ${EUL_GC_INCLUDE}"
        AR="ar crsuv"
        RANLIB="echo No ranlib "
    fi
    ;;

###-----------------------------------------------------------------------------
###  IBM AIX
###-----------------------------------------------------------------------------
AIX)
    WORD_LENGTH=64
    CFLAGS="$CFLAGS ${EUL_GC_INCLUDE} -DWITH_STRERROR"
    AR="ar cruv"
    RANLIB="ranlib"
    EUXLISP_CFLAGS="-D_ALL_SOURCE -DSOCK"
    EUXLISP_LIBS="-lm"
    ;;

###-----------------------------------------------------------------------------
###  Unknown
###-----------------------------------------------------------------------------
*)    # an unsupported operating system
    echo "*** ERROR [configure]: unknown system type $OSTYPE" >&2
    exit
    ;;
esac

###-----------------------------------------------------------------------------
### Youtoo directory and architecture CFLAGS
###-----------------------------------------------------------------------------
EUL_DIR_OP=-DEUL_DIR='\"'$EUL_DIR'\"'
EUL_ARCH_OP=-DEUL_ARCH='\"'$ARCH'\"'

###-----------------------------------------------------------------------------
### Set word-length option
###-----------------------------------------------------------------------------
WORD_LEN_OP=-DWORD_LENGTH=$WORD_LENGTH

###-----------------------------------------------------------------------------
### Make scripts executable
###-----------------------------------------------------------------------------
chmod ug+x ${U2_DIR}/Tools/make*.*

###-----------------------------------------------------------------------------
### Prompting configuration
###-----------------------------------------------------------------------------
echo "CONFIGURING youtoo ..."
echo "  Dir: $EUL_DIR"
echo "  Architecture: $ARCH"
echo "  System: $OSTYPE"
echo "  Compiler: $CC"
echo "  Compiler flags: $CFLAGS"
echo "  Libraries: $CLIBS"
echo "  Archive: $AR"
echo "  Ranlib: $RANLIB"
echo "  Threads: $THRTYPE"

###-----------------------------------------------------------------------------
### Create Lib and Bin directory
###-----------------------------------------------------------------------------
if [ ! -d $EUL_LIB_DIR ]
then
    mkdir $EUL_LIB_DIR
fi

if [ ! -d $EUL_BIN_DIR ]
then
    mkdir $EUL_BIN_DIR
fi

###-----------------------------------------------------------------------------
### Create resource file
###-----------------------------------------------------------------------------
name_rc=${EUL_DIR}/.eulrc.${ARCH}
echo "  Creating ${EUL_DIR}/.eulrc.${ARCH} ..."
echo ";;; Copyright 1997 A. Kind & University of Bath" > $name_rc
echo ";;; Copyright 2010 Henry G. Weller" >> $name_rc
echo ";;;-----------------------------------------------------------------------------" >> $name_rc
echo ";;  This file is part of" >> $name_rc
echo ";;; ---                         EuLisp System 'Youtoo'" >> $name_rc
echo ";;;-----------------------------------------------------------------------------" >> $name_rc
echo >> $name_rc
echo \( >> $name_rc
echo \(CC \. \"${CC}\"\) >> $name_rc
echo \(CFLAGS \. \"${WORD_LEN_OP} ${CFLAGS} \"\) >> $name_rc
echo \(CLIBS \. \"${CLIBS}\"\) >> $name_rc
echo \(AR \. \"${AR}\"\) >> $name_rc
echo \(RANLIB \. \"${RANLIB}\"\) >> $name_rc
echo \(ARCH \. \"${ARCH}\"\) >> $name_rc
echo \(OSTYPE \. \"${OSTYPE}\"\) >> $name_rc
echo \(VERSION \. \"${EUL_VERSION}\"\) >> $name_rc
echo \) >> $name_rc

###-----------------------------------------------------------------------------
### Create Makefile header
###-----------------------------------------------------------------------------
name=${EUL_LIB_DIR}/Makefile
echo "  Creating ${EUL_LIB_DIR}/Makefile ..."
echo "### Copyright 1997 A. Kind & University of Bath" > $name
echo "### Copyright 2010 Henry G. Weller" >> $name
echo "###-----------------------------------------------------------------------------" >> $name
echo "##  This file is part of" >> $name
echo "### ---                         EuLisp System 'Youtoo'" >> $name
echo "###-----------------------------------------------------------------------------" >> $name
echo >> $name
echo CC = ${CC} >> $name
echo "CFLAGS = ${WORD_LEN_OP} ${EUL_DIR_OP} ${EUL_ARCH_OP} ${CFLAGS}" >> $name
echo "EUXLISP_CFLAGS = ${EUXLISP_CFLAGS}" >> $name
echo 'ARCH_DIR = platforms/$(ARCH)' >> $name
echo '.PRECIOUS: %/.' >> $name
echo '%/.:' >> $name
echo '	mkdir -p $(@)' >> $name
echo '# Reset the default goal.' >> $name
echo '.DEFAULT_GOAL :=' >> $name
echo '$(ARCH_DIR)/%.o : %.c | $(ARCH_DIR)/.' >> $name
echo '	mkdir -p $(@D)' >> $name
echo '	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@' >> $name
echo CLIBS = ${CLIBS} >> $name
echo "EUXLISP_LIBS = ${EUXLISP_LIBS}" >> $name
echo AR = ${AR} >> $name
echo RANLIB = ${RANLIB} >> $name
echo ARCH = ${ARCH} >> $name
echo OSTYPE = ${OSTYPE} >> $name
echo WORD_LENGTH = ${WORD_LENGTH} >> $name
echo EUL_VERSION = ${EUL_VERSION} >> $name
echo EUL_DIR = ${EUL_DIR} >> $name
echo EUL_BOOT_DIR = ${EUL_BOOT_DIR} >> $name
echo EUL_BIN_DIR = ${EUL_BIN_DIR} >> $name
echo EUL_LIB_DIR = ${EUL_LIB_DIR} >> $name
echo U2_DIR = ${EUL_DIR}/Youtoo >> $name
echo U2 = ${EUL_BIN_DIR}/youtoo >> $name
echo U2_BOOT = ${EUL_BOOT_BIN_DIR}/youtoo.sh >> $name
echo EUL_GC_DIR = ${EUL_GC_DIR} >> $name
echo EUL_GC_CFLAGS = ${EUL_GC_CFLAGS} >> $name
echo UNIX_DIR = ${UNIX_DIR} >> $name
echo EUL_TK_VERSION = ${EUL_TK_VERSION} >> $name
echo EUL_TK_FLAGS = ${EUL_TK_FLAGS} >> $name
echo >> $name
echo '.SUFFIXES: .org .html' >> $name
echo '.org.html:' >> $name
echo '	'${EMACS}' $< --batch --eval "(org-export-as-html t)"' >> $name
echo >> $name
echo "###---------------------------------------------------------------------" >> $name
echo "### Functions" >> $name
echo "###---------------------------------------------------------------------" >> $name
echo >> $name
echo 'makeAll = +$(foreach dir, $(1), $(MAKE) -C $(dir) $(2);)' >> $name
echo >> $name

###-----------------------------------------------------------------------------
### Create link to GC library (if available)
###-----------------------------------------------------------------------------
if [ -f $EUL_LIB_DIR/libgc.a ]
then
    rm -f $EUL_LIB_DIR/libgc.a
fi
if [ -f $EUL_LIB_DIR/libgc.so ]
then
    rm -f $EUL_LIB_DIR/libgc.so
fi
if [ -f Vm/gc.h ]
then
    rm -f Vm/gc.h
fi

if [ ! -z "${EUL_GC_DIR}" ]
then
    if [ $THRTYPE = PPCR ]
    then
        ln -s ${EUL_GC_DIR}/base/libpcr.a $EUL_LIB_DIR/libgc.a
    elif [ -f ${EUL_GC_DIR}/gc.a ]
    then
        ln -s ${EUL_GC_DIR}/gc.a $EUL_LIB_DIR/libgc.a
    fi
else
    touch Vm/gc.h
    echo "No GC."
fi

###-----------------------------------------------------------------------------
### Create youtoo scheme and check scripts
###-----------------------------------------------------------------------------
create_script(){
    name=${EUL_BIN_DIR}/$1.sh
    echo "  Creating $name ..."
    echo "#!$EUL_SHELL" > $name
    echo "###---------------------------------------------------------------------" >> $name
    echo "###                      EuLisp System 'youtoo'" >> $name
    echo "###---------------------------------------------------------------------" >> $name
    echo "###  Description: shell script to run the system" >> $name
    echo "###---------------------------------------------------------------------" >> $name
    echo >> $name
    echo export EUL_DIR=${EUL_DIR} >> $name
    echo export EUL_ARCH=${ARCH} >> $name
    echo >> $name
    cat ${U2_DIR}/Tools/$1.skl >> $name
    chmod ug+x $name
}

create_script youtoo
create_script you2tk
create_script scmtoo
create_script scm2tk
create_script check

###-----------------------------------------------------------------------------
### Create script to set LD_LIBRARY_PATH
###-----------------------------------------------------------------------------
name=${EUL_BIN_DIR}/makeso.Path
echo "  Creating makeso.Path ..."
echo > $name
echo "LD_LIBRARY_PATH=$EUL_LIB_DIR:\${LD_LIBRARY_PATH}" >> $name
echo "export LD_LIBRARY_PATH" >> $name
chmod ug+x $name

echo "DONE"

###-----------------------------------------------------------------------------
