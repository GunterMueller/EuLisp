;;; This file contains the necessary adaptation for FEEL's Scheme
;;; emulation.

;;; Copyright (c) 1990, 91, 92 by Christian Queinnec. All rights reserved.

;;; This program is distributed in the hope that it will be useful.
;;; Use and copying of this software and preparation of derivative works
;;; based upon this software are permitted, so long as the following
;;; conditions are met:
;;;      o credit to the authors is acknowledged following current
;;;        academic behaviour
;;;      o no fees or compensation are charged for use, copies, or
;;;        access to this software
;;;      o this copyright notice is included intact.
;;; This software is made available AS IS, and no warranty is made about 
;;; the software or its performance. 

;;; Bug descriptions, use reports, comments or suggestions are welcome.
;;; Send them to    <queinnec@poly.polytechnique.fr>   or to:
;;;      Christian Queinnec
;;;      Laboratoire d'Informatique de l'X
;;;      Ecole Polytechnique
;;;      91128 Palaiseau Cedex
;;;      France

;;;************************************************
;;;    Small, Efficient and Innovative Class System
;;;       Christian Queinnec  
;;;   \'Ecole Polytechnique & INRIA-Rocquencourt
;;;   91128 Palaiseau Cedex --- France
;;;************************************************

(define define-oo-macro 
  (macro-lambda (name-vars . body)
    `(define ,(car name-vars) (macro-lambda ,(cdr name-vars) ,@body))))

(define-oo-macro (unless condition . body)
  `(if ,condition #f (begin . ,body)) )

(define-oo-macro (when condition . body)
  `(if ,condition (begin . ,body)) )

;;; apply is only binary in PC Scheme. 
;(let ((app apply))
;  (set! apply
;         (lambda (f arg . args)
;            (app f (let copy ((args (cons arg args)))
;                     (if (null? (cdr args))
;                         (car args)
;                         (cons (car args) (copy (cdr args))) ) )) )) )

(define oo-apply apply)

'(defmacro oo-apply (fn . args) 
  (define (consify args)
    (if (pair? (cdr args))
        `(cons ,(car args) ,(consify (cdr args)))
        (car args) ) )
  `(apply ,fn ,(if (pair? args) (consify args) '())) )

(define (oo-concat . names)
  (string->symbol
   (apply string-append
          (map (lambda (thing)
                    (cond ((symbol? thing) 
                           (symbol->string thing) )
                          ((string? thing) thing)
                          ((number? thing)
                           (number->string thing) )
                          (else (error "non coercible to String"
                                        thing )) ) )
                  names ) ) ) )

(define (flat l)
  (define (flatten l r)
    (cond ((pair? l)
           (flatten (car l) (flatten (cdr l) r)) )
          ((null? l) r)
          (else (cons l r)) ) )
  (flatten l '()) )

(define (mapcan f l)
  (if (pair? l)
      (append (f (car l)) (mapcan f (cdr l)))
      '() ) )

'(define remove delete!)

(define (oo-error msg . culprits)
  (apply error msg culprits) )

;;; a voir... ou a mettre dans oo-concat ???
(define-oo-macro (oo-set! name form)
 `(set! (access ,name user-global-envvironment) ,form) )

(define-oo-macro (oo-ref name)
  `(access ,name user-global-environment) )

(define gensym
  (let ((counter 99))
    (lambda args
      (set! counter (+ counter 1))
      (oo-concat (if (pair? args) (car args) 'G)
              counter ) ) ) )

'(define mapcar map)

(define (remove x l)
  (cond ((null? l) '())
        ((eq? x (car l)) (cdr l))
        (else (cons (car l) (remove x (cdr l))))))

;;; End of adaptation of Meroon for PC-Scheme.
