((name macros0) (dependencies (lists symbols boot init)) (exported-ids ((address macros0 compile-time-p) (name . compile-time-p) (mutable ()) (class . bytefunction) (argtype (() . 0))) ((address macros0 interpret-time) (name . interpret-time) (mutable ()) (class . macro) (argtype (t . 1))) ((address macros0 compile-time) (name . compile-time) (mutable ()) (class . macro) (argtype (t . 1))) ((address macros0 method-lambda) (name . method-lambda) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 unless) (name . unless) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 when) (name . when) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 or) (name . or) (mutable ()) (class . macro) (argtype (t . 1))) ((address macros0 and) (name . and) (mutable ()) (class . macro) (argtype (t . 1))) ((address macros0 labels) (name . labels) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 let*) (name . let*) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 let) (name . let) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 cond) (name . cond) (mutable ()) (class . macro) (argtype (t . 1))) ((address macros0 with-handler) (name . with-handler) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 let/cc) (name . let/cc) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 unwind-protect) (name . unwind-protect) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 return-from) (name . return-from) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 block) (name . block) (mutable ()) (class . macro) (argtype (t . 1))) ((address macros0 throw) (name . throw) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 catch) (name . catch) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 prog1) (name . prog1) (mutable ()) (class . macro) (argtype (t . 1))) ((address macros0 compile-inline) (name . compile-inline) (mutable ()) (class . macro) (argtype (t . 2))) ((address macros0 compile-add-callback) (name . compile-add-callback) (mutable ()) (class . macro) (argtype (() . 3))) ((address macros0 compile-declare) (name . compile-declare) (mutable ()) (class . macro) (argtype (() . 3))) ((address macros0 define-simple-generic) (name . define-simple-generic) (mutable ()) (class . macro) (argtype (() . 3)))))