(defmodule smatch (syntax (syntax-0) import (level-0) export (smatch)) (defsyntax smatch X (let ((v15930 X)) (let ((fail15931 (lambda () (let ((fail15932 (lambda () (let ((fail15933 (lambda () (let ((fail15934 (lambda () (let ((fail15935 (lambda () (let ((fail15936 (lambda () (let ((fail15937 (lambda () (error <condition> "no matching pattern")))) (let ((l v15930)) (if (list? l) (progn (quasiquote (match* (() ((car cdr cons? null? binary=) ())) (unquote-splicing l)))) (fail15937))))))) (if (cons? v15930) (let ((w15941 (car v15930)) (x15942 (cdr v15930))) (if (binary= w15941 (quote -phd)) (if (cons? x15942) (let ((w15943 (car x15942)) (x15944 (cdr x15942))) (let ((p w15943)) (let ((l x15944)) (progn (quasiquote (match* (() (unquote p)) (unquote-splicing l))))))) (fail15936)) (fail15936))) (fail15936)))))) (if (cons? v15930) (let ((w15945 (car v15930)) (x15946 (cdr v15930))) (if (binary= w15945 (quote -abs)) (if (cons? x15946) (let ((w15947 (car x15946)) (x15948 (cdr x15946))) (let ((abs w15947)) (let ((l x15948)) (progn (quasiquote (match* ((unquote abs) ((car cdr cons? null? binary=) ())) (unquote-splicing l))))))) (fail15935)) (fail15935))) (fail15935)))))) (if (cons? v15930) (let ((w15949 (car v15930)) (x15950 (cdr v15930))) (if (binary= w15949 (quote -phd)) (if (cons? x15950) (let ((w15951 (car x15950)) (x15952 (cdr x15950))) (let ((p w15951)) (if (cons? x15952) (let ((w15953 (car x15952)) (x15954 (cdr x15952))) (if (binary= w15953 (quote -abs)) (if (cons? x15954) (let ((w15955 (car x15954)) (x15956 (cdr x15954))) (let ((abs w15955)) (let ((l x15956)) (progn (quasiquote (match* ((unquote abs) (unquote p)) (unquote-splicing l))))))) (fail15934)) (fail15934))) (fail15934)))) (fail15934)) (fail15934))) (fail15934)))))) (if (cons? v15930) (let ((w15957 (car v15930)) (x15958 (cdr v15930))) (if (binary= w15957 (quote -abs)) (if (cons? x15958) (let ((w15959 (car x15958)) (x15960 (cdr x15958))) (let ((abs w15959)) (if (cons? x15960) (let ((w15961 (car x15960)) (x15962 (cdr x15960))) (if (binary= w15961 (quote -phd)) (if (cons? x15962) (let ((w15963 (car x15962)) (x15964 (cdr x15962))) (let ((p w15963)) (let ((l x15964)) (progn (quasiquote (match* ((unquote abs) (unquote p)) (unquote-splicing l))))))) (fail15933)) (fail15933))) (fail15933)))) (fail15933)) (fail15933))) (fail15933)))))) (if (cons? v15930) (let ((w15965 (car v15930)) (x15966 (cdr v15930))) (let ((atom w15965)) (if (null? x15966) (progn (error <condition> "no match clauses")) (fail15932)))) (fail15932)))))) (if (null? v15930) (progn (error <condition> "missing match expression")) (fail15931))))) (defsyntax match* X (let ((v15967 X)) (let ((fail15968 (lambda () (let ((fail15969 (lambda () (let ((fail15970 (lambda () (error <condition> "no matching pattern")))) (if (cons? v15967) (let ((w15971 (car v15967)) (x15972 (cdr v15967))) (let ((abs w15971)) (if (cons? x15972) (let ((w15973 (car x15972)) (x15974 (cdr x15972))) (let ((atom w15973)) (let ((b x15974)) (if (list? b) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote atom))) (match-next (unquote abs) (unquote v) ((unquote atom) (setq (unquote atom))) (unquote-splicing b)))))) (fail15970))))) (fail15970)))) (fail15970)))))) (if (cons? v15967) (let ((w15978 (car v15967)) (x15979 (cdr v15967))) (let ((abs w15978)) (if (cons? x15979) (let ((w15980 (car x15979)) (x15981 (cdr x15979))) (let ((a w15980)) (if (vector? w15980) (let ((len15982 (vector-size w15980))) (if (>= len15982 0) (letfuns ((loop15984 (j15985 p-ls15983) (if (>= j15985 len15982) (let ((vec (reverse p-ls15983))) (letfuns ((loop (ls15991 p-ls15989 p-ls15988 p-ls15987) (if (null? ls15991) (progn (let ((body (reverse p-ls15989)) (pat (reverse p-ls15988)) (b (reverse p-ls15987))) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote a))) (match-next (unquote abs) (unquote v) ((unquote v) (setq (unquote v))) (unquote-splicing b)))))))) (if (cons? ls15991) (progn (let ((w15992 (car ls15991))) (let ((b w15992)) (if (cons? w15992) (let ((w15993 (car w15992)) (x15994 (cdr w15992))) (let ((pat w15993)) (let ((body x15994)) (loop (cdr ls15991) (cons body p-ls15989) (cons pat p-ls15988) (cons b p-ls15987))))) (fail15969))))) (if else (progn (fail15969)) (cond)))))) (loop x15981 (quote ()) (quote ()) (quote ())))) (let ((w15986 (vector-ref w15980 j15985))) (let ((vec w15986)) (loop15984 (+ j15985 1) (cons vec p-ls15983))))))) (loop15984 0 (quote ()))) (fail15969))) (fail15969)))) (fail15969)))) (fail15969)))))) (if (cons? v15967) (let ((w15995 (car v15967)) (x15996 (cdr v15967))) (let ((abs w15995)) (if (cons? x15996) (let ((w15997 (car x15996)) (x15998 (cdr x15996))) (let ((app w15997)) (if (list? app) (letfuns ((loop (ls16006 p-ls16004 p-ls16003 p-ls16002) (if (null? ls16006) (progn (let ((body (reverse p-ls16004)) (pat (reverse p-ls16003)) (a (reverse p-ls16002))) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote app))) (match-next (unquote abs) (unquote v) ((unquote app) (setq (unquote app))) (unquote-splicing a)))))))) (if (cons? ls16006) (progn (let ((w16007 (car ls16006))) (let ((a w16007)) (if (cons? w16007) (let ((w16008 (car w16007)) (x16009 (cdr w16007))) (let ((pat w16008)) (let ((body x16009)) (loop (cdr ls16006) (cons body p-ls16004) (cons pat p-ls16003) (cons a p-ls16002))))) (fail15968))))) (if else (progn (fail15968)) (cond)))))) (loop x15998 (quote ()) (quote ()) (quote ()))) (fail15968)))) (fail15968)))) (fail15968))))) (defsyntax match-next X (let ((v16010 X)) (let ((fail16011 (lambda () (let ((fail16012 (lambda () (let ((fail16013 (lambda () (error <condition> "no matching pattern")))) (if (cons? v16010) (let ((w16014 (car v16010)) (x16015 (cdr v16010))) (let ((abs w16014)) (if (cons? x16015) (let ((w16016 (car x16015)) (x16017 (cdr x16015))) (let ((v w16016)) (if (cons? x16017) (let ((w16018 (car x16017)) (x16019 (cdr x16017))) (let ((g+s w16018)) (if (cons? x16019) (let ((w16020 (car x16019)) (x16021 (cdr x16019))) (if (cons? w16020) (let ((w16022 (car w16020)) (x16023 (cdr w16020))) (let ((pat w16022)) (let ((body x16023)) (let ((rest x16021)) (progn (let ((failure (gensym "fail"))) (quasiquote (match-next (unquote abs) (unquote v) (unquote g+s) ((unquote pat) (=> (unquote failure)) (unquote-splicing body)) (unquote-splicing rest))))))))) (fail16013))) (fail16013)))) (fail16013)))) (fail16013)))) (fail16013)))))) (if (cons? v16010) (let ((w16024 (car v16010)) (x16025 (cdr v16010))) (let ((abs w16024)) (if (cons? x16025) (let ((w16026 (car x16025)) (x16027 (cdr x16025))) (let ((v w16026)) (if (cons? x16027) (let ((w16028 (car x16027)) (x16029 (cdr x16027))) (let ((g+s w16028)) (if (cons? x16029) (let ((w16030 (car x16029)) (x16031 (cdr x16029))) (if (cons? w16030) (let ((w16032 (car w16030)) (x16033 (cdr w16030))) (let ((pat w16032)) (if (cons? x16033) (let ((w16034 (car x16033)) (x16035 (cdr x16033))) (if (cons? w16034) (let ((w16036 (car w16034)) (x16037 (cdr w16034))) (if (binary= w16036 (quote =>)) (if (cons? x16037) (let ((w16038 (car x16037)) (x16039 (cdr x16037))) (let ((failure w16038)) (if (null? x16039) (let ((body x16035)) (let ((rest x16031)) (progn (quasiquote (let (((unquote failure) (lambda () (match-next (unquote abs) (unquote v) (unquote g+s) (unquote-splicing rest))))) (match-one (unquote abs) (unquote v) (unquote pat) (unquote g+s) (match-drop-ids (progn (unquote-splicing body))) (match-drop-ids ((unquote failure))) ())))))) (fail16012)))) (fail16012)) (fail16012))) (fail16012))) (fail16012)))) (fail16012))) (fail16012)))) (fail16012)))) (fail16012)))) (fail16012)))))) (if (cons? v16010) (let ((w16040 (car v16010)) (x16041 (cdr v16010))) (let ((abs w16040)) (if (cons? x16041) (let ((w16042 (car x16041)) (x16043 (cdr x16041))) (let ((v w16042)) (if (cons? x16043) (let ((w16044 (car x16043)) (x16045 (cdr x16043))) (let ((g+s w16044)) (if (null? x16045) (progn (quasiquote (error <condition> "no matching pattern"))) (fail16011)))) (fail16011)))) (fail16011)))) (fail16011))))) (defsyntax abs-drop x (let ((v16046 x)) (let ((fail16047 (lambda () (let ((fail16048 (lambda () (error <condition> "no matching pattern")))) (if (cons? v16046) (let ((w16049 (car v16046)) (x16050 (cdr v16046))) (let ((a w16049)) (if (cons? x16050) (let ((w16051 (car x16050)) (x16052 (cdr x16050))) (let ((k w16051)) (if (list? k) (if (cons? x16052) (let ((w16056 (car x16052)) (x16057 (cdr x16052))) (let ((v w16056)) (if (null? x16057) (progn (append k (quasiquote ((unquote v))))) (fail16048)))) (fail16048)) (fail16048)))) (fail16048)))) (fail16048)))))) (if (cons? v16046) (let ((w16058 (car v16046)) (x16059 (cdr v16046))) (let ((a w16058)) (if (cons? x16059) (let ((w16060 (car x16059)) (x16061 (cdr x16059))) (let ((k w16060)) (if (null? x16061) (progn k) (fail16047)))) (fail16047)))) (fail16047))))) (defsyntax match-one x (let ((v16062 x)) (let ((fail16063 (lambda () (let ((fail16064 (lambda () (let ((fail16065 (lambda () (let ((fail16066 (lambda () (error <condition> "no matching pattern")))) (let ((x v16062)) (progn (quasiquote (match-two (unquote-splicing x))))))))) (if (cons? v16062) (let ((w16067 (car v16062)) (x16068 (cdr v16062))) (let ((abs w16067)) (if (cons? x16068) (let ((w16069 (car x16068)) (x16070 (cdr x16068))) (let ((v w16069)) (if (cons? x16070) (let ((w16071 (car x16070)) (x16072 (cdr x16070))) (if (cons? w16071) (let ((w16073 (car w16071)) (x16074 (cdr w16071))) (let ((p w16073)) (if (cons? x16074) (let ((w16075 (car x16074)) (x16076 (cdr x16074))) (let ((q w16075)) (let ((r x16076)) (if (cons? x16072) (let ((w16077 (car x16072)) (x16078 (cdr x16072))) (let ((g+s w16077)) (if (cons? x16078) (let ((w16079 (car x16078)) (x16080 (cdr x16078))) (let ((sk w16079)) (if (cons? x16080) (let ((w16081 (car x16080)) (x16082 (cdr x16080))) (let ((fk w16081)) (if (cons? x16082) (let ((w16083 (car x16082)) (x16084 (cdr x16082))) (let ((i w16083)) (if (null? x16084) (progn (quasiquote (match-check-ellipse (unquote q) (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses (unquote abs) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()) (match-two (unquote abs) (unquote v) ((unquote p) (unquote q) (unquote-splicing r)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail16065)))) (fail16065)))) (fail16065)))) (fail16065)))) (fail16065))))) (fail16065)))) (fail16065))) (fail16065)))) (fail16065)))) (fail16065)))))) (if (cons? v16062) (let ((w16085 (car v16062)) (x16086 (cdr v16062))) (let ((abs w16085)) (if (cons? x16086) (let ((w16087 (car x16086)) (x16088 (cdr x16086))) (let ((v w16087)) (if (cons? x16088) (let ((w16089 (car x16088)) (x16090 (cdr x16088))) (if (cons? w16089) (let ((w16091 (car w16089)) (x16092 (cdr w16089))) (let ((p w16091)) (if (cons? x16092) (let ((w16093 (car x16092)) (x16094 (cdr x16092))) (if (cons? w16093) (let ((w16095 (car w16093)) (x16096 (cdr w16093))) (if (binary= w16095 (quote __)) (if (cons? x16096) (let ((w16097 (car x16096)) (x16098 (cdr x16096))) (let ((m w16097)) (if (null? x16098) (let ((r x16094)) (if (cons? x16090) (let ((w16099 (car x16090)) (x16100 (cdr x16090))) (let ((g+s w16099)) (if (cons? x16100) (let ((w16101 (car x16100)) (x16102 (cdr x16100))) (let ((sk w16101)) (if (cons? x16102) (let ((w16103 (car x16102)) (x16104 (cdr x16102))) (let ((fk w16103)) (if (cons? x16104) (let ((w16105 (car x16104)) (x16106 (cdr x16104))) (let ((i w16105)) (if (null? x16106) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses-n (unquote abs) (unquote m) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail16064)))) (fail16064)))) (fail16064)))) (fail16064)))) (fail16064))) (fail16064)))) (fail16064)) (fail16064))) (fail16064))) (fail16064)))) (fail16064))) (fail16064)))) (fail16064)))) (fail16064)))))) (if (cons? v16062) (let ((w16107 (car v16062)) (x16108 (cdr v16062))) (let ((abs w16107)) (if (cons? x16108) (let ((w16109 (car x16108)) (x16110 (cdr x16108))) (let ((v w16109)) (if (cons? x16110) (let ((w16111 (car x16110)) (x16112 (cdr x16110))) (if (cons? w16111) (let ((w16113 (car w16111)) (x16114 (cdr w16111))) (let ((p w16113)) (if (cons? x16114) (let ((w16115 (car x16114)) (x16116 (cdr x16114))) (if (cons? w16115) (let ((w16117 (car w16115)) (x16118 (cdr w16115))) (if (binary= w16117 (quote ..)) (if (cons? x16118) (let ((w16119 (car x16118)) (x16120 (cdr x16118))) (let ((m w16119)) (if (null? x16120) (let ((r x16116)) (if (cons? x16112) (let ((w16121 (car x16112)) (x16122 (cdr x16112))) (let ((g+s w16121)) (if (cons? x16122) (let ((w16123 (car x16122)) (x16124 (cdr x16122))) (let ((sk w16123)) (if (cons? x16124) (let ((w16125 (car x16124)) (x16126 (cdr x16124))) (let ((fk w16125)) (if (cons? x16126) (let ((w16127 (car x16126)) (x16128 (cdr x16126))) (let ((i w16127)) (if (null? x16128) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses-n (unquote abs) (unquote m) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail16063)))) (fail16063)))) (fail16063)))) (fail16063)))) (fail16063))) (fail16063)))) (fail16063)) (fail16063))) (fail16063))) (fail16063)))) (fail16063))) (fail16063)))) (fail16063)))) (fail16063))))) (defsyntax insert-abs x (let ((v16129 x)) (let ((fail16130 (lambda () (let ((fail16131 (lambda () (let ((fail16132 (lambda () (error <condition> "no matching pattern")))) (if (cons? v16129) (let ((w16133 (car v16129)) (x16134 (cdr v16129))) (let ((abs w16133)) (if (cons? x16134) (let ((w16135 (car x16134)) (x16136 (cdr x16134))) (if (cons? w16135) (let ((w16137 (car w16135)) (x16138 (cdr w16135))) (let ((n w16137)) (let ((nn x16138)) (if (list? nn) (if (null? x16136) (progn (append (quasiquote ((unquote n) (unquote abs))) nn)) (fail16132)) (fail16132))))) (fail16132))) (fail16132)))) (fail16132)))))) (if (cons? v16129) (let ((w16142 (car v16129)) (x16143 (cdr v16129))) (let ((abs w16142)) (if (cons? x16143) (let ((w16144 (car x16143)) (x16145 (cdr x16143))) (if (cons? w16144) (let ((w16146 (car w16144)) (x16147 (cdr w16144))) (let ((x w16146)) (if (null? x16147) (if (null? x16145) (progn (quasiquote ((unquote x)))) (fail16131)) (fail16131)))) (fail16131))) (fail16131)))) (fail16131)))))) (if (cons? v16129) (let ((w16148 (car v16129)) (x16149 (cdr v16129))) (let ((abs w16148)) (if (cons? x16149) (let ((w16150 (car x16149)) (x16151 (cdr x16149))) (if (cons? w16150) (let ((w16152 (car w16150)) (x16153 (cdr w16150))) (if (binary= w16152 (quote progn)) (let ((l x16153)) (if (null? x16151) (progn (quasiquote ((quote progn) (unquote-splicing l)))) (fail16130))) (fail16130))) (fail16130))) (fail16130)))) (fail16130))))) (defsyntax recur x (let ((v16154 x)) (let ((fail16155 (lambda () (error <condition> "no matching pattern")))) (if (cons? v16154) (let ((w16156 (car v16154)) (x16157 (cdr v16154))) (let ((n w16156)) (if (cons? x16157) (let ((w16158 (car x16157)) (x16159 (cdr x16157))) (letfuns ((loop (ls16163 p-ls16161 p-ls16160) (if (null? ls16163) (progn (let ((i (reverse p-ls16161)) (a (reverse p-ls16160))) (let ((code x16159)) (if (list? code) (progn (quasiquote (letfuns (((unquote n) (unquote a) (unquote-splicing code))) ((unquote n) (unquote-splicing i))))) (fail16155))))) (if (cons? ls16163) (progn (let ((w16164 (car ls16163))) (if (cons? w16164) (let ((w16168 (car w16164)) (x16169 (cdr w16164))) (let ((a w16168)) (if (cons? x16169) (let ((w16170 (car x16169)) (x16171 (cdr x16169))) (let ((i w16170)) (if (null? x16171) (loop (cdr ls16163) (cons i p-ls16161) (cons a p-ls16160)) (fail16155)))) (fail16155)))) (fail16155)))) (if else (progn (fail16155)) (cond)))))) (loop w16158 (quote ()) (quote ())))) (fail16155)))) (fail16155))))) (defsyntax match-two x (let ((v16172 x)) (let ((fail16173 (lambda () (let ((fail16174 (lambda () (let ((fail16175 (lambda () (let ((fail16176 (lambda () (let ((fail16177 (lambda () (let ((fail16178 (lambda () (let ((fail16179 (lambda () (let ((fail16180 (lambda () (let ((fail16181 (lambda () (let ((fail16182 (lambda () (let ((fail16183 (lambda () (let ((fail16184 (lambda () (let ((fail16185 (lambda () (let ((fail16186 (lambda () (let ((fail16187 (lambda () (let ((fail16188 (lambda () (let ((fail16189 (lambda () (let ((fail16190 (lambda () (let ((fail16191 (lambda () (let ((fail16192 (lambda () (let ((fail16193 (lambda () (let ((fail16194 (lambda () (let ((fail16195 (lambda () (let ((fail16196 (lambda () (let ((fail16197 (lambda () (let ((fail16198 (lambda () (error <condition> "no matching pattern")))) (if (cons? v16172) (let ((w16199 (car v16172)) (x16200 (cdr v16172))) (if (cons? w16199) (let ((w16201 (car w16199)) (x16202 (cdr w16199))) (let ((abs w16201)) (if (cons? x16202) (let ((w16203 (car x16202)) (x16204 (cdr x16202))) (let ((phd w16203)) (if (null? x16204) (if (cons? x16200) (let ((w16205 (car x16200)) (x16206 (cdr x16200))) (let ((v w16205)) (if (cons? x16206) (let ((w16207 (car x16206)) (x16208 (cdr x16206))) (let ((p w16207)) (if (cons? x16208) (let ((w16209 (car x16208)) (x16210 (cdr x16208))) (let ((g+s w16209)) (if (cons? x16210) (let ((w16211 (car x16210)) (x16212 (cdr x16210))) (let ((sk w16211)) (if (cons? x16212) (let ((w16213 (car x16212)) (x16214 (cdr x16212))) (let ((fk w16213)) (if (cons? x16214) (let ((w16215 (car x16214)) (x16216 (cdr x16214))) (let ((i w16215)) (if (null? x16216) (progn (quasiquote (match-abstract () (unquote abs) (unquote phd) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail16198)))) (fail16198)))) (fail16198)))) (fail16198)))) (fail16198)))) (fail16198)))) (fail16198)) (fail16198)))) (fail16198)))) (fail16198))) (fail16198)))))) (if (cons? v16172) (let ((w16217 (car v16172)) (x16218 (cdr v16172))) (let ((abs w16217)) (if (cons? x16218) (let ((w16219 (car x16218)) (x16220 (cdr x16218))) (let ((v w16219)) (if (cons? x16220) (let ((w16221 (car x16220)) (x16222 (cdr x16220))) (if (cons? w16221) (let ((w16223 (car w16221)) (x16224 (cdr w16221))) (let ((p w16223)) (if (cons? x16224) (let ((w16225 (car x16224)) (x16226 (cdr x16224))) (if (binary= w16225 (quote ___)) (let ((r x16226)) (if (cons? x16222) (let ((w16227 (car x16222)) (x16228 (cdr x16222))) (let ((g+s w16227)) (if (cons? x16228) (let ((w16229 (car x16228)) (x16230 (cdr x16228))) (let ((sk w16229)) (if (cons? x16230) (let ((w16231 (car x16230)) (x16232 (cdr x16230))) (let ((fk w16231)) (if (cons? x16232) (let ((w16233 (car x16232)) (x16234 (cdr x16232))) (let ((i w16233)) (if (null? x16234) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses (unquote abs) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i) ())))) (fail16197)))) (fail16197)))) (fail16197)))) (fail16197)))) (fail16197))) (fail16197))) (fail16197)))) (fail16197))) (fail16197)))) (fail16197)))) (fail16197)))))) (if (cons? v16172) (let ((w16235 (car v16172)) (x16236 (cdr v16172))) (let ((abs w16235)) (if (cons? x16236) (let ((w16237 (car x16236)) (x16238 (cdr x16236))) (let ((v w16237)) (if (cons? x16238) (let ((w16239 (car x16238)) (x16240 (cdr x16238))) (if (cons? w16239) (let ((w16241 (car w16239)) (x16242 (cdr w16239))) (if (cons? w16241) (let ((w16243 (car w16241)) (x16244 (cdr w16241))) (if (binary= w16243 (quote <>)) (if (cons? x16244) (let ((w16245 (car x16244)) (x16246 (cdr x16244))) (let ((f w16245)) (if (cons? x16246) (let ((w16247 (car x16246)) (x16248 (cdr x16246))) (let ((p w16247)) (if (null? x16248) (let ((l x16242)) (if (cons? x16240) (let ((w16249 (car x16240)) (x16250 (cdr x16240))) (let ((g+s w16249)) (if (cons? x16250) (let ((w16251 (car x16250)) (x16252 (cdr x16250))) (let ((sk w16251)) (if (cons? x16252) (let ((w16253 (car x16252)) (x16254 (cdr x16252))) (let ((fk w16253)) (if (cons? x16254) (let ((w16255 (car x16254)) (x16256 (cdr x16254))) (let ((i w16255)) (if (null? x16256) (progn (let ((res (gensym "res"))) (quasiquote (let (((unquote res) ((unquote f) (unquote v)))) (if (unquote res) (match-one (unquote abs) (car (unquote res)) (unquote p) (unquote g+s) (match-one (cdr (unquote res)) (unquote l) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))))) (fail16196)))) (fail16196)))) (fail16196)))) (fail16196)))) (fail16196))) (fail16196)))) (fail16196)))) (fail16196)) (fail16196))) (fail16196))) (fail16196))) (fail16196)))) (fail16196)))) (fail16196)))))) (if (cons? v16172) (let ((w16257 (car v16172)) (x16258 (cdr v16172))) (let ((abs w16257)) (if (cons? x16258) (let ((w16259 (car x16258)) (x16260 (cdr x16258))) (let ((v w16259)) (if (cons? x16260) (let ((w16261 (car x16260)) (x16262 (cdr x16260))) (if (cons? w16261) (let ((w16263 (car w16261)) (x16264 (cdr w16261))) (if (binary= w16263 (quote =)) (if (cons? x16264) (let ((w16265 (car x16264)) (x16266 (cdr x16264))) (let ((proc w16265)) (if (cons? x16266) (let ((w16267 (car x16266)) (x16268 (cdr x16266))) (let ((p w16267)) (if (null? x16268) (if (cons? x16262) (let ((w16269 (car x16262)) (x16270 (cdr x16262))) (let ((g+s w16269)) (let ((x x16270)) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote proc) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) () (unquote-splicing x))))))))) (fail16195)) (fail16195)))) (fail16195)))) (fail16195)) (fail16195))) (fail16195))) (fail16195)))) (fail16195)))) (fail16195)))))) (if (cons? v16172) (let ((w16271 (car v16172)) (x16272 (cdr v16172))) (let ((abs w16271)) (if (cons? x16272) (let ((w16273 (car x16272)) (x16274 (cdr x16272))) (let ((v w16273)) (if (cons? x16274) (let ((w16275 (car x16274)) (x16276 (cdr x16274))) (if (cons? w16275) (let ((w16277 (car w16275)) (x16278 (cdr w16275))) (if (binary= w16277 (quote =)) (if (cons? x16278) (let ((w16279 (car x16278)) (x16280 (cdr x16278))) (let ((g w16279)) (if (cons? x16280) (let ((w16281 (car x16280)) (x16282 (cdr x16280))) (let ((s w16281)) (if (cons? x16282) (let ((w16283 (car x16282)) (x16284 (cdr x16282))) (let ((p w16283)) (if (null? x16284) (if (cons? x16276) (let ((w16285 (car x16276)) (x16286 (cdr x16276))) (let ((g+s w16285)) (if (cons? x16286) (let ((w16287 (car x16286)) (x16288 (cdr x16286))) (let ((sk w16287)) (if (cons? x16288) (let ((w16289 (car x16288)) (x16290 (cdr x16288))) (let ((fk w16289)) (if (cons? x16290) (let ((w16291 (car x16290)) (x16292 (cdr x16290))) (let ((i w16291)) (if (null? x16292) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote g) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) (((unquote g) (unquote v)) ((unquote s) (unquote v))) (unquote sk) (unquote fk) (unquote i)))))) (fail16194)))) (fail16194)))) (fail16194)))) (fail16194)))) (fail16194)) (fail16194)))) (fail16194)))) (fail16194)))) (fail16194)) (fail16194))) (fail16194))) (fail16194)))) (fail16194)))) (fail16194)))))) (if (cons? v16172) (let ((w16293 (car v16172)) (x16294 (cdr v16172))) (let ((abs w16293)) (if (cons? x16294) (let ((w16295 (car x16294)) (x16296 (cdr x16294))) (let ((v w16295)) (if (cons? x16296) (let ((w16297 (car x16296)) (x16298 (cdr x16296))) (if (cons? w16297) (let ((w16299 (car w16297)) (x16300 (cdr w16297))) (if (binary= w16299 (quote =)) (if (cons? x16300) (let ((w16301 (car x16300)) (x16302 (cdr x16300))) (if (binary= w16301 0) (if (cons? x16302) (let ((w16303 (car x16302)) (x16304 (cdr x16302))) (let ((m w16303)) (if (cons? x16304) (let ((w16305 (car x16304)) (x16306 (cdr x16304))) (let ((p w16305)) (if (null? x16306) (if (cons? x16298) (let ((w16307 (car x16298)) (x16308 (cdr x16298))) (let ((g+s w16307)) (if (cons? x16308) (let ((w16309 (car x16308)) (x16310 (cdr x16308))) (let ((sk w16309)) (if (cons? x16310) (let ((w16311 (car x16310)) (x16312 (cdr x16310))) (let ((fk w16311)) (if (cons? x16312) (let ((w16313 (car x16312)) (x16314 (cdr x16312))) (let ((i w16313)) (if (null? x16314) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote m) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) (((unquote m) (unquote v)) ((setter (unquote m)) (unquote v))) (unquote sk) (unquote fk) (unquote i)))))) (fail16193)))) (fail16193)))) (fail16193)))) (fail16193)))) (fail16193)) (fail16193)))) (fail16193)))) (fail16193)) (fail16193))) (fail16193)) (fail16193))) (fail16193))) (fail16193)))) (fail16193)))) (fail16193)))))) (if (cons? v16172) (let ((w16315 (car v16172)) (x16316 (cdr v16172))) (let ((abs w16315)) (if (cons? x16316) (let ((w16317 (car x16316)) (x16318 (cdr x16316))) (let ((v w16317)) (if (cons? x16318) (let ((w16319 (car x16318)) (x16320 (cdr x16318))) (if (cons? w16319) (let ((w16321 (car w16319)) (x16322 (cdr w16319))) (if (binary= w16321 (quote $)) (if (cons? x16322) (let ((w16323 (car x16322)) (x16324 (cdr x16322))) (let ((nn w16323)) (let ((p x16324)) (if (list? p) (if (cons? x16320) (let ((w16328 (car x16320)) (x16329 (cdr x16320))) (let ((g+s w16328)) (if (cons? x16329) (let ((w16330 (car x16329)) (x16331 (cdr x16329))) (let ((sk w16330)) (if (cons? x16331) (let ((w16332 (car x16331)) (x16333 (cdr x16331))) (let ((fk w16332)) (if (cons? x16333) (let ((w16334 (car x16333)) (x16335 (cdr x16333))) (let ((i w16334)) (if (null? x16335) (progn (quasiquote (match-$ (unquote abs) (and) (unquote nn) (unquote p) (unquote v) (unquote sk) (unquote fk) (unquote i)))) (fail16192)))) (fail16192)))) (fail16192)))) (fail16192)))) (fail16192)) (fail16192))))) (fail16192)) (fail16192))) (fail16192))) (fail16192)))) (fail16192)))) (fail16192)))))) (if (cons? v16172) (let ((w16336 (car v16172)) (x16337 (cdr v16172))) (let ((abs w16336)) (if (cons? x16337) (let ((w16338 (car x16337)) (x16339 (cdr x16337))) (let ((v w16338)) (if (cons? x16339) (let ((w16340 (car x16339)) (x16341 (cdr x16339))) (if (cons? w16340) (let ((w16342 (car w16340)) (x16343 (cdr w16340))) (if (binary= w16342 (quote $$)) (if (cons? x16343) (let ((w16344 (car x16343)) (x16345 (cdr x16343))) (let ((nn w16344)) (let ((p x16345)) (if (list? p) (if (cons? x16341) (let ((w16349 (car x16341)) (x16350 (cdr x16341))) (let ((g+s w16349)) (if (cons? x16350) (let ((w16351 (car x16350)) (x16352 (cdr x16350))) (let ((sk w16351)) (if (cons? x16352) (let ((w16353 (car x16352)) (x16354 (cdr x16352))) (let ((fk w16353)) (if (cons? x16354) (let ((w16355 (car x16354)) (x16356 (cdr x16354))) (let ((i w16355)) (if (null? x16356) (progn (if (symbol? nn) (progn (quasiquote (if ((unquote (concatenate nn (quote ?))) (unquote v)) (match-$$ (unquote abs) (and) (unquote nn) (unquote p) (unquote v) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))) (error <condition> "only symbols in $"))) (fail16191)))) (fail16191)))) (fail16191)))) (fail16191)))) (fail16191)) (fail16191))))) (fail16191)) (fail16191))) (fail16191))) (fail16191)))) (fail16191)))) (fail16191)))))) (if (cons? v16172) (let ((w16357 (car v16172)) (x16358 (cdr v16172))) (let ((abs w16357)) (if (cons? x16358) (let ((w16359 (car x16358)) (x16360 (cdr x16358))) (let ((v w16359)) (if (cons? x16360) (let ((w16361 (car x16360)) (x16362 (cdr x16360))) (if (cons? w16361) (let ((w16363 (car w16361)) (x16364 (cdr w16361))) (if (binary= w16363 (quote $$)) (if (cons? x16364) (let ((w16365 (car x16364)) (x16366 (cdr x16364))) (let ((n w16365)) (if (null? x16366) (if (cons? x16362) (let ((w16367 (car x16362)) (x16368 (cdr x16362))) (let ((g-s w16367)) (if (cons? x16368) (let ((w16369 (car x16368)) (x16370 (cdr x16368))) (let ((sk w16369)) (if (cons? x16370) (let ((w16371 (car x16370)) (x16372 (cdr x16370))) (let ((fk w16371)) (if (cons? x16372) (let ((w16373 (car x16372)) (x16374 (cdr x16372))) (let ((i w16373)) (if (null? x16374) (progn (quasiquote (if ((unquote (concatenate n (quote ?))) (unquote v)) (insert-abs (unquote abs) (unquote sk)) (insert-abs (unquote abs) (unquote fk))))) (fail16190)))) (fail16190)))) (fail16190)))) (fail16190)))) (fail16190)) (fail16190)))) (fail16190)) (fail16190))) (fail16190))) (fail16190)))) (fail16190)))) (fail16190)))))) (if (cons? v16172) (let ((w16375 (car v16172)) (x16376 (cdr v16172))) (let ((abs w16375)) (if (cons? x16376) (let ((w16377 (car x16376)) (x16378 (cdr x16376))) (let ((v w16377)) (if (cons? x16378) (let ((w16379 (car x16378)) (x16380 (cdr x16378))) (if (cons? w16379) (let ((w16381 (car w16379)) (x16382 (cdr w16379))) (if (binary= w16381 (quote ?)) (if (cons? x16382) (let ((w16383 (car x16382)) (x16384 (cdr x16382))) (let ((pred w16383)) (let ((p x16384)) (if (cons? x16380) (let ((w16385 (car x16380)) (x16386 (cdr x16380))) (let ((g+s w16385)) (if (cons? x16386) (let ((w16387 (car x16386)) (x16388 (cdr x16386))) (let ((sk w16387)) (if (cons? x16388) (let ((w16389 (car x16388)) (x16390 (cdr x16388))) (let ((fk w16389)) (if (cons? x16390) (let ((w16391 (car x16390)) (x16392 (cdr x16390))) (let ((i w16391)) (if (null? x16392) (progn (quasiquote (if ((unquote pred) (unquote v)) (match-one (unquote abs) (unquote v) (and (unquote-splicing p)) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))) (fail16189)))) (fail16189)))) (fail16189)))) (fail16189)))) (fail16189))))) (fail16189)) (fail16189))) (fail16189))) (fail16189)))) (fail16189)))) (fail16189)))))) (if (cons? v16172) (let ((w16393 (car v16172)) (x16394 (cdr v16172))) (let ((abs w16393)) (if (cons? x16394) (let ((w16395 (car x16394)) (x16396 (cdr x16394))) (let ((v w16395)) (if (cons? x16396) (let ((w16397 (car x16396)) (x16398 (cdr x16396))) (if (cons? w16397) (let ((w16399 (car w16397)) (x16400 (cdr w16397))) (if (binary= w16399 (quote set)) (if (cons? x16400) (let ((w16401 (car x16400)) (x16402 (cdr x16400))) (let ((setter w16401)) (if (null? x16402) (if (cons? x16398) (let ((w16403 (car x16398)) (x16404 (cdr x16398))) (if (cons? w16403) (let ((w16405 (car w16403)) (x16406 (cdr w16403))) (let ((g w16405)) (if (cons? x16406) (let ((w16407 (car x16406)) (x16408 (cdr x16406))) (let ((s w16407)) (if (list? s) (if (null? x16408) (if (cons? x16404) (let ((w16412 (car x16404)) (x16413 (cdr x16404))) (let ((sk w16412)) (if (list? sk) (if (cons? x16413) (let ((w16417 (car x16413)) (x16418 (cdr x16413))) (let ((fk w16417)) (if (cons? x16418) (let ((w16419 (car x16418)) (x16420 (cdr x16418))) (let ((i w16419)) (if (null? x16420) (progn (let ((x (gensym "x"))) (quasiquote (let (((unquote setter) (lambda ((unquote x)) ((unquote-splicing s) (unquote x))))) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))))) (fail16188)))) (fail16188)))) (fail16188)) (fail16188)))) (fail16188)) (fail16188)) (fail16188)))) (fail16188)))) (fail16188))) (fail16188)) (fail16188)))) (fail16188)) (fail16188))) (fail16188))) (fail16188)))) (fail16188)))) (fail16188)))))) (if (cons? v16172) (let ((w16421 (car v16172)) (x16422 (cdr v16172))) (let ((abs w16421)) (if (cons? x16422) (let ((w16423 (car x16422)) (x16424 (cdr x16422))) (let ((v w16423)) (if (cons? x16424) (let ((w16425 (car x16424)) (x16426 (cdr x16424))) (if (cons? w16425) (let ((w16427 (car w16425)) (x16428 (cdr w16425))) (if (binary= w16427 (quote get)) (if (cons? x16428) (let ((w16429 (car x16428)) (x16430 (cdr x16428))) (let ((getter w16429)) (if (null? x16430) (if (cons? x16426) (let ((w16431 (car x16426)) (x16432 (cdr x16426))) (if (cons? w16431) (let ((w16433 (car w16431)) (x16434 (cdr w16431))) (let ((g w16433)) (if (cons? x16434) (let ((w16435 (car x16434)) (x16436 (cdr x16434))) (let ((s w16435)) (if (null? x16436) (if (cons? x16432) (let ((w16437 (car x16432)) (x16438 (cdr x16432))) (let ((sk w16437)) (if (list? sk) (if (cons? x16438) (let ((w16442 (car x16438)) (x16443 (cdr x16438))) (let ((fk w16442)) (if (cons? x16443) (let ((w16444 (car x16443)) (x16445 (cdr x16443))) (let ((i w16444)) (if (null? x16445) (progn (quasiquote (let (((unquote getter) (lambda () (unquote g)))) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))))) (fail16187)))) (fail16187)))) (fail16187)) (fail16187)))) (fail16187)) (fail16187)))) (fail16187)))) (fail16187))) (fail16187)) (fail16187)))) (fail16187)) (fail16187))) (fail16187))) (fail16187)))) (fail16187)))) (fail16187)))))) (if (cons? v16172) (let ((w16446 (car v16172)) (x16447 (cdr v16172))) (let ((abs w16446)) (if (cons? x16447) (let ((w16448 (car x16447)) (x16449 (cdr x16447))) (let ((v w16448)) (if (cons? x16449) (let ((w16450 (car x16449)) (x16451 (cdr x16449))) (if (cons? w16450) (let ((w16452 (car w16450)) (x16453 (cdr w16450))) (if (binary= w16452 (quote not)) (if (cons? x16453) (let ((w16454 (car x16453)) (x16455 (cdr x16453))) (let ((p w16454)) (if (null? x16455) (if (cons? x16451) (let ((w16456 (car x16451)) (x16457 (cdr x16451))) (let ((g+s w16456)) (if (cons? x16457) (let ((w16458 (car x16457)) (x16459 (cdr x16457))) (let ((sk w16458)) (if (list? sk) (if (cons? x16459) (let ((w16463 (car x16459)) (x16464 (cdr x16459))) (if (cons? w16463) (let ((w16465 (car w16463)) (x16466 (cdr w16463))) (let ((fk w16465)) (let ((fkk x16466)) (if (list? fkk) (if (cons? x16464) (let ((w16470 (car x16464)) (x16471 (cdr x16464))) (let ((i w16470)) (if (null? x16471) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-drop-ids ((unquote fk) (unquote abs) (unquote-splicing fkk))) ((unquote-splicing sk) i) i))) (fail16186)))) (fail16186)) (fail16186))))) (fail16186))) (fail16186)) (fail16186)))) (fail16186)))) (fail16186)) (fail16186)))) (fail16186)) (fail16186))) (fail16186))) (fail16186)))) (fail16186)))) (fail16186)))))) (if (cons? v16172) (let ((w16472 (car v16172)) (x16473 (cdr v16172))) (let ((abs w16472)) (if (cons? x16473) (let ((w16474 (car x16473)) (x16475 (cdr x16473))) (let ((v w16474)) (if (cons? x16475) (let ((w16476 (car x16475)) (x16477 (cdr x16475))) (if (cons? w16476) (let ((w16478 (car w16476)) (x16479 (cdr w16476))) (if (binary= w16478 (quote cond)) (if (cons? x16479) (let ((w16480 (car x16479)) (x16481 (cdr x16479))) (let ((p w16480)) (let ((ps x16481)) (if (list? ps) (if (cons? x16477) (let ((w16485 (car x16477)) (x16486 (cdr x16477))) (let ((g+s w16485)) (if (cons? x16486) (let ((w16487 (car x16486)) (x16488 (cdr x16486))) (let ((sk w16487)) (if (cons? x16488) (let ((w16489 (car x16488)) (x16490 (cdr x16488))) (let ((fk w16489)) (if (cons? x16490) (let ((w16491 (car x16490)) (x16492 (cdr x16490))) (let ((i w16491)) (if (null? x16492) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (abs-drop (match-one (unquote abs) (unquote v) (cond (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i)))) (fail16185)))) (fail16185)))) (fail16185)))) (fail16185)))) (fail16185)) (fail16185))))) (fail16185)) (fail16185))) (fail16185))) (fail16185)))) (fail16185)))) (fail16185)))))) (if (cons? v16172) (let ((w16493 (car v16172)) (x16494 (cdr v16172))) (let ((abs w16493)) (if (cons? x16494) (let ((w16495 (car x16494)) (x16496 (cdr x16494))) (let ((v w16495)) (if (cons? x16496) (let ((w16497 (car x16496)) (x16498 (cdr x16496))) (if (cons? w16497) (let ((w16499 (car w16497)) (x16500 (cdr w16497))) (if (binary= w16499 (quote cond)) (if (cons? x16500) (let ((w16501 (car x16500)) (x16502 (cdr x16500))) (let ((p w16501)) (if (null? x16502) (let ((x x16498)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail16184)))) (fail16184)) (fail16184))) (fail16184))) (fail16184)))) (fail16184)))) (fail16184)))))) (if (cons? v16172) (let ((w16503 (car v16172)) (x16504 (cdr v16172))) (let ((abs w16503)) (if (cons? x16504) (let ((w16505 (car x16504)) (x16506 (cdr x16504))) (let ((v w16505)) (if (cons? x16506) (let ((w16507 (car x16506)) (x16508 (cdr x16506))) (if (cons? w16507) (let ((w16509 (car w16507)) (x16510 (cdr w16507))) (if (binary= w16509 (quote cond)) (if (null? x16510) (if (cons? x16508) (let ((w16511 (car x16508)) (x16512 (cdr x16508))) (let ((g+s w16511)) (if (cons? x16512) (let ((w16513 (car x16512)) (x16514 (cdr x16512))) (let ((sk w16513)) (if (cons? x16514) (let ((w16515 (car x16514)) (x16516 (cdr x16514))) (let ((fk w16515)) (if (cons? x16516) (let ((w16517 (car x16516)) (x16518 (cdr x16516))) (let ((i w16517)) (if (null? x16518) (progn (quasiquote (insert-abs (unquote abs) (unquote fk)))) (fail16183)))) (fail16183)))) (fail16183)))) (fail16183)))) (fail16183)) (fail16183)) (fail16183))) (fail16183))) (fail16183)))) (fail16183)))) (fail16183)))))) (if (cons? v16172) (let ((w16519 (car v16172)) (x16520 (cdr v16172))) (let ((abs w16519)) (if (cons? x16520) (let ((w16521 (car x16520)) (x16522 (cdr x16520))) (let ((v w16521)) (if (cons? x16522) (let ((w16523 (car x16522)) (x16524 (cdr x16522))) (if (cons? w16523) (let ((w16525 (car w16523)) (x16526 (cdr w16523))) (if (binary= w16525 (quote or)) (let ((p x16526)) (if (list? p) (if (cons? x16524) (let ((w16530 (car x16524)) (x16531 (cdr x16524))) (let ((g+s w16530)) (if (cons? x16531) (let ((w16532 (car x16531)) (x16533 (cdr x16531))) (let ((sk w16532)) (if (cons? x16533) (let ((w16534 (car x16533)) (x16535 (cdr x16533))) (let ((fk w16534)) (if (cons? x16535) (let ((w16536 (car x16535)) (x16537 (cdr x16535))) (let ((i w16536)) (if (null? x16537) (progn (quasiquote (match-extract-vars (unquote abs) (or (unquote-splicing p)) (abs-drop (match-gen-or (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail16182)))) (fail16182)))) (fail16182)))) (fail16182)))) (fail16182)) (fail16182))) (fail16182))) (fail16182))) (fail16182)))) (fail16182)))) (fail16182)))))) (if (cons? v16172) (let ((w16538 (car v16172)) (x16539 (cdr v16172))) (let ((abs w16538)) (if (cons? x16539) (let ((w16540 (car x16539)) (x16541 (cdr x16539))) (let ((v w16540)) (if (cons? x16541) (let ((w16542 (car x16541)) (x16543 (cdr x16541))) (if (cons? w16542) (let ((w16544 (car w16542)) (x16545 (cdr w16542))) (if (binary= w16544 (quote or)) (if (cons? x16545) (let ((w16546 (car x16545)) (x16547 (cdr x16545))) (let ((p w16546)) (if (null? x16547) (let ((x x16543)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail16181)))) (fail16181)) (fail16181))) (fail16181))) (fail16181)))) (fail16181)))) (fail16181)))))) (if (cons? v16172) (let ((w16548 (car v16172)) (x16549 (cdr v16172))) (let ((abs w16548)) (if (cons? x16549) (let ((w16550 (car x16549)) (x16551 (cdr x16549))) (let ((v w16550)) (if (cons? x16551) (let ((w16552 (car x16551)) (x16553 (cdr x16551))) (if (cons? w16552) (let ((w16554 (car w16552)) (x16555 (cdr w16552))) (if (binary= w16554 (quote or)) (if (null? x16555) (if (cons? x16553) (let ((w16556 (car x16553)) (x16557 (cdr x16553))) (let ((g+s w16556)) (if (cons? x16557) (let ((w16558 (car x16557)) (x16559 (cdr x16557))) (let ((sk w16558)) (if (cons? x16559) (let ((w16560 (car x16559)) (x16561 (cdr x16559))) (let ((fk w16560)) (if (cons? x16561) (let ((w16562 (car x16561)) (x16563 (cdr x16561))) (let ((i w16562)) (if (null? x16563) (progn (quasiquote (insert-abs (unquote abs) (unquote fk)))) (fail16180)))) (fail16180)))) (fail16180)))) (fail16180)))) (fail16180)) (fail16180)) (fail16180))) (fail16180))) (fail16180)))) (fail16180)))) (fail16180)))))) (if (cons? v16172) (let ((w16564 (car v16172)) (x16565 (cdr v16172))) (let ((abs w16564)) (if (cons? x16565) (let ((w16566 (car x16565)) (x16567 (cdr x16565))) (let ((v w16566)) (if (cons? x16567) (let ((w16568 (car x16567)) (x16569 (cdr x16567))) (if (cons? w16568) (let ((w16570 (car w16568)) (x16571 (cdr w16568))) (if (binary= w16570 (quote and)) (if (cons? x16571) (let ((w16572 (car x16571)) (x16573 (cdr x16571))) (let ((p w16572)) (let ((q x16573)) (if (list? q) (if (cons? x16569) (let ((w16577 (car x16569)) (x16578 (cdr x16569))) (let ((g+s w16577)) (if (cons? x16578) (let ((w16579 (car x16578)) (x16580 (cdr x16578))) (let ((sk w16579)) (if (cons? x16580) (let ((w16581 (car x16580)) (x16582 (cdr x16580))) (let ((fk w16581)) (if (cons? x16582) (let ((w16583 (car x16582)) (x16584 (cdr x16582))) (let ((i w16583)) (if (null? x16584) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-one (unquote v) (and (unquote-splicing q)) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)))) (fail16179)))) (fail16179)))) (fail16179)))) (fail16179)))) (fail16179)) (fail16179))))) (fail16179)) (fail16179))) (fail16179))) (fail16179)))) (fail16179)))) (fail16179)))))) (if (cons? v16172) (let ((w16585 (car v16172)) (x16586 (cdr v16172))) (let ((abs w16585)) (if (cons? x16586) (let ((w16587 (car x16586)) (x16588 (cdr x16586))) (let ((v w16587)) (if (cons? x16588) (let ((w16589 (car x16588)) (x16590 (cdr x16588))) (if (cons? w16589) (let ((w16591 (car w16589)) (x16592 (cdr w16589))) (if (binary= w16591 (quote and)) (if (null? x16592) (if (cons? x16590) (let ((w16593 (car x16590)) (x16594 (cdr x16590))) (let ((g+s w16593)) (if (cons? x16594) (let ((w16595 (car x16594)) (x16596 (cdr x16594))) (let ((sk w16595)) (if (list? sk) (if (cons? x16596) (let ((w16600 (car x16596)) (x16601 (cdr x16596))) (let ((fk w16600)) (if (cons? x16601) (let ((w16602 (car x16601)) (x16603 (cdr x16601))) (let ((i w16602)) (if (null? x16603) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail16178)))) (fail16178)))) (fail16178)) (fail16178)))) (fail16178)))) (fail16178)) (fail16178)) (fail16178))) (fail16178))) (fail16178)))) (fail16178)))) (fail16178)))))) (if (cons? v16172) (let ((w16604 (car v16172)) (x16605 (cdr v16172))) (let ((abs w16604)) (if (cons? x16605) (let ((w16606 (car x16605)) (x16607 (cdr x16605))) (let ((v w16606)) (if (cons? x16607) (let ((w16608 (car x16607)) (x16609 (cdr x16607))) (if (cons? w16608) (let ((w16610 (car w16608)) (x16611 (cdr w16608))) (if (binary= w16610 (quote quasiquote)) (if (cons? x16611) (let ((w16612 (car x16611)) (x16613 (cdr x16611))) (let ((p w16612)) (if (null? x16613) (let ((x x16609)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail16177)))) (fail16177)) (fail16177))) (fail16177))) (fail16177)))) (fail16177)))) (fail16177)))))) (if (cons? v16172) (let ((w16614 (car v16172)) (x16615 (cdr v16172))) (let ((a w16614)) (if (cons? w16614) (let ((w16616 (car w16614)) (x16617 (cdr w16614))) (let ((abs w16616)) (if (cons? x16617) (let ((w16618 (car x16617)) (x16619 (cdr x16617))) (if (cons? w16618) (let ((w16620 (car w16618)) (x16621 (cdr w16618))) (if (cons? w16620) (let ((w16622 (car w16620)) (x16623 (cdr w16620))) (let ((ccar w16622)) (if (cons? x16623) (let ((w16624 (car x16623)) (x16625 (cdr x16623))) (let ((ccdr w16624)) (if (cons? x16625) (let ((w16626 (car x16625)) (x16627 (cdr x16625))) (let ((pcons? w16626)) (if (cons? x16627) (let ((w16628 (car x16627)) (x16629 (cdr x16627))) (let ((qnull? w16628)) (if (cons? x16629) (let ((w16630 (car x16629)) (x16631 (cdr x16629))) (let ((qbinary= w16630)) (if (null? x16631) (if (cons? x16621) (let ((w16632 (car x16621)) (x16633 (cdr x16621))) (let ((rr w16632)) (if (null? x16633) (if (null? x16619) (if (cons? x16615) (let ((w16634 (car x16615)) (x16635 (cdr x16615))) (let ((v w16634)) (if (cons? x16635) (let ((w16636 (car x16635)) (x16637 (cdr x16635))) (if (cons? w16636) (let ((w16638 (car w16636)) (x16639 (cdr w16636))) (if (cons? w16638) (let ((w16640 (car w16638)) (x16641 (cdr w16638))) (if (binary= w16640 (quote unquote-splicing)) (if (cons? x16641) (let ((w16642 (car x16641)) (x16643 (cdr x16641))) (let ((p w16642)) (if (null? x16643) (let ((ps x16639)) (if (cons? x16637) (let ((w16644 (car x16637)) (x16645 (cdr x16637))) (let ((g+s w16644)) (if (cons? x16645) (let ((w16646 (car x16645)) (x16647 (cdr x16645))) (let ((sk w16646)) (if (cons? x16647) (let ((w16648 (car x16647)) (x16649 (cdr x16647))) (let ((fk w16648)) (if (cons? x16649) (let ((w16650 (car x16649)) (x16651 (cdr x16649))) (let ((i w16650)) (if (null? x16651) (progn (let ((loop (gensym "loop")) (vv (gensym "v")) (pp (gensym "p"))) (quasiquote (recur (unquote loop) (((unquote vv) (unquote v)) ((unquote pp) (unquote p))) (if (cons? (unquote pp)) (if (and ((unquote pcons?) (unquote vv)) ((unquote qbinary=) ((unquote ccar) (unquote vv)) (car (unquote pp)))) ((unquote loop) ((unquote ccdr) (unquote vv)) (cdr (unquote pp))) (insert-abs (unquote a) (unquote fk))) (match-one (unquote a) (unquote vv) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))))) (fail16176)))) (fail16176)))) (fail16176)))) (fail16176)))) (fail16176))) (fail16176)))) (fail16176)) (fail16176))) (fail16176))) (fail16176))) (fail16176)))) (fail16176)) (fail16176)) (fail16176)))) (fail16176)) (fail16176)))) (fail16176)))) (fail16176)))) (fail16176)))) (fail16176)))) (fail16176))) (fail16176))) (fail16176)))) (fail16176)))) (fail16176)))))) (if (cons? v16172) (let ((w16652 (car v16172)) (x16653 (cdr v16172))) (let ((a w16652)) (if (cons? w16652) (let ((w16654 (car w16652)) (x16655 (cdr w16652))) (let ((qabs w16654)) (if (cons? x16655) (let ((w16656 (car x16655)) (x16657 (cdr x16655))) (if (cons? w16656) (let ((w16658 (car w16656)) (x16659 (cdr w16656))) (if (cons? w16658) (let ((w16660 (car w16658)) (x16661 (cdr w16658))) (let ((qcar w16660)) (if (cons? x16661) (let ((w16662 (car x16661)) (x16663 (cdr x16661))) (let ((qcdr w16662)) (if (cons? x16663) (let ((w16664 (car x16663)) (x16665 (cdr x16663))) (let ((qcons? w16664)) (if (cons? x16665) (let ((w16666 (car x16665)) (x16667 (cdr x16665))) (let ((qnull? w16666)) (if (cons? x16667) (let ((w16668 (car x16667)) (x16669 (cdr x16667))) (let ((qbinary= w16668)) (if (null? x16669) (if (cons? x16659) (let ((w16670 (car x16659)) (x16671 (cdr x16659))) (let ((pp w16670)) (if (null? x16671) (if (null? x16657) (if (cons? x16653) (let ((w16672 (car x16653)) (x16673 (cdr x16653))) (let ((v w16672)) (if (cons? x16673) (let ((w16674 (car x16673)) (x16675 (cdr x16673))) (if (cons? w16674) (let ((w16676 (car w16674)) (x16677 (cdr w16674))) (if (binary= w16676 (quote unquote)) (if (cons? x16677) (let ((w16678 (car x16677)) (x16679 (cdr x16677))) (let ((p w16678)) (if (null? x16679) (if (cons? x16675) (let ((w16680 (car x16675)) (x16681 (cdr x16675))) (let ((g+s w16680)) (if (cons? x16681) (let ((w16682 (car x16681)) (x16683 (cdr x16681))) (let ((sk w16682)) (if (list? sk) (if (cons? x16683) (let ((w16687 (car x16683)) (x16688 (cdr x16683))) (let ((fk w16687)) (if (cons? x16688) (let ((w16689 (car x16688)) (x16690 (cdr x16688))) (let ((i w16689)) (if (null? x16690) (progn (quasiquote (if ((unquote qbinary=) (unquote v) (unquote p)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail16175)))) (fail16175)))) (fail16175)) (fail16175)))) (fail16175)))) (fail16175)) (fail16175)))) (fail16175)) (fail16175))) (fail16175))) (fail16175)))) (fail16175)) (fail16175)) (fail16175)))) (fail16175)) (fail16175)))) (fail16175)))) (fail16175)))) (fail16175)))) (fail16175)))) (fail16175))) (fail16175))) (fail16175)))) (fail16175)))) (fail16175)))))) (if (cons? v16172) (let ((w16691 (car v16172)) (x16692 (cdr v16172))) (let ((a w16691)) (if (cons? w16691) (let ((w16693 (car w16691)) (x16694 (cdr w16691))) (let ((qabs w16693)) (if (cons? x16694) (let ((w16695 (car x16694)) (x16696 (cdr x16694))) (if (cons? w16695) (let ((w16697 (car w16695)) (x16698 (cdr w16695))) (if (cons? w16697) (let ((w16699 (car w16697)) (x16700 (cdr w16697))) (let ((qcar w16699)) (if (cons? x16700) (let ((w16701 (car x16700)) (x16702 (cdr x16700))) (let ((qcdr w16701)) (if (cons? x16702) (let ((w16703 (car x16702)) (x16704 (cdr x16702))) (let ((qcons? w16703)) (if (cons? x16704) (let ((w16705 (car x16704)) (x16706 (cdr x16704))) (let ((qnull? w16705)) (if (cons? x16706) (let ((w16707 (car x16706)) (x16708 (cdr x16706))) (let ((qbinary= w16707)) (if (null? x16708) (if (cons? x16698) (let ((w16709 (car x16698)) (x16710 (cdr x16698))) (let ((pp w16709)) (if (null? x16710) (if (null? x16696) (if (cons? x16692) (let ((w16711 (car x16692)) (x16712 (cdr x16692))) (let ((v w16711)) (if (cons? x16712) (let ((w16713 (car x16712)) (x16714 (cdr x16712))) (if (cons? w16713) (let ((w16715 (car w16713)) (x16716 (cdr w16713))) (if (binary= w16715 (quote quote)) (if (cons? x16716) (let ((w16717 (car x16716)) (x16718 (cdr x16716))) (let ((p w16717)) (if (null? x16718) (if (cons? x16714) (let ((w16719 (car x16714)) (x16720 (cdr x16714))) (let ((g+s w16719)) (if (cons? x16720) (let ((w16721 (car x16720)) (x16722 (cdr x16720))) (let ((sk w16721)) (if (list? sk) (if (cons? x16722) (let ((w16726 (car x16722)) (x16727 (cdr x16722))) (let ((fk w16726)) (if (cons? x16727) (let ((w16728 (car x16727)) (x16729 (cdr x16727))) (let ((i w16728)) (if (null? x16729) (progn (quasiquote (if ((unquote qbinary=) (unquote v) (quote (unquote p))) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail16174)))) (fail16174)))) (fail16174)) (fail16174)))) (fail16174)))) (fail16174)) (fail16174)))) (fail16174)) (fail16174))) (fail16174))) (fail16174)))) (fail16174)) (fail16174)) (fail16174)))) (fail16174)) (fail16174)))) (fail16174)))) (fail16174)))) (fail16174)))) (fail16174)))) (fail16174))) (fail16174))) (fail16174)))) (fail16174)))) (fail16174)))))) (if (cons? v16172) (let ((w16730 (car v16172)) (x16731 (cdr v16172))) (let ((a w16730)) (if (cons? w16730) (let ((w16732 (car w16730)) (x16733 (cdr w16730))) (let ((qabs w16732)) (if (cons? x16733) (let ((w16734 (car x16733)) (x16735 (cdr x16733))) (if (cons? w16734) (let ((w16736 (car w16734)) (x16737 (cdr w16734))) (if (cons? w16736) (let ((w16738 (car w16736)) (x16739 (cdr w16736))) (let ((qcar w16738)) (if (cons? x16739) (let ((w16740 (car x16739)) (x16741 (cdr x16739))) (let ((qcdr w16740)) (if (cons? x16741) (let ((w16742 (car x16741)) (x16743 (cdr x16741))) (let ((qcons? w16742)) (if (cons? x16743) (let ((w16744 (car x16743)) (x16745 (cdr x16743))) (let ((qnull? w16744)) (if (cons? x16745) (let ((w16746 (car x16745)) (x16747 (cdr x16745))) (let ((qbinary= w16746)) (if (null? x16747) (if (cons? x16737) (let ((w16748 (car x16737)) (x16749 (cdr x16737))) (let ((pp w16748)) (if (null? x16749) (if (null? x16735) (if (cons? x16731) (let ((w16750 (car x16731)) (x16751 (cdr x16731))) (let ((v w16750)) (if (cons? x16751) (let ((w16752 (car x16751)) (x16753 (cdr x16751))) (if (null? w16752) (if (cons? x16753) (let ((w16754 (car x16753)) (x16755 (cdr x16753))) (let ((g+s w16754)) (if (cons? x16755) (let ((w16756 (car x16755)) (x16757 (cdr x16755))) (let ((sk w16756)) (if (list? sk) (if (cons? x16757) (let ((w16761 (car x16757)) (x16762 (cdr x16757))) (let ((fk w16761)) (if (cons? x16762) (let ((w16763 (car x16762)) (x16764 (cdr x16762))) (let ((i w16763)) (if (null? x16764) (progn (quasiquote (if ((unquote qnull?) (unquote v)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail16173)))) (fail16173)))) (fail16173)) (fail16173)))) (fail16173)))) (fail16173)) (fail16173))) (fail16173)))) (fail16173)) (fail16173)) (fail16173)))) (fail16173)) (fail16173)))) (fail16173)))) (fail16173)))) (fail16173)))) (fail16173)))) (fail16173))) (fail16173))) (fail16173)))) (fail16173)))) (fail16173))))) (defsyntax match-gen-or x (let ((v16765 x)) (let ((fail16766 (lambda () (error <condition> "no matching pattern")))) (if (cons? v16765) (let ((w16767 (car v16765)) (x16768 (cdr v16765))) (let ((abs w16767)) (if (cons? x16768) (let ((w16769 (car x16768)) (x16770 (cdr x16768))) (let ((v w16769)) (if (cons? x16770) (let ((w16771 (car x16770)) (x16772 (cdr x16770))) (let ((p w16771)) (if (cons? x16772) (let ((w16773 (car x16772)) (x16774 (cdr x16772))) (let ((g+s w16773)) (if (cons? x16774) (let ((w16775 (car x16774)) (x16776 (cdr x16774))) (let ((sk w16775)) (if (list? sk) (if (cons? x16776) (let ((w16780 (car x16776)) (x16781 (cdr x16776))) (let ((fk w16780)) (if (cons? x16781) (let ((w16782 (car x16781)) (x16783 (cdr x16781))) (let ((i w16782)) (if (list? i) (if (cons? x16783) (let ((w16787 (car x16783)) (x16788 (cdr x16783))) (letfuns ((loop (ls16792 p-ls16790 p-ls16789) (if (null? ls16792) (progn (let ((id-ls (reverse p-ls16790)) (id (reverse p-ls16789))) (if (null? x16788) (progn (let ((sk2 (gensym "sk2"))) (quasiquote (let (((unquote sk2) (lambda (unquote id) (insert-abs (unquote abs) ((unquote-splicing sk) ((unquote-splicing i) (unquote-splicing id))))))) (match-gen-or-step (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-drop-ids ((unquote sk2) (unquote-splicing id))) (unquote fk) i))))) (fail16766)))) (if (cons? ls16792) (progn (let ((w16793 (car ls16792))) (if (cons? w16793) (let ((w16794 (car w16793)) (x16795 (cdr w16793))) (let ((id w16794)) (if (cons? x16795) (let ((w16796 (car x16795)) (x16797 (cdr x16795))) (let ((id-ls w16796)) (if (null? x16797) (loop (cdr ls16792) (cons id-ls p-ls16790) (cons id p-ls16789)) (fail16766)))) (fail16766)))) (fail16766)))) (if else (progn (fail16766)) (cond)))))) (loop w16787 (quote ()) (quote ())))) (fail16766)) (fail16766)))) (fail16766)))) (fail16766)) (fail16766)))) (fail16766)))) (fail16766)))) (fail16766)))) (fail16766)))) (fail16766))))) (defsyntax match-gen-or-step x (let ((v16798 x)) (let ((fail16799 (lambda () (let ((fail16800 (lambda () (let ((fail16801 (lambda () (error <condition> "no matching pattern")))) (if (cons? v16798) (let ((w16802 (car v16798)) (x16803 (cdr v16798))) (let ((abs w16802)) (if (cons? x16803) (let ((w16804 (car x16803)) (x16805 (cdr x16803))) (let ((v w16804)) (if (cons? x16805) (let ((w16806 (car x16805)) (x16807 (cdr x16805))) (if (cons? w16806) (let ((w16808 (car w16806)) (x16809 (cdr w16806))) (let ((p w16808)) (let ((q x16809)) (if (cons? x16807) (let ((w16810 (car x16807)) (x16811 (cdr x16807))) (let ((g+s w16810)) (if (cons? x16811) (let ((w16812 (car x16811)) (x16813 (cdr x16811))) (let ((sk w16812)) (if (cons? x16813) (let ((w16814 (car x16813)) (x16815 (cdr x16813))) (let ((fk w16814)) (if (cons? x16815) (let ((w16816 (car x16815)) (x16817 (cdr x16815))) (let ((i w16816)) (if (null? x16817) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (match-gen-or-step (unquote v) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i)))) (fail16801)))) (fail16801)))) (fail16801)))) (fail16801)))) (fail16801))))) (fail16801))) (fail16801)))) (fail16801)))) (fail16801)))))) (if (cons? v16798) (let ((w16818 (car v16798)) (x16819 (cdr v16798))) (let ((abs w16818)) (if (cons? x16819) (let ((w16820 (car x16819)) (x16821 (cdr x16819))) (let ((v w16820)) (if (cons? x16821) (let ((w16822 (car x16821)) (x16823 (cdr x16821))) (if (cons? w16822) (let ((w16824 (car w16822)) (x16825 (cdr w16822))) (let ((p w16824)) (if (null? x16825) (let ((x x16823)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail16800)))) (fail16800))) (fail16800)))) (fail16800)))) (fail16800)))))) (if (cons? v16798) (let ((w16826 (car v16798)) (x16827 (cdr v16798))) (let ((abs w16826)) (if (cons? x16827) (let ((w16828 (car x16827)) (x16829 (cdr x16827))) (let ((v w16828)) (if (cons? x16829) (let ((w16830 (car x16829)) (x16831 (cdr x16829))) (if (null? w16830) (if (cons? x16831) (let ((w16832 (car x16831)) (x16833 (cdr x16831))) (let ((g+s w16832)) (if (cons? x16833) (let ((w16834 (car x16833)) (x16835 (cdr x16833))) (let ((sk w16834)) (if (cons? x16835) (let ((w16836 (car x16835)) (x16837 (cdr x16835))) (let ((fk w16836)) (let ((x x16837)) (progn (quasiquote (insert-abs (unquote abs) (unquote fk))))))) (fail16799)))) (fail16799)))) (fail16799)) (fail16799))) (fail16799)))) (fail16799)))) (fail16799))))) (defsyntax match-three x (let ((v16838 x)) (let ((fail16839 (lambda () (let ((fail16840 (lambda () (let ((fail16841 (lambda () (let ((fail16842 (lambda () (let ((fail16843 (lambda () (let ((fail16844 (lambda () (let ((fail16845 (lambda () (error <condition> "no matching pattern")))) (if (cons? v16838) (let ((w16846 (car v16838)) (x16847 (cdr v16838))) (let ((a w16846)) (if (cons? w16846) (let ((w16848 (car w16846)) (x16849 (cdr w16846))) (let ((qabs w16848)) (if (cons? x16849) (let ((w16850 (car x16849)) (x16851 (cdr x16849))) (if (cons? w16850) (let ((w16852 (car w16850)) (x16853 (cdr w16850))) (if (cons? w16852) (let ((w16854 (car w16852)) (x16855 (cdr w16852))) (let ((qcar w16854)) (if (cons? x16855) (let ((w16856 (car x16855)) (x16857 (cdr x16855))) (let ((qcdr w16856)) (if (cons? x16857) (let ((w16858 (car x16857)) (x16859 (cdr x16857))) (let ((qcons? w16858)) (if (cons? x16859) (let ((w16860 (car x16859)) (x16861 (cdr x16859))) (let ((qnull? w16860)) (if (cons? x16861) (let ((w16862 (car x16861)) (x16863 (cdr x16861))) (let ((binary= w16862)) (if (null? x16863) (if (cons? x16853) (let ((w16864 (car x16853)) (x16865 (cdr x16853))) (let ((qpp w16864)) (if (null? x16865) (if (null? x16851) (if (cons? x16847) (let ((w16866 (car x16847)) (x16867 (cdr x16847))) (let ((v w16866)) (if (cons? x16867) (let ((w16868 (car x16867)) (x16869 (cdr x16867))) (let ((x w16868)) (if (cons? x16869) (let ((w16870 (car x16869)) (x16871 (cdr x16869))) (let ((g+s w16870)) (if (cons? x16871) (let ((w16872 (car x16871)) (x16873 (cdr x16871))) (let ((sk w16872)) (if (list? sk) (if (cons? x16873) (let ((w16877 (car x16873)) (x16878 (cdr x16873))) (let ((fk w16877)) (if (cons? x16878) (let ((w16879 (car x16878)) (x16880 (cdr x16878))) (let ((id w16879)) (if (list? id) (if (null? x16880) (progn (if (if (symbol? x) (null? (member x id)) ()) (quasiquote (let (((unquote x) (unquote v))) (insert-abs (unquote a) ((unquote-splicing sk) ((unquote-splicing id) (unquote x)))))) (quasiquote (if ((unquote binary=) (unquote v) (unquote x)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote id))) (insert-abs (unquote a) (unquote fk)))))) (fail16845)) (fail16845)))) (fail16845)))) (fail16845)) (fail16845)))) (fail16845)))) (fail16845)))) (fail16845)))) (fail16845)) (fail16845)) (fail16845)))) (fail16845)) (fail16845)))) (fail16845)))) (fail16845)))) (fail16845)))) (fail16845)))) (fail16845))) (fail16845))) (fail16845)))) (fail16845)))) (fail16845)))))) (if (cons? v16838) (let ((w16884 (car v16838)) (x16885 (cdr v16838))) (let ((abs w16884)) (if (cons? x16885) (let ((w16886 (car x16885)) (x16887 (cdr x16885))) (let ((v w16886)) (if (cons? x16887) (let ((w16888 (car x16887)) (x16889 (cdr x16887))) (if (binary= w16888 (quote _)) (if (cons? x16889) (let ((w16890 (car x16889)) (x16891 (cdr x16889))) (let ((g+s w16890)) (if (cons? x16891) (let ((w16892 (car x16891)) (x16893 (cdr x16891))) (let ((sk w16892)) (if (list? sk) (if (cons? x16893) (let ((w16897 (car x16893)) (x16898 (cdr x16893))) (let ((fk w16897)) (if (cons? x16898) (let ((w16899 (car x16898)) (x16900 (cdr x16898))) (let ((i w16899)) (if (null? x16900) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail16844)))) (fail16844)))) (fail16844)) (fail16844)))) (fail16844)))) (fail16844)) (fail16844))) (fail16844)))) (fail16844)))) (fail16844)))))) (if (cons? v16838) (let ((w16901 (car v16838)) (x16902 (cdr v16838))) (let ((abs w16901)) (if (cons? x16902) (let ((w16903 (car x16902)) (x16904 (cdr x16902))) (let ((v w16903)) (if (cons? x16904) (let ((w16905 (car x16904)) (x16906 (cdr x16904))) (if (vector? w16905) (let ((len16907 (vector-size w16905))) (if (>= len16907 0) (letfuns ((loop16909 (j16910 p-ls16908) (if (>= j16910 len16907) (let ((p (reverse p-ls16908))) (if (cons? x16906) (let ((w16912 (car x16906)) (x16913 (cdr x16906))) (let ((g+s w16912)) (let ((x x16913)) (progn (quasiquote (match-vector (unquote abs) (unquote v) 0 () (unquote p) (unquote-splicing x))))))) (fail16843))) (let ((w16911 (vector-ref w16905 j16910))) (let ((p w16911)) (loop16909 (+ j16910 1) (cons p p-ls16908))))))) (loop16909 0 (quote ()))) (fail16843))) (fail16843))) (fail16843)))) (fail16843)))) (fail16843)))))) (if (cons? v16838) (let ((w16914 (car v16838)) (x16915 (cdr v16838))) (let ((a w16914)) (if (cons? w16914) (let ((w16916 (car w16914)) (x16917 (cdr w16914))) (let ((abs w16916)) (if (cons? x16917) (let ((w16918 (car x16917)) (x16919 (cdr x16917))) (if (cons? w16918) (let ((w16920 (car w16918)) (x16921 (cdr w16918))) (if (cons? w16920) (let ((w16922 (car w16920)) (x16923 (cdr w16920))) (let ((qcar w16922)) (if (cons? x16923) (let ((w16924 (car x16923)) (x16925 (cdr x16923))) (let ((qcdr w16924)) (if (cons? x16925) (let ((w16926 (car x16925)) (x16927 (cdr x16925))) (let ((qcons? w16926)) (if (cons? x16927) (let ((w16928 (car x16927)) (x16929 (cdr x16927))) (let ((qnull? w16928)) (if (cons? x16929) (let ((w16930 (car x16929)) (x16931 (cdr x16929))) (let ((qbinary= w16930)) (if (null? x16931) (if (cons? x16921) (let ((w16932 (car x16921)) (x16933 (cdr x16921))) (let ((pp w16932)) (if (null? x16933) (if (null? x16919) (if (cons? x16915) (let ((w16934 (car x16915)) (x16935 (cdr x16915))) (let ((v w16934)) (if (cons? x16935) (let ((w16936 (car x16935)) (x16937 (cdr x16935))) (if (cons? w16936) (let ((w16938 (car w16936)) (x16939 (cdr w16936))) (let ((p w16938)) (let ((q x16939)) (if (cons? x16937) (let ((w16940 (car x16937)) (x16941 (cdr x16937))) (let ((g+s w16940)) (if (cons? x16941) (let ((w16942 (car x16941)) (x16943 (cdr x16941))) (let ((sk w16942)) (if (cons? x16943) (let ((w16944 (car x16943)) (x16945 (cdr x16943))) (let ((fk w16944)) (if (cons? x16945) (let ((w16946 (car x16945)) (x16947 (cdr x16945))) (let ((i w16946)) (if (null? x16947) (progn (let ((w (gensym "w")) (x (gensym "x"))) (quasiquote (if ((unquote qcons?) (unquote v)) (let (((unquote w) ((unquote qcar) (unquote v))) ((unquote x) ((unquote qcdr) (unquote v)))) (match-one (unquote a) (unquote w) (unquote p) (((unquote qcar) (unquote v)) ((setter car) (unquote v))) (match-one (unquote x) (unquote q) (((unquote qcdr) (unquote v)) ((setter cdr) (unquote v))) (unquote sk) (unquote fk)) (unquote fk) (unquote i))) (insert-abs (unquote a) (unquote fk)))))) (fail16842)))) (fail16842)))) (fail16842)))) (fail16842)))) (fail16842))))) (fail16842))) (fail16842)))) (fail16842)) (fail16842)) (fail16842)))) (fail16842)) (fail16842)))) (fail16842)))) (fail16842)))) (fail16842)))) (fail16842)))) (fail16842))) (fail16842))) (fail16842)))) (fail16842)))) (fail16842)))))) (if (cons? v16838) (let ((w16948 (car v16838)) (x16949 (cdr v16838))) (let ((abs w16948)) (if (cons? x16949) (let ((w16950 (car x16949)) (x16951 (cdr x16949))) (let ((v w16950)) (if (cons? x16951) (let ((w16952 (car x16951)) (x16953 (cdr x16951))) (if (cons? w16952) (let ((w16954 (car w16952)) (x16955 (cdr w16952))) (let ((p w16954)) (if (cons? x16955) (let ((w16956 (car x16955)) (x16957 (cdr x16955))) (if (binary= w16956 (quote ***)) (let ((q x16957)) (if (cons? x16953) (let ((w16958 (car x16953)) (x16959 (cdr x16953))) (let ((g+s w16958)) (if (cons? x16959) (let ((w16960 (car x16959)) (x16961 (cdr x16959))) (let ((sk w16960)) (if (cons? x16961) (let ((w16962 (car x16961)) (x16963 (cdr x16961))) (let ((fk w16962)) (if (cons? x16963) (let ((w16964 (car x16963)) (x16965 (cdr x16963))) (let ((i w16964)) (if (null? x16965) (progn (quasiquote (error <condition> (fmt "invalid use of *** ~a" ((unquote p) *** (unquote-splicing q)))))) (fail16841)))) (fail16841)))) (fail16841)))) (fail16841)))) (fail16841))) (fail16841))) (fail16841)))) (fail16841))) (fail16841)))) (fail16841)))) (fail16841)))))) (if (cons? v16838) (let ((w16966 (car v16838)) (x16967 (cdr v16838))) (let ((abs w16966)) (if (cons? x16967) (let ((w16968 (car x16967)) (x16969 (cdr x16967))) (let ((v w16968)) (if (cons? x16969) (let ((w16970 (car x16969)) (x16971 (cdr x16969))) (if (cons? w16970) (let ((w16972 (car w16970)) (x16973 (cdr w16970))) (let ((p w16972)) (if (cons? x16973) (let ((w16974 (car x16973)) (x16975 (cdr x16973))) (if (binary= w16974 (quote ***)) (if (cons? x16975) (let ((w16976 (car x16975)) (x16977 (cdr x16975))) (let ((q w16976)) (if (null? x16977) (if (cons? x16971) (let ((w16978 (car x16971)) (x16979 (cdr x16971))) (let ((g+s w16978)) (if (cons? x16979) (let ((w16980 (car x16979)) (x16981 (cdr x16979))) (let ((sk w16980)) (if (cons? x16981) (let ((w16982 (car x16981)) (x16983 (cdr x16981))) (let ((fk w16982)) (if (cons? x16983) (let ((w16984 (car x16983)) (x16985 (cdr x16983))) (let ((i w16984)) (if (null? x16985) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-gen-search (unquote v) (unquote p) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i) ()))) (fail16840)))) (fail16840)))) (fail16840)))) (fail16840)))) (fail16840)) (fail16840)))) (fail16840)) (fail16840))) (fail16840)))) (fail16840))) (fail16840)))) (fail16840)))) (fail16840)))))) (if (cons? v16838) (let ((w16986 (car v16838)) (x16987 (cdr v16838))) (let ((a w16986)) (if (cons? w16986) (let ((w16988 (car w16986)) (x16989 (cdr w16986))) (let ((abs w16988)) (if (cons? x16989) (let ((w16990 (car x16989)) (x16991 (cdr x16989))) (if (cons? w16990) (let ((w16992 (car w16990)) (x16993 (cdr w16990))) (if (cons? w16992) (let ((w16994 (car w16992)) (x16995 (cdr w16992))) (let ((qcar w16994)) (if (cons? x16995) (let ((w16996 (car x16995)) (x16997 (cdr x16995))) (let ((qcdr w16996)) (if (cons? x16997) (let ((w16998 (car x16997)) (x16999 (cdr x16997))) (let ((qcons? w16998)) (if (cons? x16999) (let ((w17000 (car x16999)) (x17001 (cdr x16999))) (let ((qnull? w17000)) (if (null? x17001) (if (cons? x16993) (let ((w17002 (car x16993)) (x17003 (cdr x16993))) (let ((rr w17002)) (if (null? x17003) (if (null? x16991) (if (cons? x16987) (let ((w17004 (car x16987)) (x17005 (cdr x16987))) (let ((v w17004)) (if (cons? x17005) (let ((w17006 (car x17005)) (x17007 (cdr x17005))) (if (cons? w17006) (let ((w17008 (car w17006)) (x17009 (cdr w17006))) (let ((p w17008)) (if (null? x17009) (if (cons? x17007) (let ((w17010 (car x17007)) (x17011 (cdr x17007))) (let ((g+s w17010)) (if (cons? x17011) (let ((w17012 (car x17011)) (x17013 (cdr x17011))) (let ((sk w17012)) (if (cons? x17013) (let ((w17014 (car x17013)) (x17015 (cdr x17013))) (let ((fk w17014)) (if (cons? x17015) (let ((w17016 (car x17015)) (x17017 (cdr x17015))) (let ((i w17016)) (if (null? x17017) (progn (let ((w (gensym "w"))) (quasiquote (if (and ((unquote qcons?) (unquote v)) ((unquote qnull?) ((unquote qcdr) (unquote v)))) (let (((unquote w) ((unquote qcar) (unquote v)))) (match-one (unquote a) (unquote w) (unquote p) (((unquote qcar) (unquote v)) ((setter car) (unquote v))) (unquote sk) (unquote fk) (unquote i))) (unquote fk))))) (fail16839)))) (fail16839)))) (fail16839)))) (fail16839)))) (fail16839)) (fail16839)))) (fail16839))) (fail16839)))) (fail16839)) (fail16839)) (fail16839)))) (fail16839)) (fail16839)))) (fail16839)))) (fail16839)))) (fail16839)))) (fail16839))) (fail16839))) (fail16839)))) (fail16839)))) (fail16839))))) (defsyntax match-vector x (let ((v17018 x)) (let ((fail17019 (lambda () (let ((fail17020 (lambda () (let ((fail17021 (lambda () (error <condition> "no matching pattern")))) (let ((x v17018)) (progn (quasiquote (match-vector-two (unquote-splicing x))))))))) (if (cons? v17018) (let ((w17022 (car v17018)) (x17023 (cdr v17018))) (let ((abs w17022)) (if (cons? x17023) (let ((w17024 (car x17023)) (x17025 (cdr x17023))) (let ((v w17024)) (if (cons? x17025) (let ((w17026 (car x17025)) (x17027 (cdr x17025))) (let ((n w17026)) (if (cons? x17027) (let ((w17028 (car x17027)) (x17029 (cdr x17027))) (let ((pats w17028)) (if (cons? x17029) (let ((w17030 (car x17029)) (x17031 (cdr x17029))) (if (cons? w17030) (let ((w17032 (car w17030)) (x17033 (cdr w17030))) (let ((p w17032)) (if (cons? x17033) (let ((w17034 (car x17033)) (x17035 (cdr x17033))) (if (binary= w17034 (quote ___)) (if (null? x17035) (if (cons? x17031) (let ((w17036 (car x17031)) (x17037 (cdr x17031))) (let ((sk w17036)) (if (cons? x17037) (let ((w17038 (car x17037)) (x17039 (cdr x17037))) (let ((fk w17038)) (if (cons? x17039) (let ((w17040 (car x17039)) (x17041 (cdr x17039))) (let ((i w17040)) (if (null? x17041) (progn (quasiquote (match-gen-vector-ellipses (unquote abs) (unquote v) (unquote n) (unquote pats) (unquote p) (unquote sk) (unquote fk) (unquote i)))) (fail17020)))) (fail17020)))) (fail17020)))) (fail17020)) (fail17020)) (fail17020))) (fail17020)))) (fail17020))) (fail17020)))) (fail17020)))) (fail17020)))) (fail17020)))) (fail17020)))))) (if (cons? v17018) (let ((w17042 (car v17018)) (x17043 (cdr v17018))) (let ((abs w17042)) (if (cons? x17043) (let ((w17044 (car x17043)) (x17045 (cdr x17043))) (let ((v w17044)) (if (cons? x17045) (let ((w17046 (car x17045)) (x17047 (cdr x17045))) (let ((n w17046)) (if (cons? x17047) (let ((w17048 (car x17047)) (x17049 (cdr x17047))) (let ((pats w17048)) (if (cons? x17049) (let ((w17050 (car x17049)) (x17051 (cdr x17049))) (if (cons? w17050) (let ((w17052 (car w17050)) (x17053 (cdr w17050))) (let ((p w17052)) (if (cons? x17053) (let ((w17054 (car x17053)) (x17055 (cdr x17053))) (let ((q w17054)) (if (null? x17055) (let ((x x17051)) (progn (quasiquote (match-check-ellipse (unquote q) (match-gen-vector-ellipses (unquote abs) (unquote v) (unquote n) (unquote pats) (unquote p) (unquote-splicing x)) (match-vector-two (unquote abs) (unquote v) (unquote n) (unquote pats) ((unquote p) (unquote q)) (unquote-splicing x)))))) (fail17019)))) (fail17019)))) (fail17019))) (fail17019)))) (fail17019)))) (fail17019)))) (fail17019)))) (fail17019))))) (defsyntax match-vector-two x (let ((v17056 x)) (let ((fail17057 (lambda () (let ((fail17058 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17056) (let ((w17059 (car v17056)) (x17060 (cdr v17056))) (let ((abs w17059)) (if (cons? x17060) (let ((w17061 (car x17060)) (x17062 (cdr x17060))) (let ((v w17061)) (if (cons? x17062) (let ((w17063 (car x17062)) (x17064 (cdr x17062))) (let ((n w17063)) (if (cons? x17064) (let ((w17065 (car x17064)) (x17066 (cdr x17064))) (let ((pats w17065)) (if (list? pats) (if (cons? x17066) (let ((w17070 (car x17066)) (x17071 (cdr x17066))) (if (cons? w17070) (let ((w17072 (car w17070)) (x17073 (cdr w17070))) (let ((p w17072)) (let ((q x17073)) (let ((x x17071)) (progn (quasiquote (match-vector (unquote abs) (unquote v) (+ (unquote n) 1) ((unquote-splicing pats) ((unquote p) (unquote n))) (unquote q) (unquote-splicing x)))))))) (fail17058))) (fail17058)) (fail17058)))) (fail17058)))) (fail17058)))) (fail17058)))) (fail17058)))))) (if (cons? v17056) (let ((w17074 (car v17056)) (x17075 (cdr v17056))) (let ((abs w17074)) (if (cons? x17075) (let ((w17076 (car x17075)) (x17077 (cdr x17075))) (let ((v w17076)) (if (cons? x17077) (let ((w17078 (car x17077)) (x17079 (cdr x17077))) (let ((n w17078)) (if (cons? x17079) (let ((w17080 (car x17079)) (x17081 (cdr x17079))) (let ((a w17080)) (letfuns ((loop (ls17085 p-ls17083 p-ls17082) (if (null? ls17085) (progn (let ((index (reverse p-ls17083)) (pat (reverse p-ls17082))) (if (cons? x17081) (let ((w17087 (car x17081)) (x17088 (cdr x17081))) (if (null? w17087) (if (cons? x17088) (let ((w17089 (car x17088)) (x17090 (cdr x17088))) (let ((sk w17089)) (if (cons? x17090) (let ((w17091 (car x17090)) (x17092 (cdr x17090))) (let ((fk w17091)) (if (cons? x17092) (let ((w17093 (car x17092)) (x17094 (cdr x17092))) (let ((i w17093)) (if (null? x17094) (progn (let ((len (gensym "len"))) (quasiquote (if (vector? (unquote v)) (let (((unquote len) (vector-size (unquote v)))) (if (= (unquote len) (unquote n)) (match-vector-step (unquote abs) (unquote v) (unquote a) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk)))) (insert-abs (unquote abs) (unquote fk)))))) (fail17057)))) (fail17057)))) (fail17057)))) (fail17057)) (fail17057))) (fail17057)))) (if (cons? ls17085) (progn (let ((w17086 (car ls17085))) (if (cons? w17086) (let ((w17095 (car w17086)) (x17096 (cdr w17086))) (let ((pat w17095)) (if (cons? x17096) (let ((w17097 (car x17096)) (x17098 (cdr x17096))) (let ((index w17097)) (if (null? x17098) (loop (cdr ls17085) (cons index p-ls17083) (cons pat p-ls17082)) (fail17057)))) (fail17057)))) (fail17057)))) (if else (progn (fail17057)) (cond)))))) (loop w17080 (quote ()) (quote ()))))) (fail17057)))) (fail17057)))) (fail17057)))) (fail17057))))) (defsyntax match-vector-step x (let ((v17099 x)) (let ((fail17100 (lambda () (let ((fail17101 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17099) (let ((w17102 (car v17099)) (x17103 (cdr v17099))) (let ((abs w17102)) (if (cons? x17103) (let ((w17104 (car x17103)) (x17105 (cdr x17103))) (let ((v w17104)) (if (cons? x17105) (let ((w17106 (car x17105)) (x17107 (cdr x17105))) (if (cons? w17106) (let ((w17108 (car w17106)) (x17109 (cdr w17106))) (if (cons? w17108) (let ((w17110 (car w17108)) (x17111 (cdr w17108))) (let ((pat w17110)) (if (cons? x17111) (let ((w17112 (car x17111)) (x17113 (cdr x17111))) (let ((index w17112)) (if (null? x17113) (let ((rest x17109)) (if (cons? x17107) (let ((w17114 (car x17107)) (x17115 (cdr x17107))) (let ((sk w17114)) (if (cons? x17115) (let ((w17116 (car x17115)) (x17117 (cdr x17115))) (let ((fk w17116)) (if (cons? x17117) (let ((w17118 (car x17117)) (x17119 (cdr x17117))) (let ((i w17118)) (if (null? x17119) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) (vector-ref (unquote v) (unquote index)))) (match-one (unquote abs) (unquote w) (unquote pat) ((vector-ref (unquote v) (unquote index)) ((setter vector-ref) (unquote v) (unquote index))) (match-vector-step (unquote v) (unquote rest) (unquote sk) (unquote fk)) (unquote fk) (unquote i)))))) (fail17101)))) (fail17101)))) (fail17101)))) (fail17101))) (fail17101)))) (fail17101)))) (fail17101))) (fail17101))) (fail17101)))) (fail17101)))) (fail17101)))))) (if (cons? v17099) (let ((w17120 (car v17099)) (x17121 (cdr v17099))) (let ((abs w17120)) (if (cons? x17121) (let ((w17122 (car x17121)) (x17123 (cdr x17121))) (let ((v w17122)) (if (cons? x17123) (let ((w17124 (car x17123)) (x17125 (cdr x17123))) (if (null? w17124) (if (cons? x17125) (let ((w17126 (car x17125)) (x17127 (cdr x17125))) (let ((sk w17126)) (if (list? sk) (if (cons? x17127) (let ((w17131 (car x17127)) (x17132 (cdr x17127))) (let ((fk w17131)) (if (cons? x17132) (let ((w17133 (car x17132)) (x17134 (cdr x17132))) (let ((i w17133)) (if (null? x17134) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail17100)))) (fail17100)))) (fail17100)) (fail17100)))) (fail17100)) (fail17100))) (fail17100)))) (fail17100)))) (fail17100))))) (defsyntax match-gen-vector-ellipses x (let ((v17135 x)) (let ((fail17136 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17135) (let ((w17137 (car v17135)) (x17138 (cdr v17135))) (let ((abs w17137)) (if (cons? x17138) (let ((w17139 (car x17138)) (x17140 (cdr x17138))) (let ((v w17139)) (if (cons? x17140) (let ((w17141 (car x17140)) (x17142 (cdr x17140))) (let ((n w17141)) (if (cons? x17142) (let ((w17143 (car x17142)) (x17144 (cdr x17142))) (let ((a w17143)) (letfuns ((loop (ls17148 p-ls17146 p-ls17145) (if (null? ls17148) (progn (let ((index (reverse p-ls17146)) (pat (reverse p-ls17145))) (if (cons? x17144) (let ((w17150 (car x17144)) (x17151 (cdr x17144))) (let ((p w17150)) (if (cons? x17151) (let ((w17152 (car x17151)) (x17153 (cdr x17151))) (let ((sk w17152)) (if (cons? x17153) (let ((w17154 (car x17153)) (x17155 (cdr x17153))) (let ((fk w17154)) (if (cons? x17155) (let ((w17156 (car x17155)) (x17157 (cdr x17155))) (let ((i w17156)) (if (null? x17157) (progn (let ((len (gensym "len"))) (quasiquote (if (vector? (unquote v)) (let (((unquote len) (vector-size (unquote v)))) (if (>= (unquote len) (unquote n)) (match-vector-step (unquote abs) (unquote v) (unquote a) (match-vector-tail (unquote v) (unquote p) (unquote n) (unquote len) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk)))) (insert-abs (unquote abs) (unquote fk)))))) (fail17136)))) (fail17136)))) (fail17136)))) (fail17136)))) (fail17136)))) (if (cons? ls17148) (progn (let ((w17149 (car ls17148))) (if (cons? w17149) (let ((w17158 (car w17149)) (x17159 (cdr w17149))) (let ((pat w17158)) (if (cons? x17159) (let ((w17160 (car x17159)) (x17161 (cdr x17159))) (let ((index w17160)) (if (null? x17161) (loop (cdr ls17148) (cons index p-ls17146) (cons pat p-ls17145)) (fail17136)))) (fail17136)))) (fail17136)))) (if else (progn (fail17136)) (cond)))))) (loop w17143 (quote ()) (quote ()))))) (fail17136)))) (fail17136)))) (fail17136)))) (fail17136))))) (defsyntax match-vector-tail x (let ((v17162 x)) (let ((fail17163 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17162) (let ((w17164 (car v17162)) (x17165 (cdr v17162))) (let ((abs w17164)) (if (cons? x17165) (let ((w17166 (car x17165)) (x17167 (cdr x17165))) (let ((v w17166)) (if (cons? x17167) (let ((w17168 (car x17167)) (x17169 (cdr x17167))) (let ((p w17168)) (if (cons? x17169) (let ((w17170 (car x17169)) (x17171 (cdr x17169))) (let ((n w17170)) (if (cons? x17171) (let ((w17172 (car x17171)) (x17173 (cdr x17171))) (let ((len w17172)) (if (cons? x17173) (let ((w17174 (car x17173)) (x17175 (cdr x17173))) (let ((sk w17174)) (if (cons? x17175) (let ((w17176 (car x17175)) (x17177 (cdr x17175))) (let ((fk w17176)) (if (cons? x17177) (let ((w17178 (car x17177)) (x17179 (cdr x17177))) (let ((i w17178)) (if (null? x17179) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-vector-tail-two (unquote v) (unquote p) (unquote n) (unquote len) (unquote sk) (unquote fk) (unquote i)) (unquote i) ()))) (fail17163)))) (fail17163)))) (fail17163)))) (fail17163)))) (fail17163)))) (fail17163)))) (fail17163)))) (fail17163)))) (fail17163))))) (defsyntax match-vector-tail-two x (let ((v17180 x)) (let ((fail17181 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17180) (let ((w17182 (car v17180)) (x17183 (cdr v17180))) (let ((abs w17182)) (if (cons? x17183) (let ((w17184 (car x17183)) (x17185 (cdr x17183))) (let ((v w17184)) (if (cons? x17185) (let ((w17186 (car x17185)) (x17187 (cdr x17185))) (let ((p w17186)) (if (cons? x17187) (let ((w17188 (car x17187)) (x17189 (cdr x17187))) (let ((n w17188)) (if (cons? x17189) (let ((w17190 (car x17189)) (x17191 (cdr x17189))) (let ((len w17190)) (if (cons? x17191) (let ((w17192 (car x17191)) (x17193 (cdr x17191))) (let ((sk w17192)) (if (list? sk) (if (cons? x17193) (let ((w17197 (car x17193)) (x17198 (cdr x17193))) (let ((fk w17197)) (if (cons? x17198) (let ((w17199 (car x17198)) (x17200 (cdr x17198))) (let ((i w17199)) (if (cons? x17200) (let ((w17201 (car x17200)) (x17202 (cdr x17200))) (letfuns ((loop (ls17206 p-ls17204 p-ls17203) (if (null? ls17206) (progn (let ((id-ls (reverse p-ls17204)) (id (reverse p-ls17203))) (if (null? x17202) (progn (let ((loop (gensym "loop")) (j (gensym "j")) (w (gensym "w"))) (quasiquote (recur (unquote loop) (((unquote j) (unquote n)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (if (>= (unquote j) (unquote len)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))) (let (((unquote w) (vector-ref (unquote v) (unquote j)))) (match-one (unquote abs) (unquote w) (unquote p) ((vector-ref (unquote v) (unquote j)) ((setter vector-ref) (unquote v) (unquote j))) (match-drop-ids ((unquote loop) (+ (unquote j) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))))))) (fail17181)))) (if (cons? ls17206) (progn (let ((w17207 (car ls17206))) (if (cons? w17207) (let ((w17208 (car w17207)) (x17209 (cdr w17207))) (let ((id w17208)) (if (cons? x17209) (let ((w17210 (car x17209)) (x17211 (cdr x17209))) (let ((id-ls w17210)) (if (null? x17211) (loop (cdr ls17206) (cons id-ls p-ls17204) (cons id p-ls17203)) (fail17181)))) (fail17181)))) (fail17181)))) (if else (progn (fail17181)) (cond)))))) (loop w17201 (quote ()) (quote ())))) (fail17181)))) (fail17181)))) (fail17181)) (fail17181)))) (fail17181)))) (fail17181)))) (fail17181)))) (fail17181)))) (fail17181)))) (fail17181))))) (defsyntax match-abstract x (let ((v17212 x)) (let ((fail17213 (lambda () (let ((fail17214 (lambda () (let ((fail17215 (lambda () (let ((fail17216 (lambda () (let ((fail17217 (lambda () (let ((fail17218 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17212) (let ((w17219 (car v17212)) (x17220 (cdr v17212))) (if (null? w17219) (if (cons? x17220) (let ((w17221 (car x17220)) (x17222 (cdr x17220))) (let ((abs w17221)) (if (cons? x17222) (let ((w17223 (car x17222)) (x17224 (cdr x17222))) (let ((phd w17223)) (if (cons? x17224) (let ((w17225 (car x17224)) (x17226 (cdr x17224))) (let ((y w17225)) (if (cons? x17226) (let ((w17227 (car x17226)) (x17228 (cdr x17226))) (let ((p w17227)) (if (cons? x17228) (let ((w17229 (car x17228)) (x17230 (cdr x17228))) (let ((g+s w17229)) (if (cons? x17230) (let ((w17231 (car x17230)) (x17232 (cdr x17230))) (let ((sk w17231)) (if (cons? x17232) (let ((w17233 (car x17232)) (x17234 (cdr x17232))) (let ((fk w17233)) (if (cons? x17234) (let ((w17235 (car x17234)) (x17236 (cdr x17234))) (let ((i w17235)) (if (null? x17236) (progn (quasiquote (match-phd () (unquote phd) (unquote abs) (unquote y) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail17218)))) (fail17218)))) (fail17218)))) (fail17218)))) (fail17218)))) (fail17218)))) (fail17218)))) (fail17218)))) (fail17218)) (fail17218))) (fail17218)))))) (if (cons? v17212) (let ((w17237 (car v17212)) (x17238 (cdr v17212))) (let ((x w17237)) (if (list? x) (if (cons? x17238) (let ((w17242 (car x17238)) (x17243 (cdr x17238))) (if (cons? w17242) (let ((w17244 (car w17242)) (x17245 (cdr w17242))) (if (cons? w17244) (let ((w17246 (car w17244)) (x17247 (cdr w17244))) (let ((a w17246)) (if (cons? x17247) (let ((w17248 (car x17247)) (x17249 (cdr x17247))) (let ((aa w17248)) (let ((as x17249)) (if (list? as) (let ((us x17245)) (if (list? us) (if (cons? x17243) (let ((w17256 (car x17243)) (x17257 (cdr x17243))) (let ((phd w17256)) (if (cons? x17257) (let ((w17258 (car x17257)) (x17259 (cdr x17257))) (let ((y w17258)) (if (cons? x17259) (let ((w17260 (car x17259)) (x17261 (cdr x17259))) (if (cons? w17260) (let ((w17262 (car w17260)) (x17263 (cdr w17260))) (let ((b w17262)) (let ((ps x17263)) (if (cons? x17261) (let ((w17264 (car x17261)) (x17265 (cdr x17261))) (let ((g+s w17264)) (if (cons? x17265) (let ((w17266 (car x17265)) (x17267 (cdr x17265))) (let ((sk w17266)) (if (cons? x17267) (let ((w17268 (car x17267)) (x17269 (cdr x17267))) (let ((fk w17268)) (if (cons? x17269) (let ((w17270 (car x17269)) (x17271 (cdr x17269))) (let ((i w17270)) (if (null? x17271) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) ((unquote a) (unquote y)))) (if (unquote ret) (let (((unquote aa) (car (unquote ret)))) (match-one ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) ((unquote aa) (unquote-splicing i)))) (insert-abs ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a) (unquote aa) (unquote-splicing as)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) ((unquote b) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail17217)))) (fail17217)))) (fail17217)))) (fail17217)))) (fail17217))))) (fail17217))) (fail17217)))) (fail17217)))) (fail17217)) (fail17217))) (fail17217))))) (fail17217)))) (fail17217))) (fail17217))) (fail17217)) (fail17217)))) (fail17217)))))) (if (cons? v17212) (let ((w17272 (car v17212)) (x17273 (cdr v17212))) (let ((x w17272)) (if (list? x) (if (cons? x17273) (let ((w17277 (car x17273)) (x17278 (cdr x17273))) (if (cons? w17277) (let ((w17279 (car w17277)) (x17280 (cdr w17277))) (if (cons? w17279) (let ((w17281 (car w17279)) (x17282 (cdr w17279))) (let ((a w17281)) (if (null? x17282) (let ((us x17280)) (if (list? us) (if (cons? x17278) (let ((w17286 (car x17278)) (x17287 (cdr x17278))) (let ((phd w17286)) (if (cons? x17287) (let ((w17288 (car x17287)) (x17289 (cdr x17287))) (let ((y w17288)) (if (cons? x17289) (let ((w17290 (car x17289)) (x17291 (cdr x17289))) (if (cons? w17290) (let ((w17292 (car w17290)) (x17293 (cdr w17290))) (let ((b w17292)) (let ((ps x17293)) (if (cons? x17291) (let ((w17294 (car x17291)) (x17295 (cdr x17291))) (let ((g+s w17294)) (if (cons? x17295) (let ((w17296 (car x17295)) (x17297 (cdr x17295))) (let ((sk w17296)) (if (cons? x17297) (let ((w17298 (car x17297)) (x17299 (cdr x17297))) (let ((fk w17298)) (if (cons? x17299) (let ((w17300 (car x17299)) (x17301 (cdr x17299))) (let ((i w17300)) (if (null? x17301) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) ((unquote a) (unquote y)))) (if (unquote ret) (match-one ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) ((unquote b) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail17216)))) (fail17216)))) (fail17216)))) (fail17216)))) (fail17216))))) (fail17216))) (fail17216)))) (fail17216)))) (fail17216)) (fail17216))) (fail17216)))) (fail17216))) (fail17216))) (fail17216)) (fail17216)))) (fail17216)))))) (if (cons? v17212) (let ((w17302 (car v17212)) (x17303 (cdr v17212))) (let ((x w17302)) (if (list? x) (if (cons? x17303) (let ((w17307 (car x17303)) (x17308 (cdr x17303))) (if (cons? w17307) (let ((w17309 (car w17307)) (x17310 (cdr w17307))) (if (cons? w17309) (let ((w17311 (car w17309)) (x17312 (cdr w17309))) (let ((a w17311)) (if (cons? x17312) (let ((w17313 (car x17312)) (x17314 (cdr x17312))) (let ((aa w17313)) (let ((as x17314)) (if (list? as) (let ((us x17310)) (if (list? us) (if (cons? x17308) (let ((w17321 (car x17308)) (x17322 (cdr x17308))) (let ((phd w17321)) (if (cons? x17322) (let ((w17323 (car x17322)) (x17324 (cdr x17322))) (let ((y w17323)) (if (cons? x17324) (let ((w17325 (car x17324)) (x17326 (cdr x17324))) (if (cons? w17325) (let ((w17327 (car w17325)) (x17328 (cdr w17325))) (if (cons? w17327) (let ((w17329 (car w17327)) (x17330 (cdr w17327))) (let ((b w17329)) (let ((bs x17330)) (if (list? bs) (let ((ps x17328)) (if (cons? x17326) (let ((w17334 (car x17326)) (x17335 (cdr x17326))) (let ((g+s w17334)) (if (cons? x17335) (let ((w17336 (car x17335)) (x17337 (cdr x17335))) (let ((sk w17336)) (if (cons? x17337) (let ((w17338 (car x17337)) (x17339 (cdr x17337))) (let ((fk w17338)) (if (cons? x17339) (let ((w17340 (car x17339)) (x17341 (cdr x17339))) (let ((i w17340)) (if (null? x17341) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) (((unquote a) (unquote-splicing bs)) (unquote y)))) (if (unquote ret) (let (((unquote aa) (car (unquote ret)))) (match-one ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) ((unquote aa) (unquote-splicing i)))) (insert-abs ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a) (unquote aa) (unquote-splicing as)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) (((unquote b) (unquote-splicing bs)) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail17215)))) (fail17215)))) (fail17215)))) (fail17215)))) (fail17215))) (fail17215))))) (fail17215))) (fail17215))) (fail17215)))) (fail17215)))) (fail17215)) (fail17215))) (fail17215))))) (fail17215)))) (fail17215))) (fail17215))) (fail17215)) (fail17215)))) (fail17215)))))) (if (cons? v17212) (let ((w17342 (car v17212)) (x17343 (cdr v17212))) (let ((x w17342)) (if (list? x) (if (cons? x17343) (let ((w17347 (car x17343)) (x17348 (cdr x17343))) (if (cons? w17347) (let ((w17349 (car w17347)) (x17350 (cdr w17347))) (if (cons? w17349) (let ((w17351 (car w17349)) (x17352 (cdr w17349))) (let ((a w17351)) (if (null? x17352) (let ((us x17350)) (if (list? us) (if (cons? x17348) (let ((w17356 (car x17348)) (x17357 (cdr x17348))) (let ((phd w17356)) (if (cons? x17357) (let ((w17358 (car x17357)) (x17359 (cdr x17357))) (let ((y w17358)) (if (cons? x17359) (let ((w17360 (car x17359)) (x17361 (cdr x17359))) (if (cons? w17360) (let ((w17362 (car w17360)) (x17363 (cdr w17360))) (if (cons? w17362) (let ((w17364 (car w17362)) (x17365 (cdr w17362))) (let ((b w17364)) (let ((bs x17365)) (if (list? bs) (let ((ps x17363)) (if (cons? x17361) (let ((w17369 (car x17361)) (x17370 (cdr x17361))) (let ((g+s w17369)) (if (cons? x17370) (let ((w17371 (car x17370)) (x17372 (cdr x17370))) (let ((sk w17371)) (if (cons? x17372) (let ((w17373 (car x17372)) (x17374 (cdr x17372))) (let ((fk w17373)) (if (cons? x17374) (let ((w17375 (car x17374)) (x17376 (cdr x17374))) (let ((i w17375)) (if (null? x17376) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) (((unquote a) (unquote-splicing bs)) (unquote y)))) (if (unquote ret) (match-one ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) (((unquote b) (unquote-splicing bs)) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail17214)))) (fail17214)))) (fail17214)))) (fail17214)))) (fail17214))) (fail17214))))) (fail17214))) (fail17214))) (fail17214)))) (fail17214)))) (fail17214)) (fail17214))) (fail17214)))) (fail17214))) (fail17214))) (fail17214)) (fail17214)))) (fail17214)))))) (if (cons? v17212) (let ((w17377 (car v17212)) (x17378 (cdr v17212))) (let ((x w17377)) (if (cons? x17378) (let ((w17379 (car x17378)) (x17380 (cdr x17378))) (if (null? w17379) (if (cons? x17380) (let ((w17381 (car x17380)) (x17382 (cdr x17380))) (let ((phd w17381)) (if (cons? x17382) (let ((w17383 (car x17382)) (x17384 (cdr x17382))) (let ((y w17383)) (if (cons? x17384) (let ((w17385 (car x17384)) (x17386 (cdr x17384))) (let ((p w17385)) (let ((l x17386)) (progn (quasiquote (match-phd () (unquote phd) (unquote x) (unquote y) (unquote p) (unquote-splicing l))))))) (fail17213)))) (fail17213)))) (fail17213)) (fail17213))) (fail17213)))) (fail17213))))) (defsyntax match-phd x (let ((v17387 x)) (let ((fail17388 (lambda () (let ((fail17389 (lambda () (let ((fail17390 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17387) (let ((w17391 (car v17387)) (x17392 (cdr v17387))) (if (null? w17391) (if (cons? x17392) (let ((w17393 (car x17392)) (x17394 (cdr x17392))) (let ((phd w17393)) (if (cons? x17394) (let ((w17395 (car x17394)) (x17396 (cdr x17394))) (let ((abs w17395)) (let ((l x17396)) (progn (quasiquote (match-three ((unquote abs) (unquote phd)) (unquote-splicing l))))))) (fail17390)))) (fail17390)) (fail17390))) (fail17390)))))) (if (cons? v17387) (let ((w17397 (car v17387)) (x17398 (cdr v17387))) (let ((phd w17397)) (if (list? phd) (if (cons? x17398) (let ((w17402 (car x17398)) (x17403 (cdr x17398))) (if (cons? w17402) (let ((w17404 (car w17402)) (x17405 (cdr w17402))) (let ((c w17404)) (if (cons? x17405) (let ((w17406 (car x17405)) (x17407 (cdr x17405))) (if (cons? w17406) (let ((w17408 (car w17406)) (x17409 (cdr w17406))) (if (cons? w17408) (let ((w17410 (car w17408)) (x17411 (cdr w17408))) (let ((h w17410)) (if (cons? x17411) (let ((w17412 (car x17411)) (x17413 (cdr x17411))) (let ((a w17412)) (if (null? x17413) (let ((hh x17409)) (if (list? hh) (if (null? x17407) (if (cons? x17403) (let ((w17417 (car x17403)) (x17418 (cdr x17403))) (let ((abs w17417)) (if (cons? x17418) (let ((w17419 (car x17418)) (x17420 (cdr x17418))) (let ((v w17419)) (if (cons? x17420) (let ((w17421 (car x17420)) (x17422 (cdr x17420))) (if (cons? w17421) (let ((w17423 (car w17421)) (x17424 (cdr w17421))) (let ((h2 w17423)) (let ((l x17424)) (if (cons? x17422) (let ((w17425 (car x17422)) (x17426 (cdr x17422))) (let ((g+s w17425)) (if (cons? x17426) (let ((w17427 (car x17426)) (x17428 (cdr x17426))) (let ((sk w17427)) (if (cons? x17428) (let ((w17429 (car x17428)) (x17430 (cdr x17428))) (let ((fk w17429)) (if (cons? x17430) (let ((w17431 (car x17430)) (x17432 (cdr x17430))) (let ((i w17431)) (if (null? x17432) (progn (if (eq h h2) (quasiquote (match-one ((unquote abs) ((unquote a) (((unquote h) (unquote a)) (unquote-splicing hh) (unquote-splicing phd)))) (unquote v) (unquote l) (unquote g+s) (set-phd-sk (unquote c) (unquote sk)) (set-phd-fk (unquote c) (unquote fk)) (unquote i))) (quasiquote (match-phd (((unquote h) (unquote a)) (unquote-splicing phd)) ((unquote c) (unquote hh)) (unquote abs) (unquote v) ((unquote h2) (unquote-splicing l)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail17389)))) (fail17389)))) (fail17389)))) (fail17389)))) (fail17389))))) (fail17389))) (fail17389)))) (fail17389)))) (fail17389)) (fail17389)) (fail17389))) (fail17389)))) (fail17389)))) (fail17389))) (fail17389))) (fail17389)))) (fail17389))) (fail17389)) (fail17389)))) (fail17389)))))) (if (cons? v17387) (let ((w17433 (car v17387)) (x17434 (cdr v17387))) (let ((phd w17433)) (if (cons? x17434) (let ((w17435 (car x17434)) (x17436 (cdr x17434))) (if (cons? w17435) (let ((w17437 (car w17435)) (x17438 (cdr w17435))) (let ((c w17437)) (if (cons? x17438) (let ((w17439 (car x17438)) (x17440 (cdr x17438))) (if (null? w17439) (if (null? x17440) (if (cons? x17436) (let ((w17441 (car x17436)) (x17442 (cdr x17436))) (let ((abs w17441)) (let ((l x17442)) (progn (quasiquote (match-three ((unquote abs) ((unquote c) (unquote phd))) (unquote-splicing l))))))) (fail17388)) (fail17388)) (fail17388))) (fail17388)))) (fail17388))) (fail17388)))) (fail17388))))) (defsyntax set-phd-fk x (let ((v17443 x)) (let ((fail17444 (lambda () (let ((fail17445 (lambda () (let ((fail17446 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17443) (let ((w17447 (car v17443)) (x17448 (cdr v17443))) (if (cons? w17447) (let ((w17449 (car w17447)) (x17450 (cdr w17447))) (let ((abs w17449)) (if (cons? x17450) (let ((w17451 (car x17450)) (x17452 (cdr x17450))) (if (cons? w17451) (let ((w17453 (car w17451)) (x17454 (cdr w17451))) (let ((c w17453)) (if (cons? x17454) (let ((w17455 (car x17454)) (x17456 (cdr x17454))) (let ((pp w17455)) (if (null? x17456) (if (null? x17452) (if (cons? x17448) (let ((w17457 (car x17448)) (x17458 (cdr x17448))) (let ((cc w17457)) (if (cons? x17458) (let ((w17459 (car x17458)) (x17460 (cdr x17458))) (if (cons? w17459) (let ((w17461 (car w17459)) (x17462 (cdr w17459))) (let ((fk w17461)) (let ((fkk x17462)) (if (list? fkk) (if (null? x17460) (progn (quasiquote (fk ((unquote abs) ((unquote cc) (unquote pp))) (unquote-splicing fkk)))) (fail17446)) (fail17446))))) (fail17446))) (fail17446)))) (fail17446)) (fail17446)) (fail17446)))) (fail17446)))) (fail17446))) (fail17446)))) (fail17446))) (fail17446)))))) (if (cons? v17443) (let ((w17466 (car v17443)) (x17467 (cdr v17443))) (let ((abs w17466)) (if (cons? x17467) (let ((w17468 (car x17467)) (x17469 (cdr x17467))) (let ((cc w17468)) (if (cons? x17469) (let ((w17470 (car x17469)) (x17471 (cdr x17469))) (if (cons? w17470) (let ((w17472 (car w17470)) (x17473 (cdr w17470))) (let ((fk w17472)) (if (null? x17473) (if (null? x17471) (progn (quasiquote ((unquote fk)))) (fail17445)) (fail17445)))) (fail17445))) (fail17445)))) (fail17445)))) (fail17445)))))) (if (cons? v17443) (let ((w17474 (car v17443)) (x17475 (cdr v17443))) (let ((abs w17474)) (if (cons? x17475) (let ((w17476 (car x17475)) (x17477 (cdr x17475))) (let ((cc w17476)) (if (cons? x17477) (let ((w17478 (car x17477)) (x17479 (cdr x17477))) (if (cons? w17478) (let ((w17480 (car w17478)) (x17481 (cdr w17478))) (if (binary= w17480 (quote progn)) (let ((l x17481)) (if (null? x17479) (progn (quasiquote (progn (unquote-splicing l)))) (fail17444))) (fail17444))) (fail17444))) (fail17444)))) (fail17444)))) (fail17444))))) (defsyntax set-phd-sk x (let ((v17482 x)) (let ((fail17483 (lambda () (let ((fail17484 (lambda () (let ((fail17485 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17482) (let ((w17486 (car v17482)) (x17487 (cdr v17482))) (if (cons? w17486) (let ((w17488 (car w17486)) (x17489 (cdr w17486))) (let ((abs w17488)) (if (cons? x17489) (let ((w17490 (car x17489)) (x17491 (cdr x17489))) (if (cons? w17490) (let ((w17492 (car w17490)) (x17493 (cdr w17490))) (let ((c w17492)) (if (cons? x17493) (let ((w17494 (car x17493)) (x17495 (cdr x17493))) (let ((pp w17494)) (if (null? x17495) (if (null? x17491) (if (cons? x17487) (let ((w17496 (car x17487)) (x17497 (cdr x17487))) (let ((cc w17496)) (if (cons? x17497) (let ((w17498 (car x17497)) (x17499 (cdr x17497))) (if (cons? w17498) (let ((w17500 (car w17498)) (x17501 (cdr w17498))) (let ((fk w17500)) (let ((fkk x17501)) (if (list? fkk) (let ((i x17499)) (if (list? i) (progn (quasiquote ((unquote fk) ((unquote abs) ((unquote cc) (unquote pp))) (unquote-splicing fkk) (unquote-splicing i)))) (fail17485))) (fail17485))))) (fail17485))) (fail17485)))) (fail17485)) (fail17485)) (fail17485)))) (fail17485)))) (fail17485))) (fail17485)))) (fail17485))) (fail17485)))))) (if (cons? v17482) (let ((w17508 (car v17482)) (x17509 (cdr v17482))) (let ((abs w17508)) (if (cons? x17509) (let ((w17510 (car x17509)) (x17511 (cdr x17509))) (let ((cc w17510)) (if (cons? x17511) (let ((w17512 (car x17511)) (x17513 (cdr x17511))) (if (cons? w17512) (let ((w17514 (car w17512)) (x17515 (cdr w17512))) (let ((fk w17514)) (if (null? x17515) (let ((i x17513)) (if (list? i) (progn (quasiquote ((unquote fk)))) (fail17484))) (fail17484)))) (fail17484))) (fail17484)))) (fail17484)))) (fail17484)))))) (if (cons? v17482) (let ((w17519 (car v17482)) (x17520 (cdr v17482))) (let ((abs w17519)) (if (cons? x17520) (let ((w17521 (car x17520)) (x17522 (cdr x17520))) (let ((cc w17521)) (if (cons? x17522) (let ((w17523 (car x17522)) (x17524 (cdr x17522))) (if (cons? w17523) (let ((w17525 (car w17523)) (x17526 (cdr w17523))) (if (binary= w17525 (quote progn)) (let ((l x17526)) (let ((i x17524)) (if (list? i) (progn (quasiquote (progn (unquote-splicing l)))) (fail17483)))) (fail17483))) (fail17483))) (fail17483)))) (fail17483)))) (fail17483))))) (defsyntax match-$$ x (let ((v17530 x)) (let ((fail17531 (lambda () (let ((fail17532 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17530) (let ((w17533 (car v17530)) (x17534 (cdr v17530))) (let ((abs w17533)) (if (cons? x17534) (let ((w17535 (car x17534)) (x17536 (cdr x17534))) (let ((newpat w17535)) (if (cons? x17536) (let ((w17537 (car x17536)) (x17538 (cdr x17536))) (let ((m w17537)) (if (cons? x17538) (let ((w17539 (car x17538)) (x17540 (cdr x17538))) (if (null? w17539) (if (cons? x17540) (let ((w17541 (car x17540)) (x17542 (cdr x17540))) (let ((v w17541)) (if (cons? x17542) (let ((w17543 (car x17542)) (x17544 (cdr x17542))) (let ((kt w17543)) (if (cons? x17544) (let ((w17545 (car x17544)) (x17546 (cdr x17544))) (let ((ke w17545)) (if (cons? x17546) (let ((w17547 (car x17546)) (x17548 (cdr x17546))) (let ((i w17547)) (if (null? x17548) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote newpat) () (unquote kt) (unquote ke) (unquote i)))) (fail17532)))) (fail17532)))) (fail17532)))) (fail17532)))) (fail17532)) (fail17532))) (fail17532)))) (fail17532)))) (fail17532)))) (fail17532)))))) (if (cons? v17530) (let ((w17549 (car v17530)) (x17550 (cdr v17530))) (let ((abs w17549)) (if (cons? x17550) (let ((w17551 (car x17550)) (x17552 (cdr x17550))) (let ((a w17551)) (if (list? a) (if (cons? x17552) (let ((w17556 (car x17552)) (x17557 (cdr x17552))) (let ((n w17556)) (if (cons? x17557) (let ((w17558 (car x17557)) (x17559 (cdr x17557))) (if (cons? w17558) (let ((w17560 (car w17558)) (x17561 (cdr w17558))) (let ((p1 w17560)) (let ((p2 x17561)) (if (list? p2) (let ((v x17559)) (progn (if (symbol? p1) (let ((acc (concatenate n (quote -) p1))) (quasiquote (match-$$ (unquote abs) ((unquote-splicing a) (= (unquote acc) (setter (unquote acc)) (unquote p1))) (unquote n) (unquote p2) (unquote-splicing v)))) (error <condition> "$$ matchers should be constituated of symbols")))) (fail17531))))) (fail17531))) (fail17531)))) (fail17531)) (fail17531)))) (fail17531)))) (fail17531))))) (defsyntax match-$ x (let ((v17565 x)) (let ((fail17566 (lambda () (let ((fail17567 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17565) (let ((w17568 (car v17565)) (x17569 (cdr v17565))) (let ((abs w17568)) (if (cons? x17569) (let ((w17570 (car x17569)) (x17571 (cdr x17569))) (let ((newpat w17570)) (if (cons? x17571) (let ((w17572 (car x17571)) (x17573 (cdr x17571))) (let ((m w17572)) (if (cons? x17573) (let ((w17574 (car x17573)) (x17575 (cdr x17573))) (if (null? w17574) (if (cons? x17575) (let ((w17576 (car x17575)) (x17577 (cdr x17575))) (let ((v w17576)) (if (cons? x17577) (let ((w17578 (car x17577)) (x17579 (cdr x17577))) (let ((kt w17578)) (if (cons? x17579) (let ((w17580 (car x17579)) (x17581 (cdr x17579))) (let ((ke w17580)) (if (cons? x17581) (let ((w17582 (car x17581)) (x17583 (cdr x17581))) (let ((i w17582)) (if (null? x17583) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote newpat) () (unquote kt) (unquote ke) (unquote i)))) (fail17567)))) (fail17567)))) (fail17567)))) (fail17567)))) (fail17567)) (fail17567))) (fail17567)))) (fail17567)))) (fail17567)))) (fail17567)))))) (if (cons? v17565) (let ((w17584 (car v17565)) (x17585 (cdr v17565))) (let ((abs w17584)) (if (cons? x17585) (let ((w17586 (car x17585)) (x17587 (cdr x17585))) (let ((a w17586)) (if (list? a) (if (cons? x17587) (let ((w17591 (car x17587)) (x17592 (cdr x17587))) (let ((n w17591)) (if (cons? x17592) (let ((w17593 (car x17592)) (x17594 (cdr x17592))) (if (cons? w17593) (let ((w17595 (car w17593)) (x17596 (cdr w17593))) (let ((p1 w17595)) (let ((p2 x17596)) (if (list? p2) (let ((v x17594)) (progn (let ((wcar (gensym "wcar")) (wcdr (gensym "wcdr"))) (quasiquote (if (cons? (unquote n)) (let (((unquote wcar) (car (unquote n))) ((unquote wcdr) (cdr (unquote n)))) (match-$ (unquote abs) ((unquote-splicing a) (= (car (unquote wcar)) (cdr (unquote wcar)) (unquote p1))) (unquote wcdr) (unquote p2) (unquote-splicing v))) (error "$ matcher has too many patterns")))))) (fail17566))))) (fail17566))) (fail17566)))) (fail17566)) (fail17566)))) (fail17566)))) (fail17566))))) (defsyntax match-gen-ellipses x (let ((v17600 x)) (let ((fail17601 (lambda () (let ((fail17602 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17600) (let ((w17603 (car v17600)) (x17604 (cdr v17600))) (let ((abs w17603)) (if (cons? x17604) (let ((w17605 (car x17604)) (x17606 (cdr x17604))) (let ((v w17605)) (if (cons? x17606) (let ((w17607 (car x17606)) (x17608 (cdr x17606))) (let ((p w17607)) (if (cons? x17608) (let ((w17609 (car x17608)) (x17610 (cdr x17608))) (let ((r w17609)) (if (cons? x17610) (let ((w17611 (car x17610)) (x17612 (cdr x17610))) (let ((g+s w17611)) (if (cons? x17612) (let ((w17613 (car x17612)) (x17614 (cdr x17612))) (let ((sk w17613)) (if (list? sk) (if (cons? x17614) (let ((w17618 (car x17614)) (x17619 (cdr x17614))) (let ((fk w17618)) (if (cons? x17619) (let ((w17620 (car x17619)) (x17621 (cdr x17619))) (let ((i w17620)) (if (cons? x17621) (let ((w17622 (car x17621)) (x17623 (cdr x17621))) (letfuns ((loop (ls17627 p-ls17625 p-ls17624) (if (null? ls17627) (progn (let ((id-ls (reverse p-ls17625)) (id (reverse p-ls17624))) (if (null? x17623) (progn (let ((tail-len (gensym "tail-len")) (len (gensym "len")) (n (gensym "n")) (ls (gensym "ls")) (w (gensym "w"))) (quasiquote (match-verify-no-ellipses (unquote r) (let* (((unquote tail-len) (size (quote (unquote r)))) ((unquote ls) (unquote v)) ((unquote len) (size (unquote ls)))) (if (< (unquote len) (unquote tail-len)) (insert-abs (unquote abs) (unquote fk)) (recur loop (((unquote ls) (unquote ls)) ((unquote n) (unquote len)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((= (unquote n) (unquote tail-len)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (match-one (unquote abs) (unquote ls) (unquote r) (() ()) (unquote sk) (unquote fk) (unquote i)))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote n) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))))) (fail17602)))) (if (cons? ls17627) (progn (let ((w17628 (car ls17627))) (if (cons? w17628) (let ((w17629 (car w17628)) (x17630 (cdr w17628))) (let ((id w17629)) (if (cons? x17630) (let ((w17631 (car x17630)) (x17632 (cdr x17630))) (let ((id-ls w17631)) (if (null? x17632) (loop (cdr ls17627) (cons id-ls p-ls17625) (cons id p-ls17624)) (fail17602)))) (fail17602)))) (fail17602)))) (if else (progn (fail17602)) (cond)))))) (loop w17622 (quote ()) (quote ())))) (fail17602)))) (fail17602)))) (fail17602)) (fail17602)))) (fail17602)))) (fail17602)))) (fail17602)))) (fail17602)))) (fail17602)))) (fail17602)))))) (if (cons? v17600) (let ((w17633 (car v17600)) (x17634 (cdr v17600))) (let ((abs w17633)) (if (cons? x17634) (let ((w17635 (car x17634)) (x17636 (cdr x17634))) (let ((v w17635)) (if (cons? x17636) (let ((w17637 (car x17636)) (x17638 (cdr x17636))) (let ((p w17637)) (if (cons? x17638) (let ((w17639 (car x17638)) (x17640 (cdr x17638))) (if (null? w17639) (if (cons? x17640) (let ((w17641 (car x17640)) (x17642 (cdr x17640))) (let ((g+s w17641)) (if (cons? x17642) (let ((w17643 (car x17642)) (x17644 (cdr x17642))) (let ((sk w17643)) (if (list? sk) (if (cons? x17644) (let ((w17648 (car x17644)) (x17649 (cdr x17644))) (let ((fk w17648)) (if (cons? x17649) (let ((w17650 (car x17649)) (x17651 (cdr x17649))) (let ((i w17650)) (if (cons? x17651) (let ((w17652 (car x17651)) (x17653 (cdr x17651))) (letfuns ((loop (ls17657 p-ls17655 p-ls17654) (if (null? ls17657) (progn (let ((id-ls (reverse p-ls17655)) (id (reverse p-ls17654))) (if (null? x17653) (progn (let ((ls (gensym "ls")) (w (gensym "w"))) (quasiquote (match-check-identifier (unquote p) (let (((unquote p) (unquote v))) (if (list? (unquote p)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote abs) (unquote fk)))) (recur loop (((unquote ls) (unquote v)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((null? (unquote ls)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))) (fail17601)))) (if (cons? ls17657) (progn (let ((w17658 (car ls17657))) (if (cons? w17658) (let ((w17659 (car w17658)) (x17660 (cdr w17658))) (let ((id w17659)) (if (cons? x17660) (let ((w17661 (car x17660)) (x17662 (cdr x17660))) (let ((id-ls w17661)) (if (null? x17662) (loop (cdr ls17657) (cons id-ls p-ls17655) (cons id p-ls17654)) (fail17601)))) (fail17601)))) (fail17601)))) (if else (progn (fail17601)) (cond)))))) (loop w17652 (quote ()) (quote ())))) (fail17601)))) (fail17601)))) (fail17601)) (fail17601)))) (fail17601)))) (fail17601)) (fail17601))) (fail17601)))) (fail17601)))) (fail17601)))) (fail17601))))) (defsyntax match-gen-ellipses-n x (let ((v17663 x)) (let ((fail17664 (lambda () (let ((fail17665 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17663) (let ((w17666 (car v17663)) (x17667 (cdr v17663))) (let ((abs w17666)) (if (cons? x17667) (let ((w17668 (car x17667)) (x17669 (cdr x17667))) (let ((m w17668)) (if (cons? x17669) (let ((w17670 (car x17669)) (x17671 (cdr x17669))) (let ((v w17670)) (if (cons? x17671) (let ((w17672 (car x17671)) (x17673 (cdr x17671))) (let ((p w17672)) (if (cons? x17673) (let ((w17674 (car x17673)) (x17675 (cdr x17673))) (let ((r w17674)) (if (cons? x17675) (let ((w17676 (car x17675)) (x17677 (cdr x17675))) (let ((g+s w17676)) (if (cons? x17677) (let ((w17678 (car x17677)) (x17679 (cdr x17677))) (let ((sk w17678)) (if (list? sk) (if (cons? x17679) (let ((w17683 (car x17679)) (x17684 (cdr x17679))) (let ((fk w17683)) (if (cons? x17684) (let ((w17685 (car x17684)) (x17686 (cdr x17684))) (let ((i w17685)) (if (cons? x17686) (let ((w17687 (car x17686)) (x17688 (cdr x17686))) (letfuns ((loop (ls17692 p-ls17690 p-ls17689) (if (null? ls17692) (progn (let ((id-ls (reverse p-ls17690)) (id (reverse p-ls17689))) (if (null? x17688) (progn (let ((tail-len (gensym "tail-len")) (len (gensym "len")) (n (gensym "n")) (ls (gensym "ls")) (im (gensym "im")) (w (gensym "w"))) (quasiquote (match-verify-no-ellipses (unquote r) (let* (((unquote tail-len) (size (quote (unquote r)))) ((unquote ls) (unquote v)) ((unquote len) (size (unquote ls)))) (if (< (unquote len) (unquote tail-len)) (insert-abs (unquote abs) (unquote fk)) (recur loop (((unquote ls) (unquote ls)) ((unquote n) (unquote len)) ((unquote im) (unquote m)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((= (unquote n) (unquote tail-len)) (if (> (unquote im) 0) (insert-abs (unquote abs) (unquote fk)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (match-one (unquote abs) (unquote ls) (unquote r) (() ()) (unquote sk) (unquote fk) (unquote i))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote n) 1) (- (unquote im) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))))) (fail17665)))) (if (cons? ls17692) (progn (let ((w17693 (car ls17692))) (if (cons? w17693) (let ((w17694 (car w17693)) (x17695 (cdr w17693))) (let ((id w17694)) (if (cons? x17695) (let ((w17696 (car x17695)) (x17697 (cdr x17695))) (let ((id-ls w17696)) (if (null? x17697) (loop (cdr ls17692) (cons id-ls p-ls17690) (cons id p-ls17689)) (fail17665)))) (fail17665)))) (fail17665)))) (if else (progn (fail17665)) (cond)))))) (loop w17687 (quote ()) (quote ())))) (fail17665)))) (fail17665)))) (fail17665)) (fail17665)))) (fail17665)))) (fail17665)))) (fail17665)))) (fail17665)))) (fail17665)))) (fail17665)))) (fail17665)))))) (if (cons? v17663) (let ((w17698 (car v17663)) (x17699 (cdr v17663))) (let ((abs w17698)) (if (cons? x17699) (let ((w17700 (car x17699)) (x17701 (cdr x17699))) (let ((n w17700)) (if (cons? x17701) (let ((w17702 (car x17701)) (x17703 (cdr x17701))) (let ((v w17702)) (if (cons? x17703) (let ((w17704 (car x17703)) (x17705 (cdr x17703))) (let ((p w17704)) (if (cons? x17705) (let ((w17706 (car x17705)) (x17707 (cdr x17705))) (if (null? w17706) (if (cons? x17707) (let ((w17708 (car x17707)) (x17709 (cdr x17707))) (let ((g+s w17708)) (if (cons? x17709) (let ((w17710 (car x17709)) (x17711 (cdr x17709))) (let ((sk w17710)) (if (list? sk) (if (cons? x17711) (let ((w17715 (car x17711)) (x17716 (cdr x17711))) (let ((fk w17715)) (if (cons? x17716) (let ((w17717 (car x17716)) (x17718 (cdr x17716))) (let ((i w17717)) (if (cons? x17718) (let ((w17719 (car x17718)) (x17720 (cdr x17718))) (letfuns ((loop (ls17724 p-ls17722 p-ls17721) (if (null? ls17724) (progn (let ((id-ls (reverse p-ls17722)) (id (reverse p-ls17721))) (if (null? x17720) (progn (let ((ls (gensym "ls")) (in (gensym "in")) (w (gensym "w"))) (quasiquote (match-check-identifier (unquote p) (let (((unquote p) (unquote v))) (if (list? (unquote p)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote abs) (unquote fk)))) (recur loop (((unquote ls) (unquote v)) ((unquote in) (unquote n)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((null? (unquote ls)) (if (> (unquote in) 0) (insert-abs (unquote abs) (unquote fk)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote in) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))) (fail17664)))) (if (cons? ls17724) (progn (let ((w17725 (car ls17724))) (if (cons? w17725) (let ((w17726 (car w17725)) (x17727 (cdr w17725))) (let ((id w17726)) (if (cons? x17727) (let ((w17728 (car x17727)) (x17729 (cdr x17727))) (let ((id-ls w17728)) (if (null? x17729) (loop (cdr ls17724) (cons id-ls p-ls17722) (cons id p-ls17721)) (fail17664)))) (fail17664)))) (fail17664)))) (if else (progn (fail17664)) (cond)))))) (loop w17719 (quote ()) (quote ())))) (fail17664)))) (fail17664)))) (fail17664)) (fail17664)))) (fail17664)))) (fail17664)) (fail17664))) (fail17664)))) (fail17664)))) (fail17664)))) (fail17664)))) (fail17664))))) (defsyntax match-verify-no-ellipses x (let ((v17730 x)) (let ((fail17731 (lambda () (let ((fail17732 (lambda () (let ((fail17733 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17730) (let ((w17734 (car v17730)) (x17735 (cdr v17730))) (let ((x w17734)) (if (cons? x17735) (let ((w17736 (car x17735)) (x17737 (cdr x17735))) (let ((sk w17736)) (if (null? x17737) (progn (quasiquote (error <condition> (fmt "dotted tail not allowed after ellipse ~a" (unquote x))))) (fail17733)))) (fail17733)))) (fail17733)))))) (if (cons? v17730) (let ((w17738 (car v17730)) (x17739 (cdr v17730))) (if (null? w17738) (if (cons? x17739) (let ((w17740 (car x17739)) (x17741 (cdr x17739))) (let ((sk w17740)) (if (null? x17741) (progn sk) (fail17732)))) (fail17732)) (fail17732))) (fail17732)))))) (if (cons? v17730) (let ((w17742 (car v17730)) (x17743 (cdr v17730))) (if (cons? w17742) (let ((w17744 (car w17742)) (x17745 (cdr w17742))) (let ((x w17744)) (let ((y x17745)) (if (cons? x17743) (let ((w17746 (car x17743)) (x17747 (cdr x17743))) (let ((sk w17746)) (if (null? x17747) (progn (quasiquote (match-check-ellipse (unquote x) (error <condition> "multiple ellipse patterns not allowed at same level") (match-verify-no-ellipses (unquote y) (unquote sk))))) (fail17731)))) (fail17731))))) (fail17731))) (fail17731))))) (defsyntax match-drop-ids x (let ((v17748 x)) (let ((fail17749 (lambda () (let ((fail17750 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17748) (let ((w17751 (car v17748)) (x17752 (cdr v17748))) (let ((abs w17751)) (if (cons? x17752) (let ((w17753 (car x17752)) (x17754 (cdr x17752))) (let ((expr w17753)) (let ((ids x17754)) (if (list? ids) (progn expr) (fail17750))))) (fail17750)))) (fail17750)))))) (if (cons? v17748) (let ((w17758 (car v17748)) (x17759 (cdr v17748))) (let ((expr w17758)) (if (null? x17759) (progn expr) (fail17749)))) (fail17749))))) (defsyntax match-gen-search x (let ((v17760 x)) (let ((fail17761 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17760) (let ((w17762 (car v17760)) (x17763 (cdr v17760))) (let ((abs w17762)) (if (cons? x17763) (let ((w17764 (car x17763)) (x17765 (cdr x17763))) (let ((v w17764)) (if (cons? x17765) (let ((w17766 (car x17765)) (x17767 (cdr x17765))) (let ((p w17766)) (if (cons? x17767) (let ((w17768 (car x17767)) (x17769 (cdr x17767))) (let ((q w17768)) (if (cons? x17769) (let ((w17770 (car x17769)) (x17771 (cdr x17769))) (let ((g+s w17770)) (if (cons? x17771) (let ((w17772 (car x17771)) (x17773 (cdr x17771))) (let ((sk w17772)) (if (cons? x17773) (let ((w17774 (car x17773)) (x17775 (cdr x17773))) (let ((fk w17774)) (if (cons? x17775) (let ((w17776 (car x17775)) (x17777 (cdr x17775))) (let ((i w17776)) (if (cons? x17777) (let ((w17778 (car x17777)) (x17779 (cdr x17777))) (letfuns ((loop (ls17783 p-ls17781 p-ls17780) (if (null? ls17783) (progn (let ((id-ls (reverse p-ls17781)) (id (reverse p-ls17780))) (if (null? x17779) (progn (let ((try (gensym "try")) (next (gensym "next")) (ls (gensym "ls")) (w (gensym "w")) (loop (gensym "loop")) (u (gensym "u")) (fail (gensym "fail"))) (let ((ret (quasiquote (letfuns (((unquote try) ((unquote w) (unquote fail) (unquote-splicing id-ls)) (match-one (unquote abs) (unquote w) (unquote q) (unquote g+s) (match-drop-ids (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (unquote sk))) (match-drop-ids ((unquote next) (unquote w) (unquote fail) (unquote-splicing id-ls))) (unquote i))) ((unquote next) ((unquote w) (unquote fail) (unquote-splicing id-ls)) (if (not (cons? (unquote w))) ((unquote fail)) (let (((unquote u) (car (unquote w)))) (match-one (unquote abs) (unquote u) (unquote p) ((car (unquote w)) ((setter car) (unquote w))) (match-drop-ids (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id-ls) (cons (unquote id) (unquote id-ls))))) id id-ls)) (recur (unquote loop) (((unquote ls) (cdr (unquote w)))) (if (cons? (unquote ls)) ((unquote try) (car (unquote ls)) (lambda () ((unquote loop) (cdr (unquote ls)))) (unquote-splicing id-ls)) ((unquote fail)))))) (match-drop-ids ((unquote fail))) (unquote i)))))) (let (unquote (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls)) ((unquote try) (unquote v) (lambda () (insert-abs (unquote abs) (unquote fk))) (unquote-splicing id-ls))))))) ret))) (fail17761)))) (if (cons? ls17783) (progn (let ((w17784 (car ls17783))) (if (cons? w17784) (let ((w17785 (car w17784)) (x17786 (cdr w17784))) (let ((id w17785)) (if (cons? x17786) (let ((w17787 (car x17786)) (x17788 (cdr x17786))) (let ((id-ls w17787)) (if (null? x17788) (loop (cdr ls17783) (cons id-ls p-ls17781) (cons id p-ls17780)) (fail17761)))) (fail17761)))) (fail17761)))) (if else (progn (fail17761)) (cond)))))) (loop w17778 (quote ()) (quote ())))) (fail17761)))) (fail17761)))) (fail17761)))) (fail17761)))) (fail17761)))) (fail17761)))) (fail17761)))) (fail17761)))) (fail17761))))) (defsyntax match-quasiquote x (let ((v17789 x)) (let ((fail17790 (lambda () (let ((fail17791 (lambda () (let ((fail17792 (lambda () (let ((fail17793 (lambda () (let ((fail17794 (lambda () (let ((fail17795 (lambda () (let ((fail17796 (lambda () (let ((fail17797 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17789) (let ((w17798 (car v17789)) (x17799 (cdr v17789))) (let ((abs w17798)) (if (cons? x17799) (let ((w17800 (car x17799)) (x17801 (cdr x17799))) (let ((v w17800)) (if (cons? x17801) (let ((w17802 (car x17801)) (x17803 (cdr x17801))) (let ((x w17802)) (if (cons? x17803) (let ((w17804 (car x17803)) (x17805 (cdr x17803))) (let ((g+s w17804)) (if (cons? x17805) (let ((w17806 (car x17805)) (x17807 (cdr x17805))) (let ((sk w17806)) (if (cons? x17807) (let ((w17808 (car x17807)) (x17809 (cdr x17807))) (let ((fk w17808)) (if (cons? x17809) (let ((w17810 (car x17809)) (x17811 (cdr x17809))) (let ((i w17810)) (let ((depth x17811)) (progn (quasiquote (match-one (unquote abs) (unquote v) (quote (unquote x)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))))) (fail17797)))) (fail17797)))) (fail17797)))) (fail17797)))) (fail17797)))) (fail17797)))) (fail17797)))))) (if (cons? v17789) (let ((w17812 (car v17789)) (x17813 (cdr v17789))) (let ((abs w17812)) (if (cons? x17813) (let ((w17814 (car x17813)) (x17815 (cdr x17813))) (let ((v w17814)) (if (cons? x17815) (let ((w17816 (car x17815)) (x17817 (cdr x17815))) (if (vector? w17816) (let ((len17818 (vector-size w17816))) (if (>= len17818 0) (letfuns ((loop17820 (j17821 p-ls17819) (if (>= j17821 len17818) (let ((elt (reverse p-ls17819))) (if (cons? x17817) (let ((w17823 (car x17817)) (x17824 (cdr x17817))) (let ((g+s w17823)) (if (cons? x17824) (let ((w17825 (car x17824)) (x17826 (cdr x17824))) (let ((sk w17825)) (if (cons? x17826) (let ((w17827 (car x17826)) (x17828 (cdr x17826))) (let ((fk w17827)) (if (cons? x17828) (let ((w17829 (car x17828)) (x17830 (cdr x17828))) (let ((i w17829)) (let ((depth x17830)) (progn (let ((ls (gensym "ls"))) (quasiquote (if (vector? (unquote v)) (let (((unquote ls) (convert (unquote v) <list>))) (match-quasiquote (unquote abs) (unquote ls) (unquote elt) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))) (insert-abs (unquote abs) (unquote fk))))))))) (fail17796)))) (fail17796)))) (fail17796)))) (fail17796))) (let ((w17822 (vector-ref w17816 j17821))) (let ((elt w17822)) (loop17820 (+ j17821 1) (cons elt p-ls17819))))))) (loop17820 0 (quote ()))) (fail17796))) (fail17796))) (fail17796)))) (fail17796)))) (fail17796)))))) (if (cons? v17789) (let ((w17831 (car v17789)) (x17832 (cdr v17789))) (let ((a w17831)) (if (cons? w17831) (let ((w17833 (car w17831)) (x17834 (cdr w17831))) (let ((abs w17833)) (if (cons? x17834) (let ((w17835 (car x17834)) (x17836 (cdr x17834))) (if (cons? w17835) (let ((w17837 (car w17835)) (x17838 (cdr w17835))) (if (cons? w17837) (let ((w17839 (car w17837)) (x17840 (cdr w17837))) (let ((qcar w17839)) (if (cons? x17840) (let ((w17841 (car x17840)) (x17842 (cdr x17840))) (let ((qcdr w17841)) (if (cons? x17842) (let ((w17843 (car x17842)) (x17844 (cdr x17842))) (let ((qcons? w17843)) (if (cons? x17844) (let ((w17845 (car x17844)) (x17846 (cdr x17844))) (let ((qnull? w17845)) (if (cons? x17846) (let ((w17847 (car x17846)) (x17848 (cdr x17846))) (let ((qbinary= w17847)) (if (null? x17848) (if (cons? x17838) (let ((w17849 (car x17838)) (x17850 (cdr x17838))) (let ((pp w17849)) (if (null? x17850) (if (null? x17836) (if (cons? x17832) (let ((w17851 (car x17832)) (x17852 (cdr x17832))) (let ((v w17851)) (if (cons? x17852) (let ((w17853 (car x17852)) (x17854 (cdr x17852))) (if (cons? w17853) (let ((w17855 (car w17853)) (x17856 (cdr w17853))) (let ((p w17855)) (let ((q x17856)) (if (cons? x17854) (let ((w17857 (car x17854)) (x17858 (cdr x17854))) (let ((g+s w17857)) (if (cons? x17858) (let ((w17859 (car x17858)) (x17860 (cdr x17858))) (let ((sk w17859)) (if (cons? x17860) (let ((w17861 (car x17860)) (x17862 (cdr x17860))) (let ((fk w17861)) (if (cons? x17862) (let ((w17863 (car x17862)) (x17864 (cdr x17862))) (let ((i w17863)) (let ((depth x17864)) (progn (let ((w (gensym "w"))) (quasiquote (if ((unquote qcons?) (unquote v)) (let (((unquote w) ((unquote qcar) (unquote v))) ((unquote x) ((unquote qcdr) (unquote v)))) (match-quasiquote (unquote a) (unquote w) (unquote p) (unquote g+s) (match-quasiquote-step (unquote x) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote depth)) (unquote fk) (unquote i) (unquote-splicing depth))) (insert-abs (unquote a) (unquote fk))))))))) (fail17795)))) (fail17795)))) (fail17795)))) (fail17795))))) (fail17795))) (fail17795)))) (fail17795)) (fail17795)) (fail17795)))) (fail17795)) (fail17795)))) (fail17795)))) (fail17795)))) (fail17795)))) (fail17795)))) (fail17795))) (fail17795))) (fail17795)))) (fail17795)))) (fail17795)))))) (if (cons? v17789) (let ((w17865 (car v17789)) (x17866 (cdr v17789))) (let ((abs w17865)) (if (cons? x17866) (let ((w17867 (car x17866)) (x17868 (cdr x17866))) (let ((v w17867)) (if (cons? x17868) (let ((w17869 (car x17868)) (x17870 (cdr x17868))) (if (cons? w17869) (let ((w17871 (car w17869)) (x17872 (cdr w17869))) (if (binary= w17871 (quote unquote-splicing)) (if (cons? x17872) (let ((w17873 (car x17872)) (x17874 (cdr x17872))) (let ((p w17873)) (if (null? x17874) (if (cons? x17870) (let ((w17875 (car x17870)) (x17876 (cdr x17870))) (let ((g+s w17875)) (if (cons? x17876) (let ((w17877 (car x17876)) (x17878 (cdr x17876))) (let ((sk w17877)) (if (cons? x17878) (let ((w17879 (car x17878)) (x17880 (cdr x17878))) (let ((fk w17879)) (if (cons? x17880) (let ((w17881 (car x17880)) (x17882 (cdr x17880))) (let ((i w17881)) (if (cons? x17882) (let ((w17883 (car x17882)) (x17884 (cdr x17882))) (let ((x w17883)) (let ((depth x17884)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))))))) (fail17794)))) (fail17794)))) (fail17794)))) (fail17794)))) (fail17794)) (fail17794)))) (fail17794)) (fail17794))) (fail17794))) (fail17794)))) (fail17794)))) (fail17794)))))) (if (cons? v17789) (let ((w17885 (car v17789)) (x17886 (cdr v17789))) (let ((abs w17885)) (if (cons? x17886) (let ((w17887 (car x17886)) (x17888 (cdr x17886))) (let ((v w17887)) (if (cons? x17888) (let ((w17889 (car x17888)) (x17890 (cdr x17888))) (if (cons? w17889) (let ((w17891 (car w17889)) (x17892 (cdr w17889))) (if (binary= w17891 (quote unquote)) (if (cons? x17892) (let ((w17893 (car x17892)) (x17894 (cdr x17892))) (let ((p w17893)) (if (null? x17894) (if (cons? x17890) (let ((w17895 (car x17890)) (x17896 (cdr x17890))) (let ((g+s w17895)) (if (cons? x17896) (let ((w17897 (car x17896)) (x17898 (cdr x17896))) (let ((sk w17897)) (if (cons? x17898) (let ((w17899 (car x17898)) (x17900 (cdr x17898))) (let ((fk w17899)) (if (cons? x17900) (let ((w17901 (car x17900)) (x17902 (cdr x17900))) (let ((i w17901)) (if (cons? x17902) (let ((w17903 (car x17902)) (x17904 (cdr x17902))) (let ((x w17903)) (let ((depth x17904)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))))))) (fail17793)))) (fail17793)))) (fail17793)))) (fail17793)))) (fail17793)) (fail17793)))) (fail17793)) (fail17793))) (fail17793))) (fail17793)))) (fail17793)))) (fail17793)))))) (if (cons? v17789) (let ((w17905 (car v17789)) (x17906 (cdr v17789))) (let ((abs w17905)) (if (cons? x17906) (let ((w17907 (car x17906)) (x17908 (cdr x17906))) (let ((v w17907)) (if (cons? x17908) (let ((w17909 (car x17908)) (x17910 (cdr x17908))) (if (cons? w17909) (let ((w17911 (car w17909)) (x17912 (cdr w17909))) (if (binary= w17911 (quote quasiquote)) (if (cons? x17912) (let ((w17913 (car x17912)) (x17914 (cdr x17912))) (let ((p w17913)) (if (null? x17914) (if (cons? x17910) (let ((w17915 (car x17910)) (x17916 (cdr x17910))) (let ((g+s w17915)) (if (cons? x17916) (let ((w17917 (car x17916)) (x17918 (cdr x17916))) (let ((sk w17917)) (if (cons? x17918) (let ((w17919 (car x17918)) (x17920 (cdr x17918))) (let ((fk w17919)) (if (cons? x17920) (let ((w17921 (car x17920)) (x17922 (cdr x17920))) (let ((i w17921)) (let ((depth x17922)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote ()) (unquote-splicing depth))))))) (fail17792)))) (fail17792)))) (fail17792)))) (fail17792)) (fail17792)))) (fail17792)) (fail17792))) (fail17792))) (fail17792)))) (fail17792)))) (fail17792)))))) (if (cons? v17789) (let ((w17923 (car v17789)) (x17924 (cdr v17789))) (let ((a w17923)) (if (cons? w17923) (let ((w17925 (car w17923)) (x17926 (cdr w17923))) (let ((abs w17925)) (if (cons? x17926) (let ((w17927 (car x17926)) (x17928 (cdr x17926))) (if (cons? w17927) (let ((w17929 (car w17927)) (x17930 (cdr w17927))) (if (cons? w17929) (let ((w17931 (car w17929)) (x17932 (cdr w17929))) (let ((qcar w17931)) (if (cons? x17932) (let ((w17933 (car x17932)) (x17934 (cdr x17932))) (let ((qcdr w17933)) (if (cons? x17934) (let ((w17935 (car x17934)) (x17936 (cdr x17934))) (let ((qcons? w17935)) (if (cons? x17936) (let ((w17937 (car x17936)) (x17938 (cdr x17936))) (let ((qnull? w17937)) (if (cons? x17938) (let ((w17939 (car x17938)) (x17940 (cdr x17938))) (let ((qbinary= w17939)) (if (null? x17940) (if (cons? x17930) (let ((w17941 (car x17930)) (x17942 (cdr x17930))) (let ((pp w17941)) (if (null? x17942) (if (null? x17928) (if (cons? x17924) (let ((w17943 (car x17924)) (x17944 (cdr x17924))) (let ((v w17943)) (if (cons? x17944) (let ((w17945 (car x17944)) (x17946 (cdr x17944))) (if (cons? w17945) (let ((w17947 (car w17945)) (x17948 (cdr w17945))) (if (cons? w17947) (let ((w17949 (car w17947)) (x17950 (cdr w17947))) (if (binary= w17949 (quote unquote-splicing)) (if (cons? x17950) (let ((w17951 (car x17950)) (x17952 (cdr x17950))) (let ((p w17951)) (if (null? x17952) (let ((rest x17948)) (if (cons? x17946) (let ((w17953 (car x17946)) (x17954 (cdr x17946))) (let ((g+s w17953)) (if (cons? x17954) (let ((w17955 (car x17954)) (x17956 (cdr x17954))) (let ((sk w17955)) (if (cons? x17956) (let ((w17957 (car x17956)) (x17958 (cdr x17956))) (let ((fk w17957)) (if (cons? x17958) (let ((w17959 (car x17958)) (x17960 (cdr x17958))) (let ((i w17959)) (if (null? x17960) (progn (let ((tmp (gensym "tmp"))) (quasiquote (if ((unquote qcons?) (unquote v)) (match-one (unquote a) (unquote v) ((unquote p) (unquote-splicing tmp)) (match-quasiquote (unquote tmp) (unquote rest) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote a) (unquote fk)))))) (fail17791)))) (fail17791)))) (fail17791)))) (fail17791)))) (fail17791))) (fail17791)))) (fail17791)) (fail17791))) (fail17791))) (fail17791))) (fail17791)))) (fail17791)) (fail17791)) (fail17791)))) (fail17791)) (fail17791)))) (fail17791)))) (fail17791)))) (fail17791)))) (fail17791)))) (fail17791))) (fail17791))) (fail17791)))) (fail17791)))) (fail17791)))))) (if (cons? v17789) (let ((w17961 (car v17789)) (x17962 (cdr v17789))) (let ((abs w17961)) (if (cons? x17962) (let ((w17963 (car x17962)) (x17964 (cdr x17962))) (let ((v w17963)) (if (cons? x17964) (let ((w17965 (car x17964)) (x17966 (cdr x17964))) (if (cons? w17965) (let ((w17967 (car w17965)) (x17968 (cdr w17965))) (if (binary= w17967 (quote unquote)) (if (cons? x17968) (let ((w17969 (car x17968)) (x17970 (cdr x17968))) (let ((p w17969)) (if (null? x17970) (if (cons? x17966) (let ((w17971 (car x17966)) (x17972 (cdr x17966))) (let ((g+s w17971)) (if (cons? x17972) (let ((w17973 (car x17972)) (x17974 (cdr x17972))) (let ((sk w17973)) (if (cons? x17974) (let ((w17975 (car x17974)) (x17976 (cdr x17974))) (let ((fk w17975)) (if (cons? x17976) (let ((w17977 (car x17976)) (x17978 (cdr x17976))) (let ((i w17977)) (if (null? x17978) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail17790)))) (fail17790)))) (fail17790)))) (fail17790)))) (fail17790)) (fail17790)))) (fail17790)) (fail17790))) (fail17790))) (fail17790)))) (fail17790)))) (fail17790))))) (defsyntax match-quasiquote-step x (let ((v17979 x)) (let ((fail17980 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17979) (let ((w17981 (car v17979)) (x17982 (cdr v17979))) (let ((abs w17981)) (if (cons? x17982) (let ((w17983 (car x17982)) (x17984 (cdr x17982))) (let ((x w17983)) (if (cons? x17984) (let ((w17985 (car x17984)) (x17986 (cdr x17984))) (let ((q w17985)) (if (cons? x17986) (let ((w17987 (car x17986)) (x17988 (cdr x17986))) (let ((g+s w17987)) (if (cons? x17988) (let ((w17989 (car x17988)) (x17990 (cdr x17988))) (let ((sk w17989)) (if (cons? x17990) (let ((w17991 (car x17990)) (x17992 (cdr x17990))) (let ((fk w17991)) (if (cons? x17992) (let ((w17993 (car x17992)) (x17994 (cdr x17992))) (let ((depth w17993)) (if (cons? x17994) (let ((w17995 (car x17994)) (x17996 (cdr x17994))) (let ((i w17995)) (if (null? x17996) (progn (quasiquote (match-quasiquote (unquote abs) (unquote x) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth)))) (fail17980)))) (fail17980)))) (fail17980)))) (fail17980)))) (fail17980)))) (fail17980)))) (fail17980)))) (fail17980)))) (fail17980))))) (defsyntax match-extract-vars x (let ((v17997 x)) (let ((fail17998 (lambda () (let ((fail17999 (lambda () (let ((fail18000 (lambda () (let ((fail18001 (lambda () (let ((fail18002 (lambda () (let ((fail18003 (lambda () (let ((fail18004 (lambda () (let ((fail18005 (lambda () (let ((fail18006 (lambda () (let ((fail18007 (lambda () (let ((fail18008 (lambda () (let ((fail18009 (lambda () (let ((fail18010 (lambda () (error <condition> "no matching pattern")))) (if (cons? v17997) (let ((w18011 (car v17997)) (x18012 (cdr v17997))) (if (cons? w18011) (let ((w18013 (car w18011)) (x18014 (cdr w18011))) (let ((abs w18013)) (if (cons? x18014) (let ((w18015 (car x18014)) (x18016 (cdr x18014))) (let ((phd w18015)) (if (null? x18016) (if (cons? x18012) (let ((w18017 (car x18012)) (x18018 (cdr x18012))) (let ((p w18017)) (if (cons? x18018) (let ((w18019 (car x18018)) (x18020 (cdr x18018))) (let ((k w18019)) (if (cons? x18020) (let ((w18021 (car x18020)) (x18022 (cdr x18020))) (let ((i w18021)) (if (cons? x18022) (let ((w18023 (car x18022)) (x18024 (cdr x18022))) (let ((v w18023)) (if (null? x18024) (progn (quasiquote (abs-extract-vars () (unquote abs) (unquote phd) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail18010)))) (fail18010)))) (fail18010)))) (fail18010)))) (fail18010)) (fail18010)))) (fail18010)))) (fail18010))) (fail18010)))))) (if (cons? v17997) (let ((w18025 (car v17997)) (x18026 (cdr v17997))) (let ((abs w18025)) (if (cons? x18026) (let ((w18027 (car x18026)) (x18028 (cdr x18026))) (if (cons? w18027) (let ((w18029 (car w18027)) (x18030 (cdr w18027))) (if (binary= w18029 (quote <>)) (if (cons? x18030) (let ((w18031 (car x18030)) (x18032 (cdr x18030))) (let ((f w18031)) (if (cons? x18032) (let ((w18033 (car x18032)) (x18034 (cdr x18032))) (let ((p w18033)) (if (null? x18034) (if (cons? x18028) (let ((w18035 (car x18028)) (x18036 (cdr x18028))) (let ((k w18035)) (if (cons? x18036) (let ((w18037 (car x18036)) (x18038 (cdr x18036))) (let ((i w18037)) (if (cons? x18038) (let ((w18039 (car x18038)) (x18040 (cdr x18038))) (let ((v w18039)) (if (null? x18040) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail18009)))) (fail18009)))) (fail18009)))) (fail18009)) (fail18009)))) (fail18009)))) (fail18009)) (fail18009))) (fail18009))) (fail18009)))) (fail18009)))))) (if (cons? v17997) (let ((w18041 (car v17997)) (x18042 (cdr v17997))) (let ((abs w18041)) (if (cons? x18042) (let ((w18043 (car x18042)) (x18044 (cdr x18042))) (if (cons? w18043) (let ((w18045 (car w18043)) (x18046 (cdr w18043))) (if (binary= w18045 (quote not)) (let ((p x18046)) (let ((x x18044)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail18008))) (fail18008))) (fail18008)))) (fail18008)))))) (if (cons? v17997) (let ((w18047 (car v17997)) (x18048 (cdr v17997))) (let ((abs w18047)) (if (cons? x18048) (let ((w18049 (car x18048)) (x18050 (cdr x18048))) (if (cons? w18049) (let ((w18051 (car w18049)) (x18052 (cdr w18049))) (if (binary= w18051 (quote or)) (let ((p x18052)) (let ((x x18050)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail18007))) (fail18007))) (fail18007)))) (fail18007)))))) (if (cons? v17997) (let ((w18053 (car v17997)) (x18054 (cdr v17997))) (let ((abs w18053)) (if (cons? x18054) (let ((w18055 (car x18054)) (x18056 (cdr x18054))) (if (cons? w18055) (let ((w18057 (car w18055)) (x18058 (cdr w18055))) (if (binary= w18057 (quote and)) (let ((p x18058)) (let ((x x18056)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail18006))) (fail18006))) (fail18006)))) (fail18006)))))) (if (cons? v17997) (let ((w18059 (car v17997)) (x18060 (cdr v17997))) (let ((abs w18059)) (if (cons? x18060) (let ((w18061 (car x18060)) (x18062 (cdr x18060))) (if (cons? w18061) (let ((w18063 (car w18061)) (x18064 (cdr w18061))) (if (binary= w18063 (quote quasiquote)) (if (cons? x18064) (let ((w18065 (car x18064)) (x18066 (cdr x18064))) (let ((x w18065)) (if (null? x18066) (if (cons? x18062) (let ((w18067 (car x18062)) (x18068 (cdr x18062))) (let ((k w18067)) (if (cons? x18068) (let ((w18069 (car x18068)) (x18070 (cdr x18068))) (let ((i w18069)) (if (cons? x18070) (let ((w18071 (car x18070)) (x18072 (cdr x18070))) (let ((v w18071)) (if (null? x18072) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (t)))) (fail18005)))) (fail18005)))) (fail18005)))) (fail18005)) (fail18005)))) (fail18005)) (fail18005))) (fail18005))) (fail18005)))) (fail18005)))))) (if (cons? v17997) (let ((w18073 (car v17997)) (x18074 (cdr v17997))) (let ((abs w18073)) (if (cons? x18074) (let ((w18075 (car x18074)) (x18076 (cdr x18074))) (if (cons? w18075) (let ((w18077 (car w18075)) (x18078 (cdr w18075))) (if (binary= w18077 (quote unquote-splicing)) (if (cons? x18078) (let ((w18079 (car x18078)) (x18080 (cdr x18078))) (let ((x w18079)) (if (null? x18080) (if (cons? x18076) (let ((w18081 (car x18076)) (x18082 (cdr x18076))) (if (cons? w18081) (let ((w18083 (car w18081)) (x18084 (cdr w18081))) (let ((k w18083)) (let ((kk x18084)) (if (list? kk) (if (cons? x18082) (let ((w18088 (car x18082)) (x18089 (cdr x18082))) (let ((i w18088)) (if (cons? x18089) (let ((w18090 (car x18089)) (x18091 (cdr x18089))) (let ((v w18090)) (if (null? x18091) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail18004)))) (fail18004)))) (fail18004)) (fail18004))))) (fail18004))) (fail18004)) (fail18004)))) (fail18004)) (fail18004))) (fail18004))) (fail18004)))) (fail18004)))))) (if (cons? v17997) (let ((w18092 (car v17997)) (x18093 (cdr v17997))) (let ((abs w18092)) (if (cons? x18093) (let ((w18094 (car x18093)) (x18095 (cdr x18093))) (if (cons? w18094) (let ((w18096 (car w18094)) (x18097 (cdr w18094))) (if (binary= w18096 (quote unquote)) (if (cons? x18097) (let ((w18098 (car x18097)) (x18099 (cdr x18097))) (let ((x w18098)) (if (null? x18099) (if (cons? x18095) (let ((w18100 (car x18095)) (x18101 (cdr x18095))) (if (cons? w18100) (let ((w18102 (car w18100)) (x18103 (cdr w18100))) (let ((k w18102)) (let ((kk x18103)) (if (list? kk) (if (cons? x18101) (let ((w18107 (car x18101)) (x18108 (cdr x18101))) (let ((i w18107)) (if (cons? x18108) (let ((w18109 (car x18108)) (x18110 (cdr x18108))) (let ((v w18109)) (if (null? x18110) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail18003)))) (fail18003)))) (fail18003)) (fail18003))))) (fail18003))) (fail18003)) (fail18003)))) (fail18003)) (fail18003))) (fail18003))) (fail18003)))) (fail18003)))))) (if (cons? v17997) (let ((w18111 (car v17997)) (x18112 (cdr v17997))) (let ((abs w18111)) (if (cons? x18112) (let ((w18113 (car x18112)) (x18114 (cdr x18112))) (if (cons? w18113) (let ((w18115 (car w18113)) (x18116 (cdr w18113))) (if (binary= w18115 (quote quote)) (if (cons? x18116) (let ((w18117 (car x18116)) (x18118 (cdr x18116))) (let ((x w18117)) (if (null? x18118) (if (cons? x18114) (let ((w18119 (car x18114)) (x18120 (cdr x18114))) (if (cons? w18119) (let ((w18121 (car w18119)) (x18122 (cdr w18119))) (let ((k w18121)) (let ((kk x18122)) (if (list? kk) (if (cons? x18120) (let ((w18126 (car x18120)) (x18127 (cdr x18120))) (let ((i w18126)) (if (cons? x18127) (let ((w18128 (car x18127)) (x18129 (cdr x18127))) (let ((v w18128)) (if (null? x18129) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail18002)))) (fail18002)))) (fail18002)) (fail18002))))) (fail18002))) (fail18002)) (fail18002)))) (fail18002)) (fail18002))) (fail18002))) (fail18002)))) (fail18002)))))) (if (cons? v17997) (let ((w18130 (car v17997)) (x18131 (cdr v17997))) (let ((abs w18130)) (if (cons? x18131) (let ((w18132 (car x18131)) (x18133 (cdr x18131))) (if (cons? w18132) (let ((w18134 (car w18132)) (x18135 (cdr w18132))) (if (binary= w18134 (quote =)) (if (cons? x18135) (let ((w18136 (car x18135)) (x18137 (cdr x18135))) (let ((u w18136)) (if (cons? x18137) (let ((w18138 (car x18137)) (x18139 (cdr x18137))) (let ((m w18138)) (if (cons? x18139) (let ((w18140 (car x18139)) (x18141 (cdr x18139))) (let ((p w18140)) (if (null? x18141) (let ((x x18133)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x))))) (fail18001)))) (fail18001)))) (fail18001)))) (fail18001)) (fail18001))) (fail18001))) (fail18001)))) (fail18001)))))) (if (cons? v17997) (let ((w18142 (car v17997)) (x18143 (cdr v17997))) (let ((abs w18142)) (if (cons? x18143) (let ((w18144 (car x18143)) (x18145 (cdr x18143))) (if (cons? w18144) (let ((w18146 (car w18144)) (x18147 (cdr w18144))) (if (binary= w18146 (quote =)) (if (cons? x18147) (let ((w18148 (car x18147)) (x18149 (cdr x18147))) (let ((proc w18148)) (if (cons? x18149) (let ((w18150 (car x18149)) (x18151 (cdr x18149))) (let ((p w18150)) (if (null? x18151) (let ((x x18145)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x))))) (fail18000)))) (fail18000)))) (fail18000)) (fail18000))) (fail18000))) (fail18000)))) (fail18000)))))) (if (cons? v17997) (let ((w18152 (car v17997)) (x18153 (cdr v17997))) (let ((abs w18152)) (if (cons? x18153) (let ((w18154 (car x18153)) (x18155 (cdr x18153))) (if (cons? w18154) (let ((w18156 (car w18154)) (x18157 (cdr w18154))) (if (binary= w18156 (quote $)) (if (cons? x18157) (let ((w18158 (car x18157)) (x18159 (cdr x18157))) (let ((rec w18158)) (let ((p x18159)) (let ((x x18155)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))))) (fail17999)) (fail17999))) (fail17999))) (fail17999)))) (fail17999)))))) (if (cons? v17997) (let ((w18160 (car v17997)) (x18161 (cdr v17997))) (let ((abs w18160)) (if (cons? x18161) (let ((w18162 (car x18161)) (x18163 (cdr x18161))) (if (cons? w18162) (let ((w18164 (car w18162)) (x18165 (cdr w18162))) (if (binary= w18164 (quote ?)) (if (cons? x18165) (let ((w18166 (car x18165)) (x18167 (cdr x18165))) (let ((pred w18166)) (let ((p x18167)) (let ((x x18163)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))))) (fail17998)) (fail17998))) (fail17998))) (fail17998)))) (fail17998))))) (defsyntax match-extract-vars2 x (let ((v18168 x)) (let ((fail18169 (lambda () (let ((fail18170 (lambda () (let ((fail18171 (lambda () (let ((fail18172 (lambda () (let ((fail18173 (lambda () (let ((fail18174 (lambda () (let ((fail18175 (lambda () (let ((fail18176 (lambda () (let ((fail18177 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18168) (let ((w18178 (car v18168)) (x18179 (cdr v18168))) (let ((abs w18178)) (if (cons? x18179) (let ((w18180 (car x18179)) (x18181 (cdr x18179))) (let ((p w18180)) (if (cons? x18181) (let ((w18182 (car x18181)) (x18183 (cdr x18181))) (if (cons? w18182) (let ((w18184 (car w18182)) (x18185 (cdr w18182))) (let ((k w18184)) (let ((kk x18185)) (if (list? kk) (if (cons? x18183) (let ((w18189 (car x18183)) (x18190 (cdr x18183))) (let ((i w18189)) (if (list? i) (if (cons? x18190) (let ((w18194 (car x18190)) (x18195 (cdr x18190))) (let ((v w18194)) (if (null? x18195) (progn (let ((p-ls (gensym "p-ls"))) (if (let ((G0018196 (member p i))) (if G0018196 G0018196 (null? (symbol? p)))) (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v))) (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (((unquote p) (unquote p-ls)) (unquote-splicing v))))))) (fail18177)))) (fail18177)) (fail18177)))) (fail18177)) (fail18177))))) (fail18177))) (fail18177)))) (fail18177)))) (fail18177)))))) (if (cons? v18168) (let ((w18197 (car v18168)) (x18198 (cdr v18168))) (let ((abs w18197)) (if (cons? x18198) (let ((w18199 (car x18198)) (x18200 (cdr x18198))) (if (binary= w18199 (quote ***)) (if (cons? x18200) (let ((w18201 (car x18200)) (x18202 (cdr x18200))) (if (cons? w18201) (let ((w18203 (car w18201)) (x18204 (cdr w18201))) (let ((k w18203)) (let ((kk x18204)) (if (list? kk) (if (cons? x18202) (let ((w18208 (car x18202)) (x18209 (cdr x18202))) (let ((i w18208)) (if (cons? x18209) (let ((w18210 (car x18209)) (x18211 (cdr x18209))) (let ((v w18210)) (if (null? x18211) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail18176)))) (fail18176)))) (fail18176)) (fail18176))))) (fail18176))) (fail18176)) (fail18176))) (fail18176)))) (fail18176)))))) (if (cons? v18168) (let ((w18212 (car v18168)) (x18213 (cdr v18168))) (let ((abs w18212)) (if (cons? x18213) (let ((w18214 (car x18213)) (x18215 (cdr x18213))) (if (cons? w18214) (let ((w18216 (car w18214)) (x18217 (cdr w18214))) (if (binary= w18216 (quote __)) (if (cons? x18217) (let ((w18218 (car x18217)) (x18219 (cdr x18217))) (let ((m w18218)) (if (null? x18219) (if (cons? x18215) (let ((w18220 (car x18215)) (x18221 (cdr x18215))) (if (cons? w18220) (let ((w18222 (car w18220)) (x18223 (cdr w18220))) (let ((k w18222)) (let ((kk x18223)) (if (list? kk) (if (cons? x18221) (let ((w18227 (car x18221)) (x18228 (cdr x18221))) (let ((i w18227)) (if (cons? x18228) (let ((w18229 (car x18228)) (x18230 (cdr x18228))) (let ((v w18229)) (if (null? x18230) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail18175)))) (fail18175)))) (fail18175)) (fail18175))))) (fail18175))) (fail18175)) (fail18175)))) (fail18175)) (fail18175))) (fail18175))) (fail18175)))) (fail18175)))))) (if (cons? v18168) (let ((w18231 (car v18168)) (x18232 (cdr v18168))) (let ((abs w18231)) (if (cons? x18232) (let ((w18233 (car x18232)) (x18234 (cdr x18232))) (if (cons? w18233) (let ((w18235 (car w18233)) (x18236 (cdr w18233))) (if (binary= w18235 (quote ..)) (if (cons? x18236) (let ((w18237 (car x18236)) (x18238 (cdr x18236))) (let ((m w18237)) (if (null? x18238) (if (cons? x18234) (let ((w18239 (car x18234)) (x18240 (cdr x18234))) (if (cons? w18239) (let ((w18241 (car w18239)) (x18242 (cdr w18239))) (let ((k w18241)) (let ((kk x18242)) (if (list? kk) (if (cons? x18240) (let ((w18246 (car x18240)) (x18247 (cdr x18240))) (let ((i w18246)) (if (cons? x18247) (let ((w18248 (car x18247)) (x18249 (cdr x18247))) (let ((v w18248)) (if (null? x18249) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail18174)))) (fail18174)))) (fail18174)) (fail18174))))) (fail18174))) (fail18174)) (fail18174)))) (fail18174)) (fail18174))) (fail18174))) (fail18174)))) (fail18174)))))) (if (cons? v18168) (let ((w18250 (car v18168)) (x18251 (cdr v18168))) (let ((abs w18250)) (if (cons? x18251) (let ((w18252 (car x18251)) (x18253 (cdr x18251))) (if (binary= w18252 (quote ___)) (if (cons? x18253) (let ((w18254 (car x18253)) (x18255 (cdr x18253))) (if (cons? w18254) (let ((w18256 (car w18254)) (x18257 (cdr w18254))) (let ((k w18256)) (let ((kk x18257)) (if (list? kk) (if (cons? x18255) (let ((w18261 (car x18255)) (x18262 (cdr x18255))) (let ((i w18261)) (if (cons? x18262) (let ((w18263 (car x18262)) (x18264 (cdr x18262))) (let ((v w18263)) (if (null? x18264) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail18173)))) (fail18173)))) (fail18173)) (fail18173))))) (fail18173))) (fail18173)) (fail18173))) (fail18173)))) (fail18173)))))) (if (cons? v18168) (let ((w18265 (car v18168)) (x18266 (cdr v18168))) (let ((abs w18265)) (if (cons? x18266) (let ((w18267 (car x18266)) (x18268 (cdr x18266))) (if (binary= w18267 (quote _)) (if (cons? x18268) (let ((w18269 (car x18268)) (x18270 (cdr x18268))) (if (cons? w18269) (let ((w18271 (car w18269)) (x18272 (cdr w18269))) (let ((k w18271)) (let ((kk x18272)) (if (list? kk) (if (cons? x18270) (let ((w18276 (car x18270)) (x18277 (cdr x18270))) (let ((i w18276)) (if (cons? x18277) (let ((w18278 (car x18277)) (x18279 (cdr x18277))) (let ((v w18278)) (if (null? x18279) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail18172)))) (fail18172)))) (fail18172)) (fail18172))))) (fail18172))) (fail18172)) (fail18172))) (fail18172)))) (fail18172)))))) (if (cons? v18168) (let ((w18280 (car v18168)) (x18281 (cdr v18168))) (let ((abs w18280)) (if (cons? x18281) (let ((w18282 (car x18281)) (x18283 (cdr x18281))) (if (vector? w18282) (let ((len18284 (vector-size w18282))) (if (>= len18284 0) (letfuns ((loop18286 (j18287 p-ls18285) (if (>= j18287 len18284) (let ((p (reverse p-ls18285))) (let ((x x18283)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (let ((w18288 (vector-ref w18282 j18287))) (let ((p w18288)) (loop18286 (+ j18287 1) (cons p p-ls18285))))))) (loop18286 0 (quote ()))) (fail18171))) (fail18171))) (fail18171)))) (fail18171)))))) (if (cons? v18168) (let ((w18289 (car v18168)) (x18290 (cdr v18168))) (let ((abs w18289)) (if (cons? x18290) (let ((w18291 (car x18290)) (x18292 (cdr x18290))) (if (cons? w18291) (let ((w18293 (car w18291)) (x18294 (cdr w18291))) (let ((p w18293)) (let ((q x18294)) (if (cons? x18292) (let ((w18295 (car x18292)) (x18296 (cdr x18292))) (let ((k w18295)) (if (cons? x18296) (let ((w18297 (car x18296)) (x18298 (cdr x18296))) (let ((i w18297)) (if (cons? x18298) (let ((w18299 (car x18298)) (x18300 (cdr x18298))) (let ((v w18299)) (if (null? x18300) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-extract-vars-step (unquote q) (unquote k) (unquote i) (unquote v)) (unquote i) ()))) (fail18170)))) (fail18170)))) (fail18170)))) (fail18170))))) (fail18170))) (fail18170)))) (fail18170)))))) (if (cons? v18168) (let ((w18301 (car v18168)) (x18302 (cdr v18168))) (let ((abs w18301)) (if (cons? x18302) (let ((w18303 (car x18302)) (x18304 (cdr x18302))) (if (cons? w18303) (let ((w18305 (car w18303)) (x18306 (cdr w18303))) (let ((p w18305)) (if (cons? x18306) (let ((w18307 (car x18306)) (x18308 (cdr x18306))) (let ((q w18307)) (let ((r x18308)) (if (cons? x18304) (let ((w18309 (car x18304)) (x18310 (cdr x18304))) (let ((k w18309)) (if (cons? x18310) (let ((w18311 (car x18310)) (x18312 (cdr x18310))) (let ((i w18311)) (if (cons? x18312) (let ((w18313 (car x18312)) (x18314 (cdr x18312))) (let ((v w18313)) (if (null? x18314) (progn (quasiquote (match-check-ellipse (unquote q) (match-extract-vars (unquote abs) ((unquote p) (unquote-splicing r)) (unquote k) (unquote i) (unquote v)) (match-extract-vars (unquote abs) (unquote p) (match-extract-vars-step ((unquote q) (unquote-splicing r)) (unquote k) (unquote i) (unquote v)) (unquote i) ())))) (fail18169)))) (fail18169)))) (fail18169)))) (fail18169))))) (fail18169)))) (fail18169))) (fail18169)))) (fail18169))))) (defsyntax abs-extract-vars x (let ((v18315 x)) (let ((fail18316 (lambda () (let ((fail18317 (lambda () (let ((fail18318 (lambda () (let ((fail18319 (lambda () (let ((fail18320 (lambda () (let ((fail18321 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18315) (let ((w18322 (car v18315)) (x18323 (cdr v18315))) (if (null? w18322) (if (cons? x18323) (let ((w18324 (car x18323)) (x18325 (cdr x18323))) (let ((a w18324)) (if (cons? x18325) (let ((w18326 (car x18325)) (x18327 (cdr x18325))) (let ((phd w18326)) (if (cons? x18327) (let ((w18328 (car x18327)) (x18329 (cdr x18327))) (let ((p w18328)) (if (cons? x18329) (let ((w18330 (car x18329)) (x18331 (cdr x18329))) (let ((k w18330)) (if (cons? x18331) (let ((w18332 (car x18331)) (x18333 (cdr x18331))) (let ((i w18332)) (if (cons? x18333) (let ((w18334 (car x18333)) (x18335 (cdr x18333))) (let ((v w18334)) (if (null? x18335) (progn (quasiquote (match-extract-phd () (unquote phd) (unquote a) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail18321)))) (fail18321)))) (fail18321)))) (fail18321)))) (fail18321)))) (fail18321)))) (fail18321)) (fail18321))) (fail18321)))))) (if (cons? v18315) (let ((w18336 (car v18315)) (x18337 (cdr v18315))) (let ((abs w18336)) (if (list? abs) (if (cons? x18337) (let ((w18341 (car x18337)) (x18342 (cdr x18337))) (if (cons? w18341) (let ((w18343 (car w18341)) (x18344 (cdr w18341))) (if (cons? w18343) (let ((w18345 (car w18343)) (x18346 (cdr w18343))) (let ((a w18345)) (if (null? x18346) (let ((us x18344)) (if (list? us) (if (cons? x18342) (let ((w18350 (car x18342)) (x18351 (cdr x18342))) (let ((phd w18350)) (if (cons? x18351) (let ((w18352 (car x18351)) (x18353 (cdr x18351))) (if (cons? w18352) (let ((w18354 (car w18352)) (x18355 (cdr w18352))) (let ((b w18354)) (let ((w x18355)) (if (list? w) (if (cons? x18353) (let ((w18359 (car x18353)) (x18360 (cdr x18353))) (let ((k w18359)) (if (cons? x18360) (let ((w18361 (car x18360)) (x18362 (cdr x18360))) (let ((i w18361)) (if (cons? x18362) (let ((w18363 (car x18362)) (x18364 (cdr x18362))) (let ((v w18363)) (if (null? x18364) (progn (if (eq a b) (quasiquote (match-extract-vars ((((unquote a)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (unquote v))) (quasiquote (abs-extract-vars (((unquote a)) (unquote-splicing abs)) (unquote us) (unquote phd) ((unquote b) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail18320)))) (fail18320)))) (fail18320)))) (fail18320)) (fail18320))))) (fail18320))) (fail18320)))) (fail18320)) (fail18320))) (fail18320)))) (fail18320))) (fail18320))) (fail18320)) (fail18320)))) (fail18320)))))) (if (cons? v18315) (let ((w18365 (car v18315)) (x18366 (cdr v18315))) (let ((abs w18365)) (if (list? abs) (if (cons? x18366) (let ((w18370 (car x18366)) (x18371 (cdr x18366))) (if (cons? w18370) (let ((w18372 (car w18370)) (x18373 (cdr w18370))) (if (cons? w18372) (let ((w18374 (car w18372)) (x18375 (cdr w18372))) (let ((a w18374)) (if (cons? x18375) (let ((w18376 (car x18375)) (x18377 (cdr x18375))) (let ((x w18376)) (let ((xs x18377)) (let ((us x18373)) (if (list? us) (if (cons? x18371) (let ((w18381 (car x18371)) (x18382 (cdr x18371))) (let ((phd w18381)) (if (cons? x18382) (let ((w18383 (car x18382)) (x18384 (cdr x18382))) (if (cons? w18383) (let ((w18385 (car w18383)) (x18386 (cdr w18383))) (let ((b w18385)) (let ((w x18386)) (if (list? w) (if (cons? x18384) (let ((w18390 (car x18384)) (x18391 (cdr x18384))) (let ((k w18390)) (if (cons? x18391) (let ((w18392 (car x18391)) (x18393 (cdr x18391))) (let ((i w18392)) (if (cons? x18393) (let ((w18394 (car x18393)) (x18395 (cdr x18393))) (let ((v w18394)) (if (null? x18395) (progn (if (eq a b) (let ((x-ls (gensym "x-ls"))) (quasiquote (match-extract-vars ((((unquote a) (unquote-splicing xs)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (((unquote x) (unquote x-ls)) (unquote-splicing v))))) (quasiquote (abs-extract-vars (((unquote a) (unquote x) (unquote-splicing xs)) (unquote-splicing abs)) (unquote us) (unquote phd) ((unquote b) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail18319)))) (fail18319)))) (fail18319)))) (fail18319)) (fail18319))))) (fail18319))) (fail18319)))) (fail18319)) (fail18319)))))) (fail18319)))) (fail18319))) (fail18319))) (fail18319)) (fail18319)))) (fail18319)))))) (if (cons? v18315) (let ((w18396 (car v18315)) (x18397 (cdr v18315))) (let ((abs w18396)) (if (list? abs) (if (cons? x18397) (let ((w18401 (car x18397)) (x18402 (cdr x18397))) (if (cons? w18401) (let ((w18403 (car w18401)) (x18404 (cdr w18401))) (if (cons? w18403) (let ((w18405 (car w18403)) (x18406 (cdr w18403))) (let ((a w18405)) (if (null? x18406) (let ((us x18404)) (if (list? us) (if (cons? x18402) (let ((w18410 (car x18402)) (x18411 (cdr x18402))) (let ((phd w18410)) (if (cons? x18411) (let ((w18412 (car x18411)) (x18413 (cdr x18411))) (if (cons? w18412) (let ((w18414 (car w18412)) (x18415 (cdr w18412))) (if (cons? w18414) (let ((w18416 (car w18414)) (x18417 (cdr w18414))) (let ((b w18416)) (let ((bs x18417)) (if (list? bs) (let ((w x18415)) (if (list? w) (if (cons? x18413) (let ((w18424 (car x18413)) (x18425 (cdr x18413))) (let ((k w18424)) (if (cons? x18425) (let ((w18426 (car x18425)) (x18427 (cdr x18425))) (let ((i w18426)) (if (cons? x18427) (let ((w18428 (car x18427)) (x18429 (cdr x18427))) (let ((v w18428)) (if (null? x18429) (progn (if (eq a b) (quasiquote (match-extract-vars ((((unquote a)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (unquote v))) (quasiquote (abs-extract-vars (((unquote a)) (unquote-splicing abs)) (unquote us) (unquote phd) (((unquote b) (unquote-splicing bs)) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail18318)))) (fail18318)))) (fail18318)))) (fail18318)) (fail18318))) (fail18318))))) (fail18318))) (fail18318))) (fail18318)))) (fail18318)) (fail18318))) (fail18318)))) (fail18318))) (fail18318))) (fail18318)) (fail18318)))) (fail18318)))))) (if (cons? v18315) (let ((w18430 (car v18315)) (x18431 (cdr v18315))) (let ((abs w18430)) (if (list? abs) (if (cons? x18431) (let ((w18435 (car x18431)) (x18436 (cdr x18431))) (if (cons? w18435) (let ((w18437 (car w18435)) (x18438 (cdr w18435))) (if (cons? w18437) (let ((w18439 (car w18437)) (x18440 (cdr w18437))) (let ((a w18439)) (if (cons? x18440) (let ((w18441 (car x18440)) (x18442 (cdr x18440))) (let ((x w18441)) (let ((xs x18442)) (let ((us x18438)) (if (list? us) (if (cons? x18436) (let ((w18446 (car x18436)) (x18447 (cdr x18436))) (let ((phd w18446)) (if (cons? x18447) (let ((w18448 (car x18447)) (x18449 (cdr x18447))) (if (cons? w18448) (let ((w18450 (car w18448)) (x18451 (cdr w18448))) (if (cons? w18450) (let ((w18452 (car w18450)) (x18453 (cdr w18450))) (let ((b w18452)) (let ((bs x18453)) (if (list? bs) (let ((w x18451)) (if (list? w) (if (cons? x18449) (let ((w18460 (car x18449)) (x18461 (cdr x18449))) (let ((k w18460)) (if (cons? x18461) (let ((w18462 (car x18461)) (x18463 (cdr x18461))) (let ((i w18462)) (if (cons? x18463) (let ((w18464 (car x18463)) (x18465 (cdr x18463))) (let ((v w18464)) (if (null? x18465) (progn (if (eq a b) (let ((x-ls (gensym "x-ls"))) (quasiquote (match-extract-vars ((((unquote a) (unquote-splicing xs)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (((unquote x) (unquote x-ls)) (unquote-splicing v))))) (quasiquote (abs-extract-vars (((unquote a) (unquote x) (unquote-splicing xs)) (unquote-splicing abs)) (unquote us) (unquote phd) (((unquote b) (unquote-splicing bs)) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail18317)))) (fail18317)))) (fail18317)))) (fail18317)) (fail18317))) (fail18317))))) (fail18317))) (fail18317))) (fail18317)))) (fail18317)) (fail18317)))))) (fail18317)))) (fail18317))) (fail18317))) (fail18317)) (fail18317)))) (fail18317)))))) (if (cons? v18315) (let ((w18466 (car v18315)) (x18467 (cdr v18315))) (let ((abs w18466)) (if (cons? x18467) (let ((w18468 (car x18467)) (x18469 (cdr x18467))) (if (null? w18468) (if (cons? x18469) (let ((w18470 (car x18469)) (x18471 (cdr x18469))) (let ((phd w18470)) (if (cons? x18471) (let ((w18472 (car x18471)) (x18473 (cdr x18471))) (let ((p w18472)) (let ((l x18473)) (progn (quasiquote (match-extract-phd () (unquote phd) (unquote abs) (unquote p) (unquote-splicing l))))))) (fail18316)))) (fail18316)) (fail18316))) (fail18316)))) (fail18316))))) (defsyntax match-extract-phd x (let ((v18474 x)) (let ((fail18475 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18474) (let ((w18476 (car v18474)) (x18477 (cdr v18474))) (if (cons? x18477) (let ((w18478 (car x18477)) (x18479 (cdr x18477))) (let ((phd w18478)) (if (cons? x18479) (let ((w18480 (car x18479)) (x18481 (cdr x18479))) (let ((abs w18480)) (let ((l x18481)) (progn (quasiquote (match-extract-vars2 ((unquote abs) (unquote phd)) (unquote-splicing l))))))) (fail18475)))) (fail18475))) (fail18475))))) (defsyntax match-extract-vars-step x (let ((v18482 x)) (let ((fail18483 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18482) (let ((w18484 (car v18482)) (x18485 (cdr v18482))) (let ((abs w18484)) (if (cons? x18485) (let ((w18486 (car x18485)) (x18487 (cdr x18485))) (let ((p w18486)) (if (cons? x18487) (let ((w18488 (car x18487)) (x18489 (cdr x18487))) (let ((k w18488)) (if (cons? x18489) (let ((w18490 (car x18489)) (x18491 (cdr x18489))) (let ((i w18490)) (if (cons? x18491) (let ((w18492 (car x18491)) (x18493 (cdr x18491))) (let ((v w18492)) (if (cons? x18493) (let ((w18494 (car x18493)) (x18495 (cdr x18493))) (let ((a w18494)) (letfuns ((loop (ls18499 p-ls18497 p-ls18496) (if (null? ls18499) (progn (let ((v2-ls (reverse p-ls18497)) (v2 (reverse p-ls18496))) (if (null? x18495) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote k) ((unquote-splicing v2) (unquote-splicing i)) ((unquote-splicing a) (unquote-splicing v))))) (fail18483)))) (if (cons? ls18499) (progn (let ((w18500 (car ls18499))) (if (cons? w18500) (let ((w18501 (car w18500)) (x18502 (cdr w18500))) (let ((v2 w18501)) (if (cons? x18502) (let ((w18503 (car x18502)) (x18504 (cdr x18502))) (let ((v2-ls w18503)) (if (null? x18504) (loop (cdr ls18499) (cons v2-ls p-ls18497) (cons v2 p-ls18496)) (fail18483)))) (fail18483)))) (fail18483)))) (if else (progn (fail18483)) (cond)))))) (loop w18494 (quote ()) (quote ()))))) (fail18483)))) (fail18483)))) (fail18483)))) (fail18483)))) (fail18483)))) (fail18483))))) (defsyntax match-extract-quasiquote-vars x (let ((v18505 x)) (let ((fail18506 (lambda () (let ((fail18507 (lambda () (let ((fail18508 (lambda () (let ((fail18509 (lambda () (let ((fail18510 (lambda () (let ((fail18511 (lambda () (let ((fail18512 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18505) (let ((w18513 (car v18505)) (x18514 (cdr v18505))) (let ((abs w18513)) (if (cons? x18514) (let ((w18515 (car x18514)) (x18516 (cdr x18514))) (let ((x w18515)) (if (cons? x18516) (let ((w18517 (car x18516)) (x18518 (cdr x18516))) (if (cons? w18517) (let ((w18519 (car w18517)) (x18520 (cdr w18517))) (let ((k w18519)) (let ((kk x18520)) (if (list? kk) (if (cons? x18518) (let ((w18524 (car x18518)) (x18525 (cdr x18518))) (let ((i w18524)) (if (cons? x18525) (let ((w18526 (car x18525)) (x18527 (cdr x18525))) (let ((v w18526)) (if (cons? x18527) (let ((w18528 (car x18527)) (x18529 (cdr x18527))) (if (cons? w18528) (let ((w18530 (car w18528)) (x18531 (cdr w18528))) (let ((t w18530)) (let ((d x18531)) (if (null? x18529) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail18512))))) (fail18512))) (fail18512)))) (fail18512)))) (fail18512)) (fail18512))))) (fail18512))) (fail18512)))) (fail18512)))) (fail18512)))))) (if (cons? v18505) (let ((w18532 (car v18505)) (x18533 (cdr v18505))) (let ((abs w18532)) (if (cons? x18533) (let ((w18534 (car x18533)) (x18535 (cdr x18533))) (if (vector? w18534) (let ((len18536 (vector-size w18534))) (if (>= len18536 0) (letfuns ((loop18538 (j18539 p-ls18537) (if (>= j18539 len18536) (let ((x (reverse p-ls18537))) (if (cons? x18535) (let ((w18541 (car x18535)) (x18542 (cdr x18535))) (let ((k w18541)) (if (cons? x18542) (let ((w18543 (car x18542)) (x18544 (cdr x18542))) (let ((i w18543)) (if (cons? x18544) (let ((w18545 (car x18544)) (x18546 (cdr x18544))) (let ((v w18545)) (if (cons? x18546) (let ((w18547 (car x18546)) (x18548 (cdr x18546))) (if (cons? w18547) (let ((w18549 (car w18547)) (x18550 (cdr w18547))) (let ((t w18549)) (let ((d x18550)) (if (null? x18548) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail18511))))) (fail18511))) (fail18511)))) (fail18511)))) (fail18511)))) (fail18511))) (let ((w18540 (vector-ref w18534 j18539))) (let ((x w18540)) (loop18538 (+ j18539 1) (cons x p-ls18537))))))) (loop18538 0 (quote ()))) (fail18511))) (fail18511))) (fail18511)))) (fail18511)))))) (if (cons? v18505) (let ((w18551 (car v18505)) (x18552 (cdr v18505))) (let ((abs w18551)) (if (cons? x18552) (let ((w18553 (car x18552)) (x18554 (cdr x18552))) (if (cons? w18553) (let ((w18555 (car w18553)) (x18556 (cdr w18553))) (let ((x w18555)) (let ((y x18556)) (if (cons? x18554) (let ((w18557 (car x18554)) (x18558 (cdr x18554))) (let ((k w18557)) (if (cons? x18558) (let ((w18559 (car x18558)) (x18560 (cdr x18558))) (let ((i w18559)) (if (cons? x18560) (let ((w18561 (car x18560)) (x18562 (cdr x18560))) (let ((v w18561)) (if (cons? x18562) (let ((w18563 (car x18562)) (x18564 (cdr x18562))) (if (cons? w18563) (let ((w18565 (car w18563)) (x18566 (cdr w18563))) (let ((t w18565)) (let ((d x18566)) (if (null? x18564) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (match-extract-quasiquote-vars-step (unquote y) (unquote k) (unquote i) (unquote v) (unquote d)) (unquote i) ()))) (fail18510))))) (fail18510))) (fail18510)))) (fail18510)))) (fail18510)))) (fail18510))))) (fail18510))) (fail18510)))) (fail18510)))))) (if (cons? v18505) (let ((w18567 (car v18505)) (x18568 (cdr v18505))) (let ((abs w18567)) (if (cons? x18568) (let ((w18569 (car x18568)) (x18570 (cdr x18568))) (if (cons? w18569) (let ((w18571 (car w18569)) (x18572 (cdr w18569))) (if (binary= w18571 (quote uunquote)) (if (cons? x18572) (let ((w18573 (car x18572)) (x18574 (cdr x18572))) (let ((x w18573)) (if (null? x18574) (if (cons? x18570) (let ((w18575 (car x18570)) (x18576 (cdr x18570))) (let ((k w18575)) (if (cons? x18576) (let ((w18577 (car x18576)) (x18578 (cdr x18576))) (let ((i w18577)) (if (cons? x18578) (let ((w18579 (car x18578)) (x18580 (cdr x18578))) (let ((v w18579)) (if (cons? x18580) (let ((w18581 (car x18580)) (x18582 (cdr x18580))) (if (cons? w18581) (let ((w18583 (car w18581)) (x18584 (cdr w18581))) (let ((t w18583)) (let ((d x18584)) (if (null? x18582) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail18509))))) (fail18509))) (fail18509)))) (fail18509)))) (fail18509)))) (fail18509)) (fail18509)))) (fail18509)) (fail18509))) (fail18509))) (fail18509)))) (fail18509)))))) (if (cons? v18505) (let ((w18585 (car v18505)) (x18586 (cdr v18505))) (let ((abs w18585)) (if (cons? x18586) (let ((w18587 (car x18586)) (x18588 (cdr x18586))) (if (cons? w18587) (let ((w18589 (car w18587)) (x18590 (cdr w18587))) (if (binary= w18589 (quote uunquote)) (if (cons? x18590) (let ((w18591 (car x18590)) (x18592 (cdr x18590))) (let ((x w18591)) (if (null? x18592) (if (cons? x18588) (let ((w18593 (car x18588)) (x18594 (cdr x18588))) (let ((k w18593)) (if (cons? x18594) (let ((w18595 (car x18594)) (x18596 (cdr x18594))) (let ((i w18595)) (if (cons? x18596) (let ((w18597 (car x18596)) (x18598 (cdr x18596))) (let ((v w18597)) (if (cons? x18598) (let ((w18599 (car x18598)) (x18600 (cdr x18598))) (if (cons? w18599) (let ((w18601 (car w18599)) (x18602 (cdr w18599))) (let ((t w18601)) (if (null? x18602) (if (null? x18600) (progn (quasiquote (match-extract-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v)))) (fail18508)) (fail18508)))) (fail18508))) (fail18508)))) (fail18508)))) (fail18508)))) (fail18508)) (fail18508)))) (fail18508)) (fail18508))) (fail18508))) (fail18508)))) (fail18508)))))) (if (cons? v18505) (let ((w18603 (car v18505)) (x18604 (cdr v18505))) (let ((abs w18603)) (if (cons? x18604) (let ((w18605 (car x18604)) (x18606 (cdr x18604))) (if (cons? w18605) (let ((w18607 (car w18605)) (x18608 (cdr w18605))) (let ((sk218610 (lambda () (if (cons? x18608) (let ((w18611 (car x18608)) (x18612 (cdr x18608))) (let ((x w18611)) (if (null? x18612) (if (cons? x18606) (let ((w18613 (car x18606)) (x18614 (cdr x18606))) (let ((k w18613)) (if (cons? x18614) (let ((w18615 (car x18614)) (x18616 (cdr x18614))) (let ((i w18615)) (if (cons? x18616) (let ((w18617 (car x18616)) (x18618 (cdr x18616))) (let ((v w18617)) (if (cons? x18618) (let ((w18619 (car x18618)) (x18620 (cdr x18618))) (let ((d w18619)) (if (null? x18620) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) ((quote uunquote) (unquote x)) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail18507)))) (fail18507)))) (fail18507)))) (fail18507)))) (fail18507)) (fail18507)))) (fail18507))))) (if (binary= w18607 (quote unquote)) (sk218610) (if (binary= w18607 (quote unquote-splicing)) (sk218610) (fail18507))))) (fail18507))) (fail18507)))) (fail18507)))))) (if (cons? v18505) (let ((w18621 (car v18505)) (x18622 (cdr v18505))) (let ((abs w18621)) (if (cons? x18622) (let ((w18623 (car x18622)) (x18624 (cdr x18622))) (if (cons? w18623) (let ((w18625 (car w18623)) (x18626 (cdr w18623))) (if (binary= w18625 (quote quasiquote)) (if (cons? x18626) (let ((w18627 (car x18626)) (x18628 (cdr x18626))) (let ((x w18627)) (if (null? x18628) (if (cons? x18624) (let ((w18629 (car x18624)) (x18630 (cdr x18624))) (let ((k w18629)) (if (cons? x18630) (let ((w18631 (car x18630)) (x18632 (cdr x18630))) (let ((i w18631)) (if (cons? x18632) (let ((w18633 (car x18632)) (x18634 (cdr x18632))) (let ((v w18633)) (if (cons? x18634) (let ((w18635 (car x18634)) (x18636 (cdr x18634))) (let ((d w18635)) (if (null? x18636) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (t (unquote-splicing d))))) (fail18506)))) (fail18506)))) (fail18506)))) (fail18506)))) (fail18506)) (fail18506)))) (fail18506)) (fail18506))) (fail18506))) (fail18506)))) (fail18506))))) (defsyntax match-extract-quasiquote-vars-step x (let ((v18637 x)) (let ((fail18638 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18637) (let ((w18639 (car v18637)) (x18640 (cdr v18637))) (if (cons? x18640) (let ((w18641 (car x18640)) (x18642 (cdr x18640))) (let ((abs w18641)) (if (cons? x18642) (let ((w18643 (car x18642)) (x18644 (cdr x18642))) (let ((x w18643)) (if (cons? x18644) (let ((w18645 (car x18644)) (x18646 (cdr x18644))) (let ((k w18645)) (if (cons? x18646) (let ((w18647 (car x18646)) (x18648 (cdr x18646))) (let ((i w18647)) (if (cons? x18648) (let ((w18649 (car x18648)) (x18650 (cdr x18648))) (let ((v w18649)) (if (cons? x18650) (let ((w18651 (car x18650)) (x18652 (cdr x18650))) (let ((d w18651)) (if (cons? x18652) (let ((w18653 (car x18652)) (x18654 (cdr x18652))) (let ((a w18653)) (letfuns ((loop (ls18658 p-ls18656 p-ls18655) (if (null? ls18658) (progn (let ((v2-ls (reverse p-ls18656)) (v2 (reverse p-ls18655))) (if (null? x18654) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) ((unquote-splicing v2) (unquote-splicing i)) ((unquote-splicing a) (unquote-splicing v)) (unquote d)))) (fail18638)))) (if (cons? ls18658) (progn (let ((w18659 (car ls18658))) (if (cons? w18659) (let ((w18660 (car w18659)) (x18661 (cdr w18659))) (let ((v2 w18660)) (if (cons? x18661) (let ((w18662 (car x18661)) (x18663 (cdr x18661))) (let ((v2-ls w18662)) (if (null? x18663) (loop (cdr ls18658) (cons v2-ls p-ls18656) (cons v2 p-ls18655)) (fail18638)))) (fail18638)))) (fail18638)))) (if else (progn (fail18638)) (cond)))))) (loop w18653 (quote ()) (quote ()))))) (fail18638)))) (fail18638)))) (fail18638)))) (fail18638)))) (fail18638)))) (fail18638)))) (fail18638))) (fail18638))))) (defsyntax match-check-ellipse x (let ((v18664 x)) (let ((fail18665 (lambda () (let ((fail18666 (lambda () (let ((fail18667 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18664) (let ((w18668 (car v18664)) (x18669 (cdr v18664))) (let ((id w18668)) (if (cons? x18669) (let ((w18670 (car x18669)) (x18671 (cdr x18669))) (let ((success-k w18670)) (if (cons? x18671) (let ((w18672 (car x18671)) (x18673 (cdr x18671))) (let ((failure-k w18672)) (if (null? x18673) (progn (if (let ((G0018674 (binary= id (quote ...)))) (if G0018674 G0018674 (binary= id (quote ___)))) success-k failure-k)) (fail18667)))) (fail18667)))) (fail18667)))) (fail18667)))))) (if (cons? v18664) (let ((w18675 (car v18664)) (x18676 (cdr v18664))) (if (vector? w18675) (let ((len18677 (vector-size w18675))) (if (>= len18677 0) (letfuns ((loop18679 (j18680 p-ls18678) (if (>= j18680 len18677) (let ((a (reverse p-ls18678))) (if (cons? x18676) (let ((w18682 (car x18676)) (x18683 (cdr x18676))) (let ((success-k w18682)) (if (cons? x18683) (let ((w18684 (car x18683)) (x18685 (cdr x18683))) (let ((failure-k w18684)) (if (null? x18685) (progn failure-k) (fail18666)))) (fail18666)))) (fail18666))) (let ((w18681 (vector-ref w18675 j18680))) (let ((a w18681)) (loop18679 (+ j18680 1) (cons a p-ls18678))))))) (loop18679 0 (quote ()))) (fail18666))) (fail18666))) (fail18666)))))) (if (cons? v18664) (let ((w18686 (car v18664)) (x18687 (cdr v18664))) (if (cons? w18686) (let ((w18688 (car w18686)) (x18689 (cdr w18686))) (let ((a w18688)) (let ((b x18689)) (if (cons? x18687) (let ((w18690 (car x18687)) (x18691 (cdr x18687))) (let ((success-k w18690)) (if (cons? x18691) (let ((w18692 (car x18691)) (x18693 (cdr x18691))) (let ((failure-k w18692)) (if (null? x18693) (progn failure-k) (fail18665)))) (fail18665)))) (fail18665))))) (fail18665))) (fail18665))))) (defsyntax match-check-identifier x (let ((v18694 x)) (let ((fail18695 (lambda () (let ((fail18696 (lambda () (let ((fail18697 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18694) (let ((w18698 (car v18694)) (x18699 (cdr v18694))) (let ((x w18698)) (if (cons? x18699) (let ((w18700 (car x18699)) (x18701 (cdr x18699))) (let ((success-k w18700)) (if (cons? x18701) (let ((w18702 (car x18701)) (x18703 (cdr x18701))) (let ((failure-k w18702)) (if (null? x18703) (progn (if (symbol? x) success-k failure-k)) (fail18697)))) (fail18697)))) (fail18697)))) (fail18697)))))) (if (cons? v18694) (let ((w18704 (car v18694)) (x18705 (cdr v18694))) (if (vector? w18704) (let ((len18706 (vector-size w18704))) (if (>= len18706 0) (letfuns ((loop18708 (j18709 p-ls18707) (if (>= j18709 len18706) (let ((x (reverse p-ls18707))) (if (cons? x18705) (let ((w18711 (car x18705)) (x18712 (cdr x18705))) (let ((success-k w18711)) (if (cons? x18712) (let ((w18713 (car x18712)) (x18714 (cdr x18712))) (let ((failure-k w18713)) (if (null? x18714) (progn failure-k) (fail18696)))) (fail18696)))) (fail18696))) (let ((w18710 (vector-ref w18704 j18709))) (let ((x w18710)) (loop18708 (+ j18709 1) (cons x p-ls18707))))))) (loop18708 0 (quote ()))) (fail18696))) (fail18696))) (fail18696)))))) (if (cons? v18694) (let ((w18715 (car v18694)) (x18716 (cdr v18694))) (if (cons? w18715) (let ((w18717 (car w18715)) (x18718 (cdr w18715))) (let ((x w18717)) (let ((y x18718)) (if (cons? x18716) (let ((w18719 (car x18716)) (x18720 (cdr x18716))) (let ((success-k w18719)) (if (cons? x18720) (let ((w18721 (car x18720)) (x18722 (cdr x18720))) (let ((failure-k w18721)) (if (null? x18722) (progn failure-k) (fail18695)))) (fail18695)))) (fail18695))))) (fail18695))) (fail18695))))) (defsyntax defmatchfun args (let ((name (car args)) (arg (gensym "arg")) (matchers (cdr args))) (if (symbol? name) (quasiquote (deflocal (unquote name) (named-lambda (unquote name) ((unquote arg)) (smatch (unquote arg) (unquote-splicing matchers))))) (if (eq (car name) (quote setter)) (quasiquote ((setter setter) (unquote (cadr name)) (named-lambda (unquote name) ((unquote arg)) (smatch (unquote arg) (unquote-splicing matchers))))) (error <condition> "bad defmatchfun syntax"))))) (defsyntax match-lambda matchers (let ((x (gensym "arg"))) (quasiquote (lambda ((unquote x)) (smatch (unquote x) (unquote-splicing matchers)))))) (defsyntax match-lambda* matchers (let ((x (gensym "arg"))) (quasiquote (lambda (unquote x) (smatch (unquote x) (unquote-splicing matchers)))))) (defsyntax match-let x (let ((v18723 x)) (let ((fail18724 (lambda () (let ((fail18725 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18723) (let ((w18726 (car v18723)) (x18727 (cdr v18723))) (let ((loop w18726)) (let ((rest x18727)) (progn (quasiquote (match-named-let loop () (unquote-splicing rest))))))) (fail18725)))))) (if (cons? v18723) (let ((w18728 (car v18723)) (x18729 (cdr v18723))) (let ((vars w18728)) (if (list? vars) (let ((body x18729)) (progn (quasiquote (match-let/helper let () () (unquote vars) (unquote-splicing body))))) (fail18724)))) (fail18724))))) (defsyntax match-letfuns x (let ((v18733 x)) (let ((fail18734 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18733) (let ((w18735 (car v18733)) (x18736 (cdr v18733))) (let ((vars w18735)) (let ((body x18736)) (progn (quasiquote (match-let/helper letfuns () () (unquote vars) (unquote-splicing body))))))) (fail18734))))) (defsyntax match-let/helper x (let ((v18737 x)) (let ((fail18738 (lambda () (let ((fail18739 (lambda () (let ((fail18740 (lambda () (let ((fail18741 (lambda () (let ((fail18742 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18737) (let ((w18743 (car v18737)) (x18744 (cdr v18737))) (let ((let w18743)) (if (cons? x18744) (let ((w18745 (car x18744)) (x18746 (cdr x18744))) (let ((v w18745)) (if (list? v) (if (cons? x18746) (let ((w18750 (car x18746)) (x18751 (cdr x18746))) (let ((p w18750)) (if (list? p) (if (cons? x18751) (let ((w18755 (car x18751)) (x18756 (cdr x18751))) (if (cons? w18755) (let ((w18757 (car w18755)) (x18758 (cdr w18755))) (if (cons? w18757) (let ((w18759 (car w18757)) (x18760 (cdr w18757))) (let ((a w18759)) (if (cons? x18760) (let ((w18761 (car x18760)) (x18762 (cdr x18760))) (let ((expr w18761)) (if (null? x18762) (let ((rest x18758)) (let ((body x18756)) (progn (quasiquote (match-let/helper (unquote let) ((unquote-splicing v) ((unquote a) (unquote expr))) (unquote p) (unquote rest) (unquote-splicing body)))))) (fail18742)))) (fail18742)))) (fail18742))) (fail18742))) (fail18742)) (fail18742)))) (fail18742)) (fail18742)))) (fail18742)))) (fail18742)))))) (if (cons? v18737) (let ((w18763 (car v18737)) (x18764 (cdr v18737))) (let ((let w18763)) (if (cons? x18764) (let ((w18765 (car x18764)) (x18766 (cdr x18764))) (let ((v w18765)) (if (list? v) (if (cons? x18766) (let ((w18770 (car x18766)) (x18771 (cdr x18766))) (let ((p w18770)) (if (list? p) (if (cons? x18771) (let ((w18775 (car x18771)) (x18776 (cdr x18771))) (if (cons? w18775) (let ((w18777 (car w18775)) (x18778 (cdr w18775))) (if (cons? w18777) (let ((w18779 (car w18777)) (x18780 (cdr w18777))) (if (vector? w18779) (let ((len18781 (vector-size w18779))) (if (>= len18781 0) (letfuns ((loop18783 (j18784 p-ls18782) (if (>= j18784 len18781) (let ((a (reverse p-ls18782))) (if (cons? x18780) (let ((w18786 (car x18780)) (x18787 (cdr x18780))) (let ((expr w18786)) (if (null? x18787) (let ((rest x18778)) (let ((body x18776)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-let/helper let ((unquote-splicing v) ((unquote tmp) (unquote expr))) ((unquote-splicing p) (#((unquote-splicing a)) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail18741)))) (fail18741))) (let ((w18785 (vector-ref w18779 j18784))) (let ((a w18785)) (loop18783 (+ j18784 1) (cons a p-ls18782))))))) (loop18783 0 (quote ()))) (fail18741))) (fail18741))) (fail18741))) (fail18741))) (fail18741)) (fail18741)))) (fail18741)) (fail18741)))) (fail18741)))) (fail18741)))))) (if (cons? v18737) (let ((w18788 (car v18737)) (x18789 (cdr v18737))) (let ((let w18788)) (if (cons? x18789) (let ((w18790 (car x18789)) (x18791 (cdr x18789))) (let ((v w18790)) (if (list? v) (if (cons? x18791) (let ((w18795 (car x18791)) (x18796 (cdr x18791))) (let ((p w18795)) (if (list? p) (if (cons? x18796) (let ((w18800 (car x18796)) (x18801 (cdr x18796))) (if (cons? w18800) (let ((w18802 (car w18800)) (x18803 (cdr w18800))) (if (cons? w18802) (let ((w18804 (car w18802)) (x18805 (cdr w18802))) (if (cons? w18804) (let ((w18806 (car w18804)) (x18807 (cdr w18804))) (let ((a w18806)) (let ((b x18807)) (if (cons? x18805) (let ((w18808 (car x18805)) (x18809 (cdr x18805))) (let ((expr w18808)) (if (null? x18809) (let ((rest x18803)) (let ((body x18801)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-let/helper let ((unquote-splicing v) ((unquote tmp) (unquote expr))) ((unquote-splicing p) (((unquote a) (unquote-splicing b)) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail18740)))) (fail18740))))) (fail18740))) (fail18740))) (fail18740))) (fail18740)) (fail18740)))) (fail18740)) (fail18740)))) (fail18740)))) (fail18740)))))) (if (cons? v18737) (let ((w18810 (car v18737)) (x18811 (cdr v18737))) (let ((let w18810)) (if (cons? x18811) (let ((w18812 (car x18811)) (x18813 (cdr x18811))) (let ((a w18812)) (letfuns ((loop (ls18817 p-ls18815 p-ls18814) (if (null? ls18817) (progn (let ((expr (reverse p-ls18815)) (var (reverse p-ls18814))) (if (cons? x18813) (let ((w18819 (car x18813)) (x18820 (cdr x18813))) (let ((b w18819)) (letfuns ((loop (ls18824 p-ls18822 p-ls18821) (if (null? ls18824) (progn (let ((tmp (reverse p-ls18822)) (pat (reverse p-ls18821))) (if (cons? x18820) (let ((w18826 (car x18820)) (x18827 (cdr x18820))) (if (null? w18826) (let ((body x18827)) (progn (quasiquote ((unquote let) (unquote a) (match-let* (unquote b) (unquote-splicing body)))))) (fail18739))) (fail18739)))) (if (cons? ls18824) (progn (let ((w18825 (car ls18824))) (if (cons? w18825) (let ((w18828 (car w18825)) (x18829 (cdr w18825))) (let ((pat w18828)) (if (cons? x18829) (let ((w18830 (car x18829)) (x18831 (cdr x18829))) (let ((tmp w18830)) (if (null? x18831) (loop (cdr ls18824) (cons tmp p-ls18822) (cons pat p-ls18821)) (fail18739)))) (fail18739)))) (fail18739)))) (if else (progn (fail18739)) (cond)))))) (loop w18819 (quote ()) (quote ()))))) (fail18739)))) (if (cons? ls18817) (progn (let ((w18818 (car ls18817))) (if (cons? w18818) (let ((w18832 (car w18818)) (x18833 (cdr w18818))) (let ((var w18832)) (if (cons? x18833) (let ((w18834 (car x18833)) (x18835 (cdr x18833))) (let ((expr w18834)) (if (null? x18835) (loop (cdr ls18817) (cons expr p-ls18815) (cons var p-ls18814)) (fail18739)))) (fail18739)))) (fail18739)))) (if else (progn (fail18739)) (cond)))))) (loop w18812 (quote ()) (quote ()))))) (fail18739)))) (fail18739)))))) (if (cons? v18737) (let ((w18836 (car v18737)) (x18837 (cdr v18737))) (let ((let w18836)) (if (cons? x18837) (let ((w18838 (car x18837)) (x18839 (cdr x18837))) (let ((a w18838)) (letfuns ((loop (ls18843 p-ls18841 p-ls18840) (if (null? ls18843) (progn (let ((expr (reverse p-ls18841)) (var (reverse p-ls18840))) (if (cons? x18839) (let ((w18845 (car x18839)) (x18846 (cdr x18839))) (if (null? w18845) (if (cons? x18846) (let ((w18847 (car x18846)) (x18848 (cdr x18846))) (if (null? w18847) (let ((body x18848)) (progn (quasiquote ((unquote let) (unquote a) (unquote-splicing body))))) (fail18738))) (fail18738)) (fail18738))) (fail18738)))) (if (cons? ls18843) (progn (let ((w18844 (car ls18843))) (if (cons? w18844) (let ((w18849 (car w18844)) (x18850 (cdr w18844))) (let ((var w18849)) (if (cons? x18850) (let ((w18851 (car x18850)) (x18852 (cdr x18850))) (let ((expr w18851)) (if (null? x18852) (loop (cdr ls18843) (cons expr p-ls18841) (cons var p-ls18840)) (fail18738)))) (fail18738)))) (fail18738)))) (if else (progn (fail18738)) (cond)))))) (loop w18838 (quote ()) (quote ()))))) (fail18738)))) (fail18738))))) (defsyntax match-named-let x (let ((v18853 x)) (let ((fail18854 (lambda () (let ((fail18855 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18853) (let ((w18856 (car v18853)) (x18857 (cdr v18853))) (if (cons? x18857) (let ((w18858 (car x18857)) (x18859 (cdr x18857))) (let ((loop w18858)) (if (cons? x18859) (let ((w18860 (car x18859)) (x18861 (cdr x18859))) (let ((v w18860)) (if (list? v) (if (cons? x18861) (let ((w18865 (car x18861)) (x18866 (cdr x18861))) (if (cons? w18865) (let ((w18867 (car w18865)) (x18868 (cdr w18865))) (if (cons? w18867) (let ((w18869 (car w18867)) (x18870 (cdr w18867))) (let ((pat w18869)) (if (cons? x18870) (let ((w18871 (car x18870)) (x18872 (cdr x18870))) (let ((expr w18871)) (if (null? x18872) (let ((rest x18868)) (let ((body x18866)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-named-let (unquote loop) ((unquote-splicing v) ((unquote pat) (unquote expr) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail18855)))) (fail18855)))) (fail18855))) (fail18855))) (fail18855)) (fail18855)))) (fail18855)))) (fail18855))) (fail18855)))))) (if (cons? v18853) (let ((w18873 (car v18853)) (x18874 (cdr v18853))) (let ((loop w18873)) (if (cons? x18874) (let ((w18875 (car x18874)) (x18876 (cdr x18874))) (letfuns ((loop (ls18881 p-ls18879 p-ls18878 p-ls18877) (if (null? ls18881) (progn (let ((var (reverse p-ls18879)) (expr (reverse p-ls18878)) (pat (reverse p-ls18877))) (if (cons? x18876) (let ((w18883 (car x18876)) (x18884 (cdr x18876))) (if (null? w18883) (let ((body x18884)) (progn (quasiquote (recur loop (unquote (map (lambda (var expr) (quasiquote ((unquote var) (unquote expr)))) var expr)) (match-let (unquote (map (lambda (pat var) (quasiquote ((unquote pat) (unquote var)))) pat var)) (unquote-splicing body)))))) (fail18854))) (fail18854)))) (if (cons? ls18881) (progn (let ((w18882 (car ls18881))) (if (cons? w18882) (let ((w18885 (car w18882)) (x18886 (cdr w18882))) (let ((pat w18885)) (if (cons? x18886) (let ((w18887 (car x18886)) (x18888 (cdr x18886))) (let ((expr w18887)) (if (cons? x18888) (let ((w18889 (car x18888)) (x18890 (cdr x18888))) (let ((var w18889)) (if (null? x18890) (loop (cdr ls18881) (cons var p-ls18879) (cons expr p-ls18878) (cons pat p-ls18877)) (fail18854)))) (fail18854)))) (fail18854)))) (fail18854)))) (if else (progn (fail18854)) (cond)))))) (loop w18875 (quote ()) (quote ()) (quote ())))) (fail18854)))) (fail18854))))) (defsyntax match-let* x (let ((v18891 x)) (let ((fail18892 (lambda () (let ((fail18893 (lambda () (error <condition> "no matching pattern")))) (if (cons? v18891) (let ((w18894 (car v18891)) (x18895 (cdr v18891))) (if (cons? w18894) (let ((w18896 (car w18894)) (x18897 (cdr w18894))) (if (cons? w18896) (let ((w18898 (car w18896)) (x18899 (cdr w18896))) (let ((pat w18898)) (if (cons? x18899) (let ((w18900 (car x18899)) (x18901 (cdr x18899))) (let ((expr w18900)) (if (null? x18901) (let ((rest x18897)) (let ((body x18895)) (progn (quasiquote (smatch (unquote expr) ((unquote pat) (match-let* (unquote rest) (unquote-splicing body)))))))) (fail18893)))) (fail18893)))) (fail18893))) (fail18893))) (fail18893)))))) (if (cons? v18891) (let ((w18902 (car v18891)) (x18903 (cdr v18891))) (if (null? w18902) (let ((body x18903)) (progn (quasiquote (progn (unquote-splicing body))))) (fail18892))) (fail18892))))))