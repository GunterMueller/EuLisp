(defmodule smatch (syntax (syntax-0) import (level-0) export (smatch)) (defmacro smatch X (let ((v0 X)) (let ((fail1 (lambda () (let ((fail2 (lambda () (let ((fail3 (lambda () (let ((fail4 (lambda () (let ((fail5 (lambda () (let ((fail6 (lambda () (let ((fail7 (lambda () (error <condition> "no matching pattern")))) (let ((l v0)) (if (list? l) (progn (quasiquote (match* (() ((car cdr cons? null? binary=) ())) (unquote-splicing l)))) (fail7))))))) (if (cons? v0) (let ((w11 (car v0)) (x12 (cdr v0))) (if (binary= w11 (quote -phd)) (if (cons? x12) (let ((w13 (car x12)) (x14 (cdr x12))) (let ((p w13)) (let ((l x14)) (progn (quasiquote (match* (() (unquote p)) (unquote-splicing l))))))) (fail6)) (fail6))) (fail6)))))) (if (cons? v0) (let ((w15 (car v0)) (x16 (cdr v0))) (if (binary= w15 (quote -abs)) (if (cons? x16) (let ((w17 (car x16)) (x18 (cdr x16))) (let ((abs w17)) (let ((l x18)) (progn (quasiquote (match* ((unquote abs) ((car cdr cons? null? binary=) ())) (unquote-splicing l))))))) (fail5)) (fail5))) (fail5)))))) (if (cons? v0) (let ((w19 (car v0)) (x20 (cdr v0))) (if (binary= w19 (quote -phd)) (if (cons? x20) (let ((w21 (car x20)) (x22 (cdr x20))) (let ((p w21)) (if (cons? x22) (let ((w23 (car x22)) (x24 (cdr x22))) (if (binary= w23 (quote -abs)) (if (cons? x24) (let ((w25 (car x24)) (x26 (cdr x24))) (let ((abs w25)) (let ((l x26)) (progn (quasiquote (match* ((unquote abs) (unquote p)) (unquote-splicing l))))))) (fail4)) (fail4))) (fail4)))) (fail4)) (fail4))) (fail4)))))) (if (cons? v0) (let ((w27 (car v0)) (x28 (cdr v0))) (if (binary= w27 (quote -abs)) (if (cons? x28) (let ((w29 (car x28)) (x30 (cdr x28))) (let ((abs w29)) (if (cons? x30) (let ((w31 (car x30)) (x32 (cdr x30))) (if (binary= w31 (quote -phd)) (if (cons? x32) (let ((w33 (car x32)) (x34 (cdr x32))) (let ((p w33)) (let ((l x34)) (progn (quasiquote (match* ((unquote abs) (unquote p)) (unquote-splicing l))))))) (fail3)) (fail3))) (fail3)))) (fail3)) (fail3))) (fail3)))))) (if (cons? v0) (let ((w35 (car v0)) (x36 (cdr v0))) (let ((atom w35)) (if (null? x36) (progn (error <condition> "no match clauses")) (fail2)))) (fail2)))))) (if (null? v0) (progn (error <condition> "missing match expression")) (fail1))))) (defmacro match* X (let ((v37 X)) (let ((fail38 (lambda () (let ((fail39 (lambda () (let ((fail40 (lambda () (error <condition> "no matching pattern")))) (if (cons? v37) (let ((w41 (car v37)) (x42 (cdr v37))) (let ((abs w41)) (if (cons? x42) (let ((w43 (car x42)) (x44 (cdr x42))) (let ((atom w43)) (let ((b x44)) (if (list? b) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote atom))) (match-next (unquote abs) (unquote v) ((unquote atom) (setq (unquote atom))) (unquote-splicing b)))))) (fail40))))) (fail40)))) (fail40)))))) (if (cons? v37) (let ((w48 (car v37)) (x49 (cdr v37))) (let ((abs w48)) (if (cons? x49) (let ((w50 (car x49)) (x51 (cdr x49))) (let ((a w50)) (if (vector? w50) (let ((len52 (vector-size w50))) (if (>= len52 0) (letfuns ((loop54 (j55 p-ls53) (if (>= j55 len52) (let ((vec (reverse p-ls53))) (letfuns ((loop (ls61 p-ls59 p-ls58 p-ls57) (if (null? ls61) (progn (let ((body (reverse p-ls59)) (pat (reverse p-ls58)) (b (reverse p-ls57))) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote a))) (match-next (unquote abs) (unquote v) ((unquote v) (setq (unquote v))) (unquote-splicing b)))))))) (if (cons? ls61) (progn (let ((w62 (car ls61))) (let ((b w62)) (if (cons? w62) (let ((w63 (car w62)) (x64 (cdr w62))) (let ((pat w63)) (let ((body x64)) (loop (cdr ls61) (cons body p-ls59) (cons pat p-ls58) (cons b p-ls57))))) (fail39))))) (if else (progn (fail39)) (cond)))))) (loop x51 (quote ()) (quote ()) (quote ())))) (let ((w56 (vector-ref w50 j55))) (let ((vec w56)) (loop54 (+ j55 1) (cons vec p-ls53))))))) (loop54 0 (quote ()))) (fail39))) (fail39)))) (fail39)))) (fail39)))))) (if (cons? v37) (let ((w65 (car v37)) (x66 (cdr v37))) (let ((abs w65)) (if (cons? x66) (let ((w67 (car x66)) (x68 (cdr x66))) (let ((app w67)) (if (list? app) (letfuns ((loop (ls76 p-ls74 p-ls73 p-ls72) (if (null? ls76) (progn (let ((body (reverse p-ls74)) (pat (reverse p-ls73)) (a (reverse p-ls72))) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote app))) (match-next (unquote abs) (unquote v) ((unquote app) (setq (unquote app))) (unquote-splicing a)))))))) (if (cons? ls76) (progn (let ((w77 (car ls76))) (let ((a w77)) (if (cons? w77) (let ((w78 (car w77)) (x79 (cdr w77))) (let ((pat w78)) (let ((body x79)) (loop (cdr ls76) (cons body p-ls74) (cons pat p-ls73) (cons a p-ls72))))) (fail38))))) (if else (progn (fail38)) (cond)))))) (loop x68 (quote ()) (quote ()) (quote ()))) (fail38)))) (fail38)))) (fail38))))) (defmacro match-next X (let ((v80 X)) (let ((fail81 (lambda () (let ((fail82 (lambda () (let ((fail83 (lambda () (error <condition> "no matching pattern")))) (if (cons? v80) (let ((w84 (car v80)) (x85 (cdr v80))) (let ((abs w84)) (if (cons? x85) (let ((w86 (car x85)) (x87 (cdr x85))) (let ((v w86)) (if (cons? x87) (let ((w88 (car x87)) (x89 (cdr x87))) (let ((g+s w88)) (if (cons? x89) (let ((w90 (car x89)) (x91 (cdr x89))) (if (cons? w90) (let ((w92 (car w90)) (x93 (cdr w90))) (let ((pat w92)) (let ((body x93)) (let ((rest x91)) (progn (let ((failure (gensym "fail"))) (quasiquote (match-next (unquote abs) (unquote v) (unquote g+s) ((unquote pat) (=> (unquote failure)) (unquote-splicing body)) (unquote-splicing rest))))))))) (fail83))) (fail83)))) (fail83)))) (fail83)))) (fail83)))))) (if (cons? v80) (let ((w94 (car v80)) (x95 (cdr v80))) (let ((abs w94)) (if (cons? x95) (let ((w96 (car x95)) (x97 (cdr x95))) (let ((v w96)) (if (cons? x97) (let ((w98 (car x97)) (x99 (cdr x97))) (let ((g+s w98)) (if (cons? x99) (let ((w100 (car x99)) (x101 (cdr x99))) (if (cons? w100) (let ((w102 (car w100)) (x103 (cdr w100))) (let ((pat w102)) (if (cons? x103) (let ((w104 (car x103)) (x105 (cdr x103))) (if (cons? w104) (let ((w106 (car w104)) (x107 (cdr w104))) (if (binary= w106 (quote =>)) (if (cons? x107) (let ((w108 (car x107)) (x109 (cdr x107))) (let ((failure w108)) (if (null? x109) (let ((body x105)) (let ((rest x101)) (progn (quasiquote (let (((unquote failure) (lambda () (match-next (unquote abs) (unquote v) (unquote g+s) (unquote-splicing rest))))) (match-one (unquote abs) (unquote v) (unquote pat) (unquote g+s) (match-drop-ids (progn (unquote-splicing body))) (match-drop-ids ((unquote failure))) ())))))) (fail82)))) (fail82)) (fail82))) (fail82))) (fail82)))) (fail82))) (fail82)))) (fail82)))) (fail82)))) (fail82)))))) (if (cons? v80) (let ((w110 (car v80)) (x111 (cdr v80))) (let ((abs w110)) (if (cons? x111) (let ((w112 (car x111)) (x113 (cdr x111))) (let ((v w112)) (if (cons? x113) (let ((w114 (car x113)) (x115 (cdr x113))) (let ((g+s w114)) (if (null? x115) (progn (quasiquote (error <condition> "no matching pattern"))) (fail81)))) (fail81)))) (fail81)))) (fail81))))) (defmacro abs-drop x (let ((v116 x)) (let ((fail117 (lambda () (let ((fail118 (lambda () (error <condition> "no matching pattern")))) (if (cons? v116) (let ((w119 (car v116)) (x120 (cdr v116))) (let ((a w119)) (if (cons? x120) (let ((w121 (car x120)) (x122 (cdr x120))) (let ((k w121)) (if (list? k) (if (cons? x122) (let ((w126 (car x122)) (x127 (cdr x122))) (let ((v w126)) (if (null? x127) (progn (append k (quasiquote ((unquote v))))) (fail118)))) (fail118)) (fail118)))) (fail118)))) (fail118)))))) (if (cons? v116) (let ((w128 (car v116)) (x129 (cdr v116))) (let ((a w128)) (if (cons? x129) (let ((w130 (car x129)) (x131 (cdr x129))) (let ((k w130)) (if (null? x131) (progn k) (fail117)))) (fail117)))) (fail117))))) (defmacro match-one x (let ((v132 x)) (let ((fail133 (lambda () (let ((fail134 (lambda () (let ((fail135 (lambda () (let ((fail136 (lambda () (error <condition> "no matching pattern")))) (let ((x v132)) (progn (quasiquote (match-two (unquote-splicing x))))))))) (if (cons? v132) (let ((w137 (car v132)) (x138 (cdr v132))) (let ((abs w137)) (if (cons? x138) (let ((w139 (car x138)) (x140 (cdr x138))) (let ((v w139)) (if (cons? x140) (let ((w141 (car x140)) (x142 (cdr x140))) (if (cons? w141) (let ((w143 (car w141)) (x144 (cdr w141))) (let ((p w143)) (if (cons? x144) (let ((w145 (car x144)) (x146 (cdr x144))) (let ((q w145)) (let ((r x146)) (if (cons? x142) (let ((w147 (car x142)) (x148 (cdr x142))) (let ((g+s w147)) (if (cons? x148) (let ((w149 (car x148)) (x150 (cdr x148))) (let ((sk w149)) (if (cons? x150) (let ((w151 (car x150)) (x152 (cdr x150))) (let ((fk w151)) (if (cons? x152) (let ((w153 (car x152)) (x154 (cdr x152))) (let ((i w153)) (if (null? x154) (progn (quasiquote (match-check-ellipse (unquote q) (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses (unquote abs) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()) (match-two (unquote abs) (unquote v) ((unquote p) (unquote q) (unquote-splicing r)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail135)))) (fail135)))) (fail135)))) (fail135)))) (fail135))))) (fail135)))) (fail135))) (fail135)))) (fail135)))) (fail135)))))) (if (cons? v132) (let ((w155 (car v132)) (x156 (cdr v132))) (let ((abs w155)) (if (cons? x156) (let ((w157 (car x156)) (x158 (cdr x156))) (let ((v w157)) (if (cons? x158) (let ((w159 (car x158)) (x160 (cdr x158))) (if (cons? w159) (let ((w161 (car w159)) (x162 (cdr w159))) (let ((p w161)) (if (cons? x162) (let ((w163 (car x162)) (x164 (cdr x162))) (if (cons? w163) (let ((w165 (car w163)) (x166 (cdr w163))) (if (binary= w165 (quote __)) (if (cons? x166) (let ((w167 (car x166)) (x168 (cdr x166))) (let ((m w167)) (if (null? x168) (let ((r x164)) (if (cons? x160) (let ((w169 (car x160)) (x170 (cdr x160))) (let ((g+s w169)) (if (cons? x170) (let ((w171 (car x170)) (x172 (cdr x170))) (let ((sk w171)) (if (cons? x172) (let ((w173 (car x172)) (x174 (cdr x172))) (let ((fk w173)) (if (cons? x174) (let ((w175 (car x174)) (x176 (cdr x174))) (let ((i w175)) (if (null? x176) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses-n (unquote abs) (unquote m) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail134)))) (fail134)))) (fail134)))) (fail134)))) (fail134))) (fail134)))) (fail134)) (fail134))) (fail134))) (fail134)))) (fail134))) (fail134)))) (fail134)))) (fail134)))))) (if (cons? v132) (let ((w177 (car v132)) (x178 (cdr v132))) (let ((abs w177)) (if (cons? x178) (let ((w179 (car x178)) (x180 (cdr x178))) (let ((v w179)) (if (cons? x180) (let ((w181 (car x180)) (x182 (cdr x180))) (if (cons? w181) (let ((w183 (car w181)) (x184 (cdr w181))) (let ((p w183)) (if (cons? x184) (let ((w185 (car x184)) (x186 (cdr x184))) (if (cons? w185) (let ((w187 (car w185)) (x188 (cdr w185))) (if (binary= w187 (quote ..)) (if (cons? x188) (let ((w189 (car x188)) (x190 (cdr x188))) (let ((m w189)) (if (null? x190) (let ((r x186)) (if (cons? x182) (let ((w191 (car x182)) (x192 (cdr x182))) (let ((g+s w191)) (if (cons? x192) (let ((w193 (car x192)) (x194 (cdr x192))) (let ((sk w193)) (if (cons? x194) (let ((w195 (car x194)) (x196 (cdr x194))) (let ((fk w195)) (if (cons? x196) (let ((w197 (car x196)) (x198 (cdr x196))) (let ((i w197)) (if (null? x198) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses-n (unquote abs) (unquote m) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail133)))) (fail133)))) (fail133)))) (fail133)))) (fail133))) (fail133)))) (fail133)) (fail133))) (fail133))) (fail133)))) (fail133))) (fail133)))) (fail133)))) (fail133))))) (defmacro insert-abs x (let ((v199 x)) (let ((fail200 (lambda () (let ((fail201 (lambda () (let ((fail202 (lambda () (error <condition> "no matching pattern")))) (if (cons? v199) (let ((w203 (car v199)) (x204 (cdr v199))) (let ((abs w203)) (if (cons? x204) (let ((w205 (car x204)) (x206 (cdr x204))) (if (cons? w205) (let ((w207 (car w205)) (x208 (cdr w205))) (let ((n w207)) (let ((nn x208)) (if (list? nn) (if (null? x206) (progn (append (quasiquote ((unquote n) (unquote abs))) nn)) (fail202)) (fail202))))) (fail202))) (fail202)))) (fail202)))))) (if (cons? v199) (let ((w212 (car v199)) (x213 (cdr v199))) (let ((abs w212)) (if (cons? x213) (let ((w214 (car x213)) (x215 (cdr x213))) (if (cons? w214) (let ((w216 (car w214)) (x217 (cdr w214))) (let ((x w216)) (if (null? x217) (if (null? x215) (progn (quasiquote ((unquote x)))) (fail201)) (fail201)))) (fail201))) (fail201)))) (fail201)))))) (if (cons? v199) (let ((w218 (car v199)) (x219 (cdr v199))) (let ((abs w218)) (if (cons? x219) (let ((w220 (car x219)) (x221 (cdr x219))) (if (cons? w220) (let ((w222 (car w220)) (x223 (cdr w220))) (if (binary= w222 (quote progn)) (let ((l x223)) (if (null? x221) (progn (quasiquote ((quote progn) (unquote-splicing l)))) (fail200))) (fail200))) (fail200))) (fail200)))) (fail200))))) (defmacro recur x (let ((v224 x)) (let ((fail225 (lambda () (error <condition> "no matching pattern")))) (if (cons? v224) (let ((w226 (car v224)) (x227 (cdr v224))) (let ((n w226)) (if (cons? x227) (let ((w228 (car x227)) (x229 (cdr x227))) (letfuns ((loop (ls233 p-ls231 p-ls230) (if (null? ls233) (progn (let ((i (reverse p-ls231)) (a (reverse p-ls230))) (let ((code x229)) (if (list? code) (progn (quasiquote (letfuns (((unquote n) (unquote a) (unquote-splicing code))) ((unquote n) (unquote-splicing i))))) (fail225))))) (if (cons? ls233) (progn (let ((w234 (car ls233))) (if (cons? w234) (let ((w238 (car w234)) (x239 (cdr w234))) (let ((a w238)) (if (cons? x239) (let ((w240 (car x239)) (x241 (cdr x239))) (let ((i w240)) (if (null? x241) (loop (cdr ls233) (cons i p-ls231) (cons a p-ls230)) (fail225)))) (fail225)))) (fail225)))) (if else (progn (fail225)) (cond)))))) (loop w228 (quote ()) (quote ())))) (fail225)))) (fail225))))) (defmacro match-two x (let ((v242 x)) (let ((fail243 (lambda () (let ((fail244 (lambda () (let ((fail245 (lambda () (let ((fail246 (lambda () (let ((fail247 (lambda () (let ((fail248 (lambda () (let ((fail249 (lambda () (let ((fail250 (lambda () (let ((fail251 (lambda () (let ((fail252 (lambda () (let ((fail253 (lambda () (let ((fail254 (lambda () (let ((fail255 (lambda () (let ((fail256 (lambda () (let ((fail257 (lambda () (let ((fail258 (lambda () (let ((fail259 (lambda () (let ((fail260 (lambda () (let ((fail261 (lambda () (let ((fail262 (lambda () (let ((fail263 (lambda () (let ((fail264 (lambda () (let ((fail265 (lambda () (let ((fail266 (lambda () (let ((fail267 (lambda () (let ((fail268 (lambda () (error <condition> "no matching pattern")))) (if (cons? v242) (let ((w269 (car v242)) (x270 (cdr v242))) (if (cons? w269) (let ((w271 (car w269)) (x272 (cdr w269))) (let ((abs w271)) (if (cons? x272) (let ((w273 (car x272)) (x274 (cdr x272))) (let ((phd w273)) (if (null? x274) (if (cons? x270) (let ((w275 (car x270)) (x276 (cdr x270))) (let ((v w275)) (if (cons? x276) (let ((w277 (car x276)) (x278 (cdr x276))) (let ((p w277)) (if (cons? x278) (let ((w279 (car x278)) (x280 (cdr x278))) (let ((g+s w279)) (if (cons? x280) (let ((w281 (car x280)) (x282 (cdr x280))) (let ((sk w281)) (if (cons? x282) (let ((w283 (car x282)) (x284 (cdr x282))) (let ((fk w283)) (if (cons? x284) (let ((w285 (car x284)) (x286 (cdr x284))) (let ((i w285)) (if (null? x286) (progn (quasiquote (match-abstract () (unquote abs) (unquote phd) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail268)))) (fail268)))) (fail268)))) (fail268)))) (fail268)))) (fail268)))) (fail268)) (fail268)))) (fail268)))) (fail268))) (fail268)))))) (if (cons? v242) (let ((w287 (car v242)) (x288 (cdr v242))) (let ((abs w287)) (if (cons? x288) (let ((w289 (car x288)) (x290 (cdr x288))) (let ((v w289)) (if (cons? x290) (let ((w291 (car x290)) (x292 (cdr x290))) (if (cons? w291) (let ((w293 (car w291)) (x294 (cdr w291))) (let ((p w293)) (if (cons? x294) (let ((w295 (car x294)) (x296 (cdr x294))) (if (binary= w295 (quote ___)) (let ((r x296)) (if (cons? x292) (let ((w297 (car x292)) (x298 (cdr x292))) (let ((g+s w297)) (if (cons? x298) (let ((w299 (car x298)) (x300 (cdr x298))) (let ((sk w299)) (if (cons? x300) (let ((w301 (car x300)) (x302 (cdr x300))) (let ((fk w301)) (if (cons? x302) (let ((w303 (car x302)) (x304 (cdr x302))) (let ((i w303)) (if (null? x304) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses (unquote abs) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i) ())))) (fail267)))) (fail267)))) (fail267)))) (fail267)))) (fail267))) (fail267))) (fail267)))) (fail267))) (fail267)))) (fail267)))) (fail267)))))) (if (cons? v242) (let ((w305 (car v242)) (x306 (cdr v242))) (let ((abs w305)) (if (cons? x306) (let ((w307 (car x306)) (x308 (cdr x306))) (let ((v w307)) (if (cons? x308) (let ((w309 (car x308)) (x310 (cdr x308))) (if (cons? w309) (let ((w311 (car w309)) (x312 (cdr w309))) (if (cons? w311) (let ((w313 (car w311)) (x314 (cdr w311))) (if (binary= w313 (quote <>)) (if (cons? x314) (let ((w315 (car x314)) (x316 (cdr x314))) (let ((f w315)) (if (cons? x316) (let ((w317 (car x316)) (x318 (cdr x316))) (let ((p w317)) (if (null? x318) (let ((l x312)) (if (cons? x310) (let ((w319 (car x310)) (x320 (cdr x310))) (let ((g+s w319)) (if (cons? x320) (let ((w321 (car x320)) (x322 (cdr x320))) (let ((sk w321)) (if (cons? x322) (let ((w323 (car x322)) (x324 (cdr x322))) (let ((fk w323)) (if (cons? x324) (let ((w325 (car x324)) (x326 (cdr x324))) (let ((i w325)) (if (null? x326) (progn (let ((res (gensym "res"))) (quasiquote (let (((unquote res) ((unquote f) (unquote v)))) (if (unquote res) (match-one (unquote abs) (car (unquote res)) (unquote p) (unquote g+s) (match-one (cdr (unquote res)) (unquote l) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))))) (fail266)))) (fail266)))) (fail266)))) (fail266)))) (fail266))) (fail266)))) (fail266)))) (fail266)) (fail266))) (fail266))) (fail266))) (fail266)))) (fail266)))) (fail266)))))) (if (cons? v242) (let ((w327 (car v242)) (x328 (cdr v242))) (let ((abs w327)) (if (cons? x328) (let ((w329 (car x328)) (x330 (cdr x328))) (let ((v w329)) (if (cons? x330) (let ((w331 (car x330)) (x332 (cdr x330))) (if (cons? w331) (let ((w333 (car w331)) (x334 (cdr w331))) (if (binary= w333 (quote =)) (if (cons? x334) (let ((w335 (car x334)) (x336 (cdr x334))) (let ((proc w335)) (if (cons? x336) (let ((w337 (car x336)) (x338 (cdr x336))) (let ((p w337)) (if (null? x338) (if (cons? x332) (let ((w339 (car x332)) (x340 (cdr x332))) (let ((g+s w339)) (let ((x x340)) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote proc) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) () (unquote-splicing x))))))))) (fail265)) (fail265)))) (fail265)))) (fail265)) (fail265))) (fail265))) (fail265)))) (fail265)))) (fail265)))))) (if (cons? v242) (let ((w341 (car v242)) (x342 (cdr v242))) (let ((abs w341)) (if (cons? x342) (let ((w343 (car x342)) (x344 (cdr x342))) (let ((v w343)) (if (cons? x344) (let ((w345 (car x344)) (x346 (cdr x344))) (if (cons? w345) (let ((w347 (car w345)) (x348 (cdr w345))) (if (binary= w347 (quote =)) (if (cons? x348) (let ((w349 (car x348)) (x350 (cdr x348))) (let ((g w349)) (if (cons? x350) (let ((w351 (car x350)) (x352 (cdr x350))) (let ((s w351)) (if (cons? x352) (let ((w353 (car x352)) (x354 (cdr x352))) (let ((p w353)) (if (null? x354) (if (cons? x346) (let ((w355 (car x346)) (x356 (cdr x346))) (let ((g+s w355)) (if (cons? x356) (let ((w357 (car x356)) (x358 (cdr x356))) (let ((sk w357)) (if (cons? x358) (let ((w359 (car x358)) (x360 (cdr x358))) (let ((fk w359)) (if (cons? x360) (let ((w361 (car x360)) (x362 (cdr x360))) (let ((i w361)) (if (null? x362) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote g) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) (((unquote g) (unquote v)) ((unquote s) (unquote v))) (unquote sk) (unquote fk) (unquote i)))))) (fail264)))) (fail264)))) (fail264)))) (fail264)))) (fail264)) (fail264)))) (fail264)))) (fail264)))) (fail264)) (fail264))) (fail264))) (fail264)))) (fail264)))) (fail264)))))) (if (cons? v242) (let ((w363 (car v242)) (x364 (cdr v242))) (let ((abs w363)) (if (cons? x364) (let ((w365 (car x364)) (x366 (cdr x364))) (let ((v w365)) (if (cons? x366) (let ((w367 (car x366)) (x368 (cdr x366))) (if (cons? w367) (let ((w369 (car w367)) (x370 (cdr w367))) (if (binary= w369 (quote =)) (if (cons? x370) (let ((w371 (car x370)) (x372 (cdr x370))) (if (binary= w371 0) (if (cons? x372) (let ((w373 (car x372)) (x374 (cdr x372))) (let ((m w373)) (if (cons? x374) (let ((w375 (car x374)) (x376 (cdr x374))) (let ((p w375)) (if (null? x376) (if (cons? x368) (let ((w377 (car x368)) (x378 (cdr x368))) (let ((g+s w377)) (if (cons? x378) (let ((w379 (car x378)) (x380 (cdr x378))) (let ((sk w379)) (if (cons? x380) (let ((w381 (car x380)) (x382 (cdr x380))) (let ((fk w381)) (if (cons? x382) (let ((w383 (car x382)) (x384 (cdr x382))) (let ((i w383)) (if (null? x384) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote m) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) (((unquote m) (unquote v)) ((setter (unquote m)) (unquote v))) (unquote sk) (unquote fk) (unquote i)))))) (fail263)))) (fail263)))) (fail263)))) (fail263)))) (fail263)) (fail263)))) (fail263)))) (fail263)) (fail263))) (fail263)) (fail263))) (fail263))) (fail263)))) (fail263)))) (fail263)))))) (if (cons? v242) (let ((w385 (car v242)) (x386 (cdr v242))) (let ((abs w385)) (if (cons? x386) (let ((w387 (car x386)) (x388 (cdr x386))) (let ((v w387)) (if (cons? x388) (let ((w389 (car x388)) (x390 (cdr x388))) (if (cons? w389) (let ((w391 (car w389)) (x392 (cdr w389))) (if (binary= w391 (quote $)) (if (cons? x392) (let ((w393 (car x392)) (x394 (cdr x392))) (let ((nn w393)) (let ((p x394)) (if (list? p) (if (cons? x390) (let ((w398 (car x390)) (x399 (cdr x390))) (let ((g+s w398)) (if (cons? x399) (let ((w400 (car x399)) (x401 (cdr x399))) (let ((sk w400)) (if (cons? x401) (let ((w402 (car x401)) (x403 (cdr x401))) (let ((fk w402)) (if (cons? x403) (let ((w404 (car x403)) (x405 (cdr x403))) (let ((i w404)) (if (null? x405) (progn (quasiquote (match-$ (unquote abs) (and) (unquote nn) (unquote p) (unquote v) (unquote sk) (unquote fk) (unquote i)))) (fail262)))) (fail262)))) (fail262)))) (fail262)))) (fail262)) (fail262))))) (fail262)) (fail262))) (fail262))) (fail262)))) (fail262)))) (fail262)))))) (if (cons? v242) (let ((w406 (car v242)) (x407 (cdr v242))) (let ((abs w406)) (if (cons? x407) (let ((w408 (car x407)) (x409 (cdr x407))) (let ((v w408)) (if (cons? x409) (let ((w410 (car x409)) (x411 (cdr x409))) (if (cons? w410) (let ((w412 (car w410)) (x413 (cdr w410))) (if (binary= w412 (quote $$)) (if (cons? x413) (let ((w414 (car x413)) (x415 (cdr x413))) (let ((nn w414)) (let ((p x415)) (if (list? p) (if (cons? x411) (let ((w419 (car x411)) (x420 (cdr x411))) (let ((g+s w419)) (if (cons? x420) (let ((w421 (car x420)) (x422 (cdr x420))) (let ((sk w421)) (if (cons? x422) (let ((w423 (car x422)) (x424 (cdr x422))) (let ((fk w423)) (if (cons? x424) (let ((w425 (car x424)) (x426 (cdr x424))) (let ((i w425)) (if (null? x426) (progn (if (symbol? nn) (progn (quasiquote (if ((unquote (concatenate nn (quote ?))) (unquote v)) (match-$$ (unquote abs) (and) (unquote nn) (unquote p) (unquote v) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))) (error <condition> "only symbols in $"))) (fail261)))) (fail261)))) (fail261)))) (fail261)))) (fail261)) (fail261))))) (fail261)) (fail261))) (fail261))) (fail261)))) (fail261)))) (fail261)))))) (if (cons? v242) (let ((w427 (car v242)) (x428 (cdr v242))) (let ((abs w427)) (if (cons? x428) (let ((w429 (car x428)) (x430 (cdr x428))) (let ((v w429)) (if (cons? x430) (let ((w431 (car x430)) (x432 (cdr x430))) (if (cons? w431) (let ((w433 (car w431)) (x434 (cdr w431))) (if (binary= w433 (quote $$)) (if (cons? x434) (let ((w435 (car x434)) (x436 (cdr x434))) (let ((n w435)) (if (null? x436) (if (cons? x432) (let ((w437 (car x432)) (x438 (cdr x432))) (let ((g-s w437)) (if (cons? x438) (let ((w439 (car x438)) (x440 (cdr x438))) (let ((sk w439)) (if (cons? x440) (let ((w441 (car x440)) (x442 (cdr x440))) (let ((fk w441)) (if (cons? x442) (let ((w443 (car x442)) (x444 (cdr x442))) (let ((i w443)) (if (null? x444) (progn (quasiquote (if ((unquote (concatenate n (quote ?))) (unquote v)) (insert-abs (unquote abs) (unquote sk)) (insert-abs (unquote abs) (unquote fk))))) (fail260)))) (fail260)))) (fail260)))) (fail260)))) (fail260)) (fail260)))) (fail260)) (fail260))) (fail260))) (fail260)))) (fail260)))) (fail260)))))) (if (cons? v242) (let ((w445 (car v242)) (x446 (cdr v242))) (let ((abs w445)) (if (cons? x446) (let ((w447 (car x446)) (x448 (cdr x446))) (let ((v w447)) (if (cons? x448) (let ((w449 (car x448)) (x450 (cdr x448))) (if (cons? w449) (let ((w451 (car w449)) (x452 (cdr w449))) (if (binary= w451 (quote ?)) (if (cons? x452) (let ((w453 (car x452)) (x454 (cdr x452))) (let ((pred w453)) (let ((p x454)) (if (cons? x450) (let ((w455 (car x450)) (x456 (cdr x450))) (let ((g+s w455)) (if (cons? x456) (let ((w457 (car x456)) (x458 (cdr x456))) (let ((sk w457)) (if (cons? x458) (let ((w459 (car x458)) (x460 (cdr x458))) (let ((fk w459)) (if (cons? x460) (let ((w461 (car x460)) (x462 (cdr x460))) (let ((i w461)) (if (null? x462) (progn (quasiquote (if ((unquote pred) (unquote v)) (match-one (unquote abs) (unquote v) (and (unquote-splicing p)) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))) (fail259)))) (fail259)))) (fail259)))) (fail259)))) (fail259))))) (fail259)) (fail259))) (fail259))) (fail259)))) (fail259)))) (fail259)))))) (if (cons? v242) (let ((w463 (car v242)) (x464 (cdr v242))) (let ((abs w463)) (if (cons? x464) (let ((w465 (car x464)) (x466 (cdr x464))) (let ((v w465)) (if (cons? x466) (let ((w467 (car x466)) (x468 (cdr x466))) (if (cons? w467) (let ((w469 (car w467)) (x470 (cdr w467))) (if (binary= w469 (quote set)) (if (cons? x470) (let ((w471 (car x470)) (x472 (cdr x470))) (let ((setter w471)) (if (null? x472) (if (cons? x468) (let ((w473 (car x468)) (x474 (cdr x468))) (if (cons? w473) (let ((w475 (car w473)) (x476 (cdr w473))) (let ((g w475)) (if (cons? x476) (let ((w477 (car x476)) (x478 (cdr x476))) (let ((s w477)) (if (list? s) (if (null? x478) (if (cons? x474) (let ((w482 (car x474)) (x483 (cdr x474))) (let ((sk w482)) (if (list? sk) (if (cons? x483) (let ((w487 (car x483)) (x488 (cdr x483))) (let ((fk w487)) (if (cons? x488) (let ((w489 (car x488)) (x490 (cdr x488))) (let ((i w489)) (if (null? x490) (progn (let ((x (gensym "x"))) (quasiquote (let (((unquote setter) (lambda ((unquote x)) ((unquote-splicing s) (unquote x))))) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))))) (fail258)))) (fail258)))) (fail258)) (fail258)))) (fail258)) (fail258)) (fail258)))) (fail258)))) (fail258))) (fail258)) (fail258)))) (fail258)) (fail258))) (fail258))) (fail258)))) (fail258)))) (fail258)))))) (if (cons? v242) (let ((w491 (car v242)) (x492 (cdr v242))) (let ((abs w491)) (if (cons? x492) (let ((w493 (car x492)) (x494 (cdr x492))) (let ((v w493)) (if (cons? x494) (let ((w495 (car x494)) (x496 (cdr x494))) (if (cons? w495) (let ((w497 (car w495)) (x498 (cdr w495))) (if (binary= w497 (quote get)) (if (cons? x498) (let ((w499 (car x498)) (x500 (cdr x498))) (let ((getter w499)) (if (null? x500) (if (cons? x496) (let ((w501 (car x496)) (x502 (cdr x496))) (if (cons? w501) (let ((w503 (car w501)) (x504 (cdr w501))) (let ((g w503)) (if (cons? x504) (let ((w505 (car x504)) (x506 (cdr x504))) (let ((s w505)) (if (null? x506) (if (cons? x502) (let ((w507 (car x502)) (x508 (cdr x502))) (let ((sk w507)) (if (list? sk) (if (cons? x508) (let ((w512 (car x508)) (x513 (cdr x508))) (let ((fk w512)) (if (cons? x513) (let ((w514 (car x513)) (x515 (cdr x513))) (let ((i w514)) (if (null? x515) (progn (quasiquote (let (((unquote getter) (lambda () (unquote g)))) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))))) (fail257)))) (fail257)))) (fail257)) (fail257)))) (fail257)) (fail257)))) (fail257)))) (fail257))) (fail257)) (fail257)))) (fail257)) (fail257))) (fail257))) (fail257)))) (fail257)))) (fail257)))))) (if (cons? v242) (let ((w516 (car v242)) (x517 (cdr v242))) (let ((abs w516)) (if (cons? x517) (let ((w518 (car x517)) (x519 (cdr x517))) (let ((v w518)) (if (cons? x519) (let ((w520 (car x519)) (x521 (cdr x519))) (if (cons? w520) (let ((w522 (car w520)) (x523 (cdr w520))) (if (binary= w522 (quote not)) (if (cons? x523) (let ((w524 (car x523)) (x525 (cdr x523))) (let ((p w524)) (if (null? x525) (if (cons? x521) (let ((w526 (car x521)) (x527 (cdr x521))) (let ((g+s w526)) (if (cons? x527) (let ((w528 (car x527)) (x529 (cdr x527))) (let ((sk w528)) (if (list? sk) (if (cons? x529) (let ((w533 (car x529)) (x534 (cdr x529))) (if (cons? w533) (let ((w535 (car w533)) (x536 (cdr w533))) (let ((fk w535)) (let ((fkk x536)) (if (list? fkk) (if (cons? x534) (let ((w540 (car x534)) (x541 (cdr x534))) (let ((i w540)) (if (null? x541) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-drop-ids ((unquote fk) (unquote abs) (unquote-splicing fkk))) ((unquote-splicing sk) i) i))) (fail256)))) (fail256)) (fail256))))) (fail256))) (fail256)) (fail256)))) (fail256)))) (fail256)) (fail256)))) (fail256)) (fail256))) (fail256))) (fail256)))) (fail256)))) (fail256)))))) (if (cons? v242) (let ((w542 (car v242)) (x543 (cdr v242))) (let ((abs w542)) (if (cons? x543) (let ((w544 (car x543)) (x545 (cdr x543))) (let ((v w544)) (if (cons? x545) (let ((w546 (car x545)) (x547 (cdr x545))) (if (cons? w546) (let ((w548 (car w546)) (x549 (cdr w546))) (if (binary= w548 (quote cond)) (if (cons? x549) (let ((w550 (car x549)) (x551 (cdr x549))) (let ((p w550)) (let ((ps x551)) (if (list? ps) (if (cons? x547) (let ((w555 (car x547)) (x556 (cdr x547))) (let ((g+s w555)) (if (cons? x556) (let ((w557 (car x556)) (x558 (cdr x556))) (let ((sk w557)) (if (cons? x558) (let ((w559 (car x558)) (x560 (cdr x558))) (let ((fk w559)) (if (cons? x560) (let ((w561 (car x560)) (x562 (cdr x560))) (let ((i w561)) (if (null? x562) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (abs-drop (match-one (unquote abs) (unquote v) (cond (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i)))) (fail255)))) (fail255)))) (fail255)))) (fail255)))) (fail255)) (fail255))))) (fail255)) (fail255))) (fail255))) (fail255)))) (fail255)))) (fail255)))))) (if (cons? v242) (let ((w563 (car v242)) (x564 (cdr v242))) (let ((abs w563)) (if (cons? x564) (let ((w565 (car x564)) (x566 (cdr x564))) (let ((v w565)) (if (cons? x566) (let ((w567 (car x566)) (x568 (cdr x566))) (if (cons? w567) (let ((w569 (car w567)) (x570 (cdr w567))) (if (binary= w569 (quote cond)) (if (cons? x570) (let ((w571 (car x570)) (x572 (cdr x570))) (let ((p w571)) (if (null? x572) (let ((x x568)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail254)))) (fail254)) (fail254))) (fail254))) (fail254)))) (fail254)))) (fail254)))))) (if (cons? v242) (let ((w573 (car v242)) (x574 (cdr v242))) (let ((abs w573)) (if (cons? x574) (let ((w575 (car x574)) (x576 (cdr x574))) (let ((v w575)) (if (cons? x576) (let ((w577 (car x576)) (x578 (cdr x576))) (if (cons? w577) (let ((w579 (car w577)) (x580 (cdr w577))) (if (binary= w579 (quote cond)) (if (null? x580) (if (cons? x578) (let ((w581 (car x578)) (x582 (cdr x578))) (let ((g+s w581)) (if (cons? x582) (let ((w583 (car x582)) (x584 (cdr x582))) (let ((sk w583)) (if (cons? x584) (let ((w585 (car x584)) (x586 (cdr x584))) (let ((fk w585)) (if (cons? x586) (let ((w587 (car x586)) (x588 (cdr x586))) (let ((i w587)) (if (null? x588) (progn (quasiquote (insert-abs (unquote abs) (unquote fk)))) (fail253)))) (fail253)))) (fail253)))) (fail253)))) (fail253)) (fail253)) (fail253))) (fail253))) (fail253)))) (fail253)))) (fail253)))))) (if (cons? v242) (let ((w589 (car v242)) (x590 (cdr v242))) (let ((abs w589)) (if (cons? x590) (let ((w591 (car x590)) (x592 (cdr x590))) (let ((v w591)) (if (cons? x592) (let ((w593 (car x592)) (x594 (cdr x592))) (if (cons? w593) (let ((w595 (car w593)) (x596 (cdr w593))) (if (binary= w595 (quote or)) (let ((p x596)) (if (list? p) (if (cons? x594) (let ((w600 (car x594)) (x601 (cdr x594))) (let ((g+s w600)) (if (cons? x601) (let ((w602 (car x601)) (x603 (cdr x601))) (let ((sk w602)) (if (cons? x603) (let ((w604 (car x603)) (x605 (cdr x603))) (let ((fk w604)) (if (cons? x605) (let ((w606 (car x605)) (x607 (cdr x605))) (let ((i w606)) (if (null? x607) (progn (quasiquote (match-extract-vars (unquote abs) (or (unquote-splicing p)) (abs-drop (match-gen-or (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail252)))) (fail252)))) (fail252)))) (fail252)))) (fail252)) (fail252))) (fail252))) (fail252))) (fail252)))) (fail252)))) (fail252)))))) (if (cons? v242) (let ((w608 (car v242)) (x609 (cdr v242))) (let ((abs w608)) (if (cons? x609) (let ((w610 (car x609)) (x611 (cdr x609))) (let ((v w610)) (if (cons? x611) (let ((w612 (car x611)) (x613 (cdr x611))) (if (cons? w612) (let ((w614 (car w612)) (x615 (cdr w612))) (if (binary= w614 (quote or)) (if (cons? x615) (let ((w616 (car x615)) (x617 (cdr x615))) (let ((p w616)) (if (null? x617) (let ((x x613)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail251)))) (fail251)) (fail251))) (fail251))) (fail251)))) (fail251)))) (fail251)))))) (if (cons? v242) (let ((w618 (car v242)) (x619 (cdr v242))) (let ((abs w618)) (if (cons? x619) (let ((w620 (car x619)) (x621 (cdr x619))) (let ((v w620)) (if (cons? x621) (let ((w622 (car x621)) (x623 (cdr x621))) (if (cons? w622) (let ((w624 (car w622)) (x625 (cdr w622))) (if (binary= w624 (quote or)) (if (null? x625) (if (cons? x623) (let ((w626 (car x623)) (x627 (cdr x623))) (let ((g+s w626)) (if (cons? x627) (let ((w628 (car x627)) (x629 (cdr x627))) (let ((sk w628)) (if (cons? x629) (let ((w630 (car x629)) (x631 (cdr x629))) (let ((fk w630)) (if (cons? x631) (let ((w632 (car x631)) (x633 (cdr x631))) (let ((i w632)) (if (null? x633) (progn (quasiquote (insert-abs (unquote abs) (unquote fk)))) (fail250)))) (fail250)))) (fail250)))) (fail250)))) (fail250)) (fail250)) (fail250))) (fail250))) (fail250)))) (fail250)))) (fail250)))))) (if (cons? v242) (let ((w634 (car v242)) (x635 (cdr v242))) (let ((abs w634)) (if (cons? x635) (let ((w636 (car x635)) (x637 (cdr x635))) (let ((v w636)) (if (cons? x637) (let ((w638 (car x637)) (x639 (cdr x637))) (if (cons? w638) (let ((w640 (car w638)) (x641 (cdr w638))) (if (binary= w640 (quote and)) (if (cons? x641) (let ((w642 (car x641)) (x643 (cdr x641))) (let ((p w642)) (let ((q x643)) (if (list? q) (if (cons? x639) (let ((w647 (car x639)) (x648 (cdr x639))) (let ((g+s w647)) (if (cons? x648) (let ((w649 (car x648)) (x650 (cdr x648))) (let ((sk w649)) (if (cons? x650) (let ((w651 (car x650)) (x652 (cdr x650))) (let ((fk w651)) (if (cons? x652) (let ((w653 (car x652)) (x654 (cdr x652))) (let ((i w653)) (if (null? x654) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-one (unquote v) (and (unquote-splicing q)) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)))) (fail249)))) (fail249)))) (fail249)))) (fail249)))) (fail249)) (fail249))))) (fail249)) (fail249))) (fail249))) (fail249)))) (fail249)))) (fail249)))))) (if (cons? v242) (let ((w655 (car v242)) (x656 (cdr v242))) (let ((abs w655)) (if (cons? x656) (let ((w657 (car x656)) (x658 (cdr x656))) (let ((v w657)) (if (cons? x658) (let ((w659 (car x658)) (x660 (cdr x658))) (if (cons? w659) (let ((w661 (car w659)) (x662 (cdr w659))) (if (binary= w661 (quote and)) (if (null? x662) (if (cons? x660) (let ((w663 (car x660)) (x664 (cdr x660))) (let ((g+s w663)) (if (cons? x664) (let ((w665 (car x664)) (x666 (cdr x664))) (let ((sk w665)) (if (list? sk) (if (cons? x666) (let ((w670 (car x666)) (x671 (cdr x666))) (let ((fk w670)) (if (cons? x671) (let ((w672 (car x671)) (x673 (cdr x671))) (let ((i w672)) (if (null? x673) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail248)))) (fail248)))) (fail248)) (fail248)))) (fail248)))) (fail248)) (fail248)) (fail248))) (fail248))) (fail248)))) (fail248)))) (fail248)))))) (if (cons? v242) (let ((w674 (car v242)) (x675 (cdr v242))) (let ((abs w674)) (if (cons? x675) (let ((w676 (car x675)) (x677 (cdr x675))) (let ((v w676)) (if (cons? x677) (let ((w678 (car x677)) (x679 (cdr x677))) (if (cons? w678) (let ((w680 (car w678)) (x681 (cdr w678))) (if (binary= w680 (quote quasiquote)) (if (cons? x681) (let ((w682 (car x681)) (x683 (cdr x681))) (let ((p w682)) (if (null? x683) (let ((x x679)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail247)))) (fail247)) (fail247))) (fail247))) (fail247)))) (fail247)))) (fail247)))))) (if (cons? v242) (let ((w684 (car v242)) (x685 (cdr v242))) (let ((a w684)) (if (cons? w684) (let ((w686 (car w684)) (x687 (cdr w684))) (let ((abs w686)) (if (cons? x687) (let ((w688 (car x687)) (x689 (cdr x687))) (if (cons? w688) (let ((w690 (car w688)) (x691 (cdr w688))) (if (cons? w690) (let ((w692 (car w690)) (x693 (cdr w690))) (let ((ccar w692)) (if (cons? x693) (let ((w694 (car x693)) (x695 (cdr x693))) (let ((ccdr w694)) (if (cons? x695) (let ((w696 (car x695)) (x697 (cdr x695))) (let ((pcons? w696)) (if (cons? x697) (let ((w698 (car x697)) (x699 (cdr x697))) (let ((qnull? w698)) (if (cons? x699) (let ((w700 (car x699)) (x701 (cdr x699))) (let ((qbinary= w700)) (if (null? x701) (if (cons? x691) (let ((w702 (car x691)) (x703 (cdr x691))) (let ((rr w702)) (if (null? x703) (if (null? x689) (if (cons? x685) (let ((w704 (car x685)) (x705 (cdr x685))) (let ((v w704)) (if (cons? x705) (let ((w706 (car x705)) (x707 (cdr x705))) (if (cons? w706) (let ((w708 (car w706)) (x709 (cdr w706))) (if (cons? w708) (let ((w710 (car w708)) (x711 (cdr w708))) (if (binary= w710 (quote unquote-splicing)) (if (cons? x711) (let ((w712 (car x711)) (x713 (cdr x711))) (let ((p w712)) (if (null? x713) (let ((ps x709)) (if (cons? x707) (let ((w714 (car x707)) (x715 (cdr x707))) (let ((g+s w714)) (if (cons? x715) (let ((w716 (car x715)) (x717 (cdr x715))) (let ((sk w716)) (if (cons? x717) (let ((w718 (car x717)) (x719 (cdr x717))) (let ((fk w718)) (if (cons? x719) (let ((w720 (car x719)) (x721 (cdr x719))) (let ((i w720)) (if (null? x721) (progn (let ((loop (gensym "loop")) (vv (gensym "v")) (pp (gensym "p"))) (quasiquote (recur (unquote loop) (((unquote vv) (unquote v)) ((unquote pp) (unquote p))) (if (cons? (unquote pp)) (if (and ((unquote pcons?) (unquote vv)) ((unquote qbinary=) ((unquote ccar) (unquote vv)) (car (unquote pp)))) ((unquote loop) ((unquote ccdr) (unquote vv)) (cdr (unquote pp))) (insert-abs (unquote a) (unquote fk))) (match-one (unquote a) (unquote vv) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))))) (fail246)))) (fail246)))) (fail246)))) (fail246)))) (fail246))) (fail246)))) (fail246)) (fail246))) (fail246))) (fail246))) (fail246)))) (fail246)) (fail246)) (fail246)))) (fail246)) (fail246)))) (fail246)))) (fail246)))) (fail246)))) (fail246)))) (fail246))) (fail246))) (fail246)))) (fail246)))) (fail246)))))) (if (cons? v242) (let ((w722 (car v242)) (x723 (cdr v242))) (let ((a w722)) (if (cons? w722) (let ((w724 (car w722)) (x725 (cdr w722))) (let ((qabs w724)) (if (cons? x725) (let ((w726 (car x725)) (x727 (cdr x725))) (if (cons? w726) (let ((w728 (car w726)) (x729 (cdr w726))) (if (cons? w728) (let ((w730 (car w728)) (x731 (cdr w728))) (let ((qcar w730)) (if (cons? x731) (let ((w732 (car x731)) (x733 (cdr x731))) (let ((qcdr w732)) (if (cons? x733) (let ((w734 (car x733)) (x735 (cdr x733))) (let ((qcons? w734)) (if (cons? x735) (let ((w736 (car x735)) (x737 (cdr x735))) (let ((qnull? w736)) (if (cons? x737) (let ((w738 (car x737)) (x739 (cdr x737))) (let ((qbinary= w738)) (if (null? x739) (if (cons? x729) (let ((w740 (car x729)) (x741 (cdr x729))) (let ((pp w740)) (if (null? x741) (if (null? x727) (if (cons? x723) (let ((w742 (car x723)) (x743 (cdr x723))) (let ((v w742)) (if (cons? x743) (let ((w744 (car x743)) (x745 (cdr x743))) (if (cons? w744) (let ((w746 (car w744)) (x747 (cdr w744))) (if (binary= w746 (quote unquote)) (if (cons? x747) (let ((w748 (car x747)) (x749 (cdr x747))) (let ((p w748)) (if (null? x749) (if (cons? x745) (let ((w750 (car x745)) (x751 (cdr x745))) (let ((g+s w750)) (if (cons? x751) (let ((w752 (car x751)) (x753 (cdr x751))) (let ((sk w752)) (if (list? sk) (if (cons? x753) (let ((w757 (car x753)) (x758 (cdr x753))) (let ((fk w757)) (if (cons? x758) (let ((w759 (car x758)) (x760 (cdr x758))) (let ((i w759)) (if (null? x760) (progn (quasiquote (if ((unquote qbinary=) (unquote v) (unquote p)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail245)))) (fail245)))) (fail245)) (fail245)))) (fail245)))) (fail245)) (fail245)))) (fail245)) (fail245))) (fail245))) (fail245)))) (fail245)) (fail245)) (fail245)))) (fail245)) (fail245)))) (fail245)))) (fail245)))) (fail245)))) (fail245)))) (fail245))) (fail245))) (fail245)))) (fail245)))) (fail245)))))) (if (cons? v242) (let ((w761 (car v242)) (x762 (cdr v242))) (let ((a w761)) (if (cons? w761) (let ((w763 (car w761)) (x764 (cdr w761))) (let ((qabs w763)) (if (cons? x764) (let ((w765 (car x764)) (x766 (cdr x764))) (if (cons? w765) (let ((w767 (car w765)) (x768 (cdr w765))) (if (cons? w767) (let ((w769 (car w767)) (x770 (cdr w767))) (let ((qcar w769)) (if (cons? x770) (let ((w771 (car x770)) (x772 (cdr x770))) (let ((qcdr w771)) (if (cons? x772) (let ((w773 (car x772)) (x774 (cdr x772))) (let ((qcons? w773)) (if (cons? x774) (let ((w775 (car x774)) (x776 (cdr x774))) (let ((qnull? w775)) (if (cons? x776) (let ((w777 (car x776)) (x778 (cdr x776))) (let ((qbinary= w777)) (if (null? x778) (if (cons? x768) (let ((w779 (car x768)) (x780 (cdr x768))) (let ((pp w779)) (if (null? x780) (if (null? x766) (if (cons? x762) (let ((w781 (car x762)) (x782 (cdr x762))) (let ((v w781)) (if (cons? x782) (let ((w783 (car x782)) (x784 (cdr x782))) (if (cons? w783) (let ((w785 (car w783)) (x786 (cdr w783))) (if (binary= w785 (quote quote)) (if (cons? x786) (let ((w787 (car x786)) (x788 (cdr x786))) (let ((p w787)) (if (null? x788) (if (cons? x784) (let ((w789 (car x784)) (x790 (cdr x784))) (let ((g+s w789)) (if (cons? x790) (let ((w791 (car x790)) (x792 (cdr x790))) (let ((sk w791)) (if (list? sk) (if (cons? x792) (let ((w796 (car x792)) (x797 (cdr x792))) (let ((fk w796)) (if (cons? x797) (let ((w798 (car x797)) (x799 (cdr x797))) (let ((i w798)) (if (null? x799) (progn (quasiquote (if ((unquote qbinary=) (unquote v) (quote (unquote p))) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail244)))) (fail244)))) (fail244)) (fail244)))) (fail244)))) (fail244)) (fail244)))) (fail244)) (fail244))) (fail244))) (fail244)))) (fail244)) (fail244)) (fail244)))) (fail244)) (fail244)))) (fail244)))) (fail244)))) (fail244)))) (fail244)))) (fail244))) (fail244))) (fail244)))) (fail244)))) (fail244)))))) (if (cons? v242) (let ((w800 (car v242)) (x801 (cdr v242))) (let ((a w800)) (if (cons? w800) (let ((w802 (car w800)) (x803 (cdr w800))) (let ((qabs w802)) (if (cons? x803) (let ((w804 (car x803)) (x805 (cdr x803))) (if (cons? w804) (let ((w806 (car w804)) (x807 (cdr w804))) (if (cons? w806) (let ((w808 (car w806)) (x809 (cdr w806))) (let ((qcar w808)) (if (cons? x809) (let ((w810 (car x809)) (x811 (cdr x809))) (let ((qcdr w810)) (if (cons? x811) (let ((w812 (car x811)) (x813 (cdr x811))) (let ((qcons? w812)) (if (cons? x813) (let ((w814 (car x813)) (x815 (cdr x813))) (let ((qnull? w814)) (if (cons? x815) (let ((w816 (car x815)) (x817 (cdr x815))) (let ((qbinary= w816)) (if (null? x817) (if (cons? x807) (let ((w818 (car x807)) (x819 (cdr x807))) (let ((pp w818)) (if (null? x819) (if (null? x805) (if (cons? x801) (let ((w820 (car x801)) (x821 (cdr x801))) (let ((v w820)) (if (cons? x821) (let ((w822 (car x821)) (x823 (cdr x821))) (if (null? w822) (if (cons? x823) (let ((w824 (car x823)) (x825 (cdr x823))) (let ((g+s w824)) (if (cons? x825) (let ((w826 (car x825)) (x827 (cdr x825))) (let ((sk w826)) (if (list? sk) (if (cons? x827) (let ((w831 (car x827)) (x832 (cdr x827))) (let ((fk w831)) (if (cons? x832) (let ((w833 (car x832)) (x834 (cdr x832))) (let ((i w833)) (if (null? x834) (progn (quasiquote (if ((unquote qnull?) (unquote v)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail243)))) (fail243)))) (fail243)) (fail243)))) (fail243)))) (fail243)) (fail243))) (fail243)))) (fail243)) (fail243)) (fail243)))) (fail243)) (fail243)))) (fail243)))) (fail243)))) (fail243)))) (fail243)))) (fail243))) (fail243))) (fail243)))) (fail243)))) (fail243))))) (defmacro match-gen-or x (let ((v835 x)) (let ((fail836 (lambda () (error <condition> "no matching pattern")))) (if (cons? v835) (let ((w837 (car v835)) (x838 (cdr v835))) (let ((abs w837)) (if (cons? x838) (let ((w839 (car x838)) (x840 (cdr x838))) (let ((v w839)) (if (cons? x840) (let ((w841 (car x840)) (x842 (cdr x840))) (let ((p w841)) (if (cons? x842) (let ((w843 (car x842)) (x844 (cdr x842))) (let ((g+s w843)) (if (cons? x844) (let ((w845 (car x844)) (x846 (cdr x844))) (let ((sk w845)) (if (list? sk) (if (cons? x846) (let ((w850 (car x846)) (x851 (cdr x846))) (let ((fk w850)) (if (cons? x851) (let ((w852 (car x851)) (x853 (cdr x851))) (let ((i w852)) (if (list? i) (if (cons? x853) (let ((w857 (car x853)) (x858 (cdr x853))) (letfuns ((loop (ls862 p-ls860 p-ls859) (if (null? ls862) (progn (let ((id-ls (reverse p-ls860)) (id (reverse p-ls859))) (if (null? x858) (progn (let ((sk2 (gensym "sk2"))) (quasiquote (let (((unquote sk2) (lambda (unquote id) (insert-abs (unquote abs) ((unquote-splicing sk) ((unquote-splicing i) (unquote-splicing id))))))) (match-gen-or-step (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-drop-ids ((unquote sk2) (unquote-splicing id))) (unquote fk) i))))) (fail836)))) (if (cons? ls862) (progn (let ((w863 (car ls862))) (if (cons? w863) (let ((w864 (car w863)) (x865 (cdr w863))) (let ((id w864)) (if (cons? x865) (let ((w866 (car x865)) (x867 (cdr x865))) (let ((id-ls w866)) (if (null? x867) (loop (cdr ls862) (cons id-ls p-ls860) (cons id p-ls859)) (fail836)))) (fail836)))) (fail836)))) (if else (progn (fail836)) (cond)))))) (loop w857 (quote ()) (quote ())))) (fail836)) (fail836)))) (fail836)))) (fail836)) (fail836)))) (fail836)))) (fail836)))) (fail836)))) (fail836)))) (fail836))))) (defmacro match-gen-or-step x (let ((v868 x)) (let ((fail869 (lambda () (let ((fail870 (lambda () (let ((fail871 (lambda () (error <condition> "no matching pattern")))) (if (cons? v868) (let ((w872 (car v868)) (x873 (cdr v868))) (let ((abs w872)) (if (cons? x873) (let ((w874 (car x873)) (x875 (cdr x873))) (let ((v w874)) (if (cons? x875) (let ((w876 (car x875)) (x877 (cdr x875))) (if (cons? w876) (let ((w878 (car w876)) (x879 (cdr w876))) (let ((p w878)) (let ((q x879)) (if (cons? x877) (let ((w880 (car x877)) (x881 (cdr x877))) (let ((g+s w880)) (if (cons? x881) (let ((w882 (car x881)) (x883 (cdr x881))) (let ((sk w882)) (if (cons? x883) (let ((w884 (car x883)) (x885 (cdr x883))) (let ((fk w884)) (if (cons? x885) (let ((w886 (car x885)) (x887 (cdr x885))) (let ((i w886)) (if (null? x887) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (match-gen-or-step (unquote v) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i)))) (fail871)))) (fail871)))) (fail871)))) (fail871)))) (fail871))))) (fail871))) (fail871)))) (fail871)))) (fail871)))))) (if (cons? v868) (let ((w888 (car v868)) (x889 (cdr v868))) (let ((abs w888)) (if (cons? x889) (let ((w890 (car x889)) (x891 (cdr x889))) (let ((v w890)) (if (cons? x891) (let ((w892 (car x891)) (x893 (cdr x891))) (if (cons? w892) (let ((w894 (car w892)) (x895 (cdr w892))) (let ((p w894)) (if (null? x895) (let ((x x893)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail870)))) (fail870))) (fail870)))) (fail870)))) (fail870)))))) (if (cons? v868) (let ((w896 (car v868)) (x897 (cdr v868))) (let ((abs w896)) (if (cons? x897) (let ((w898 (car x897)) (x899 (cdr x897))) (let ((v w898)) (if (cons? x899) (let ((w900 (car x899)) (x901 (cdr x899))) (if (null? w900) (if (cons? x901) (let ((w902 (car x901)) (x903 (cdr x901))) (let ((g+s w902)) (if (cons? x903) (let ((w904 (car x903)) (x905 (cdr x903))) (let ((sk w904)) (if (cons? x905) (let ((w906 (car x905)) (x907 (cdr x905))) (let ((fk w906)) (let ((x x907)) (progn (quasiquote (insert-abs (unquote abs) (unquote fk))))))) (fail869)))) (fail869)))) (fail869)) (fail869))) (fail869)))) (fail869)))) (fail869))))) (defmacro match-three x (let ((v908 x)) (let ((fail909 (lambda () (let ((fail910 (lambda () (let ((fail911 (lambda () (let ((fail912 (lambda () (let ((fail913 (lambda () (let ((fail914 (lambda () (let ((fail915 (lambda () (error <condition> "no matching pattern")))) (if (cons? v908) (let ((w916 (car v908)) (x917 (cdr v908))) (let ((a w916)) (if (cons? w916) (let ((w918 (car w916)) (x919 (cdr w916))) (let ((qabs w918)) (if (cons? x919) (let ((w920 (car x919)) (x921 (cdr x919))) (if (cons? w920) (let ((w922 (car w920)) (x923 (cdr w920))) (if (cons? w922) (let ((w924 (car w922)) (x925 (cdr w922))) (let ((qcar w924)) (if (cons? x925) (let ((w926 (car x925)) (x927 (cdr x925))) (let ((qcdr w926)) (if (cons? x927) (let ((w928 (car x927)) (x929 (cdr x927))) (let ((qcons? w928)) (if (cons? x929) (let ((w930 (car x929)) (x931 (cdr x929))) (let ((qnull? w930)) (if (cons? x931) (let ((w932 (car x931)) (x933 (cdr x931))) (let ((binary= w932)) (if (null? x933) (if (cons? x923) (let ((w934 (car x923)) (x935 (cdr x923))) (let ((qpp w934)) (if (null? x935) (if (null? x921) (if (cons? x917) (let ((w936 (car x917)) (x937 (cdr x917))) (let ((v w936)) (if (cons? x937) (let ((w938 (car x937)) (x939 (cdr x937))) (let ((x w938)) (if (cons? x939) (let ((w940 (car x939)) (x941 (cdr x939))) (let ((g+s w940)) (if (cons? x941) (let ((w942 (car x941)) (x943 (cdr x941))) (let ((sk w942)) (if (list? sk) (if (cons? x943) (let ((w947 (car x943)) (x948 (cdr x943))) (let ((fk w947)) (if (cons? x948) (let ((w949 (car x948)) (x950 (cdr x948))) (let ((id w949)) (if (list? id) (if (null? x950) (progn (if (if (symbol? x) (null? (member x id)) ()) (quasiquote (let (((unquote x) (unquote v))) (insert-abs (unquote a) ((unquote-splicing sk) ((unquote-splicing id) (unquote x)))))) (quasiquote (if ((unquote binary=) (unquote v) (unquote x)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote id))) (insert-abs (unquote a) (unquote fk)))))) (fail915)) (fail915)))) (fail915)))) (fail915)) (fail915)))) (fail915)))) (fail915)))) (fail915)))) (fail915)) (fail915)) (fail915)))) (fail915)) (fail915)))) (fail915)))) (fail915)))) (fail915)))) (fail915)))) (fail915))) (fail915))) (fail915)))) (fail915)))) (fail915)))))) (if (cons? v908) (let ((w954 (car v908)) (x955 (cdr v908))) (let ((abs w954)) (if (cons? x955) (let ((w956 (car x955)) (x957 (cdr x955))) (let ((v w956)) (if (cons? x957) (let ((w958 (car x957)) (x959 (cdr x957))) (if (binary= w958 (quote _)) (if (cons? x959) (let ((w960 (car x959)) (x961 (cdr x959))) (let ((g+s w960)) (if (cons? x961) (let ((w962 (car x961)) (x963 (cdr x961))) (let ((sk w962)) (if (list? sk) (if (cons? x963) (let ((w967 (car x963)) (x968 (cdr x963))) (let ((fk w967)) (if (cons? x968) (let ((w969 (car x968)) (x970 (cdr x968))) (let ((i w969)) (if (null? x970) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail914)))) (fail914)))) (fail914)) (fail914)))) (fail914)))) (fail914)) (fail914))) (fail914)))) (fail914)))) (fail914)))))) (if (cons? v908) (let ((w971 (car v908)) (x972 (cdr v908))) (let ((abs w971)) (if (cons? x972) (let ((w973 (car x972)) (x974 (cdr x972))) (let ((v w973)) (if (cons? x974) (let ((w975 (car x974)) (x976 (cdr x974))) (if (vector? w975) (let ((len977 (vector-size w975))) (if (>= len977 0) (letfuns ((loop979 (j980 p-ls978) (if (>= j980 len977) (let ((p (reverse p-ls978))) (if (cons? x976) (let ((w982 (car x976)) (x983 (cdr x976))) (let ((g+s w982)) (let ((x x983)) (progn (quasiquote (match-vector (unquote abs) (unquote v) 0 () (unquote p) (unquote-splicing x))))))) (fail913))) (let ((w981 (vector-ref w975 j980))) (let ((p w981)) (loop979 (+ j980 1) (cons p p-ls978))))))) (loop979 0 (quote ()))) (fail913))) (fail913))) (fail913)))) (fail913)))) (fail913)))))) (if (cons? v908) (let ((w984 (car v908)) (x985 (cdr v908))) (let ((a w984)) (if (cons? w984) (let ((w986 (car w984)) (x987 (cdr w984))) (let ((abs w986)) (if (cons? x987) (let ((w988 (car x987)) (x989 (cdr x987))) (if (cons? w988) (let ((w990 (car w988)) (x991 (cdr w988))) (if (cons? w990) (let ((w992 (car w990)) (x993 (cdr w990))) (let ((qcar w992)) (if (cons? x993) (let ((w994 (car x993)) (x995 (cdr x993))) (let ((qcdr w994)) (if (cons? x995) (let ((w996 (car x995)) (x997 (cdr x995))) (let ((qcons? w996)) (if (cons? x997) (let ((w998 (car x997)) (x999 (cdr x997))) (let ((qnull? w998)) (if (cons? x999) (let ((w1000 (car x999)) (x1001 (cdr x999))) (let ((qbinary= w1000)) (if (null? x1001) (if (cons? x991) (let ((w1002 (car x991)) (x1003 (cdr x991))) (let ((pp w1002)) (if (null? x1003) (if (null? x989) (if (cons? x985) (let ((w1004 (car x985)) (x1005 (cdr x985))) (let ((v w1004)) (if (cons? x1005) (let ((w1006 (car x1005)) (x1007 (cdr x1005))) (if (cons? w1006) (let ((w1008 (car w1006)) (x1009 (cdr w1006))) (let ((p w1008)) (let ((q x1009)) (if (cons? x1007) (let ((w1010 (car x1007)) (x1011 (cdr x1007))) (let ((g+s w1010)) (if (cons? x1011) (let ((w1012 (car x1011)) (x1013 (cdr x1011))) (let ((sk w1012)) (if (cons? x1013) (let ((w1014 (car x1013)) (x1015 (cdr x1013))) (let ((fk w1014)) (if (cons? x1015) (let ((w1016 (car x1015)) (x1017 (cdr x1015))) (let ((i w1016)) (if (null? x1017) (progn (let ((w (gensym "w")) (x (gensym "x"))) (quasiquote (if ((unquote qcons?) (unquote v)) (let (((unquote w) ((unquote qcar) (unquote v))) ((unquote x) ((unquote qcdr) (unquote v)))) (match-one (unquote a) (unquote w) (unquote p) (((unquote qcar) (unquote v)) ((setter car) (unquote v))) (match-one (unquote x) (unquote q) (((unquote qcdr) (unquote v)) ((setter cdr) (unquote v))) (unquote sk) (unquote fk)) (unquote fk) (unquote i))) (insert-abs (unquote a) (unquote fk)))))) (fail912)))) (fail912)))) (fail912)))) (fail912)))) (fail912))))) (fail912))) (fail912)))) (fail912)) (fail912)) (fail912)))) (fail912)) (fail912)))) (fail912)))) (fail912)))) (fail912)))) (fail912)))) (fail912))) (fail912))) (fail912)))) (fail912)))) (fail912)))))) (if (cons? v908) (let ((w1018 (car v908)) (x1019 (cdr v908))) (let ((abs w1018)) (if (cons? x1019) (let ((w1020 (car x1019)) (x1021 (cdr x1019))) (let ((v w1020)) (if (cons? x1021) (let ((w1022 (car x1021)) (x1023 (cdr x1021))) (if (cons? w1022) (let ((w1024 (car w1022)) (x1025 (cdr w1022))) (let ((p w1024)) (if (cons? x1025) (let ((w1026 (car x1025)) (x1027 (cdr x1025))) (if (binary= w1026 (quote ***)) (let ((q x1027)) (if (cons? x1023) (let ((w1028 (car x1023)) (x1029 (cdr x1023))) (let ((g+s w1028)) (if (cons? x1029) (let ((w1030 (car x1029)) (x1031 (cdr x1029))) (let ((sk w1030)) (if (cons? x1031) (let ((w1032 (car x1031)) (x1033 (cdr x1031))) (let ((fk w1032)) (if (cons? x1033) (let ((w1034 (car x1033)) (x1035 (cdr x1033))) (let ((i w1034)) (if (null? x1035) (progn (quasiquote (error <condition> (fmt "invalid use of *** ~a" ((unquote p) *** (unquote-splicing q)))))) (fail911)))) (fail911)))) (fail911)))) (fail911)))) (fail911))) (fail911))) (fail911)))) (fail911))) (fail911)))) (fail911)))) (fail911)))))) (if (cons? v908) (let ((w1036 (car v908)) (x1037 (cdr v908))) (let ((abs w1036)) (if (cons? x1037) (let ((w1038 (car x1037)) (x1039 (cdr x1037))) (let ((v w1038)) (if (cons? x1039) (let ((w1040 (car x1039)) (x1041 (cdr x1039))) (if (cons? w1040) (let ((w1042 (car w1040)) (x1043 (cdr w1040))) (let ((p w1042)) (if (cons? x1043) (let ((w1044 (car x1043)) (x1045 (cdr x1043))) (if (binary= w1044 (quote ***)) (if (cons? x1045) (let ((w1046 (car x1045)) (x1047 (cdr x1045))) (let ((q w1046)) (if (null? x1047) (if (cons? x1041) (let ((w1048 (car x1041)) (x1049 (cdr x1041))) (let ((g+s w1048)) (if (cons? x1049) (let ((w1050 (car x1049)) (x1051 (cdr x1049))) (let ((sk w1050)) (if (cons? x1051) (let ((w1052 (car x1051)) (x1053 (cdr x1051))) (let ((fk w1052)) (if (cons? x1053) (let ((w1054 (car x1053)) (x1055 (cdr x1053))) (let ((i w1054)) (if (null? x1055) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-gen-search (unquote v) (unquote p) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i) ()))) (fail910)))) (fail910)))) (fail910)))) (fail910)))) (fail910)) (fail910)))) (fail910)) (fail910))) (fail910)))) (fail910))) (fail910)))) (fail910)))) (fail910)))))) (if (cons? v908) (let ((w1056 (car v908)) (x1057 (cdr v908))) (let ((a w1056)) (if (cons? w1056) (let ((w1058 (car w1056)) (x1059 (cdr w1056))) (let ((abs w1058)) (if (cons? x1059) (let ((w1060 (car x1059)) (x1061 (cdr x1059))) (if (cons? w1060) (let ((w1062 (car w1060)) (x1063 (cdr w1060))) (if (cons? w1062) (let ((w1064 (car w1062)) (x1065 (cdr w1062))) (let ((qcar w1064)) (if (cons? x1065) (let ((w1066 (car x1065)) (x1067 (cdr x1065))) (let ((qcdr w1066)) (if (cons? x1067) (let ((w1068 (car x1067)) (x1069 (cdr x1067))) (let ((qcons? w1068)) (if (cons? x1069) (let ((w1070 (car x1069)) (x1071 (cdr x1069))) (let ((qnull? w1070)) (if (null? x1071) (if (cons? x1063) (let ((w1072 (car x1063)) (x1073 (cdr x1063))) (let ((rr w1072)) (if (null? x1073) (if (null? x1061) (if (cons? x1057) (let ((w1074 (car x1057)) (x1075 (cdr x1057))) (let ((v w1074)) (if (cons? x1075) (let ((w1076 (car x1075)) (x1077 (cdr x1075))) (if (cons? w1076) (let ((w1078 (car w1076)) (x1079 (cdr w1076))) (let ((p w1078)) (if (null? x1079) (if (cons? x1077) (let ((w1080 (car x1077)) (x1081 (cdr x1077))) (let ((g+s w1080)) (if (cons? x1081) (let ((w1082 (car x1081)) (x1083 (cdr x1081))) (let ((sk w1082)) (if (cons? x1083) (let ((w1084 (car x1083)) (x1085 (cdr x1083))) (let ((fk w1084)) (if (cons? x1085) (let ((w1086 (car x1085)) (x1087 (cdr x1085))) (let ((i w1086)) (if (null? x1087) (progn (let ((w (gensym "w"))) (quasiquote (if (and ((unquote qcons?) (unquote v)) ((unquote qnull?) ((unquote qcdr) (unquote v)))) (let (((unquote w) ((unquote qcar) (unquote v)))) (match-one (unquote a) (unquote w) (unquote p) (((unquote qcar) (unquote v)) ((setter car) (unquote v))) (unquote sk) (unquote fk) (unquote i))) (unquote fk))))) (fail909)))) (fail909)))) (fail909)))) (fail909)))) (fail909)) (fail909)))) (fail909))) (fail909)))) (fail909)) (fail909)) (fail909)))) (fail909)) (fail909)))) (fail909)))) (fail909)))) (fail909)))) (fail909))) (fail909))) (fail909)))) (fail909)))) (fail909))))) (defmacro match-vector x (let ((v1088 x)) (let ((fail1089 (lambda () (let ((fail1090 (lambda () (let ((fail1091 (lambda () (error <condition> "no matching pattern")))) (let ((x v1088)) (progn (quasiquote (match-vector-two (unquote-splicing x))))))))) (if (cons? v1088) (let ((w1092 (car v1088)) (x1093 (cdr v1088))) (let ((abs w1092)) (if (cons? x1093) (let ((w1094 (car x1093)) (x1095 (cdr x1093))) (let ((v w1094)) (if (cons? x1095) (let ((w1096 (car x1095)) (x1097 (cdr x1095))) (let ((n w1096)) (if (cons? x1097) (let ((w1098 (car x1097)) (x1099 (cdr x1097))) (let ((pats w1098)) (if (cons? x1099) (let ((w1100 (car x1099)) (x1101 (cdr x1099))) (if (cons? w1100) (let ((w1102 (car w1100)) (x1103 (cdr w1100))) (let ((p w1102)) (if (cons? x1103) (let ((w1104 (car x1103)) (x1105 (cdr x1103))) (if (binary= w1104 (quote ___)) (if (null? x1105) (if (cons? x1101) (let ((w1106 (car x1101)) (x1107 (cdr x1101))) (let ((sk w1106)) (if (cons? x1107) (let ((w1108 (car x1107)) (x1109 (cdr x1107))) (let ((fk w1108)) (if (cons? x1109) (let ((w1110 (car x1109)) (x1111 (cdr x1109))) (let ((i w1110)) (if (null? x1111) (progn (quasiquote (match-gen-vector-ellipses (unquote abs) (unquote v) (unquote n) (unquote pats) (unquote p) (unquote sk) (unquote fk) (unquote i)))) (fail1090)))) (fail1090)))) (fail1090)))) (fail1090)) (fail1090)) (fail1090))) (fail1090)))) (fail1090))) (fail1090)))) (fail1090)))) (fail1090)))) (fail1090)))) (fail1090)))))) (if (cons? v1088) (let ((w1112 (car v1088)) (x1113 (cdr v1088))) (let ((abs w1112)) (if (cons? x1113) (let ((w1114 (car x1113)) (x1115 (cdr x1113))) (let ((v w1114)) (if (cons? x1115) (let ((w1116 (car x1115)) (x1117 (cdr x1115))) (let ((n w1116)) (if (cons? x1117) (let ((w1118 (car x1117)) (x1119 (cdr x1117))) (let ((pats w1118)) (if (cons? x1119) (let ((w1120 (car x1119)) (x1121 (cdr x1119))) (if (cons? w1120) (let ((w1122 (car w1120)) (x1123 (cdr w1120))) (let ((p w1122)) (if (cons? x1123) (let ((w1124 (car x1123)) (x1125 (cdr x1123))) (let ((q w1124)) (if (null? x1125) (let ((x x1121)) (progn (quasiquote (match-check-ellipse (unquote q) (match-gen-vector-ellipses (unquote abs) (unquote v) (unquote n) (unquote pats) (unquote p) (unquote-splicing x)) (match-vector-two (unquote abs) (unquote v) (unquote n) (unquote pats) ((unquote p) (unquote q)) (unquote-splicing x)))))) (fail1089)))) (fail1089)))) (fail1089))) (fail1089)))) (fail1089)))) (fail1089)))) (fail1089)))) (fail1089))))) (defmacro match-vector-two x (let ((v1126 x)) (let ((fail1127 (lambda () (let ((fail1128 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1126) (let ((w1129 (car v1126)) (x1130 (cdr v1126))) (let ((abs w1129)) (if (cons? x1130) (let ((w1131 (car x1130)) (x1132 (cdr x1130))) (let ((v w1131)) (if (cons? x1132) (let ((w1133 (car x1132)) (x1134 (cdr x1132))) (let ((n w1133)) (if (cons? x1134) (let ((w1135 (car x1134)) (x1136 (cdr x1134))) (let ((pats w1135)) (if (list? pats) (if (cons? x1136) (let ((w1140 (car x1136)) (x1141 (cdr x1136))) (if (cons? w1140) (let ((w1142 (car w1140)) (x1143 (cdr w1140))) (let ((p w1142)) (let ((q x1143)) (let ((x x1141)) (progn (quasiquote (match-vector (unquote abs) (unquote v) (+ (unquote n) 1) ((unquote-splicing pats) ((unquote p) (unquote n))) (unquote q) (unquote-splicing x)))))))) (fail1128))) (fail1128)) (fail1128)))) (fail1128)))) (fail1128)))) (fail1128)))) (fail1128)))))) (if (cons? v1126) (let ((w1144 (car v1126)) (x1145 (cdr v1126))) (let ((abs w1144)) (if (cons? x1145) (let ((w1146 (car x1145)) (x1147 (cdr x1145))) (let ((v w1146)) (if (cons? x1147) (let ((w1148 (car x1147)) (x1149 (cdr x1147))) (let ((n w1148)) (if (cons? x1149) (let ((w1150 (car x1149)) (x1151 (cdr x1149))) (let ((a w1150)) (letfuns ((loop (ls1155 p-ls1153 p-ls1152) (if (null? ls1155) (progn (let ((index (reverse p-ls1153)) (pat (reverse p-ls1152))) (if (cons? x1151) (let ((w1157 (car x1151)) (x1158 (cdr x1151))) (if (null? w1157) (if (cons? x1158) (let ((w1159 (car x1158)) (x1160 (cdr x1158))) (let ((sk w1159)) (if (cons? x1160) (let ((w1161 (car x1160)) (x1162 (cdr x1160))) (let ((fk w1161)) (if (cons? x1162) (let ((w1163 (car x1162)) (x1164 (cdr x1162))) (let ((i w1163)) (if (null? x1164) (progn (let ((len (gensym "len"))) (quasiquote (if (vector? (unquote v)) (let (((unquote len) (vector-size (unquote v)))) (if (= (unquote len) (unquote n)) (match-vector-step (unquote abs) (unquote v) (unquote a) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk)))) (insert-abs (unquote abs) (unquote fk)))))) (fail1127)))) (fail1127)))) (fail1127)))) (fail1127)) (fail1127))) (fail1127)))) (if (cons? ls1155) (progn (let ((w1156 (car ls1155))) (if (cons? w1156) (let ((w1165 (car w1156)) (x1166 (cdr w1156))) (let ((pat w1165)) (if (cons? x1166) (let ((w1167 (car x1166)) (x1168 (cdr x1166))) (let ((index w1167)) (if (null? x1168) (loop (cdr ls1155) (cons index p-ls1153) (cons pat p-ls1152)) (fail1127)))) (fail1127)))) (fail1127)))) (if else (progn (fail1127)) (cond)))))) (loop w1150 (quote ()) (quote ()))))) (fail1127)))) (fail1127)))) (fail1127)))) (fail1127))))) (defmacro match-vector-step x (let ((v1169 x)) (let ((fail1170 (lambda () (let ((fail1171 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1169) (let ((w1172 (car v1169)) (x1173 (cdr v1169))) (let ((abs w1172)) (if (cons? x1173) (let ((w1174 (car x1173)) (x1175 (cdr x1173))) (let ((v w1174)) (if (cons? x1175) (let ((w1176 (car x1175)) (x1177 (cdr x1175))) (if (cons? w1176) (let ((w1178 (car w1176)) (x1179 (cdr w1176))) (if (cons? w1178) (let ((w1180 (car w1178)) (x1181 (cdr w1178))) (let ((pat w1180)) (if (cons? x1181) (let ((w1182 (car x1181)) (x1183 (cdr x1181))) (let ((index w1182)) (if (null? x1183) (let ((rest x1179)) (if (cons? x1177) (let ((w1184 (car x1177)) (x1185 (cdr x1177))) (let ((sk w1184)) (if (cons? x1185) (let ((w1186 (car x1185)) (x1187 (cdr x1185))) (let ((fk w1186)) (if (cons? x1187) (let ((w1188 (car x1187)) (x1189 (cdr x1187))) (let ((i w1188)) (if (null? x1189) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) (vector-ref (unquote v) (unquote index)))) (match-one (unquote abs) (unquote w) (unquote pat) ((vector-ref (unquote v) (unquote index)) ((setter vector-ref) (unquote v) (unquote index))) (match-vector-step (unquote v) (unquote rest) (unquote sk) (unquote fk)) (unquote fk) (unquote i)))))) (fail1171)))) (fail1171)))) (fail1171)))) (fail1171))) (fail1171)))) (fail1171)))) (fail1171))) (fail1171))) (fail1171)))) (fail1171)))) (fail1171)))))) (if (cons? v1169) (let ((w1190 (car v1169)) (x1191 (cdr v1169))) (let ((abs w1190)) (if (cons? x1191) (let ((w1192 (car x1191)) (x1193 (cdr x1191))) (let ((v w1192)) (if (cons? x1193) (let ((w1194 (car x1193)) (x1195 (cdr x1193))) (if (null? w1194) (if (cons? x1195) (let ((w1196 (car x1195)) (x1197 (cdr x1195))) (let ((sk w1196)) (if (list? sk) (if (cons? x1197) (let ((w1201 (car x1197)) (x1202 (cdr x1197))) (let ((fk w1201)) (if (cons? x1202) (let ((w1203 (car x1202)) (x1204 (cdr x1202))) (let ((i w1203)) (if (null? x1204) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail1170)))) (fail1170)))) (fail1170)) (fail1170)))) (fail1170)) (fail1170))) (fail1170)))) (fail1170)))) (fail1170))))) (defmacro match-gen-vector-ellipses x (let ((v1205 x)) (let ((fail1206 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1205) (let ((w1207 (car v1205)) (x1208 (cdr v1205))) (let ((abs w1207)) (if (cons? x1208) (let ((w1209 (car x1208)) (x1210 (cdr x1208))) (let ((v w1209)) (if (cons? x1210) (let ((w1211 (car x1210)) (x1212 (cdr x1210))) (let ((n w1211)) (if (cons? x1212) (let ((w1213 (car x1212)) (x1214 (cdr x1212))) (let ((a w1213)) (letfuns ((loop (ls1218 p-ls1216 p-ls1215) (if (null? ls1218) (progn (let ((index (reverse p-ls1216)) (pat (reverse p-ls1215))) (if (cons? x1214) (let ((w1220 (car x1214)) (x1221 (cdr x1214))) (let ((p w1220)) (if (cons? x1221) (let ((w1222 (car x1221)) (x1223 (cdr x1221))) (let ((sk w1222)) (if (cons? x1223) (let ((w1224 (car x1223)) (x1225 (cdr x1223))) (let ((fk w1224)) (if (cons? x1225) (let ((w1226 (car x1225)) (x1227 (cdr x1225))) (let ((i w1226)) (if (null? x1227) (progn (let ((len (gensym "len"))) (quasiquote (if (vector? (unquote v)) (let (((unquote len) (vector-size (unquote v)))) (if (>= (unquote len) (unquote n)) (match-vector-step (unquote abs) (unquote v) (unquote a) (match-vector-tail (unquote v) (unquote p) (unquote n) (unquote len) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk)))) (insert-abs (unquote abs) (unquote fk)))))) (fail1206)))) (fail1206)))) (fail1206)))) (fail1206)))) (fail1206)))) (if (cons? ls1218) (progn (let ((w1219 (car ls1218))) (if (cons? w1219) (let ((w1228 (car w1219)) (x1229 (cdr w1219))) (let ((pat w1228)) (if (cons? x1229) (let ((w1230 (car x1229)) (x1231 (cdr x1229))) (let ((index w1230)) (if (null? x1231) (loop (cdr ls1218) (cons index p-ls1216) (cons pat p-ls1215)) (fail1206)))) (fail1206)))) (fail1206)))) (if else (progn (fail1206)) (cond)))))) (loop w1213 (quote ()) (quote ()))))) (fail1206)))) (fail1206)))) (fail1206)))) (fail1206))))) (defmacro match-vector-tail x (let ((v1232 x)) (let ((fail1233 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1232) (let ((w1234 (car v1232)) (x1235 (cdr v1232))) (let ((abs w1234)) (if (cons? x1235) (let ((w1236 (car x1235)) (x1237 (cdr x1235))) (let ((v w1236)) (if (cons? x1237) (let ((w1238 (car x1237)) (x1239 (cdr x1237))) (let ((p w1238)) (if (cons? x1239) (let ((w1240 (car x1239)) (x1241 (cdr x1239))) (let ((n w1240)) (if (cons? x1241) (let ((w1242 (car x1241)) (x1243 (cdr x1241))) (let ((len w1242)) (if (cons? x1243) (let ((w1244 (car x1243)) (x1245 (cdr x1243))) (let ((sk w1244)) (if (cons? x1245) (let ((w1246 (car x1245)) (x1247 (cdr x1245))) (let ((fk w1246)) (if (cons? x1247) (let ((w1248 (car x1247)) (x1249 (cdr x1247))) (let ((i w1248)) (if (null? x1249) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-vector-tail-two (unquote v) (unquote p) (unquote n) (unquote len) (unquote sk) (unquote fk) (unquote i)) (unquote i) ()))) (fail1233)))) (fail1233)))) (fail1233)))) (fail1233)))) (fail1233)))) (fail1233)))) (fail1233)))) (fail1233)))) (fail1233))))) (defmacro match-vector-tail-two x (let ((v1250 x)) (let ((fail1251 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1250) (let ((w1252 (car v1250)) (x1253 (cdr v1250))) (let ((abs w1252)) (if (cons? x1253) (let ((w1254 (car x1253)) (x1255 (cdr x1253))) (let ((v w1254)) (if (cons? x1255) (let ((w1256 (car x1255)) (x1257 (cdr x1255))) (let ((p w1256)) (if (cons? x1257) (let ((w1258 (car x1257)) (x1259 (cdr x1257))) (let ((n w1258)) (if (cons? x1259) (let ((w1260 (car x1259)) (x1261 (cdr x1259))) (let ((len w1260)) (if (cons? x1261) (let ((w1262 (car x1261)) (x1263 (cdr x1261))) (let ((sk w1262)) (if (list? sk) (if (cons? x1263) (let ((w1267 (car x1263)) (x1268 (cdr x1263))) (let ((fk w1267)) (if (cons? x1268) (let ((w1269 (car x1268)) (x1270 (cdr x1268))) (let ((i w1269)) (if (cons? x1270) (let ((w1271 (car x1270)) (x1272 (cdr x1270))) (letfuns ((loop (ls1276 p-ls1274 p-ls1273) (if (null? ls1276) (progn (let ((id-ls (reverse p-ls1274)) (id (reverse p-ls1273))) (if (null? x1272) (progn (let ((loop (gensym "loop")) (j (gensym "j")) (w (gensym "w"))) (quasiquote (recur (unquote loop) (((unquote j) (unquote n)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (if (>= (unquote j) (unquote len)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))) (let (((unquote w) (vector-ref (unquote v) (unquote j)))) (match-one (unquote abs) (unquote w) (unquote p) ((vector-ref (unquote v) (unquote j)) ((setter vector-ref) (unquote v) (unquote j))) (match-drop-ids ((unquote loop) (+ (unquote j) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))))))) (fail1251)))) (if (cons? ls1276) (progn (let ((w1277 (car ls1276))) (if (cons? w1277) (let ((w1278 (car w1277)) (x1279 (cdr w1277))) (let ((id w1278)) (if (cons? x1279) (let ((w1280 (car x1279)) (x1281 (cdr x1279))) (let ((id-ls w1280)) (if (null? x1281) (loop (cdr ls1276) (cons id-ls p-ls1274) (cons id p-ls1273)) (fail1251)))) (fail1251)))) (fail1251)))) (if else (progn (fail1251)) (cond)))))) (loop w1271 (quote ()) (quote ())))) (fail1251)))) (fail1251)))) (fail1251)) (fail1251)))) (fail1251)))) (fail1251)))) (fail1251)))) (fail1251)))) (fail1251)))) (fail1251))))) (defmacro match-abstract x (let ((v1282 x)) (let ((fail1283 (lambda () (let ((fail1284 (lambda () (let ((fail1285 (lambda () (let ((fail1286 (lambda () (let ((fail1287 (lambda () (let ((fail1288 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1282) (let ((w1289 (car v1282)) (x1290 (cdr v1282))) (if (null? w1289) (if (cons? x1290) (let ((w1291 (car x1290)) (x1292 (cdr x1290))) (let ((abs w1291)) (if (cons? x1292) (let ((w1293 (car x1292)) (x1294 (cdr x1292))) (let ((phd w1293)) (if (cons? x1294) (let ((w1295 (car x1294)) (x1296 (cdr x1294))) (let ((y w1295)) (if (cons? x1296) (let ((w1297 (car x1296)) (x1298 (cdr x1296))) (let ((p w1297)) (if (cons? x1298) (let ((w1299 (car x1298)) (x1300 (cdr x1298))) (let ((g+s w1299)) (if (cons? x1300) (let ((w1301 (car x1300)) (x1302 (cdr x1300))) (let ((sk w1301)) (if (cons? x1302) (let ((w1303 (car x1302)) (x1304 (cdr x1302))) (let ((fk w1303)) (if (cons? x1304) (let ((w1305 (car x1304)) (x1306 (cdr x1304))) (let ((i w1305)) (if (null? x1306) (progn (quasiquote (match-phd () (unquote phd) (unquote abs) (unquote y) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail1288)))) (fail1288)))) (fail1288)))) (fail1288)))) (fail1288)))) (fail1288)))) (fail1288)))) (fail1288)))) (fail1288)) (fail1288))) (fail1288)))))) (if (cons? v1282) (let ((w1307 (car v1282)) (x1308 (cdr v1282))) (let ((x w1307)) (if (list? x) (if (cons? x1308) (let ((w1312 (car x1308)) (x1313 (cdr x1308))) (if (cons? w1312) (let ((w1314 (car w1312)) (x1315 (cdr w1312))) (if (cons? w1314) (let ((w1316 (car w1314)) (x1317 (cdr w1314))) (let ((a w1316)) (if (cons? x1317) (let ((w1318 (car x1317)) (x1319 (cdr x1317))) (let ((aa w1318)) (let ((as x1319)) (if (list? as) (let ((us x1315)) (if (list? us) (if (cons? x1313) (let ((w1326 (car x1313)) (x1327 (cdr x1313))) (let ((phd w1326)) (if (cons? x1327) (let ((w1328 (car x1327)) (x1329 (cdr x1327))) (let ((y w1328)) (if (cons? x1329) (let ((w1330 (car x1329)) (x1331 (cdr x1329))) (if (cons? w1330) (let ((w1332 (car w1330)) (x1333 (cdr w1330))) (let ((b w1332)) (let ((ps x1333)) (if (cons? x1331) (let ((w1334 (car x1331)) (x1335 (cdr x1331))) (let ((g+s w1334)) (if (cons? x1335) (let ((w1336 (car x1335)) (x1337 (cdr x1335))) (let ((sk w1336)) (if (cons? x1337) (let ((w1338 (car x1337)) (x1339 (cdr x1337))) (let ((fk w1338)) (if (cons? x1339) (let ((w1340 (car x1339)) (x1341 (cdr x1339))) (let ((i w1340)) (if (null? x1341) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) ((unquote a) (unquote y)))) (if (unquote ret) (let (((unquote aa) (car (unquote ret)))) (match-one ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) ((unquote aa) (unquote-splicing i)))) (insert-abs ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a) (unquote aa) (unquote-splicing as)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) ((unquote b) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1287)))) (fail1287)))) (fail1287)))) (fail1287)))) (fail1287))))) (fail1287))) (fail1287)))) (fail1287)))) (fail1287)) (fail1287))) (fail1287))))) (fail1287)))) (fail1287))) (fail1287))) (fail1287)) (fail1287)))) (fail1287)))))) (if (cons? v1282) (let ((w1342 (car v1282)) (x1343 (cdr v1282))) (let ((x w1342)) (if (list? x) (if (cons? x1343) (let ((w1347 (car x1343)) (x1348 (cdr x1343))) (if (cons? w1347) (let ((w1349 (car w1347)) (x1350 (cdr w1347))) (if (cons? w1349) (let ((w1351 (car w1349)) (x1352 (cdr w1349))) (let ((a w1351)) (if (null? x1352) (let ((us x1350)) (if (list? us) (if (cons? x1348) (let ((w1356 (car x1348)) (x1357 (cdr x1348))) (let ((phd w1356)) (if (cons? x1357) (let ((w1358 (car x1357)) (x1359 (cdr x1357))) (let ((y w1358)) (if (cons? x1359) (let ((w1360 (car x1359)) (x1361 (cdr x1359))) (if (cons? w1360) (let ((w1362 (car w1360)) (x1363 (cdr w1360))) (let ((b w1362)) (let ((ps x1363)) (if (cons? x1361) (let ((w1364 (car x1361)) (x1365 (cdr x1361))) (let ((g+s w1364)) (if (cons? x1365) (let ((w1366 (car x1365)) (x1367 (cdr x1365))) (let ((sk w1366)) (if (cons? x1367) (let ((w1368 (car x1367)) (x1369 (cdr x1367))) (let ((fk w1368)) (if (cons? x1369) (let ((w1370 (car x1369)) (x1371 (cdr x1369))) (let ((i w1370)) (if (null? x1371) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) ((unquote a) (unquote y)))) (if (unquote ret) (match-one ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) ((unquote b) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1286)))) (fail1286)))) (fail1286)))) (fail1286)))) (fail1286))))) (fail1286))) (fail1286)))) (fail1286)))) (fail1286)) (fail1286))) (fail1286)))) (fail1286))) (fail1286))) (fail1286)) (fail1286)))) (fail1286)))))) (if (cons? v1282) (let ((w1372 (car v1282)) (x1373 (cdr v1282))) (let ((x w1372)) (if (list? x) (if (cons? x1373) (let ((w1377 (car x1373)) (x1378 (cdr x1373))) (if (cons? w1377) (let ((w1379 (car w1377)) (x1380 (cdr w1377))) (if (cons? w1379) (let ((w1381 (car w1379)) (x1382 (cdr w1379))) (let ((a w1381)) (if (cons? x1382) (let ((w1383 (car x1382)) (x1384 (cdr x1382))) (let ((aa w1383)) (let ((as x1384)) (if (list? as) (let ((us x1380)) (if (list? us) (if (cons? x1378) (let ((w1391 (car x1378)) (x1392 (cdr x1378))) (let ((phd w1391)) (if (cons? x1392) (let ((w1393 (car x1392)) (x1394 (cdr x1392))) (let ((y w1393)) (if (cons? x1394) (let ((w1395 (car x1394)) (x1396 (cdr x1394))) (if (cons? w1395) (let ((w1397 (car w1395)) (x1398 (cdr w1395))) (if (cons? w1397) (let ((w1399 (car w1397)) (x1400 (cdr w1397))) (let ((b w1399)) (let ((bs x1400)) (if (list? bs) (let ((ps x1398)) (if (cons? x1396) (let ((w1404 (car x1396)) (x1405 (cdr x1396))) (let ((g+s w1404)) (if (cons? x1405) (let ((w1406 (car x1405)) (x1407 (cdr x1405))) (let ((sk w1406)) (if (cons? x1407) (let ((w1408 (car x1407)) (x1409 (cdr x1407))) (let ((fk w1408)) (if (cons? x1409) (let ((w1410 (car x1409)) (x1411 (cdr x1409))) (let ((i w1410)) (if (null? x1411) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) (((unquote a) (unquote-splicing bs)) (unquote y)))) (if (unquote ret) (let (((unquote aa) (car (unquote ret)))) (match-one ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) ((unquote aa) (unquote-splicing i)))) (insert-abs ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a) (unquote aa) (unquote-splicing as)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) (((unquote b) (unquote-splicing bs)) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1285)))) (fail1285)))) (fail1285)))) (fail1285)))) (fail1285))) (fail1285))))) (fail1285))) (fail1285))) (fail1285)))) (fail1285)))) (fail1285)) (fail1285))) (fail1285))))) (fail1285)))) (fail1285))) (fail1285))) (fail1285)) (fail1285)))) (fail1285)))))) (if (cons? v1282) (let ((w1412 (car v1282)) (x1413 (cdr v1282))) (let ((x w1412)) (if (list? x) (if (cons? x1413) (let ((w1417 (car x1413)) (x1418 (cdr x1413))) (if (cons? w1417) (let ((w1419 (car w1417)) (x1420 (cdr w1417))) (if (cons? w1419) (let ((w1421 (car w1419)) (x1422 (cdr w1419))) (let ((a w1421)) (if (null? x1422) (let ((us x1420)) (if (list? us) (if (cons? x1418) (let ((w1426 (car x1418)) (x1427 (cdr x1418))) (let ((phd w1426)) (if (cons? x1427) (let ((w1428 (car x1427)) (x1429 (cdr x1427))) (let ((y w1428)) (if (cons? x1429) (let ((w1430 (car x1429)) (x1431 (cdr x1429))) (if (cons? w1430) (let ((w1432 (car w1430)) (x1433 (cdr w1430))) (if (cons? w1432) (let ((w1434 (car w1432)) (x1435 (cdr w1432))) (let ((b w1434)) (let ((bs x1435)) (if (list? bs) (let ((ps x1433)) (if (cons? x1431) (let ((w1439 (car x1431)) (x1440 (cdr x1431))) (let ((g+s w1439)) (if (cons? x1440) (let ((w1441 (car x1440)) (x1442 (cdr x1440))) (let ((sk w1441)) (if (cons? x1442) (let ((w1443 (car x1442)) (x1444 (cdr x1442))) (let ((fk w1443)) (if (cons? x1444) (let ((w1445 (car x1444)) (x1446 (cdr x1444))) (let ((i w1445)) (if (null? x1446) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) (((unquote a) (unquote-splicing bs)) (unquote y)))) (if (unquote ret) (match-one ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) (((unquote b) (unquote-splicing bs)) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1284)))) (fail1284)))) (fail1284)))) (fail1284)))) (fail1284))) (fail1284))))) (fail1284))) (fail1284))) (fail1284)))) (fail1284)))) (fail1284)) (fail1284))) (fail1284)))) (fail1284))) (fail1284))) (fail1284)) (fail1284)))) (fail1284)))))) (if (cons? v1282) (let ((w1447 (car v1282)) (x1448 (cdr v1282))) (let ((x w1447)) (if (cons? x1448) (let ((w1449 (car x1448)) (x1450 (cdr x1448))) (if (null? w1449) (if (cons? x1450) (let ((w1451 (car x1450)) (x1452 (cdr x1450))) (let ((phd w1451)) (if (cons? x1452) (let ((w1453 (car x1452)) (x1454 (cdr x1452))) (let ((y w1453)) (if (cons? x1454) (let ((w1455 (car x1454)) (x1456 (cdr x1454))) (let ((p w1455)) (let ((l x1456)) (progn (quasiquote (match-phd () (unquote phd) (unquote x) (unquote y) (unquote p) (unquote-splicing l))))))) (fail1283)))) (fail1283)))) (fail1283)) (fail1283))) (fail1283)))) (fail1283))))) (defmacro match-phd x (let ((v1457 x)) (let ((fail1458 (lambda () (let ((fail1459 (lambda () (let ((fail1460 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1457) (let ((w1461 (car v1457)) (x1462 (cdr v1457))) (if (null? w1461) (if (cons? x1462) (let ((w1463 (car x1462)) (x1464 (cdr x1462))) (let ((phd w1463)) (if (cons? x1464) (let ((w1465 (car x1464)) (x1466 (cdr x1464))) (let ((abs w1465)) (let ((l x1466)) (progn (quasiquote (match-three ((unquote abs) (unquote phd)) (unquote-splicing l))))))) (fail1460)))) (fail1460)) (fail1460))) (fail1460)))))) (if (cons? v1457) (let ((w1467 (car v1457)) (x1468 (cdr v1457))) (let ((phd w1467)) (if (list? phd) (if (cons? x1468) (let ((w1472 (car x1468)) (x1473 (cdr x1468))) (if (cons? w1472) (let ((w1474 (car w1472)) (x1475 (cdr w1472))) (let ((c w1474)) (if (cons? x1475) (let ((w1476 (car x1475)) (x1477 (cdr x1475))) (if (cons? w1476) (let ((w1478 (car w1476)) (x1479 (cdr w1476))) (if (cons? w1478) (let ((w1480 (car w1478)) (x1481 (cdr w1478))) (let ((h w1480)) (if (cons? x1481) (let ((w1482 (car x1481)) (x1483 (cdr x1481))) (let ((a w1482)) (if (null? x1483) (let ((hh x1479)) (if (list? hh) (if (null? x1477) (if (cons? x1473) (let ((w1487 (car x1473)) (x1488 (cdr x1473))) (let ((abs w1487)) (if (cons? x1488) (let ((w1489 (car x1488)) (x1490 (cdr x1488))) (let ((v w1489)) (if (cons? x1490) (let ((w1491 (car x1490)) (x1492 (cdr x1490))) (if (cons? w1491) (let ((w1493 (car w1491)) (x1494 (cdr w1491))) (let ((h2 w1493)) (let ((l x1494)) (if (cons? x1492) (let ((w1495 (car x1492)) (x1496 (cdr x1492))) (let ((g+s w1495)) (if (cons? x1496) (let ((w1497 (car x1496)) (x1498 (cdr x1496))) (let ((sk w1497)) (if (cons? x1498) (let ((w1499 (car x1498)) (x1500 (cdr x1498))) (let ((fk w1499)) (if (cons? x1500) (let ((w1501 (car x1500)) (x1502 (cdr x1500))) (let ((i w1501)) (if (null? x1502) (progn (if (eq h h2) (quasiquote (match-one ((unquote abs) ((unquote a) (((unquote h) (unquote a)) (unquote-splicing hh) (unquote-splicing phd)))) (unquote v) (unquote l) (unquote g+s) (set-phd-sk (unquote c) (unquote sk)) (set-phd-fk (unquote c) (unquote fk)) (unquote i))) (quasiquote (match-phd (((unquote h) (unquote a)) (unquote-splicing phd)) ((unquote c) (unquote hh)) (unquote abs) (unquote v) ((unquote h2) (unquote-splicing l)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1459)))) (fail1459)))) (fail1459)))) (fail1459)))) (fail1459))))) (fail1459))) (fail1459)))) (fail1459)))) (fail1459)) (fail1459)) (fail1459))) (fail1459)))) (fail1459)))) (fail1459))) (fail1459))) (fail1459)))) (fail1459))) (fail1459)) (fail1459)))) (fail1459)))))) (if (cons? v1457) (let ((w1503 (car v1457)) (x1504 (cdr v1457))) (let ((phd w1503)) (if (cons? x1504) (let ((w1505 (car x1504)) (x1506 (cdr x1504))) (if (cons? w1505) (let ((w1507 (car w1505)) (x1508 (cdr w1505))) (let ((c w1507)) (if (cons? x1508) (let ((w1509 (car x1508)) (x1510 (cdr x1508))) (if (null? w1509) (if (null? x1510) (if (cons? x1506) (let ((w1511 (car x1506)) (x1512 (cdr x1506))) (let ((abs w1511)) (let ((l x1512)) (progn (quasiquote (match-three ((unquote abs) ((unquote c) (unquote phd))) (unquote-splicing l))))))) (fail1458)) (fail1458)) (fail1458))) (fail1458)))) (fail1458))) (fail1458)))) (fail1458))))) (defmacro set-phd-fk x (let ((v1513 x)) (let ((fail1514 (lambda () (let ((fail1515 (lambda () (let ((fail1516 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1513) (let ((w1517 (car v1513)) (x1518 (cdr v1513))) (if (cons? w1517) (let ((w1519 (car w1517)) (x1520 (cdr w1517))) (let ((abs w1519)) (if (cons? x1520) (let ((w1521 (car x1520)) (x1522 (cdr x1520))) (if (cons? w1521) (let ((w1523 (car w1521)) (x1524 (cdr w1521))) (let ((c w1523)) (if (cons? x1524) (let ((w1525 (car x1524)) (x1526 (cdr x1524))) (let ((pp w1525)) (if (null? x1526) (if (null? x1522) (if (cons? x1518) (let ((w1527 (car x1518)) (x1528 (cdr x1518))) (let ((cc w1527)) (if (cons? x1528) (let ((w1529 (car x1528)) (x1530 (cdr x1528))) (if (cons? w1529) (let ((w1531 (car w1529)) (x1532 (cdr w1529))) (let ((fk w1531)) (let ((fkk x1532)) (if (list? fkk) (if (null? x1530) (progn (quasiquote (fk ((unquote abs) ((unquote cc) (unquote pp))) (unquote-splicing fkk)))) (fail1516)) (fail1516))))) (fail1516))) (fail1516)))) (fail1516)) (fail1516)) (fail1516)))) (fail1516)))) (fail1516))) (fail1516)))) (fail1516))) (fail1516)))))) (if (cons? v1513) (let ((w1536 (car v1513)) (x1537 (cdr v1513))) (let ((abs w1536)) (if (cons? x1537) (let ((w1538 (car x1537)) (x1539 (cdr x1537))) (let ((cc w1538)) (if (cons? x1539) (let ((w1540 (car x1539)) (x1541 (cdr x1539))) (if (cons? w1540) (let ((w1542 (car w1540)) (x1543 (cdr w1540))) (let ((fk w1542)) (if (null? x1543) (if (null? x1541) (progn (quasiquote ((unquote fk)))) (fail1515)) (fail1515)))) (fail1515))) (fail1515)))) (fail1515)))) (fail1515)))))) (if (cons? v1513) (let ((w1544 (car v1513)) (x1545 (cdr v1513))) (let ((abs w1544)) (if (cons? x1545) (let ((w1546 (car x1545)) (x1547 (cdr x1545))) (let ((cc w1546)) (if (cons? x1547) (let ((w1548 (car x1547)) (x1549 (cdr x1547))) (if (cons? w1548) (let ((w1550 (car w1548)) (x1551 (cdr w1548))) (if (binary= w1550 (quote progn)) (let ((l x1551)) (if (null? x1549) (progn (quasiquote (progn (unquote-splicing l)))) (fail1514))) (fail1514))) (fail1514))) (fail1514)))) (fail1514)))) (fail1514))))) (defmacro set-phd-sk x (let ((v1552 x)) (let ((fail1553 (lambda () (let ((fail1554 (lambda () (let ((fail1555 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1552) (let ((w1556 (car v1552)) (x1557 (cdr v1552))) (if (cons? w1556) (let ((w1558 (car w1556)) (x1559 (cdr w1556))) (let ((abs w1558)) (if (cons? x1559) (let ((w1560 (car x1559)) (x1561 (cdr x1559))) (if (cons? w1560) (let ((w1562 (car w1560)) (x1563 (cdr w1560))) (let ((c w1562)) (if (cons? x1563) (let ((w1564 (car x1563)) (x1565 (cdr x1563))) (let ((pp w1564)) (if (null? x1565) (if (null? x1561) (if (cons? x1557) (let ((w1566 (car x1557)) (x1567 (cdr x1557))) (let ((cc w1566)) (if (cons? x1567) (let ((w1568 (car x1567)) (x1569 (cdr x1567))) (if (cons? w1568) (let ((w1570 (car w1568)) (x1571 (cdr w1568))) (let ((fk w1570)) (let ((fkk x1571)) (if (list? fkk) (let ((i x1569)) (if (list? i) (progn (quasiquote ((unquote fk) ((unquote abs) ((unquote cc) (unquote pp))) (unquote-splicing fkk) (unquote-splicing i)))) (fail1555))) (fail1555))))) (fail1555))) (fail1555)))) (fail1555)) (fail1555)) (fail1555)))) (fail1555)))) (fail1555))) (fail1555)))) (fail1555))) (fail1555)))))) (if (cons? v1552) (let ((w1578 (car v1552)) (x1579 (cdr v1552))) (let ((abs w1578)) (if (cons? x1579) (let ((w1580 (car x1579)) (x1581 (cdr x1579))) (let ((cc w1580)) (if (cons? x1581) (let ((w1582 (car x1581)) (x1583 (cdr x1581))) (if (cons? w1582) (let ((w1584 (car w1582)) (x1585 (cdr w1582))) (let ((fk w1584)) (if (null? x1585) (let ((i x1583)) (if (list? i) (progn (quasiquote ((unquote fk)))) (fail1554))) (fail1554)))) (fail1554))) (fail1554)))) (fail1554)))) (fail1554)))))) (if (cons? v1552) (let ((w1589 (car v1552)) (x1590 (cdr v1552))) (let ((abs w1589)) (if (cons? x1590) (let ((w1591 (car x1590)) (x1592 (cdr x1590))) (let ((cc w1591)) (if (cons? x1592) (let ((w1593 (car x1592)) (x1594 (cdr x1592))) (if (cons? w1593) (let ((w1595 (car w1593)) (x1596 (cdr w1593))) (if (binary= w1595 (quote progn)) (let ((l x1596)) (let ((i x1594)) (if (list? i) (progn (quasiquote (progn (unquote-splicing l)))) (fail1553)))) (fail1553))) (fail1553))) (fail1553)))) (fail1553)))) (fail1553))))) (defmacro match-$$ x (let ((v1600 x)) (let ((fail1601 (lambda () (let ((fail1602 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1600) (let ((w1603 (car v1600)) (x1604 (cdr v1600))) (let ((abs w1603)) (if (cons? x1604) (let ((w1605 (car x1604)) (x1606 (cdr x1604))) (let ((newpat w1605)) (if (cons? x1606) (let ((w1607 (car x1606)) (x1608 (cdr x1606))) (let ((m w1607)) (if (cons? x1608) (let ((w1609 (car x1608)) (x1610 (cdr x1608))) (if (null? w1609) (if (cons? x1610) (let ((w1611 (car x1610)) (x1612 (cdr x1610))) (let ((v w1611)) (if (cons? x1612) (let ((w1613 (car x1612)) (x1614 (cdr x1612))) (let ((kt w1613)) (if (cons? x1614) (let ((w1615 (car x1614)) (x1616 (cdr x1614))) (let ((ke w1615)) (if (cons? x1616) (let ((w1617 (car x1616)) (x1618 (cdr x1616))) (let ((i w1617)) (if (null? x1618) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote newpat) () (unquote kt) (unquote ke) (unquote i)))) (fail1602)))) (fail1602)))) (fail1602)))) (fail1602)))) (fail1602)) (fail1602))) (fail1602)))) (fail1602)))) (fail1602)))) (fail1602)))))) (if (cons? v1600) (let ((w1619 (car v1600)) (x1620 (cdr v1600))) (let ((abs w1619)) (if (cons? x1620) (let ((w1621 (car x1620)) (x1622 (cdr x1620))) (let ((a w1621)) (if (list? a) (if (cons? x1622) (let ((w1626 (car x1622)) (x1627 (cdr x1622))) (let ((n w1626)) (if (cons? x1627) (let ((w1628 (car x1627)) (x1629 (cdr x1627))) (if (cons? w1628) (let ((w1630 (car w1628)) (x1631 (cdr w1628))) (let ((p1 w1630)) (let ((p2 x1631)) (if (list? p2) (let ((v x1629)) (progn (if (symbol? p1) (let ((acc (concatenate n (quote -) p1))) (quasiquote (match-$$ (unquote abs) ((unquote-splicing a) (= (unquote acc) (setter (unquote acc)) (unquote p1))) (unquote n) (unquote p2) (unquote-splicing v)))) (error <condition> "$$ matchers should be constituated of symbols")))) (fail1601))))) (fail1601))) (fail1601)))) (fail1601)) (fail1601)))) (fail1601)))) (fail1601))))) (defmacro match-$ x (let ((v1635 x)) (let ((fail1636 (lambda () (let ((fail1637 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1635) (let ((w1638 (car v1635)) (x1639 (cdr v1635))) (let ((abs w1638)) (if (cons? x1639) (let ((w1640 (car x1639)) (x1641 (cdr x1639))) (let ((newpat w1640)) (if (cons? x1641) (let ((w1642 (car x1641)) (x1643 (cdr x1641))) (let ((m w1642)) (if (cons? x1643) (let ((w1644 (car x1643)) (x1645 (cdr x1643))) (if (null? w1644) (if (cons? x1645) (let ((w1646 (car x1645)) (x1647 (cdr x1645))) (let ((v w1646)) (if (cons? x1647) (let ((w1648 (car x1647)) (x1649 (cdr x1647))) (let ((kt w1648)) (if (cons? x1649) (let ((w1650 (car x1649)) (x1651 (cdr x1649))) (let ((ke w1650)) (if (cons? x1651) (let ((w1652 (car x1651)) (x1653 (cdr x1651))) (let ((i w1652)) (if (null? x1653) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote newpat) () (unquote kt) (unquote ke) (unquote i)))) (fail1637)))) (fail1637)))) (fail1637)))) (fail1637)))) (fail1637)) (fail1637))) (fail1637)))) (fail1637)))) (fail1637)))) (fail1637)))))) (if (cons? v1635) (let ((w1654 (car v1635)) (x1655 (cdr v1635))) (let ((abs w1654)) (if (cons? x1655) (let ((w1656 (car x1655)) (x1657 (cdr x1655))) (let ((a w1656)) (if (list? a) (if (cons? x1657) (let ((w1661 (car x1657)) (x1662 (cdr x1657))) (let ((n w1661)) (if (cons? x1662) (let ((w1663 (car x1662)) (x1664 (cdr x1662))) (if (cons? w1663) (let ((w1665 (car w1663)) (x1666 (cdr w1663))) (let ((p1 w1665)) (let ((p2 x1666)) (if (list? p2) (let ((v x1664)) (progn (quasiquote (match-$ (unquote abs) ((unquote-splicing a) (= (unquote (car n)) ((setter (unquote (car n))) (unquote p1)))) (unquote (cdr n)) (unquote p2) (unquote-splicing v))))) (fail1636))))) (fail1636))) (fail1636)))) (fail1636)) (fail1636)))) (fail1636)))) (fail1636))))) (defmacro match-gen-ellipses x (let ((v1670 x)) (let ((fail1671 (lambda () (let ((fail1672 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1670) (let ((w1673 (car v1670)) (x1674 (cdr v1670))) (let ((abs w1673)) (if (cons? x1674) (let ((w1675 (car x1674)) (x1676 (cdr x1674))) (let ((v w1675)) (if (cons? x1676) (let ((w1677 (car x1676)) (x1678 (cdr x1676))) (let ((p w1677)) (if (cons? x1678) (let ((w1679 (car x1678)) (x1680 (cdr x1678))) (let ((r w1679)) (if (cons? x1680) (let ((w1681 (car x1680)) (x1682 (cdr x1680))) (let ((g+s w1681)) (if (cons? x1682) (let ((w1683 (car x1682)) (x1684 (cdr x1682))) (let ((sk w1683)) (if (list? sk) (if (cons? x1684) (let ((w1688 (car x1684)) (x1689 (cdr x1684))) (let ((fk w1688)) (if (cons? x1689) (let ((w1690 (car x1689)) (x1691 (cdr x1689))) (let ((i w1690)) (if (cons? x1691) (let ((w1692 (car x1691)) (x1693 (cdr x1691))) (letfuns ((loop (ls1697 p-ls1695 p-ls1694) (if (null? ls1697) (progn (let ((id-ls (reverse p-ls1695)) (id (reverse p-ls1694))) (if (null? x1693) (progn (let ((tail-len (gensym "tail-len")) (len (gensym "len")) (n (gensym "n")) (ls (gensym "ls")) (w (gensym "w"))) (quasiquote (match-verify-no-ellipses (unquote r) (let* (((unquote tail-len) (size (quote (unquote r)))) ((unquote ls) (unquote v)) ((unquote len) (size (unquote ls)))) (if (< (unquote len) (unquote tail-len)) (insert-abs (unquote abs) (unquote fk)) (recur loop (((unquote ls) (unquote ls)) ((unquote n) (unquote len)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((= (unquote n) (unquote tail-len)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (match-one (unquote abs) (unquote ls) (unquote r) (() ()) (unquote sk) (unquote fk) (unquote i)))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote n) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))))) (fail1672)))) (if (cons? ls1697) (progn (let ((w1698 (car ls1697))) (if (cons? w1698) (let ((w1699 (car w1698)) (x1700 (cdr w1698))) (let ((id w1699)) (if (cons? x1700) (let ((w1701 (car x1700)) (x1702 (cdr x1700))) (let ((id-ls w1701)) (if (null? x1702) (loop (cdr ls1697) (cons id-ls p-ls1695) (cons id p-ls1694)) (fail1672)))) (fail1672)))) (fail1672)))) (if else (progn (fail1672)) (cond)))))) (loop w1692 (quote ()) (quote ())))) (fail1672)))) (fail1672)))) (fail1672)) (fail1672)))) (fail1672)))) (fail1672)))) (fail1672)))) (fail1672)))) (fail1672)))) (fail1672)))))) (if (cons? v1670) (let ((w1703 (car v1670)) (x1704 (cdr v1670))) (let ((abs w1703)) (if (cons? x1704) (let ((w1705 (car x1704)) (x1706 (cdr x1704))) (let ((v w1705)) (if (cons? x1706) (let ((w1707 (car x1706)) (x1708 (cdr x1706))) (let ((p w1707)) (if (cons? x1708) (let ((w1709 (car x1708)) (x1710 (cdr x1708))) (if (null? w1709) (if (cons? x1710) (let ((w1711 (car x1710)) (x1712 (cdr x1710))) (let ((g+s w1711)) (if (cons? x1712) (let ((w1713 (car x1712)) (x1714 (cdr x1712))) (let ((sk w1713)) (if (list? sk) (if (cons? x1714) (let ((w1718 (car x1714)) (x1719 (cdr x1714))) (let ((fk w1718)) (if (cons? x1719) (let ((w1720 (car x1719)) (x1721 (cdr x1719))) (let ((i w1720)) (if (cons? x1721) (let ((w1722 (car x1721)) (x1723 (cdr x1721))) (letfuns ((loop (ls1727 p-ls1725 p-ls1724) (if (null? ls1727) (progn (let ((id-ls (reverse p-ls1725)) (id (reverse p-ls1724))) (if (null? x1723) (progn (let ((ls (gensym "ls")) (w (gensym "w"))) (quasiquote (match-check-identifier (unquote p) (let (((unquote p) (unquote v))) (if (list? (unquote p)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote abs) (unquote fk)))) (recur loop (((unquote ls) (unquote v)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((null? (unquote ls)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))) (fail1671)))) (if (cons? ls1727) (progn (let ((w1728 (car ls1727))) (if (cons? w1728) (let ((w1729 (car w1728)) (x1730 (cdr w1728))) (let ((id w1729)) (if (cons? x1730) (let ((w1731 (car x1730)) (x1732 (cdr x1730))) (let ((id-ls w1731)) (if (null? x1732) (loop (cdr ls1727) (cons id-ls p-ls1725) (cons id p-ls1724)) (fail1671)))) (fail1671)))) (fail1671)))) (if else (progn (fail1671)) (cond)))))) (loop w1722 (quote ()) (quote ())))) (fail1671)))) (fail1671)))) (fail1671)) (fail1671)))) (fail1671)))) (fail1671)) (fail1671))) (fail1671)))) (fail1671)))) (fail1671)))) (fail1671))))) (defmacro match-gen-ellipses-n x (let ((v1733 x)) (let ((fail1734 (lambda () (let ((fail1735 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1733) (let ((w1736 (car v1733)) (x1737 (cdr v1733))) (let ((abs w1736)) (if (cons? x1737) (let ((w1738 (car x1737)) (x1739 (cdr x1737))) (let ((m w1738)) (if (cons? x1739) (let ((w1740 (car x1739)) (x1741 (cdr x1739))) (let ((v w1740)) (if (cons? x1741) (let ((w1742 (car x1741)) (x1743 (cdr x1741))) (let ((p w1742)) (if (cons? x1743) (let ((w1744 (car x1743)) (x1745 (cdr x1743))) (let ((r w1744)) (if (cons? x1745) (let ((w1746 (car x1745)) (x1747 (cdr x1745))) (let ((g+s w1746)) (if (cons? x1747) (let ((w1748 (car x1747)) (x1749 (cdr x1747))) (let ((sk w1748)) (if (list? sk) (if (cons? x1749) (let ((w1753 (car x1749)) (x1754 (cdr x1749))) (let ((fk w1753)) (if (cons? x1754) (let ((w1755 (car x1754)) (x1756 (cdr x1754))) (let ((i w1755)) (if (cons? x1756) (let ((w1757 (car x1756)) (x1758 (cdr x1756))) (letfuns ((loop (ls1762 p-ls1760 p-ls1759) (if (null? ls1762) (progn (let ((id-ls (reverse p-ls1760)) (id (reverse p-ls1759))) (if (null? x1758) (progn (let ((tail-len (gensym "tail-len")) (len (gensym "len")) (n (gensym "n")) (ls (gensym "ls")) (im (gensym "im")) (w (gensym "w"))) (quasiquote (match-verify-no-ellipses (unquote r) (let* (((unquote tail-len) (size (quote (unquote r)))) ((unquote ls) (unquote v)) ((unquote len) (size (unquote ls)))) (if (< (unquote len) (unquote tail-len)) (insert-abs (unquote abs) (unquote fk)) (recur loop (((unquote ls) (unquote ls)) ((unquote n) (unquote len)) ((unquote im) (unquote m)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((= (unquote n) (unquote tail-len)) (if (> (unquote im) 0) (insert-abs (unquote abs) (unquote fk)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (match-one (unquote abs) (unquote ls) (unquote r) (() ()) (unquote sk) (unquote fk) (unquote i))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote n) 1) (- (unquote im) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))))) (fail1735)))) (if (cons? ls1762) (progn (let ((w1763 (car ls1762))) (if (cons? w1763) (let ((w1764 (car w1763)) (x1765 (cdr w1763))) (let ((id w1764)) (if (cons? x1765) (let ((w1766 (car x1765)) (x1767 (cdr x1765))) (let ((id-ls w1766)) (if (null? x1767) (loop (cdr ls1762) (cons id-ls p-ls1760) (cons id p-ls1759)) (fail1735)))) (fail1735)))) (fail1735)))) (if else (progn (fail1735)) (cond)))))) (loop w1757 (quote ()) (quote ())))) (fail1735)))) (fail1735)))) (fail1735)) (fail1735)))) (fail1735)))) (fail1735)))) (fail1735)))) (fail1735)))) (fail1735)))) (fail1735)))) (fail1735)))))) (if (cons? v1733) (let ((w1768 (car v1733)) (x1769 (cdr v1733))) (let ((abs w1768)) (if (cons? x1769) (let ((w1770 (car x1769)) (x1771 (cdr x1769))) (let ((n w1770)) (if (cons? x1771) (let ((w1772 (car x1771)) (x1773 (cdr x1771))) (let ((v w1772)) (if (cons? x1773) (let ((w1774 (car x1773)) (x1775 (cdr x1773))) (let ((p w1774)) (if (cons? x1775) (let ((w1776 (car x1775)) (x1777 (cdr x1775))) (if (null? w1776) (if (cons? x1777) (let ((w1778 (car x1777)) (x1779 (cdr x1777))) (let ((g+s w1778)) (if (cons? x1779) (let ((w1780 (car x1779)) (x1781 (cdr x1779))) (let ((sk w1780)) (if (list? sk) (if (cons? x1781) (let ((w1785 (car x1781)) (x1786 (cdr x1781))) (let ((fk w1785)) (if (cons? x1786) (let ((w1787 (car x1786)) (x1788 (cdr x1786))) (let ((i w1787)) (if (cons? x1788) (let ((w1789 (car x1788)) (x1790 (cdr x1788))) (letfuns ((loop (ls1794 p-ls1792 p-ls1791) (if (null? ls1794) (progn (let ((id-ls (reverse p-ls1792)) (id (reverse p-ls1791))) (if (null? x1790) (progn (let ((ls (gensym "ls")) (in (gensym "in")) (w (gensym "w"))) (quasiquote (match-check-identifier (unquote p) (let (((unquote p) (unquote v))) (if (list? (unquote p)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote abs) (unquote fk)))) (recur loop (((unquote ls) (unquote v)) ((unquote in) (unquote n)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((null? (unquote ls)) (if (> (unquote in) 0) (insert-abs (unquote abs) (unquote fk)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote in) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))) (fail1734)))) (if (cons? ls1794) (progn (let ((w1795 (car ls1794))) (if (cons? w1795) (let ((w1796 (car w1795)) (x1797 (cdr w1795))) (let ((id w1796)) (if (cons? x1797) (let ((w1798 (car x1797)) (x1799 (cdr x1797))) (let ((id-ls w1798)) (if (null? x1799) (loop (cdr ls1794) (cons id-ls p-ls1792) (cons id p-ls1791)) (fail1734)))) (fail1734)))) (fail1734)))) (if else (progn (fail1734)) (cond)))))) (loop w1789 (quote ()) (quote ())))) (fail1734)))) (fail1734)))) (fail1734)) (fail1734)))) (fail1734)))) (fail1734)) (fail1734))) (fail1734)))) (fail1734)))) (fail1734)))) (fail1734)))) (fail1734))))) (defmacro match-verify-no-ellipses x (let ((v1800 x)) (let ((fail1801 (lambda () (let ((fail1802 (lambda () (let ((fail1803 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1800) (let ((w1804 (car v1800)) (x1805 (cdr v1800))) (let ((x w1804)) (if (cons? x1805) (let ((w1806 (car x1805)) (x1807 (cdr x1805))) (let ((sk w1806)) (if (null? x1807) (progn (quasiquote (error <condition> (fmt "dotted tail not allowed after ellipse ~a" (unquote x))))) (fail1803)))) (fail1803)))) (fail1803)))))) (if (cons? v1800) (let ((w1808 (car v1800)) (x1809 (cdr v1800))) (if (null? w1808) (if (cons? x1809) (let ((w1810 (car x1809)) (x1811 (cdr x1809))) (let ((sk w1810)) (if (null? x1811) (progn sk) (fail1802)))) (fail1802)) (fail1802))) (fail1802)))))) (if (cons? v1800) (let ((w1812 (car v1800)) (x1813 (cdr v1800))) (if (cons? w1812) (let ((w1814 (car w1812)) (x1815 (cdr w1812))) (let ((x w1814)) (let ((y x1815)) (if (cons? x1813) (let ((w1816 (car x1813)) (x1817 (cdr x1813))) (let ((sk w1816)) (if (null? x1817) (progn (quasiquote (match-check-ellipse (unquote x) (error <condition> "multiple ellipse patterns not allowed at same level") (match-verify-no-ellipses (unquote y) (unquote sk))))) (fail1801)))) (fail1801))))) (fail1801))) (fail1801))))) (defmacro match-drop-ids x (let ((v1818 x)) (let ((fail1819 (lambda () (let ((fail1820 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1818) (let ((w1821 (car v1818)) (x1822 (cdr v1818))) (let ((abs w1821)) (if (cons? x1822) (let ((w1823 (car x1822)) (x1824 (cdr x1822))) (let ((expr w1823)) (let ((ids x1824)) (if (list? ids) (progn expr) (fail1820))))) (fail1820)))) (fail1820)))))) (if (cons? v1818) (let ((w1828 (car v1818)) (x1829 (cdr v1818))) (let ((expr w1828)) (if (null? x1829) (progn expr) (fail1819)))) (fail1819))))) (defmacro match-gen-search x (let ((v1830 x)) (let ((fail1831 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1830) (let ((w1832 (car v1830)) (x1833 (cdr v1830))) (let ((abs w1832)) (if (cons? x1833) (let ((w1834 (car x1833)) (x1835 (cdr x1833))) (let ((v w1834)) (if (cons? x1835) (let ((w1836 (car x1835)) (x1837 (cdr x1835))) (let ((p w1836)) (if (cons? x1837) (let ((w1838 (car x1837)) (x1839 (cdr x1837))) (let ((q w1838)) (if (cons? x1839) (let ((w1840 (car x1839)) (x1841 (cdr x1839))) (let ((g+s w1840)) (if (cons? x1841) (let ((w1842 (car x1841)) (x1843 (cdr x1841))) (let ((sk w1842)) (if (cons? x1843) (let ((w1844 (car x1843)) (x1845 (cdr x1843))) (let ((fk w1844)) (if (cons? x1845) (let ((w1846 (car x1845)) (x1847 (cdr x1845))) (let ((i w1846)) (if (cons? x1847) (let ((w1848 (car x1847)) (x1849 (cdr x1847))) (letfuns ((loop (ls1853 p-ls1851 p-ls1850) (if (null? ls1853) (progn (let ((id-ls (reverse p-ls1851)) (id (reverse p-ls1850))) (if (null? x1849) (progn (let ((try (gensym "try")) (next (gensym "next")) (ls (gensym "ls")) (w (gensym "w")) (loop (gensym "loop")) (u (gensym "u")) (fail (gensym "fail"))) (let ((ret (quasiquote (letfuns (((unquote try) ((unquote w) (unquote fail) (unquote-splicing id-ls)) (match-one (unquote abs) (unquote w) (unquote q) (unquote g+s) (match-drop-ids (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (unquote sk))) (match-drop-ids ((unquote next) (unquote w) (unquote fail) (unquote-splicing id-ls))) (unquote i))) ((unquote next) ((unquote w) (unquote fail) (unquote-splicing id-ls)) (if (not (cons? (unquote w))) ((unquote fail)) (let (((unquote u) (car (unquote w)))) (match-one (unquote abs) (unquote u) (unquote p) ((car (unquote w)) ((setter car) (unquote w))) (match-drop-ids (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id-ls) (cons (unquote id) (unquote id-ls))))) id id-ls)) (recur (unquote loop) (((unquote ls) (cdr (unquote w)))) (if (cons? (unquote ls)) ((unquote try) (car (unquote ls)) (lambda () ((unquote loop) (cdr (unquote ls)))) (unquote-splicing id-ls)) ((unquote fail)))))) (match-drop-ids ((unquote fail))) (unquote i)))))) (let (unquote (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls)) ((unquote try) (unquote v) (lambda () (insert-abs (unquote abs) (unquote fk))) (unquote-splicing id-ls))))))) ret))) (fail1831)))) (if (cons? ls1853) (progn (let ((w1854 (car ls1853))) (if (cons? w1854) (let ((w1855 (car w1854)) (x1856 (cdr w1854))) (let ((id w1855)) (if (cons? x1856) (let ((w1857 (car x1856)) (x1858 (cdr x1856))) (let ((id-ls w1857)) (if (null? x1858) (loop (cdr ls1853) (cons id-ls p-ls1851) (cons id p-ls1850)) (fail1831)))) (fail1831)))) (fail1831)))) (if else (progn (fail1831)) (cond)))))) (loop w1848 (quote ()) (quote ())))) (fail1831)))) (fail1831)))) (fail1831)))) (fail1831)))) (fail1831)))) (fail1831)))) (fail1831)))) (fail1831)))) (fail1831))))) (defmacro match-quasiquote x (let ((v1859 x)) (let ((fail1860 (lambda () (let ((fail1861 (lambda () (let ((fail1862 (lambda () (let ((fail1863 (lambda () (let ((fail1864 (lambda () (let ((fail1865 (lambda () (let ((fail1866 (lambda () (let ((fail1867 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1859) (let ((w1868 (car v1859)) (x1869 (cdr v1859))) (let ((abs w1868)) (if (cons? x1869) (let ((w1870 (car x1869)) (x1871 (cdr x1869))) (let ((v w1870)) (if (cons? x1871) (let ((w1872 (car x1871)) (x1873 (cdr x1871))) (let ((x w1872)) (if (cons? x1873) (let ((w1874 (car x1873)) (x1875 (cdr x1873))) (let ((g+s w1874)) (if (cons? x1875) (let ((w1876 (car x1875)) (x1877 (cdr x1875))) (let ((sk w1876)) (if (cons? x1877) (let ((w1878 (car x1877)) (x1879 (cdr x1877))) (let ((fk w1878)) (if (cons? x1879) (let ((w1880 (car x1879)) (x1881 (cdr x1879))) (let ((i w1880)) (let ((depth x1881)) (progn (quasiquote (match-one (unquote abs) (unquote v) (quote (unquote x)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))))) (fail1867)))) (fail1867)))) (fail1867)))) (fail1867)))) (fail1867)))) (fail1867)))) (fail1867)))))) (if (cons? v1859) (let ((w1882 (car v1859)) (x1883 (cdr v1859))) (let ((abs w1882)) (if (cons? x1883) (let ((w1884 (car x1883)) (x1885 (cdr x1883))) (let ((v w1884)) (if (cons? x1885) (let ((w1886 (car x1885)) (x1887 (cdr x1885))) (if (vector? w1886) (let ((len1888 (vector-size w1886))) (if (>= len1888 0) (letfuns ((loop1890 (j1891 p-ls1889) (if (>= j1891 len1888) (let ((elt (reverse p-ls1889))) (if (cons? x1887) (let ((w1893 (car x1887)) (x1894 (cdr x1887))) (let ((g+s w1893)) (if (cons? x1894) (let ((w1895 (car x1894)) (x1896 (cdr x1894))) (let ((sk w1895)) (if (cons? x1896) (let ((w1897 (car x1896)) (x1898 (cdr x1896))) (let ((fk w1897)) (if (cons? x1898) (let ((w1899 (car x1898)) (x1900 (cdr x1898))) (let ((i w1899)) (let ((depth x1900)) (progn (let ((ls (gensym "ls"))) (quasiquote (if (vector? (unquote v)) (let (((unquote ls) (convert (unquote v) <list>))) (match-quasiquote (unquote abs) (unquote ls) (unquote elt) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))) (insert-abs (unquote abs) (unquote fk))))))))) (fail1866)))) (fail1866)))) (fail1866)))) (fail1866))) (let ((w1892 (vector-ref w1886 j1891))) (let ((elt w1892)) (loop1890 (+ j1891 1) (cons elt p-ls1889))))))) (loop1890 0 (quote ()))) (fail1866))) (fail1866))) (fail1866)))) (fail1866)))) (fail1866)))))) (if (cons? v1859) (let ((w1901 (car v1859)) (x1902 (cdr v1859))) (let ((a w1901)) (if (cons? w1901) (let ((w1903 (car w1901)) (x1904 (cdr w1901))) (let ((abs w1903)) (if (cons? x1904) (let ((w1905 (car x1904)) (x1906 (cdr x1904))) (if (cons? w1905) (let ((w1907 (car w1905)) (x1908 (cdr w1905))) (if (cons? w1907) (let ((w1909 (car w1907)) (x1910 (cdr w1907))) (let ((qcar w1909)) (if (cons? x1910) (let ((w1911 (car x1910)) (x1912 (cdr x1910))) (let ((qcdr w1911)) (if (cons? x1912) (let ((w1913 (car x1912)) (x1914 (cdr x1912))) (let ((qcons? w1913)) (if (cons? x1914) (let ((w1915 (car x1914)) (x1916 (cdr x1914))) (let ((qnull? w1915)) (if (cons? x1916) (let ((w1917 (car x1916)) (x1918 (cdr x1916))) (let ((qbinary= w1917)) (if (null? x1918) (if (cons? x1908) (let ((w1919 (car x1908)) (x1920 (cdr x1908))) (let ((pp w1919)) (if (null? x1920) (if (null? x1906) (if (cons? x1902) (let ((w1921 (car x1902)) (x1922 (cdr x1902))) (let ((v w1921)) (if (cons? x1922) (let ((w1923 (car x1922)) (x1924 (cdr x1922))) (if (cons? w1923) (let ((w1925 (car w1923)) (x1926 (cdr w1923))) (let ((p w1925)) (let ((q x1926)) (if (cons? x1924) (let ((w1927 (car x1924)) (x1928 (cdr x1924))) (let ((g+s w1927)) (if (cons? x1928) (let ((w1929 (car x1928)) (x1930 (cdr x1928))) (let ((sk w1929)) (if (cons? x1930) (let ((w1931 (car x1930)) (x1932 (cdr x1930))) (let ((fk w1931)) (if (cons? x1932) (let ((w1933 (car x1932)) (x1934 (cdr x1932))) (let ((i w1933)) (let ((depth x1934)) (progn (let ((w (gensym "w"))) (quasiquote (if ((unquote qcons?) (unquote v)) (let (((unquote w) ((unquote qcar) (unquote v))) ((unquote x) ((unquote qcdr) (unquote v)))) (match-quasiquote (unquote a) (unquote w) (unquote p) (unquote g+s) (match-quasiquote-step (unquote x) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote depth)) (unquote fk) (unquote i) (unquote-splicing depth))) (insert-abs (unquote a) (unquote fk))))))))) (fail1865)))) (fail1865)))) (fail1865)))) (fail1865))))) (fail1865))) (fail1865)))) (fail1865)) (fail1865)) (fail1865)))) (fail1865)) (fail1865)))) (fail1865)))) (fail1865)))) (fail1865)))) (fail1865)))) (fail1865))) (fail1865))) (fail1865)))) (fail1865)))) (fail1865)))))) (if (cons? v1859) (let ((w1935 (car v1859)) (x1936 (cdr v1859))) (let ((abs w1935)) (if (cons? x1936) (let ((w1937 (car x1936)) (x1938 (cdr x1936))) (let ((v w1937)) (if (cons? x1938) (let ((w1939 (car x1938)) (x1940 (cdr x1938))) (if (cons? w1939) (let ((w1941 (car w1939)) (x1942 (cdr w1939))) (if (binary= w1941 (quote unquote-splicing)) (if (cons? x1942) (let ((w1943 (car x1942)) (x1944 (cdr x1942))) (let ((p w1943)) (if (null? x1944) (if (cons? x1940) (let ((w1945 (car x1940)) (x1946 (cdr x1940))) (let ((g+s w1945)) (if (cons? x1946) (let ((w1947 (car x1946)) (x1948 (cdr x1946))) (let ((sk w1947)) (if (cons? x1948) (let ((w1949 (car x1948)) (x1950 (cdr x1948))) (let ((fk w1949)) (if (cons? x1950) (let ((w1951 (car x1950)) (x1952 (cdr x1950))) (let ((i w1951)) (if (cons? x1952) (let ((w1953 (car x1952)) (x1954 (cdr x1952))) (let ((x w1953)) (let ((depth x1954)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))))))) (fail1864)))) (fail1864)))) (fail1864)))) (fail1864)))) (fail1864)) (fail1864)))) (fail1864)) (fail1864))) (fail1864))) (fail1864)))) (fail1864)))) (fail1864)))))) (if (cons? v1859) (let ((w1955 (car v1859)) (x1956 (cdr v1859))) (let ((abs w1955)) (if (cons? x1956) (let ((w1957 (car x1956)) (x1958 (cdr x1956))) (let ((v w1957)) (if (cons? x1958) (let ((w1959 (car x1958)) (x1960 (cdr x1958))) (if (cons? w1959) (let ((w1961 (car w1959)) (x1962 (cdr w1959))) (if (binary= w1961 (quote unquote)) (if (cons? x1962) (let ((w1963 (car x1962)) (x1964 (cdr x1962))) (let ((p w1963)) (if (null? x1964) (if (cons? x1960) (let ((w1965 (car x1960)) (x1966 (cdr x1960))) (let ((g+s w1965)) (if (cons? x1966) (let ((w1967 (car x1966)) (x1968 (cdr x1966))) (let ((sk w1967)) (if (cons? x1968) (let ((w1969 (car x1968)) (x1970 (cdr x1968))) (let ((fk w1969)) (if (cons? x1970) (let ((w1971 (car x1970)) (x1972 (cdr x1970))) (let ((i w1971)) (if (cons? x1972) (let ((w1973 (car x1972)) (x1974 (cdr x1972))) (let ((x w1973)) (let ((depth x1974)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))))))) (fail1863)))) (fail1863)))) (fail1863)))) (fail1863)))) (fail1863)) (fail1863)))) (fail1863)) (fail1863))) (fail1863))) (fail1863)))) (fail1863)))) (fail1863)))))) (if (cons? v1859) (let ((w1975 (car v1859)) (x1976 (cdr v1859))) (let ((abs w1975)) (if (cons? x1976) (let ((w1977 (car x1976)) (x1978 (cdr x1976))) (let ((v w1977)) (if (cons? x1978) (let ((w1979 (car x1978)) (x1980 (cdr x1978))) (if (cons? w1979) (let ((w1981 (car w1979)) (x1982 (cdr w1979))) (if (binary= w1981 (quote quasiquote)) (if (cons? x1982) (let ((w1983 (car x1982)) (x1984 (cdr x1982))) (let ((p w1983)) (if (null? x1984) (if (cons? x1980) (let ((w1985 (car x1980)) (x1986 (cdr x1980))) (let ((g+s w1985)) (if (cons? x1986) (let ((w1987 (car x1986)) (x1988 (cdr x1986))) (let ((sk w1987)) (if (cons? x1988) (let ((w1989 (car x1988)) (x1990 (cdr x1988))) (let ((fk w1989)) (if (cons? x1990) (let ((w1991 (car x1990)) (x1992 (cdr x1990))) (let ((i w1991)) (let ((depth x1992)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote ()) (unquote-splicing depth))))))) (fail1862)))) (fail1862)))) (fail1862)))) (fail1862)) (fail1862)))) (fail1862)) (fail1862))) (fail1862))) (fail1862)))) (fail1862)))) (fail1862)))))) (if (cons? v1859) (let ((w1993 (car v1859)) (x1994 (cdr v1859))) (let ((a w1993)) (if (cons? w1993) (let ((w1995 (car w1993)) (x1996 (cdr w1993))) (let ((abs w1995)) (if (cons? x1996) (let ((w1997 (car x1996)) (x1998 (cdr x1996))) (if (cons? w1997) (let ((w1999 (car w1997)) (x2000 (cdr w1997))) (if (cons? w1999) (let ((w2001 (car w1999)) (x2002 (cdr w1999))) (let ((qcar w2001)) (if (cons? x2002) (let ((w2003 (car x2002)) (x2004 (cdr x2002))) (let ((qcdr w2003)) (if (cons? x2004) (let ((w2005 (car x2004)) (x2006 (cdr x2004))) (let ((qcons? w2005)) (if (cons? x2006) (let ((w2007 (car x2006)) (x2008 (cdr x2006))) (let ((qnull? w2007)) (if (cons? x2008) (let ((w2009 (car x2008)) (x2010 (cdr x2008))) (let ((qbinary= w2009)) (if (null? x2010) (if (cons? x2000) (let ((w2011 (car x2000)) (x2012 (cdr x2000))) (let ((pp w2011)) (if (null? x2012) (if (null? x1998) (if (cons? x1994) (let ((w2013 (car x1994)) (x2014 (cdr x1994))) (let ((v w2013)) (if (cons? x2014) (let ((w2015 (car x2014)) (x2016 (cdr x2014))) (if (cons? w2015) (let ((w2017 (car w2015)) (x2018 (cdr w2015))) (if (cons? w2017) (let ((w2019 (car w2017)) (x2020 (cdr w2017))) (if (binary= w2019 (quote unquote-splicing)) (if (cons? x2020) (let ((w2021 (car x2020)) (x2022 (cdr x2020))) (let ((p w2021)) (if (null? x2022) (let ((rest x2018)) (if (cons? x2016) (let ((w2023 (car x2016)) (x2024 (cdr x2016))) (let ((g+s w2023)) (if (cons? x2024) (let ((w2025 (car x2024)) (x2026 (cdr x2024))) (let ((sk w2025)) (if (cons? x2026) (let ((w2027 (car x2026)) (x2028 (cdr x2026))) (let ((fk w2027)) (if (cons? x2028) (let ((w2029 (car x2028)) (x2030 (cdr x2028))) (let ((i w2029)) (if (null? x2030) (progn (let ((tmp (gensym "tmp"))) (quasiquote (if ((unquote qcons?) (unquote v)) (match-one (unquote a) (unquote v) ((unquote p) (unquote-splicing tmp)) (match-quasiquote (unquote tmp) (unquote rest) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote a) (unquote fk)))))) (fail1861)))) (fail1861)))) (fail1861)))) (fail1861)))) (fail1861))) (fail1861)))) (fail1861)) (fail1861))) (fail1861))) (fail1861))) (fail1861)))) (fail1861)) (fail1861)) (fail1861)))) (fail1861)) (fail1861)))) (fail1861)))) (fail1861)))) (fail1861)))) (fail1861)))) (fail1861))) (fail1861))) (fail1861)))) (fail1861)))) (fail1861)))))) (if (cons? v1859) (let ((w2031 (car v1859)) (x2032 (cdr v1859))) (let ((abs w2031)) (if (cons? x2032) (let ((w2033 (car x2032)) (x2034 (cdr x2032))) (let ((v w2033)) (if (cons? x2034) (let ((w2035 (car x2034)) (x2036 (cdr x2034))) (if (cons? w2035) (let ((w2037 (car w2035)) (x2038 (cdr w2035))) (if (binary= w2037 (quote unquote)) (if (cons? x2038) (let ((w2039 (car x2038)) (x2040 (cdr x2038))) (let ((p w2039)) (if (null? x2040) (if (cons? x2036) (let ((w2041 (car x2036)) (x2042 (cdr x2036))) (let ((g+s w2041)) (if (cons? x2042) (let ((w2043 (car x2042)) (x2044 (cdr x2042))) (let ((sk w2043)) (if (cons? x2044) (let ((w2045 (car x2044)) (x2046 (cdr x2044))) (let ((fk w2045)) (if (cons? x2046) (let ((w2047 (car x2046)) (x2048 (cdr x2046))) (let ((i w2047)) (if (null? x2048) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail1860)))) (fail1860)))) (fail1860)))) (fail1860)))) (fail1860)) (fail1860)))) (fail1860)) (fail1860))) (fail1860))) (fail1860)))) (fail1860)))) (fail1860))))) (defmacro match-quasiquote-step x (let ((v2049 x)) (let ((fail2050 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2049) (let ((w2051 (car v2049)) (x2052 (cdr v2049))) (let ((abs w2051)) (if (cons? x2052) (let ((w2053 (car x2052)) (x2054 (cdr x2052))) (let ((x w2053)) (if (cons? x2054) (let ((w2055 (car x2054)) (x2056 (cdr x2054))) (let ((q w2055)) (if (cons? x2056) (let ((w2057 (car x2056)) (x2058 (cdr x2056))) (let ((g+s w2057)) (if (cons? x2058) (let ((w2059 (car x2058)) (x2060 (cdr x2058))) (let ((sk w2059)) (if (cons? x2060) (let ((w2061 (car x2060)) (x2062 (cdr x2060))) (let ((fk w2061)) (if (cons? x2062) (let ((w2063 (car x2062)) (x2064 (cdr x2062))) (let ((depth w2063)) (if (cons? x2064) (let ((w2065 (car x2064)) (x2066 (cdr x2064))) (let ((i w2065)) (if (null? x2066) (progn (quasiquote (match-quasiquote (unquote abs) (unquote x) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth)))) (fail2050)))) (fail2050)))) (fail2050)))) (fail2050)))) (fail2050)))) (fail2050)))) (fail2050)))) (fail2050)))) (fail2050))))) (defmacro match-extract-vars x (let ((v2067 x)) (let ((fail2068 (lambda () (let ((fail2069 (lambda () (let ((fail2070 (lambda () (let ((fail2071 (lambda () (let ((fail2072 (lambda () (let ((fail2073 (lambda () (let ((fail2074 (lambda () (let ((fail2075 (lambda () (let ((fail2076 (lambda () (let ((fail2077 (lambda () (let ((fail2078 (lambda () (let ((fail2079 (lambda () (let ((fail2080 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2067) (let ((w2081 (car v2067)) (x2082 (cdr v2067))) (if (cons? w2081) (let ((w2083 (car w2081)) (x2084 (cdr w2081))) (let ((abs w2083)) (if (cons? x2084) (let ((w2085 (car x2084)) (x2086 (cdr x2084))) (let ((phd w2085)) (if (null? x2086) (if (cons? x2082) (let ((w2087 (car x2082)) (x2088 (cdr x2082))) (let ((p w2087)) (if (cons? x2088) (let ((w2089 (car x2088)) (x2090 (cdr x2088))) (let ((k w2089)) (if (cons? x2090) (let ((w2091 (car x2090)) (x2092 (cdr x2090))) (let ((i w2091)) (if (cons? x2092) (let ((w2093 (car x2092)) (x2094 (cdr x2092))) (let ((v w2093)) (if (null? x2094) (progn (quasiquote (abs-extract-vars () (unquote abs) (unquote phd) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail2080)))) (fail2080)))) (fail2080)))) (fail2080)))) (fail2080)) (fail2080)))) (fail2080)))) (fail2080))) (fail2080)))))) (if (cons? v2067) (let ((w2095 (car v2067)) (x2096 (cdr v2067))) (let ((abs w2095)) (if (cons? x2096) (let ((w2097 (car x2096)) (x2098 (cdr x2096))) (if (cons? w2097) (let ((w2099 (car w2097)) (x2100 (cdr w2097))) (if (binary= w2099 (quote <>)) (if (cons? x2100) (let ((w2101 (car x2100)) (x2102 (cdr x2100))) (let ((f w2101)) (if (cons? x2102) (let ((w2103 (car x2102)) (x2104 (cdr x2102))) (let ((p w2103)) (if (null? x2104) (if (cons? x2098) (let ((w2105 (car x2098)) (x2106 (cdr x2098))) (let ((k w2105)) (if (cons? x2106) (let ((w2107 (car x2106)) (x2108 (cdr x2106))) (let ((i w2107)) (if (cons? x2108) (let ((w2109 (car x2108)) (x2110 (cdr x2108))) (let ((v w2109)) (if (null? x2110) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail2079)))) (fail2079)))) (fail2079)))) (fail2079)) (fail2079)))) (fail2079)))) (fail2079)) (fail2079))) (fail2079))) (fail2079)))) (fail2079)))))) (if (cons? v2067) (let ((w2111 (car v2067)) (x2112 (cdr v2067))) (let ((abs w2111)) (if (cons? x2112) (let ((w2113 (car x2112)) (x2114 (cdr x2112))) (if (cons? w2113) (let ((w2115 (car w2113)) (x2116 (cdr w2113))) (if (binary= w2115 (quote not)) (let ((p x2116)) (let ((x x2114)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail2078))) (fail2078))) (fail2078)))) (fail2078)))))) (if (cons? v2067) (let ((w2117 (car v2067)) (x2118 (cdr v2067))) (let ((abs w2117)) (if (cons? x2118) (let ((w2119 (car x2118)) (x2120 (cdr x2118))) (if (cons? w2119) (let ((w2121 (car w2119)) (x2122 (cdr w2119))) (if (binary= w2121 (quote or)) (let ((p x2122)) (let ((x x2120)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail2077))) (fail2077))) (fail2077)))) (fail2077)))))) (if (cons? v2067) (let ((w2123 (car v2067)) (x2124 (cdr v2067))) (let ((abs w2123)) (if (cons? x2124) (let ((w2125 (car x2124)) (x2126 (cdr x2124))) (if (cons? w2125) (let ((w2127 (car w2125)) (x2128 (cdr w2125))) (if (binary= w2127 (quote and)) (let ((p x2128)) (let ((x x2126)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail2076))) (fail2076))) (fail2076)))) (fail2076)))))) (if (cons? v2067) (let ((w2129 (car v2067)) (x2130 (cdr v2067))) (let ((abs w2129)) (if (cons? x2130) (let ((w2131 (car x2130)) (x2132 (cdr x2130))) (if (cons? w2131) (let ((w2133 (car w2131)) (x2134 (cdr w2131))) (if (binary= w2133 (quote quasiquote)) (if (cons? x2134) (let ((w2135 (car x2134)) (x2136 (cdr x2134))) (let ((x w2135)) (if (null? x2136) (if (cons? x2132) (let ((w2137 (car x2132)) (x2138 (cdr x2132))) (let ((k w2137)) (if (cons? x2138) (let ((w2139 (car x2138)) (x2140 (cdr x2138))) (let ((i w2139)) (if (cons? x2140) (let ((w2141 (car x2140)) (x2142 (cdr x2140))) (let ((v w2141)) (if (null? x2142) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (t)))) (fail2075)))) (fail2075)))) (fail2075)))) (fail2075)) (fail2075)))) (fail2075)) (fail2075))) (fail2075))) (fail2075)))) (fail2075)))))) (if (cons? v2067) (let ((w2143 (car v2067)) (x2144 (cdr v2067))) (let ((abs w2143)) (if (cons? x2144) (let ((w2145 (car x2144)) (x2146 (cdr x2144))) (if (cons? w2145) (let ((w2147 (car w2145)) (x2148 (cdr w2145))) (if (binary= w2147 (quote unquote-splicing)) (if (cons? x2148) (let ((w2149 (car x2148)) (x2150 (cdr x2148))) (let ((x w2149)) (if (null? x2150) (if (cons? x2146) (let ((w2151 (car x2146)) (x2152 (cdr x2146))) (if (cons? w2151) (let ((w2153 (car w2151)) (x2154 (cdr w2151))) (let ((k w2153)) (let ((kk x2154)) (if (list? kk) (if (cons? x2152) (let ((w2158 (car x2152)) (x2159 (cdr x2152))) (let ((i w2158)) (if (cons? x2159) (let ((w2160 (car x2159)) (x2161 (cdr x2159))) (let ((v w2160)) (if (null? x2161) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2074)))) (fail2074)))) (fail2074)) (fail2074))))) (fail2074))) (fail2074)) (fail2074)))) (fail2074)) (fail2074))) (fail2074))) (fail2074)))) (fail2074)))))) (if (cons? v2067) (let ((w2162 (car v2067)) (x2163 (cdr v2067))) (let ((abs w2162)) (if (cons? x2163) (let ((w2164 (car x2163)) (x2165 (cdr x2163))) (if (cons? w2164) (let ((w2166 (car w2164)) (x2167 (cdr w2164))) (if (binary= w2166 (quote unquote)) (if (cons? x2167) (let ((w2168 (car x2167)) (x2169 (cdr x2167))) (let ((x w2168)) (if (null? x2169) (if (cons? x2165) (let ((w2170 (car x2165)) (x2171 (cdr x2165))) (if (cons? w2170) (let ((w2172 (car w2170)) (x2173 (cdr w2170))) (let ((k w2172)) (let ((kk x2173)) (if (list? kk) (if (cons? x2171) (let ((w2177 (car x2171)) (x2178 (cdr x2171))) (let ((i w2177)) (if (cons? x2178) (let ((w2179 (car x2178)) (x2180 (cdr x2178))) (let ((v w2179)) (if (null? x2180) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2073)))) (fail2073)))) (fail2073)) (fail2073))))) (fail2073))) (fail2073)) (fail2073)))) (fail2073)) (fail2073))) (fail2073))) (fail2073)))) (fail2073)))))) (if (cons? v2067) (let ((w2181 (car v2067)) (x2182 (cdr v2067))) (let ((abs w2181)) (if (cons? x2182) (let ((w2183 (car x2182)) (x2184 (cdr x2182))) (if (cons? w2183) (let ((w2185 (car w2183)) (x2186 (cdr w2183))) (if (binary= w2185 (quote quote)) (if (cons? x2186) (let ((w2187 (car x2186)) (x2188 (cdr x2186))) (let ((x w2187)) (if (null? x2188) (if (cons? x2184) (let ((w2189 (car x2184)) (x2190 (cdr x2184))) (if (cons? w2189) (let ((w2191 (car w2189)) (x2192 (cdr w2189))) (let ((k w2191)) (let ((kk x2192)) (if (list? kk) (if (cons? x2190) (let ((w2196 (car x2190)) (x2197 (cdr x2190))) (let ((i w2196)) (if (cons? x2197) (let ((w2198 (car x2197)) (x2199 (cdr x2197))) (let ((v w2198)) (if (null? x2199) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2072)))) (fail2072)))) (fail2072)) (fail2072))))) (fail2072))) (fail2072)) (fail2072)))) (fail2072)) (fail2072))) (fail2072))) (fail2072)))) (fail2072)))))) (if (cons? v2067) (let ((w2200 (car v2067)) (x2201 (cdr v2067))) (let ((abs w2200)) (if (cons? x2201) (let ((w2202 (car x2201)) (x2203 (cdr x2201))) (if (cons? w2202) (let ((w2204 (car w2202)) (x2205 (cdr w2202))) (if (binary= w2204 (quote =)) (if (cons? x2205) (let ((w2206 (car x2205)) (x2207 (cdr x2205))) (let ((u w2206)) (if (cons? x2207) (let ((w2208 (car x2207)) (x2209 (cdr x2207))) (let ((m w2208)) (if (cons? x2209) (let ((w2210 (car x2209)) (x2211 (cdr x2209))) (let ((p w2210)) (if (null? x2211) (let ((x x2203)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x))))) (fail2071)))) (fail2071)))) (fail2071)))) (fail2071)) (fail2071))) (fail2071))) (fail2071)))) (fail2071)))))) (if (cons? v2067) (let ((w2212 (car v2067)) (x2213 (cdr v2067))) (let ((abs w2212)) (if (cons? x2213) (let ((w2214 (car x2213)) (x2215 (cdr x2213))) (if (cons? w2214) (let ((w2216 (car w2214)) (x2217 (cdr w2214))) (if (binary= w2216 (quote =)) (if (cons? x2217) (let ((w2218 (car x2217)) (x2219 (cdr x2217))) (let ((proc w2218)) (if (cons? x2219) (let ((w2220 (car x2219)) (x2221 (cdr x2219))) (let ((p w2220)) (if (null? x2221) (let ((x x2215)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x))))) (fail2070)))) (fail2070)))) (fail2070)) (fail2070))) (fail2070))) (fail2070)))) (fail2070)))))) (if (cons? v2067) (let ((w2222 (car v2067)) (x2223 (cdr v2067))) (let ((abs w2222)) (if (cons? x2223) (let ((w2224 (car x2223)) (x2225 (cdr x2223))) (if (cons? w2224) (let ((w2226 (car w2224)) (x2227 (cdr w2224))) (if (binary= w2226 (quote $)) (if (cons? x2227) (let ((w2228 (car x2227)) (x2229 (cdr x2227))) (let ((rec w2228)) (let ((p x2229)) (let ((x x2225)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))))) (fail2069)) (fail2069))) (fail2069))) (fail2069)))) (fail2069)))))) (if (cons? v2067) (let ((w2230 (car v2067)) (x2231 (cdr v2067))) (let ((abs w2230)) (if (cons? x2231) (let ((w2232 (car x2231)) (x2233 (cdr x2231))) (if (cons? w2232) (let ((w2234 (car w2232)) (x2235 (cdr w2232))) (if (binary= w2234 (quote ?)) (if (cons? x2235) (let ((w2236 (car x2235)) (x2237 (cdr x2235))) (let ((pred w2236)) (let ((p x2237)) (let ((x x2233)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))))) (fail2068)) (fail2068))) (fail2068))) (fail2068)))) (fail2068))))) (defmacro match-extract-vars2 x (let ((v2238 x)) (let ((fail2239 (lambda () (let ((fail2240 (lambda () (let ((fail2241 (lambda () (let ((fail2242 (lambda () (let ((fail2243 (lambda () (let ((fail2244 (lambda () (let ((fail2245 (lambda () (let ((fail2246 (lambda () (let ((fail2247 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2238) (let ((w2248 (car v2238)) (x2249 (cdr v2238))) (let ((abs w2248)) (if (cons? x2249) (let ((w2250 (car x2249)) (x2251 (cdr x2249))) (let ((p w2250)) (if (cons? x2251) (let ((w2252 (car x2251)) (x2253 (cdr x2251))) (if (cons? w2252) (let ((w2254 (car w2252)) (x2255 (cdr w2252))) (let ((k w2254)) (let ((kk x2255)) (if (list? kk) (if (cons? x2253) (let ((w2259 (car x2253)) (x2260 (cdr x2253))) (let ((i w2259)) (if (list? i) (if (cons? x2260) (let ((w2264 (car x2260)) (x2265 (cdr x2260))) (let ((v w2264)) (if (null? x2265) (progn (let ((p-ls (gensym "p-ls"))) (if (let ((G002266 (member p i))) (if G002266 G002266 (null? (symbol? p)))) (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v))) (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (((unquote p) (unquote p-ls)) (unquote-splicing v))))))) (fail2247)))) (fail2247)) (fail2247)))) (fail2247)) (fail2247))))) (fail2247))) (fail2247)))) (fail2247)))) (fail2247)))))) (if (cons? v2238) (let ((w2267 (car v2238)) (x2268 (cdr v2238))) (let ((abs w2267)) (if (cons? x2268) (let ((w2269 (car x2268)) (x2270 (cdr x2268))) (if (binary= w2269 (quote ***)) (if (cons? x2270) (let ((w2271 (car x2270)) (x2272 (cdr x2270))) (if (cons? w2271) (let ((w2273 (car w2271)) (x2274 (cdr w2271))) (let ((k w2273)) (let ((kk x2274)) (if (list? kk) (if (cons? x2272) (let ((w2278 (car x2272)) (x2279 (cdr x2272))) (let ((i w2278)) (if (cons? x2279) (let ((w2280 (car x2279)) (x2281 (cdr x2279))) (let ((v w2280)) (if (null? x2281) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2246)))) (fail2246)))) (fail2246)) (fail2246))))) (fail2246))) (fail2246)) (fail2246))) (fail2246)))) (fail2246)))))) (if (cons? v2238) (let ((w2282 (car v2238)) (x2283 (cdr v2238))) (let ((abs w2282)) (if (cons? x2283) (let ((w2284 (car x2283)) (x2285 (cdr x2283))) (if (cons? w2284) (let ((w2286 (car w2284)) (x2287 (cdr w2284))) (if (binary= w2286 (quote __)) (if (cons? x2287) (let ((w2288 (car x2287)) (x2289 (cdr x2287))) (let ((m w2288)) (if (null? x2289) (if (cons? x2285) (let ((w2290 (car x2285)) (x2291 (cdr x2285))) (if (cons? w2290) (let ((w2292 (car w2290)) (x2293 (cdr w2290))) (let ((k w2292)) (let ((kk x2293)) (if (list? kk) (if (cons? x2291) (let ((w2297 (car x2291)) (x2298 (cdr x2291))) (let ((i w2297)) (if (cons? x2298) (let ((w2299 (car x2298)) (x2300 (cdr x2298))) (let ((v w2299)) (if (null? x2300) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2245)))) (fail2245)))) (fail2245)) (fail2245))))) (fail2245))) (fail2245)) (fail2245)))) (fail2245)) (fail2245))) (fail2245))) (fail2245)))) (fail2245)))))) (if (cons? v2238) (let ((w2301 (car v2238)) (x2302 (cdr v2238))) (let ((abs w2301)) (if (cons? x2302) (let ((w2303 (car x2302)) (x2304 (cdr x2302))) (if (cons? w2303) (let ((w2305 (car w2303)) (x2306 (cdr w2303))) (if (binary= w2305 (quote ..)) (if (cons? x2306) (let ((w2307 (car x2306)) (x2308 (cdr x2306))) (let ((m w2307)) (if (null? x2308) (if (cons? x2304) (let ((w2309 (car x2304)) (x2310 (cdr x2304))) (if (cons? w2309) (let ((w2311 (car w2309)) (x2312 (cdr w2309))) (let ((k w2311)) (let ((kk x2312)) (if (list? kk) (if (cons? x2310) (let ((w2316 (car x2310)) (x2317 (cdr x2310))) (let ((i w2316)) (if (cons? x2317) (let ((w2318 (car x2317)) (x2319 (cdr x2317))) (let ((v w2318)) (if (null? x2319) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2244)))) (fail2244)))) (fail2244)) (fail2244))))) (fail2244))) (fail2244)) (fail2244)))) (fail2244)) (fail2244))) (fail2244))) (fail2244)))) (fail2244)))))) (if (cons? v2238) (let ((w2320 (car v2238)) (x2321 (cdr v2238))) (let ((abs w2320)) (if (cons? x2321) (let ((w2322 (car x2321)) (x2323 (cdr x2321))) (if (binary= w2322 (quote ___)) (if (cons? x2323) (let ((w2324 (car x2323)) (x2325 (cdr x2323))) (if (cons? w2324) (let ((w2326 (car w2324)) (x2327 (cdr w2324))) (let ((k w2326)) (let ((kk x2327)) (if (list? kk) (if (cons? x2325) (let ((w2331 (car x2325)) (x2332 (cdr x2325))) (let ((i w2331)) (if (cons? x2332) (let ((w2333 (car x2332)) (x2334 (cdr x2332))) (let ((v w2333)) (if (null? x2334) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2243)))) (fail2243)))) (fail2243)) (fail2243))))) (fail2243))) (fail2243)) (fail2243))) (fail2243)))) (fail2243)))))) (if (cons? v2238) (let ((w2335 (car v2238)) (x2336 (cdr v2238))) (let ((abs w2335)) (if (cons? x2336) (let ((w2337 (car x2336)) (x2338 (cdr x2336))) (if (binary= w2337 (quote _)) (if (cons? x2338) (let ((w2339 (car x2338)) (x2340 (cdr x2338))) (if (cons? w2339) (let ((w2341 (car w2339)) (x2342 (cdr w2339))) (let ((k w2341)) (let ((kk x2342)) (if (list? kk) (if (cons? x2340) (let ((w2346 (car x2340)) (x2347 (cdr x2340))) (let ((i w2346)) (if (cons? x2347) (let ((w2348 (car x2347)) (x2349 (cdr x2347))) (let ((v w2348)) (if (null? x2349) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2242)))) (fail2242)))) (fail2242)) (fail2242))))) (fail2242))) (fail2242)) (fail2242))) (fail2242)))) (fail2242)))))) (if (cons? v2238) (let ((w2350 (car v2238)) (x2351 (cdr v2238))) (let ((abs w2350)) (if (cons? x2351) (let ((w2352 (car x2351)) (x2353 (cdr x2351))) (if (vector? w2352) (let ((len2354 (vector-size w2352))) (if (>= len2354 0) (letfuns ((loop2356 (j2357 p-ls2355) (if (>= j2357 len2354) (let ((p (reverse p-ls2355))) (let ((x x2353)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (let ((w2358 (vector-ref w2352 j2357))) (let ((p w2358)) (loop2356 (+ j2357 1) (cons p p-ls2355))))))) (loop2356 0 (quote ()))) (fail2241))) (fail2241))) (fail2241)))) (fail2241)))))) (if (cons? v2238) (let ((w2359 (car v2238)) (x2360 (cdr v2238))) (let ((abs w2359)) (if (cons? x2360) (let ((w2361 (car x2360)) (x2362 (cdr x2360))) (if (cons? w2361) (let ((w2363 (car w2361)) (x2364 (cdr w2361))) (let ((p w2363)) (let ((q x2364)) (if (cons? x2362) (let ((w2365 (car x2362)) (x2366 (cdr x2362))) (let ((k w2365)) (if (cons? x2366) (let ((w2367 (car x2366)) (x2368 (cdr x2366))) (let ((i w2367)) (if (cons? x2368) (let ((w2369 (car x2368)) (x2370 (cdr x2368))) (let ((v w2369)) (if (null? x2370) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-extract-vars-step (unquote q) (unquote k) (unquote i) (unquote v)) (unquote i) ()))) (fail2240)))) (fail2240)))) (fail2240)))) (fail2240))))) (fail2240))) (fail2240)))) (fail2240)))))) (if (cons? v2238) (let ((w2371 (car v2238)) (x2372 (cdr v2238))) (let ((abs w2371)) (if (cons? x2372) (let ((w2373 (car x2372)) (x2374 (cdr x2372))) (if (cons? w2373) (let ((w2375 (car w2373)) (x2376 (cdr w2373))) (let ((p w2375)) (if (cons? x2376) (let ((w2377 (car x2376)) (x2378 (cdr x2376))) (let ((q w2377)) (let ((r x2378)) (if (cons? x2374) (let ((w2379 (car x2374)) (x2380 (cdr x2374))) (let ((k w2379)) (if (cons? x2380) (let ((w2381 (car x2380)) (x2382 (cdr x2380))) (let ((i w2381)) (if (cons? x2382) (let ((w2383 (car x2382)) (x2384 (cdr x2382))) (let ((v w2383)) (if (null? x2384) (progn (quasiquote (match-check-ellipse (unquote q) (match-extract-vars (unquote abs) ((unquote p) (unquote-splicing r)) (unquote k) (unquote i) (unquote v)) (match-extract-vars (unquote abs) (unquote p) (match-extract-vars-step ((unquote q) (unquote-splicing r)) (unquote k) (unquote i) (unquote v)) (unquote i) ())))) (fail2239)))) (fail2239)))) (fail2239)))) (fail2239))))) (fail2239)))) (fail2239))) (fail2239)))) (fail2239))))) (defmacro abs-extract-vars x (let ((v2385 x)) (let ((fail2386 (lambda () (let ((fail2387 (lambda () (let ((fail2388 (lambda () (let ((fail2389 (lambda () (let ((fail2390 (lambda () (let ((fail2391 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2385) (let ((w2392 (car v2385)) (x2393 (cdr v2385))) (if (null? w2392) (if (cons? x2393) (let ((w2394 (car x2393)) (x2395 (cdr x2393))) (let ((a w2394)) (if (cons? x2395) (let ((w2396 (car x2395)) (x2397 (cdr x2395))) (let ((phd w2396)) (if (cons? x2397) (let ((w2398 (car x2397)) (x2399 (cdr x2397))) (let ((p w2398)) (if (cons? x2399) (let ((w2400 (car x2399)) (x2401 (cdr x2399))) (let ((k w2400)) (if (cons? x2401) (let ((w2402 (car x2401)) (x2403 (cdr x2401))) (let ((i w2402)) (if (cons? x2403) (let ((w2404 (car x2403)) (x2405 (cdr x2403))) (let ((v w2404)) (if (null? x2405) (progn (quasiquote (match-extract-phd () (unquote phd) (unquote a) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail2391)))) (fail2391)))) (fail2391)))) (fail2391)))) (fail2391)))) (fail2391)))) (fail2391)) (fail2391))) (fail2391)))))) (if (cons? v2385) (let ((w2406 (car v2385)) (x2407 (cdr v2385))) (let ((abs w2406)) (if (list? abs) (if (cons? x2407) (let ((w2411 (car x2407)) (x2412 (cdr x2407))) (if (cons? w2411) (let ((w2413 (car w2411)) (x2414 (cdr w2411))) (if (cons? w2413) (let ((w2415 (car w2413)) (x2416 (cdr w2413))) (let ((a w2415)) (if (null? x2416) (let ((us x2414)) (if (list? us) (if (cons? x2412) (let ((w2420 (car x2412)) (x2421 (cdr x2412))) (let ((phd w2420)) (if (cons? x2421) (let ((w2422 (car x2421)) (x2423 (cdr x2421))) (if (cons? w2422) (let ((w2424 (car w2422)) (x2425 (cdr w2422))) (let ((b w2424)) (let ((w x2425)) (if (list? w) (if (cons? x2423) (let ((w2429 (car x2423)) (x2430 (cdr x2423))) (let ((k w2429)) (if (cons? x2430) (let ((w2431 (car x2430)) (x2432 (cdr x2430))) (let ((i w2431)) (if (cons? x2432) (let ((w2433 (car x2432)) (x2434 (cdr x2432))) (let ((v w2433)) (if (null? x2434) (progn (if (eq a b) (quasiquote (match-extract-vars ((((unquote a)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (unquote v))) (quasiquote (abs-extract-vars (((unquote a)) (unquote-splicing abs)) (unquote us) (unquote phd) ((unquote b) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2390)))) (fail2390)))) (fail2390)))) (fail2390)) (fail2390))))) (fail2390))) (fail2390)))) (fail2390)) (fail2390))) (fail2390)))) (fail2390))) (fail2390))) (fail2390)) (fail2390)))) (fail2390)))))) (if (cons? v2385) (let ((w2435 (car v2385)) (x2436 (cdr v2385))) (let ((abs w2435)) (if (list? abs) (if (cons? x2436) (let ((w2440 (car x2436)) (x2441 (cdr x2436))) (if (cons? w2440) (let ((w2442 (car w2440)) (x2443 (cdr w2440))) (if (cons? w2442) (let ((w2444 (car w2442)) (x2445 (cdr w2442))) (let ((a w2444)) (if (cons? x2445) (let ((w2446 (car x2445)) (x2447 (cdr x2445))) (let ((x w2446)) (let ((xs x2447)) (let ((us x2443)) (if (list? us) (if (cons? x2441) (let ((w2451 (car x2441)) (x2452 (cdr x2441))) (let ((phd w2451)) (if (cons? x2452) (let ((w2453 (car x2452)) (x2454 (cdr x2452))) (if (cons? w2453) (let ((w2455 (car w2453)) (x2456 (cdr w2453))) (let ((b w2455)) (let ((w x2456)) (if (list? w) (if (cons? x2454) (let ((w2460 (car x2454)) (x2461 (cdr x2454))) (let ((k w2460)) (if (cons? x2461) (let ((w2462 (car x2461)) (x2463 (cdr x2461))) (let ((i w2462)) (if (cons? x2463) (let ((w2464 (car x2463)) (x2465 (cdr x2463))) (let ((v w2464)) (if (null? x2465) (progn (if (eq a b) (let ((x-ls (gensym "x-ls"))) (quasiquote (match-extract-vars ((((unquote a) (unquote-splicing xs)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (((unquote x) (unquote x-ls)) (unquote-splicing v))))) (quasiquote (abs-extract-vars (((unquote a) (unquote x) (unquote-splicing xs)) (unquote-splicing abs)) (unquote us) (unquote phd) ((unquote b) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2389)))) (fail2389)))) (fail2389)))) (fail2389)) (fail2389))))) (fail2389))) (fail2389)))) (fail2389)) (fail2389)))))) (fail2389)))) (fail2389))) (fail2389))) (fail2389)) (fail2389)))) (fail2389)))))) (if (cons? v2385) (let ((w2466 (car v2385)) (x2467 (cdr v2385))) (let ((abs w2466)) (if (list? abs) (if (cons? x2467) (let ((w2471 (car x2467)) (x2472 (cdr x2467))) (if (cons? w2471) (let ((w2473 (car w2471)) (x2474 (cdr w2471))) (if (cons? w2473) (let ((w2475 (car w2473)) (x2476 (cdr w2473))) (let ((a w2475)) (if (null? x2476) (let ((us x2474)) (if (list? us) (if (cons? x2472) (let ((w2480 (car x2472)) (x2481 (cdr x2472))) (let ((phd w2480)) (if (cons? x2481) (let ((w2482 (car x2481)) (x2483 (cdr x2481))) (if (cons? w2482) (let ((w2484 (car w2482)) (x2485 (cdr w2482))) (if (cons? w2484) (let ((w2486 (car w2484)) (x2487 (cdr w2484))) (let ((b w2486)) (let ((bs x2487)) (if (list? bs) (let ((w x2485)) (if (list? w) (if (cons? x2483) (let ((w2494 (car x2483)) (x2495 (cdr x2483))) (let ((k w2494)) (if (cons? x2495) (let ((w2496 (car x2495)) (x2497 (cdr x2495))) (let ((i w2496)) (if (cons? x2497) (let ((w2498 (car x2497)) (x2499 (cdr x2497))) (let ((v w2498)) (if (null? x2499) (progn (if (eq a b) (quasiquote (match-extract-vars ((((unquote a)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (unquote v))) (quasiquote (abs-extract-vars (((unquote a)) (unquote-splicing abs)) (unquote us) (unquote phd) (((unquote b) (unquote-splicing bs)) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2388)))) (fail2388)))) (fail2388)))) (fail2388)) (fail2388))) (fail2388))))) (fail2388))) (fail2388))) (fail2388)))) (fail2388)) (fail2388))) (fail2388)))) (fail2388))) (fail2388))) (fail2388)) (fail2388)))) (fail2388)))))) (if (cons? v2385) (let ((w2500 (car v2385)) (x2501 (cdr v2385))) (let ((abs w2500)) (if (list? abs) (if (cons? x2501) (let ((w2505 (car x2501)) (x2506 (cdr x2501))) (if (cons? w2505) (let ((w2507 (car w2505)) (x2508 (cdr w2505))) (if (cons? w2507) (let ((w2509 (car w2507)) (x2510 (cdr w2507))) (let ((a w2509)) (if (cons? x2510) (let ((w2511 (car x2510)) (x2512 (cdr x2510))) (let ((x w2511)) (let ((xs x2512)) (let ((us x2508)) (if (list? us) (if (cons? x2506) (let ((w2516 (car x2506)) (x2517 (cdr x2506))) (let ((phd w2516)) (if (cons? x2517) (let ((w2518 (car x2517)) (x2519 (cdr x2517))) (if (cons? w2518) (let ((w2520 (car w2518)) (x2521 (cdr w2518))) (if (cons? w2520) (let ((w2522 (car w2520)) (x2523 (cdr w2520))) (let ((b w2522)) (let ((bs x2523)) (if (list? bs) (let ((w x2521)) (if (list? w) (if (cons? x2519) (let ((w2530 (car x2519)) (x2531 (cdr x2519))) (let ((k w2530)) (if (cons? x2531) (let ((w2532 (car x2531)) (x2533 (cdr x2531))) (let ((i w2532)) (if (cons? x2533) (let ((w2534 (car x2533)) (x2535 (cdr x2533))) (let ((v w2534)) (if (null? x2535) (progn (if (eq a b) (let ((x-ls (gensym "x-ls"))) (quasiquote (match-extract-vars ((((unquote a) (unquote-splicing xs)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (((unquote x) (unquote x-ls)) (unquote-splicing v))))) (quasiquote (abs-extract-vars (((unquote a) (unquote x) (unquote-splicing xs)) (unquote-splicing abs)) (unquote us) (unquote phd) (((unquote b) (unquote-splicing bs)) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2387)))) (fail2387)))) (fail2387)))) (fail2387)) (fail2387))) (fail2387))))) (fail2387))) (fail2387))) (fail2387)))) (fail2387)) (fail2387)))))) (fail2387)))) (fail2387))) (fail2387))) (fail2387)) (fail2387)))) (fail2387)))))) (if (cons? v2385) (let ((w2536 (car v2385)) (x2537 (cdr v2385))) (let ((abs w2536)) (if (cons? x2537) (let ((w2538 (car x2537)) (x2539 (cdr x2537))) (if (null? w2538) (if (cons? x2539) (let ((w2540 (car x2539)) (x2541 (cdr x2539))) (let ((phd w2540)) (if (cons? x2541) (let ((w2542 (car x2541)) (x2543 (cdr x2541))) (let ((p w2542)) (let ((l x2543)) (progn (quasiquote (match-extract-phd () (unquote phd) (unquote abs) (unquote p) (unquote-splicing l))))))) (fail2386)))) (fail2386)) (fail2386))) (fail2386)))) (fail2386))))) (defmacro match-extract-phd x (let ((v2544 x)) (let ((fail2545 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2544) (let ((w2546 (car v2544)) (x2547 (cdr v2544))) (if (cons? x2547) (let ((w2548 (car x2547)) (x2549 (cdr x2547))) (let ((phd w2548)) (if (cons? x2549) (let ((w2550 (car x2549)) (x2551 (cdr x2549))) (let ((abs w2550)) (let ((l x2551)) (progn (quasiquote (match-extract-vars2 ((unquote abs) (unquote phd)) (unquote-splicing l))))))) (fail2545)))) (fail2545))) (fail2545))))) (defmacro match-extract-vars-step x (let ((v2552 x)) (let ((fail2553 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2552) (let ((w2554 (car v2552)) (x2555 (cdr v2552))) (let ((abs w2554)) (if (cons? x2555) (let ((w2556 (car x2555)) (x2557 (cdr x2555))) (let ((p w2556)) (if (cons? x2557) (let ((w2558 (car x2557)) (x2559 (cdr x2557))) (let ((k w2558)) (if (cons? x2559) (let ((w2560 (car x2559)) (x2561 (cdr x2559))) (let ((i w2560)) (if (cons? x2561) (let ((w2562 (car x2561)) (x2563 (cdr x2561))) (let ((v w2562)) (if (cons? x2563) (let ((w2564 (car x2563)) (x2565 (cdr x2563))) (let ((a w2564)) (letfuns ((loop (ls2569 p-ls2567 p-ls2566) (if (null? ls2569) (progn (let ((v2-ls (reverse p-ls2567)) (v2 (reverse p-ls2566))) (if (null? x2565) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote k) ((unquote-splicing v2) (unquote-splicing i)) ((unquote-splicing a) (unquote-splicing v))))) (fail2553)))) (if (cons? ls2569) (progn (let ((w2570 (car ls2569))) (if (cons? w2570) (let ((w2571 (car w2570)) (x2572 (cdr w2570))) (let ((v2 w2571)) (if (cons? x2572) (let ((w2573 (car x2572)) (x2574 (cdr x2572))) (let ((v2-ls w2573)) (if (null? x2574) (loop (cdr ls2569) (cons v2-ls p-ls2567) (cons v2 p-ls2566)) (fail2553)))) (fail2553)))) (fail2553)))) (if else (progn (fail2553)) (cond)))))) (loop w2564 (quote ()) (quote ()))))) (fail2553)))) (fail2553)))) (fail2553)))) (fail2553)))) (fail2553)))) (fail2553))))) (defmacro match-extract-quasiquote-vars x (let ((v2575 x)) (let ((fail2576 (lambda () (let ((fail2577 (lambda () (let ((fail2578 (lambda () (let ((fail2579 (lambda () (let ((fail2580 (lambda () (let ((fail2581 (lambda () (let ((fail2582 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2575) (let ((w2583 (car v2575)) (x2584 (cdr v2575))) (let ((abs w2583)) (if (cons? x2584) (let ((w2585 (car x2584)) (x2586 (cdr x2584))) (let ((x w2585)) (if (cons? x2586) (let ((w2587 (car x2586)) (x2588 (cdr x2586))) (if (cons? w2587) (let ((w2589 (car w2587)) (x2590 (cdr w2587))) (let ((k w2589)) (let ((kk x2590)) (if (list? kk) (if (cons? x2588) (let ((w2594 (car x2588)) (x2595 (cdr x2588))) (let ((i w2594)) (if (cons? x2595) (let ((w2596 (car x2595)) (x2597 (cdr x2595))) (let ((v w2596)) (if (cons? x2597) (let ((w2598 (car x2597)) (x2599 (cdr x2597))) (if (cons? w2598) (let ((w2600 (car w2598)) (x2601 (cdr w2598))) (let ((t w2600)) (let ((d x2601)) (if (null? x2599) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2582))))) (fail2582))) (fail2582)))) (fail2582)))) (fail2582)) (fail2582))))) (fail2582))) (fail2582)))) (fail2582)))) (fail2582)))))) (if (cons? v2575) (let ((w2602 (car v2575)) (x2603 (cdr v2575))) (let ((abs w2602)) (if (cons? x2603) (let ((w2604 (car x2603)) (x2605 (cdr x2603))) (if (vector? w2604) (let ((len2606 (vector-size w2604))) (if (>= len2606 0) (letfuns ((loop2608 (j2609 p-ls2607) (if (>= j2609 len2606) (let ((x (reverse p-ls2607))) (if (cons? x2605) (let ((w2611 (car x2605)) (x2612 (cdr x2605))) (let ((k w2611)) (if (cons? x2612) (let ((w2613 (car x2612)) (x2614 (cdr x2612))) (let ((i w2613)) (if (cons? x2614) (let ((w2615 (car x2614)) (x2616 (cdr x2614))) (let ((v w2615)) (if (cons? x2616) (let ((w2617 (car x2616)) (x2618 (cdr x2616))) (if (cons? w2617) (let ((w2619 (car w2617)) (x2620 (cdr w2617))) (let ((t w2619)) (let ((d x2620)) (if (null? x2618) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail2581))))) (fail2581))) (fail2581)))) (fail2581)))) (fail2581)))) (fail2581))) (let ((w2610 (vector-ref w2604 j2609))) (let ((x w2610)) (loop2608 (+ j2609 1) (cons x p-ls2607))))))) (loop2608 0 (quote ()))) (fail2581))) (fail2581))) (fail2581)))) (fail2581)))))) (if (cons? v2575) (let ((w2621 (car v2575)) (x2622 (cdr v2575))) (let ((abs w2621)) (if (cons? x2622) (let ((w2623 (car x2622)) (x2624 (cdr x2622))) (if (cons? w2623) (let ((w2625 (car w2623)) (x2626 (cdr w2623))) (let ((x w2625)) (let ((y x2626)) (if (cons? x2624) (let ((w2627 (car x2624)) (x2628 (cdr x2624))) (let ((k w2627)) (if (cons? x2628) (let ((w2629 (car x2628)) (x2630 (cdr x2628))) (let ((i w2629)) (if (cons? x2630) (let ((w2631 (car x2630)) (x2632 (cdr x2630))) (let ((v w2631)) (if (cons? x2632) (let ((w2633 (car x2632)) (x2634 (cdr x2632))) (if (cons? w2633) (let ((w2635 (car w2633)) (x2636 (cdr w2633))) (let ((t w2635)) (let ((d x2636)) (if (null? x2634) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (match-extract-quasiquote-vars-step (unquote y) (unquote k) (unquote i) (unquote v) (unquote d)) (unquote i) ()))) (fail2580))))) (fail2580))) (fail2580)))) (fail2580)))) (fail2580)))) (fail2580))))) (fail2580))) (fail2580)))) (fail2580)))))) (if (cons? v2575) (let ((w2637 (car v2575)) (x2638 (cdr v2575))) (let ((abs w2637)) (if (cons? x2638) (let ((w2639 (car x2638)) (x2640 (cdr x2638))) (if (cons? w2639) (let ((w2641 (car w2639)) (x2642 (cdr w2639))) (if (binary= w2641 (quote uunquote)) (if (cons? x2642) (let ((w2643 (car x2642)) (x2644 (cdr x2642))) (let ((x w2643)) (if (null? x2644) (if (cons? x2640) (let ((w2645 (car x2640)) (x2646 (cdr x2640))) (let ((k w2645)) (if (cons? x2646) (let ((w2647 (car x2646)) (x2648 (cdr x2646))) (let ((i w2647)) (if (cons? x2648) (let ((w2649 (car x2648)) (x2650 (cdr x2648))) (let ((v w2649)) (if (cons? x2650) (let ((w2651 (car x2650)) (x2652 (cdr x2650))) (if (cons? w2651) (let ((w2653 (car w2651)) (x2654 (cdr w2651))) (let ((t w2653)) (let ((d x2654)) (if (null? x2652) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail2579))))) (fail2579))) (fail2579)))) (fail2579)))) (fail2579)))) (fail2579)) (fail2579)))) (fail2579)) (fail2579))) (fail2579))) (fail2579)))) (fail2579)))))) (if (cons? v2575) (let ((w2655 (car v2575)) (x2656 (cdr v2575))) (let ((abs w2655)) (if (cons? x2656) (let ((w2657 (car x2656)) (x2658 (cdr x2656))) (if (cons? w2657) (let ((w2659 (car w2657)) (x2660 (cdr w2657))) (if (binary= w2659 (quote uunquote)) (if (cons? x2660) (let ((w2661 (car x2660)) (x2662 (cdr x2660))) (let ((x w2661)) (if (null? x2662) (if (cons? x2658) (let ((w2663 (car x2658)) (x2664 (cdr x2658))) (let ((k w2663)) (if (cons? x2664) (let ((w2665 (car x2664)) (x2666 (cdr x2664))) (let ((i w2665)) (if (cons? x2666) (let ((w2667 (car x2666)) (x2668 (cdr x2666))) (let ((v w2667)) (if (cons? x2668) (let ((w2669 (car x2668)) (x2670 (cdr x2668))) (if (cons? w2669) (let ((w2671 (car w2669)) (x2672 (cdr w2669))) (let ((t w2671)) (if (null? x2672) (if (null? x2670) (progn (quasiquote (match-extract-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v)))) (fail2578)) (fail2578)))) (fail2578))) (fail2578)))) (fail2578)))) (fail2578)))) (fail2578)) (fail2578)))) (fail2578)) (fail2578))) (fail2578))) (fail2578)))) (fail2578)))))) (if (cons? v2575) (let ((w2673 (car v2575)) (x2674 (cdr v2575))) (let ((abs w2673)) (if (cons? x2674) (let ((w2675 (car x2674)) (x2676 (cdr x2674))) (if (cons? w2675) (let ((w2677 (car w2675)) (x2678 (cdr w2675))) (let ((sk22680 (lambda () (if (cons? x2678) (let ((w2681 (car x2678)) (x2682 (cdr x2678))) (let ((x w2681)) (if (null? x2682) (if (cons? x2676) (let ((w2683 (car x2676)) (x2684 (cdr x2676))) (let ((k w2683)) (if (cons? x2684) (let ((w2685 (car x2684)) (x2686 (cdr x2684))) (let ((i w2685)) (if (cons? x2686) (let ((w2687 (car x2686)) (x2688 (cdr x2686))) (let ((v w2687)) (if (cons? x2688) (let ((w2689 (car x2688)) (x2690 (cdr x2688))) (let ((d w2689)) (if (null? x2690) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) ((quote uunquote) (unquote x)) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail2577)))) (fail2577)))) (fail2577)))) (fail2577)))) (fail2577)) (fail2577)))) (fail2577))))) (if (binary= w2677 (quote unquote)) (sk22680) (if (binary= w2677 (quote unquote-splicing)) (sk22680) (fail2577))))) (fail2577))) (fail2577)))) (fail2577)))))) (if (cons? v2575) (let ((w2691 (car v2575)) (x2692 (cdr v2575))) (let ((abs w2691)) (if (cons? x2692) (let ((w2693 (car x2692)) (x2694 (cdr x2692))) (if (cons? w2693) (let ((w2695 (car w2693)) (x2696 (cdr w2693))) (if (binary= w2695 (quote quasiquote)) (if (cons? x2696) (let ((w2697 (car x2696)) (x2698 (cdr x2696))) (let ((x w2697)) (if (null? x2698) (if (cons? x2694) (let ((w2699 (car x2694)) (x2700 (cdr x2694))) (let ((k w2699)) (if (cons? x2700) (let ((w2701 (car x2700)) (x2702 (cdr x2700))) (let ((i w2701)) (if (cons? x2702) (let ((w2703 (car x2702)) (x2704 (cdr x2702))) (let ((v w2703)) (if (cons? x2704) (let ((w2705 (car x2704)) (x2706 (cdr x2704))) (let ((d w2705)) (if (null? x2706) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (t (unquote-splicing d))))) (fail2576)))) (fail2576)))) (fail2576)))) (fail2576)))) (fail2576)) (fail2576)))) (fail2576)) (fail2576))) (fail2576))) (fail2576)))) (fail2576))))) (defmacro match-extract-quasiquote-vars-step x (let ((v2707 x)) (let ((fail2708 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2707) (let ((w2709 (car v2707)) (x2710 (cdr v2707))) (if (cons? x2710) (let ((w2711 (car x2710)) (x2712 (cdr x2710))) (let ((abs w2711)) (if (cons? x2712) (let ((w2713 (car x2712)) (x2714 (cdr x2712))) (let ((x w2713)) (if (cons? x2714) (let ((w2715 (car x2714)) (x2716 (cdr x2714))) (let ((k w2715)) (if (cons? x2716) (let ((w2717 (car x2716)) (x2718 (cdr x2716))) (let ((i w2717)) (if (cons? x2718) (let ((w2719 (car x2718)) (x2720 (cdr x2718))) (let ((v w2719)) (if (cons? x2720) (let ((w2721 (car x2720)) (x2722 (cdr x2720))) (let ((d w2721)) (if (cons? x2722) (let ((w2723 (car x2722)) (x2724 (cdr x2722))) (let ((a w2723)) (letfuns ((loop (ls2728 p-ls2726 p-ls2725) (if (null? ls2728) (progn (let ((v2-ls (reverse p-ls2726)) (v2 (reverse p-ls2725))) (if (null? x2724) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) ((unquote-splicing v2) (unquote-splicing i)) ((unquote-splicing a) (unquote-splicing v)) (unquote d)))) (fail2708)))) (if (cons? ls2728) (progn (let ((w2729 (car ls2728))) (if (cons? w2729) (let ((w2730 (car w2729)) (x2731 (cdr w2729))) (let ((v2 w2730)) (if (cons? x2731) (let ((w2732 (car x2731)) (x2733 (cdr x2731))) (let ((v2-ls w2732)) (if (null? x2733) (loop (cdr ls2728) (cons v2-ls p-ls2726) (cons v2 p-ls2725)) (fail2708)))) (fail2708)))) (fail2708)))) (if else (progn (fail2708)) (cond)))))) (loop w2723 (quote ()) (quote ()))))) (fail2708)))) (fail2708)))) (fail2708)))) (fail2708)))) (fail2708)))) (fail2708)))) (fail2708))) (fail2708))))) (defmacro match-check-ellipse x (let ((v2734 x)) (let ((fail2735 (lambda () (let ((fail2736 (lambda () (let ((fail2737 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2734) (let ((w2738 (car v2734)) (x2739 (cdr v2734))) (let ((id w2738)) (if (cons? x2739) (let ((w2740 (car x2739)) (x2741 (cdr x2739))) (let ((success-k w2740)) (if (cons? x2741) (let ((w2742 (car x2741)) (x2743 (cdr x2741))) (let ((failure-k w2742)) (if (null? x2743) (progn (if (let ((G002744 (binary= id (quote ...)))) (if G002744 G002744 (binary= id (quote ___)))) success-k failure-k)) (fail2737)))) (fail2737)))) (fail2737)))) (fail2737)))))) (if (cons? v2734) (let ((w2745 (car v2734)) (x2746 (cdr v2734))) (if (vector? w2745) (let ((len2747 (vector-size w2745))) (if (>= len2747 0) (letfuns ((loop2749 (j2750 p-ls2748) (if (>= j2750 len2747) (let ((a (reverse p-ls2748))) (if (cons? x2746) (let ((w2752 (car x2746)) (x2753 (cdr x2746))) (let ((success-k w2752)) (if (cons? x2753) (let ((w2754 (car x2753)) (x2755 (cdr x2753))) (let ((failure-k w2754)) (if (null? x2755) (progn failure-k) (fail2736)))) (fail2736)))) (fail2736))) (let ((w2751 (vector-ref w2745 j2750))) (let ((a w2751)) (loop2749 (+ j2750 1) (cons a p-ls2748))))))) (loop2749 0 (quote ()))) (fail2736))) (fail2736))) (fail2736)))))) (if (cons? v2734) (let ((w2756 (car v2734)) (x2757 (cdr v2734))) (if (cons? w2756) (let ((w2758 (car w2756)) (x2759 (cdr w2756))) (let ((a w2758)) (let ((b x2759)) (if (cons? x2757) (let ((w2760 (car x2757)) (x2761 (cdr x2757))) (let ((success-k w2760)) (if (cons? x2761) (let ((w2762 (car x2761)) (x2763 (cdr x2761))) (let ((failure-k w2762)) (if (null? x2763) (progn failure-k) (fail2735)))) (fail2735)))) (fail2735))))) (fail2735))) (fail2735))))) (defmacro match-check-identifier x (let ((v2764 x)) (let ((fail2765 (lambda () (let ((fail2766 (lambda () (let ((fail2767 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2764) (let ((w2768 (car v2764)) (x2769 (cdr v2764))) (let ((x w2768)) (if (cons? x2769) (let ((w2770 (car x2769)) (x2771 (cdr x2769))) (let ((success-k w2770)) (if (cons? x2771) (let ((w2772 (car x2771)) (x2773 (cdr x2771))) (let ((failure-k w2772)) (if (null? x2773) (progn (if (symbol? x) success-k failure-k)) (fail2767)))) (fail2767)))) (fail2767)))) (fail2767)))))) (if (cons? v2764) (let ((w2774 (car v2764)) (x2775 (cdr v2764))) (if (vector? w2774) (let ((len2776 (vector-size w2774))) (if (>= len2776 0) (letfuns ((loop2778 (j2779 p-ls2777) (if (>= j2779 len2776) (let ((x (reverse p-ls2777))) (if (cons? x2775) (let ((w2781 (car x2775)) (x2782 (cdr x2775))) (let ((success-k w2781)) (if (cons? x2782) (let ((w2783 (car x2782)) (x2784 (cdr x2782))) (let ((failure-k w2783)) (if (null? x2784) (progn failure-k) (fail2766)))) (fail2766)))) (fail2766))) (let ((w2780 (vector-ref w2774 j2779))) (let ((x w2780)) (loop2778 (+ j2779 1) (cons x p-ls2777))))))) (loop2778 0 (quote ()))) (fail2766))) (fail2766))) (fail2766)))))) (if (cons? v2764) (let ((w2785 (car v2764)) (x2786 (cdr v2764))) (if (cons? w2785) (let ((w2787 (car w2785)) (x2788 (cdr w2785))) (let ((x w2787)) (let ((y x2788)) (if (cons? x2786) (let ((w2789 (car x2786)) (x2790 (cdr x2786))) (let ((success-k w2789)) (if (cons? x2790) (let ((w2791 (car x2790)) (x2792 (cdr x2790))) (let ((failure-k w2791)) (if (null? x2792) (progn failure-k) (fail2765)))) (fail2765)))) (fail2765))))) (fail2765))) (fail2765))))) (defmacro defmatchfun args (let ((name (car args)) (arg (gensym "arg")) (matchers (cdr args))) (if (symbol? name) (quasiquote (deflocal (unquote name) (named-lambda (unquote name) ((unquote arg)) (smatch (unquote arg) (unquote-splicing matchers))))) (if (eq (car name) (quote setter)) (quasiquote ((setter setter) (unquote (cadr name)) (named-lambda (unquote name) ((unquote arg)) (smatch (unquote arg) (unquote-splicing matchers))))) (error <condition> "bad defmatchfun syntax"))))) (defmacro match-lambda matchers (let ((x (gensym "arg"))) (quasiquote (lambda ((unquote x)) (smatch (unquote x) (unquote-splicing matchers)))))) (defmacro match-lambda* matchers (let ((x (gensym "arg"))) (quasiquote (lambda (unquote x) (smatch (unquote x) (unquote-splicing matchers)))))) (defmacro match-let x (let ((v2793 x)) (let ((fail2794 (lambda () (let ((fail2795 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2793) (let ((w2796 (car v2793)) (x2797 (cdr v2793))) (let ((loop w2796)) (let ((rest x2797)) (progn (quasiquote (match-named-let loop () (unquote-splicing rest))))))) (fail2795)))))) (if (cons? v2793) (let ((w2798 (car v2793)) (x2799 (cdr v2793))) (let ((vars w2798)) (if (list? vars) (let ((body x2799)) (progn (quasiquote (match-let/helper let () () (unquote vars) (unquote-splicing body))))) (fail2794)))) (fail2794))))) (defmacro match-letfuns x (let ((v2803 x)) (let ((fail2804 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2803) (let ((w2805 (car v2803)) (x2806 (cdr v2803))) (let ((vars w2805)) (let ((body x2806)) (progn (quasiquote (match-let/helper letfuns () () (unquote vars) (unquote-splicing body))))))) (fail2804))))) (defmacro match-let/helper x (let ((v2807 x)) (let ((fail2808 (lambda () (let ((fail2809 (lambda () (let ((fail2810 (lambda () (let ((fail2811 (lambda () (let ((fail2812 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2807) (let ((w2813 (car v2807)) (x2814 (cdr v2807))) (let ((let w2813)) (if (cons? x2814) (let ((w2815 (car x2814)) (x2816 (cdr x2814))) (let ((v w2815)) (if (list? v) (if (cons? x2816) (let ((w2820 (car x2816)) (x2821 (cdr x2816))) (let ((p w2820)) (if (list? p) (if (cons? x2821) (let ((w2825 (car x2821)) (x2826 (cdr x2821))) (if (cons? w2825) (let ((w2827 (car w2825)) (x2828 (cdr w2825))) (if (cons? w2827) (let ((w2829 (car w2827)) (x2830 (cdr w2827))) (let ((a w2829)) (if (cons? x2830) (let ((w2831 (car x2830)) (x2832 (cdr x2830))) (let ((expr w2831)) (if (null? x2832) (let ((rest x2828)) (let ((body x2826)) (progn (quasiquote (match-let/helper (unquote let) ((unquote-splicing v) ((unquote a) (unquote expr))) (unquote p) (unquote rest) (unquote-splicing body)))))) (fail2812)))) (fail2812)))) (fail2812))) (fail2812))) (fail2812)) (fail2812)))) (fail2812)) (fail2812)))) (fail2812)))) (fail2812)))))) (if (cons? v2807) (let ((w2833 (car v2807)) (x2834 (cdr v2807))) (let ((let w2833)) (if (cons? x2834) (let ((w2835 (car x2834)) (x2836 (cdr x2834))) (let ((v w2835)) (if (list? v) (if (cons? x2836) (let ((w2840 (car x2836)) (x2841 (cdr x2836))) (let ((p w2840)) (if (list? p) (if (cons? x2841) (let ((w2845 (car x2841)) (x2846 (cdr x2841))) (if (cons? w2845) (let ((w2847 (car w2845)) (x2848 (cdr w2845))) (if (cons? w2847) (let ((w2849 (car w2847)) (x2850 (cdr w2847))) (if (vector? w2849) (let ((len2851 (vector-size w2849))) (if (>= len2851 0) (letfuns ((loop2853 (j2854 p-ls2852) (if (>= j2854 len2851) (let ((a (reverse p-ls2852))) (if (cons? x2850) (let ((w2856 (car x2850)) (x2857 (cdr x2850))) (let ((expr w2856)) (if (null? x2857) (let ((rest x2848)) (let ((body x2846)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-let/helper let ((unquote-splicing v) ((unquote tmp) (unquote expr))) ((unquote-splicing p) (#((unquote-splicing a)) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail2811)))) (fail2811))) (let ((w2855 (vector-ref w2849 j2854))) (let ((a w2855)) (loop2853 (+ j2854 1) (cons a p-ls2852))))))) (loop2853 0 (quote ()))) (fail2811))) (fail2811))) (fail2811))) (fail2811))) (fail2811)) (fail2811)))) (fail2811)) (fail2811)))) (fail2811)))) (fail2811)))))) (if (cons? v2807) (let ((w2858 (car v2807)) (x2859 (cdr v2807))) (let ((let w2858)) (if (cons? x2859) (let ((w2860 (car x2859)) (x2861 (cdr x2859))) (let ((v w2860)) (if (list? v) (if (cons? x2861) (let ((w2865 (car x2861)) (x2866 (cdr x2861))) (let ((p w2865)) (if (list? p) (if (cons? x2866) (let ((w2870 (car x2866)) (x2871 (cdr x2866))) (if (cons? w2870) (let ((w2872 (car w2870)) (x2873 (cdr w2870))) (if (cons? w2872) (let ((w2874 (car w2872)) (x2875 (cdr w2872))) (if (cons? w2874) (let ((w2876 (car w2874)) (x2877 (cdr w2874))) (let ((a w2876)) (let ((b x2877)) (if (cons? x2875) (let ((w2878 (car x2875)) (x2879 (cdr x2875))) (let ((expr w2878)) (if (null? x2879) (let ((rest x2873)) (let ((body x2871)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-let/helper let ((unquote-splicing v) ((unquote tmp) (unquote expr))) ((unquote-splicing p) (((unquote a) (unquote-splicing b)) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail2810)))) (fail2810))))) (fail2810))) (fail2810))) (fail2810))) (fail2810)) (fail2810)))) (fail2810)) (fail2810)))) (fail2810)))) (fail2810)))))) (if (cons? v2807) (let ((w2880 (car v2807)) (x2881 (cdr v2807))) (let ((let w2880)) (if (cons? x2881) (let ((w2882 (car x2881)) (x2883 (cdr x2881))) (let ((a w2882)) (letfuns ((loop (ls2887 p-ls2885 p-ls2884) (if (null? ls2887) (progn (let ((expr (reverse p-ls2885)) (var (reverse p-ls2884))) (if (cons? x2883) (let ((w2889 (car x2883)) (x2890 (cdr x2883))) (let ((b w2889)) (letfuns ((loop (ls2894 p-ls2892 p-ls2891) (if (null? ls2894) (progn (let ((tmp (reverse p-ls2892)) (pat (reverse p-ls2891))) (if (cons? x2890) (let ((w2896 (car x2890)) (x2897 (cdr x2890))) (if (null? w2896) (let ((body x2897)) (progn (quasiquote ((unquote let) (unquote a) (match-let* (unquote b) (unquote-splicing body)))))) (fail2809))) (fail2809)))) (if (cons? ls2894) (progn (let ((w2895 (car ls2894))) (if (cons? w2895) (let ((w2898 (car w2895)) (x2899 (cdr w2895))) (let ((pat w2898)) (if (cons? x2899) (let ((w2900 (car x2899)) (x2901 (cdr x2899))) (let ((tmp w2900)) (if (null? x2901) (loop (cdr ls2894) (cons tmp p-ls2892) (cons pat p-ls2891)) (fail2809)))) (fail2809)))) (fail2809)))) (if else (progn (fail2809)) (cond)))))) (loop w2889 (quote ()) (quote ()))))) (fail2809)))) (if (cons? ls2887) (progn (let ((w2888 (car ls2887))) (if (cons? w2888) (let ((w2902 (car w2888)) (x2903 (cdr w2888))) (let ((var w2902)) (if (cons? x2903) (let ((w2904 (car x2903)) (x2905 (cdr x2903))) (let ((expr w2904)) (if (null? x2905) (loop (cdr ls2887) (cons expr p-ls2885) (cons var p-ls2884)) (fail2809)))) (fail2809)))) (fail2809)))) (if else (progn (fail2809)) (cond)))))) (loop w2882 (quote ()) (quote ()))))) (fail2809)))) (fail2809)))))) (if (cons? v2807) (let ((w2906 (car v2807)) (x2907 (cdr v2807))) (let ((let w2906)) (if (cons? x2907) (let ((w2908 (car x2907)) (x2909 (cdr x2907))) (let ((a w2908)) (letfuns ((loop (ls2913 p-ls2911 p-ls2910) (if (null? ls2913) (progn (let ((expr (reverse p-ls2911)) (var (reverse p-ls2910))) (if (cons? x2909) (let ((w2915 (car x2909)) (x2916 (cdr x2909))) (if (null? w2915) (if (cons? x2916) (let ((w2917 (car x2916)) (x2918 (cdr x2916))) (if (null? w2917) (let ((body x2918)) (progn (quasiquote ((unquote let) (unquote a) (unquote-splicing body))))) (fail2808))) (fail2808)) (fail2808))) (fail2808)))) (if (cons? ls2913) (progn (let ((w2914 (car ls2913))) (if (cons? w2914) (let ((w2919 (car w2914)) (x2920 (cdr w2914))) (let ((var w2919)) (if (cons? x2920) (let ((w2921 (car x2920)) (x2922 (cdr x2920))) (let ((expr w2921)) (if (null? x2922) (loop (cdr ls2913) (cons expr p-ls2911) (cons var p-ls2910)) (fail2808)))) (fail2808)))) (fail2808)))) (if else (progn (fail2808)) (cond)))))) (loop w2908 (quote ()) (quote ()))))) (fail2808)))) (fail2808))))) (defmacro match-named-let x (let ((v2923 x)) (let ((fail2924 (lambda () (let ((fail2925 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2923) (let ((w2926 (car v2923)) (x2927 (cdr v2923))) (if (cons? x2927) (let ((w2928 (car x2927)) (x2929 (cdr x2927))) (let ((loop w2928)) (if (cons? x2929) (let ((w2930 (car x2929)) (x2931 (cdr x2929))) (let ((v w2930)) (if (list? v) (if (cons? x2931) (let ((w2935 (car x2931)) (x2936 (cdr x2931))) (if (cons? w2935) (let ((w2937 (car w2935)) (x2938 (cdr w2935))) (if (cons? w2937) (let ((w2939 (car w2937)) (x2940 (cdr w2937))) (let ((pat w2939)) (if (cons? x2940) (let ((w2941 (car x2940)) (x2942 (cdr x2940))) (let ((expr w2941)) (if (null? x2942) (let ((rest x2938)) (let ((body x2936)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-named-let (unquote loop) ((unquote-splicing v) ((unquote pat) (unquote expr) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail2925)))) (fail2925)))) (fail2925))) (fail2925))) (fail2925)) (fail2925)))) (fail2925)))) (fail2925))) (fail2925)))))) (if (cons? v2923) (let ((w2943 (car v2923)) (x2944 (cdr v2923))) (let ((loop w2943)) (if (cons? x2944) (let ((w2945 (car x2944)) (x2946 (cdr x2944))) (letfuns ((loop (ls2951 p-ls2949 p-ls2948 p-ls2947) (if (null? ls2951) (progn (let ((var (reverse p-ls2949)) (expr (reverse p-ls2948)) (pat (reverse p-ls2947))) (if (cons? x2946) (let ((w2953 (car x2946)) (x2954 (cdr x2946))) (if (null? w2953) (let ((body x2954)) (progn (quasiquote (recur loop (unquote (map (lambda (var expr) (quasiquote ((unquote var) (unquote expr)))) var expr)) (match-let (unquote (map (lambda (pat var) (quasiquote ((unquote pat) (unquote var)))) pat var)) (unquote-splicing body)))))) (fail2924))) (fail2924)))) (if (cons? ls2951) (progn (let ((w2952 (car ls2951))) (if (cons? w2952) (let ((w2955 (car w2952)) (x2956 (cdr w2952))) (let ((pat w2955)) (if (cons? x2956) (let ((w2957 (car x2956)) (x2958 (cdr x2956))) (let ((expr w2957)) (if (cons? x2958) (let ((w2959 (car x2958)) (x2960 (cdr x2958))) (let ((var w2959)) (if (null? x2960) (loop (cdr ls2951) (cons var p-ls2949) (cons expr p-ls2948) (cons pat p-ls2947)) (fail2924)))) (fail2924)))) (fail2924)))) (fail2924)))) (if else (progn (fail2924)) (cond)))))) (loop w2945 (quote ()) (quote ()) (quote ())))) (fail2924)))) (fail2924))))) (defmacro match-let* x (let ((v2961 x)) (let ((fail2962 (lambda () (let ((fail2963 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2961) (let ((w2964 (car v2961)) (x2965 (cdr v2961))) (if (cons? w2964) (let ((w2966 (car w2964)) (x2967 (cdr w2964))) (if (cons? w2966) (let ((w2968 (car w2966)) (x2969 (cdr w2966))) (let ((pat w2968)) (if (cons? x2969) (let ((w2970 (car x2969)) (x2971 (cdr x2969))) (let ((expr w2970)) (if (null? x2971) (let ((rest x2967)) (let ((body x2965)) (progn (quasiquote (smatch (unquote expr) ((unquote pat) (match-let* (unquote rest) (unquote-splicing body)))))))) (fail2963)))) (fail2963)))) (fail2963))) (fail2963))) (fail2963)))))) (if (cons? v2961) (let ((w2972 (car v2961)) (x2973 (cdr v2961))) (if (null? w2972) (let ((body x2973)) (progn (quasiquote (progn (unquote-splicing body))))) (fail2962))) (fail2962))))))