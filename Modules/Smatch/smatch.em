(defmodule smatch (syntax (syntax-0) import (level-0) export (smatch)) (defmacro smatch X (let ((v0 X)) (let ((fail1 (lambda () (let ((fail2 (lambda () (let ((fail3 (lambda () (let ((fail4 (lambda () (let ((fail5 (lambda () (let ((fail6 (lambda () (let ((fail7 (lambda () (error <condition> "no matching pattern")))) (let ((l v0)) (if (list? l) (progn (quasiquote (match* (() ((car cdr cons? null? binary=) ())) (unquote-splicing l)))) (fail7))))))) (if (cons? v0) (let ((w11 (car v0)) (x12 (cdr v0))) (if (binary= w11 (quote -phd)) (if (cons? x12) (let ((w13 (car x12)) (x14 (cdr x12))) (let ((p w13)) (let ((l x14)) (progn (quasiquote (match* (() (unquote p)) (unquote-splicing l))))))) (fail6)) (fail6))) (fail6)))))) (if (cons? v0) (let ((w15 (car v0)) (x16 (cdr v0))) (if (binary= w15 (quote -abs)) (if (cons? x16) (let ((w17 (car x16)) (x18 (cdr x16))) (let ((abs w17)) (let ((l x18)) (progn (quasiquote (match* ((unquote abs) ((car cdr cons? null? binary=) ())) (unquote-splicing l))))))) (fail5)) (fail5))) (fail5)))))) (if (cons? v0) (let ((w19 (car v0)) (x20 (cdr v0))) (if (binary= w19 (quote -phd)) (if (cons? x20) (let ((w21 (car x20)) (x22 (cdr x20))) (let ((p w21)) (if (cons? x22) (let ((w23 (car x22)) (x24 (cdr x22))) (if (binary= w23 (quote -abs)) (if (cons? x24) (let ((w25 (car x24)) (x26 (cdr x24))) (let ((abs w25)) (let ((l x26)) (progn (quasiquote (match* ((unquote abs) (unquote p)) (unquote-splicing l))))))) (fail4)) (fail4))) (fail4)))) (fail4)) (fail4))) (fail4)))))) (if (cons? v0) (let ((w27 (car v0)) (x28 (cdr v0))) (if (binary= w27 (quote -abs)) (if (cons? x28) (let ((w29 (car x28)) (x30 (cdr x28))) (let ((abs w29)) (if (cons? x30) (let ((w31 (car x30)) (x32 (cdr x30))) (if (binary= w31 (quote -phd)) (if (cons? x32) (let ((w33 (car x32)) (x34 (cdr x32))) (let ((p w33)) (let ((l x34)) (progn (quasiquote (match* ((unquote abs) (unquote p)) (unquote-splicing l))))))) (fail3)) (fail3))) (fail3)))) (fail3)) (fail3))) (fail3)))))) (if (cons? v0) (let ((w35 (car v0)) (x36 (cdr v0))) (let ((atom w35)) (if (null? x36) (progn (error <condition> "no match clauses")) (fail2)))) (fail2)))))) (if (null? v0) (progn (error <condition> "missing match expression")) (fail1))))) (defmacro match* X (let ((v37 X)) (let ((fail38 (lambda () (let ((fail39 (lambda () (let ((fail40 (lambda () (error <condition> "no matching pattern")))) (if (cons? v37) (let ((w41 (car v37)) (x42 (cdr v37))) (let ((abs w41)) (if (cons? x42) (let ((w43 (car x42)) (x44 (cdr x42))) (let ((atom w43)) (let ((b x44)) (if (list? b) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote atom))) (match-next (unquote abs) (unquote v) ((unquote atom) (setq (unquote atom))) (unquote-splicing b)))))) (fail40))))) (fail40)))) (fail40)))))) (if (cons? v37) (let ((w48 (car v37)) (x49 (cdr v37))) (let ((abs w48)) (if (cons? x49) (let ((w50 (car x49)) (x51 (cdr x49))) (let ((a w50)) (if (vector? w50) (let ((len52 (vector-size w50))) (if (>= len52 0) (letfuns ((loop54 (j55 p-ls53) (if (>= j55 len52) (let ((vec (reverse p-ls53))) (letfuns ((loop (ls61 p-ls59 p-ls58 p-ls57) (if (null? ls61) (progn (let ((body (reverse p-ls59)) (pat (reverse p-ls58)) (b (reverse p-ls57))) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote a))) (match-next (unquote abs) (unquote v) ((unquote v) (setq (unquote v))) (unquote-splicing b)))))))) (if (cons? ls61) (progn (let ((w62 (car ls61))) (let ((b w62)) (if (cons? w62) (let ((w63 (car w62)) (x64 (cdr w62))) (let ((pat w63)) (let ((body x64)) (loop (cdr ls61) (cons body p-ls59) (cons pat p-ls58) (cons b p-ls57))))) (fail39))))) (if else (progn (fail39)) (cond)))))) (loop x51 (quote ()) (quote ()) (quote ())))) (let ((w56 (vector-ref w50 j55))) (let ((vec w56)) (loop54 (+ j55 1) (cons vec p-ls53))))))) (loop54 0 (quote ()))) (fail39))) (fail39)))) (fail39)))) (fail39)))))) (if (cons? v37) (let ((w65 (car v37)) (x66 (cdr v37))) (let ((abs w65)) (if (cons? x66) (let ((w67 (car x66)) (x68 (cdr x66))) (let ((app w67)) (if (list? app) (letfuns ((loop (ls76 p-ls74 p-ls73 p-ls72) (if (null? ls76) (progn (let ((body (reverse p-ls74)) (pat (reverse p-ls73)) (a (reverse p-ls72))) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote app))) (match-next (unquote abs) (unquote v) ((unquote app) (setq (unquote app))) (unquote-splicing a)))))))) (if (cons? ls76) (progn (let ((w77 (car ls76))) (let ((a w77)) (if (cons? w77) (let ((w78 (car w77)) (x79 (cdr w77))) (let ((pat w78)) (let ((body x79)) (loop (cdr ls76) (cons body p-ls74) (cons pat p-ls73) (cons a p-ls72))))) (fail38))))) (if else (progn (fail38)) (cond)))))) (loop x68 (quote ()) (quote ()) (quote ()))) (fail38)))) (fail38)))) (fail38))))) (defmacro match-next X (let ((v80 X)) (let ((fail81 (lambda () (let ((fail82 (lambda () (let ((fail83 (lambda () (error <condition> "no matching pattern")))) (if (cons? v80) (let ((w84 (car v80)) (x85 (cdr v80))) (let ((abs w84)) (if (cons? x85) (let ((w86 (car x85)) (x87 (cdr x85))) (let ((v w86)) (if (cons? x87) (let ((w88 (car x87)) (x89 (cdr x87))) (let ((g+s w88)) (if (cons? x89) (let ((w90 (car x89)) (x91 (cdr x89))) (if (cons? w90) (let ((w92 (car w90)) (x93 (cdr w90))) (let ((pat w92)) (let ((body x93)) (let ((rest x91)) (progn (let ((failure (gensym "fail"))) (quasiquote (match-next (unquote abs) (unquote v) (unquote g+s) ((unquote pat) (=> (unquote failure)) (unquote-splicing body)) (unquote-splicing rest))))))))) (fail83))) (fail83)))) (fail83)))) (fail83)))) (fail83)))))) (if (cons? v80) (let ((w94 (car v80)) (x95 (cdr v80))) (let ((abs w94)) (if (cons? x95) (let ((w96 (car x95)) (x97 (cdr x95))) (let ((v w96)) (if (cons? x97) (let ((w98 (car x97)) (x99 (cdr x97))) (let ((g+s w98)) (if (cons? x99) (let ((w100 (car x99)) (x101 (cdr x99))) (if (cons? w100) (let ((w102 (car w100)) (x103 (cdr w100))) (let ((pat w102)) (if (cons? x103) (let ((w104 (car x103)) (x105 (cdr x103))) (if (cons? w104) (let ((w106 (car w104)) (x107 (cdr w104))) (if (binary= w106 (quote =>)) (if (cons? x107) (let ((w108 (car x107)) (x109 (cdr x107))) (let ((failure w108)) (if (null? x109) (let ((body x105)) (let ((rest x101)) (progn (quasiquote (let (((unquote failure) (lambda () (match-next (unquote abs) (unquote v) (unquote g+s) (unquote-splicing rest))))) (match-one (unquote abs) (unquote v) (unquote pat) (unquote g+s) (match-drop-ids (progn (unquote-splicing body))) (match-drop-ids ((unquote failure))) ())))))) (fail82)))) (fail82)) (fail82))) (fail82))) (fail82)))) (fail82))) (fail82)))) (fail82)))) (fail82)))) (fail82)))))) (if (cons? v80) (let ((w110 (car v80)) (x111 (cdr v80))) (let ((abs w110)) (if (cons? x111) (let ((w112 (car x111)) (x113 (cdr x111))) (let ((v w112)) (if (cons? x113) (let ((w114 (car x113)) (x115 (cdr x113))) (let ((g+s w114)) (if (null? x115) (progn (quasiquote (error <condition> "no matching pattern"))) (fail81)))) (fail81)))) (fail81)))) (fail81))))) (defmacro abs-drop x (let ((v116 x)) (let ((fail117 (lambda () (let ((fail118 (lambda () (error <condition> "no matching pattern")))) (if (cons? v116) (let ((w119 (car v116)) (x120 (cdr v116))) (let ((a w119)) (if (cons? x120) (let ((w121 (car x120)) (x122 (cdr x120))) (let ((k w121)) (if (list? k) (if (cons? x122) (let ((w126 (car x122)) (x127 (cdr x122))) (let ((v w126)) (if (null? x127) (progn (append k (quasiquote ((unquote v))))) (fail118)))) (fail118)) (fail118)))) (fail118)))) (fail118)))))) (if (cons? v116) (let ((w128 (car v116)) (x129 (cdr v116))) (let ((a w128)) (if (cons? x129) (let ((w130 (car x129)) (x131 (cdr x129))) (let ((k w130)) (if (null? x131) (progn k) (fail117)))) (fail117)))) (fail117))))) (defmacro match-one x (let ((v132 x)) (let ((fail133 (lambda () (let ((fail134 (lambda () (error <condition> "no matching pattern")))) (let ((x v132)) (progn (quasiquote (match-two (unquote-splicing x))))))))) (if (cons? v132) (let ((w135 (car v132)) (x136 (cdr v132))) (let ((abs w135)) (if (cons? x136) (let ((w137 (car x136)) (x138 (cdr x136))) (let ((v w137)) (if (cons? x138) (let ((w139 (car x138)) (x140 (cdr x138))) (if (cons? w139) (let ((w141 (car w139)) (x142 (cdr w139))) (let ((p w141)) (if (cons? x142) (let ((w143 (car x142)) (x144 (cdr x142))) (let ((q w143)) (let ((r x144)) (if (cons? x140) (let ((w145 (car x140)) (x146 (cdr x140))) (let ((g+s w145)) (if (cons? x146) (let ((w147 (car x146)) (x148 (cdr x146))) (let ((sk w147)) (if (cons? x148) (let ((w149 (car x148)) (x150 (cdr x148))) (let ((fk w149)) (if (cons? x150) (let ((w151 (car x150)) (x152 (cdr x150))) (let ((i w151)) (if (null? x152) (progn (quasiquote (match-check-ellipse (unquote q) (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses (unquote abs) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()) (match-two (unquote abs) (unquote v) ((unquote p) (unquote q) (unquote-splicing r)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail133)))) (fail133)))) (fail133)))) (fail133)))) (fail133))))) (fail133)))) (fail133))) (fail133)))) (fail133)))) (fail133))))) (defmacro insert-abs x (let ((v153 x)) (let ((fail154 (lambda () (let ((fail155 (lambda () (let ((fail156 (lambda () (error <condition> "no matching pattern")))) (if (cons? v153) (let ((w157 (car v153)) (x158 (cdr v153))) (let ((abs w157)) (if (cons? x158) (let ((w159 (car x158)) (x160 (cdr x158))) (if (cons? w159) (let ((w161 (car w159)) (x162 (cdr w159))) (let ((n w161)) (let ((nn x162)) (if (list? nn) (if (null? x160) (progn (append (quasiquote ((unquote n) (unquote abs))) nn)) (fail156)) (fail156))))) (fail156))) (fail156)))) (fail156)))))) (if (cons? v153) (let ((w166 (car v153)) (x167 (cdr v153))) (let ((abs w166)) (if (cons? x167) (let ((w168 (car x167)) (x169 (cdr x167))) (if (cons? w168) (let ((w170 (car w168)) (x171 (cdr w168))) (let ((x w170)) (if (null? x171) (if (null? x169) (progn (quasiquote ((unquote x)))) (fail155)) (fail155)))) (fail155))) (fail155)))) (fail155)))))) (if (cons? v153) (let ((w172 (car v153)) (x173 (cdr v153))) (let ((abs w172)) (if (cons? x173) (let ((w174 (car x173)) (x175 (cdr x173))) (if (cons? w174) (let ((w176 (car w174)) (x177 (cdr w174))) (if (binary= w176 (quote progn)) (let ((l x177)) (if (null? x175) (progn (quasiquote ((quote progn) (unquote-splicing l)))) (fail154))) (fail154))) (fail154))) (fail154)))) (fail154))))) (defmacro recur x (let ((v178 x)) (let ((fail179 (lambda () (error <condition> "no matching pattern")))) (if (cons? v178) (let ((w180 (car v178)) (x181 (cdr v178))) (let ((n w180)) (if (cons? x181) (let ((w182 (car x181)) (x183 (cdr x181))) (letfuns ((loop (ls187 p-ls185 p-ls184) (if (null? ls187) (progn (let ((i (reverse p-ls185)) (a (reverse p-ls184))) (let ((code x183)) (if (list? code) (progn (quasiquote (letfuns (((unquote n) (unquote a) (unquote-splicing code))) ((unquote n) (unquote-splicing i))))) (fail179))))) (if (cons? ls187) (progn (let ((w188 (car ls187))) (if (cons? w188) (let ((w192 (car w188)) (x193 (cdr w188))) (let ((a w192)) (if (cons? x193) (let ((w194 (car x193)) (x195 (cdr x193))) (let ((i w194)) (if (null? x195) (loop (cdr ls187) (cons i p-ls185) (cons a p-ls184)) (fail179)))) (fail179)))) (fail179)))) (if else (progn (fail179)) (cond)))))) (loop w182 (quote ()) (quote ())))) (fail179)))) (fail179))))) (defmacro match-two x (let ((v196 x)) (let ((fail197 (lambda () (let ((fail198 (lambda () (let ((fail199 (lambda () (let ((fail200 (lambda () (let ((fail201 (lambda () (let ((fail202 (lambda () (let ((fail203 (lambda () (let ((fail204 (lambda () (let ((fail205 (lambda () (let ((fail206 (lambda () (let ((fail207 (lambda () (let ((fail208 (lambda () (let ((fail209 (lambda () (let ((fail210 (lambda () (let ((fail211 (lambda () (let ((fail212 (lambda () (let ((fail213 (lambda () (let ((fail214 (lambda () (let ((fail215 (lambda () (let ((fail216 (lambda () (let ((fail217 (lambda () (let ((fail218 (lambda () (let ((fail219 (lambda () (let ((fail220 (lambda () (let ((fail221 (lambda () (error <condition> "no matching pattern")))) (if (cons? v196) (let ((w222 (car v196)) (x223 (cdr v196))) (if (cons? w222) (let ((w224 (car w222)) (x225 (cdr w222))) (let ((abs w224)) (if (cons? x225) (let ((w226 (car x225)) (x227 (cdr x225))) (let ((phd w226)) (if (null? x227) (if (cons? x223) (let ((w228 (car x223)) (x229 (cdr x223))) (let ((v w228)) (if (cons? x229) (let ((w230 (car x229)) (x231 (cdr x229))) (let ((p w230)) (if (cons? x231) (let ((w232 (car x231)) (x233 (cdr x231))) (let ((g+s w232)) (if (cons? x233) (let ((w234 (car x233)) (x235 (cdr x233))) (let ((sk w234)) (if (cons? x235) (let ((w236 (car x235)) (x237 (cdr x235))) (let ((fk w236)) (if (cons? x237) (let ((w238 (car x237)) (x239 (cdr x237))) (let ((i w238)) (if (null? x239) (progn (quasiquote (match-abstract () (unquote abs) (unquote phd) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail221)))) (fail221)))) (fail221)))) (fail221)))) (fail221)))) (fail221)))) (fail221)) (fail221)))) (fail221)))) (fail221))) (fail221)))))) (if (cons? v196) (let ((w240 (car v196)) (x241 (cdr v196))) (let ((abs w240)) (if (cons? x241) (let ((w242 (car x241)) (x243 (cdr x241))) (let ((v w242)) (if (cons? x243) (let ((w244 (car x243)) (x245 (cdr x243))) (if (cons? w244) (let ((w246 (car w244)) (x247 (cdr w244))) (let ((p w246)) (if (cons? x247) (let ((w248 (car x247)) (x249 (cdr x247))) (if (binary= w248 (quote ___)) (let ((r x249)) (if (cons? x245) (let ((w250 (car x245)) (x251 (cdr x245))) (let ((g+s w250)) (if (cons? x251) (let ((w252 (car x251)) (x253 (cdr x251))) (let ((sk w252)) (if (cons? x253) (let ((w254 (car x253)) (x255 (cdr x253))) (let ((fk w254)) (if (cons? x255) (let ((w256 (car x255)) (x257 (cdr x255))) (let ((i w256)) (if (null? x257) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses (unquote abs) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i) ())))) (fail220)))) (fail220)))) (fail220)))) (fail220)))) (fail220))) (fail220))) (fail220)))) (fail220))) (fail220)))) (fail220)))) (fail220)))))) (if (cons? v196) (let ((w258 (car v196)) (x259 (cdr v196))) (let ((abs w258)) (if (cons? x259) (let ((w260 (car x259)) (x261 (cdr x259))) (let ((v w260)) (if (cons? x261) (let ((w262 (car x261)) (x263 (cdr x261))) (if (cons? w262) (let ((w264 (car w262)) (x265 (cdr w262))) (if (cons? w264) (let ((w266 (car w264)) (x267 (cdr w264))) (if (binary= w266 (quote <>)) (if (cons? x267) (let ((w268 (car x267)) (x269 (cdr x267))) (let ((f w268)) (if (cons? x269) (let ((w270 (car x269)) (x271 (cdr x269))) (let ((p w270)) (if (null? x271) (let ((l x265)) (if (cons? x263) (let ((w272 (car x263)) (x273 (cdr x263))) (let ((g+s w272)) (if (cons? x273) (let ((w274 (car x273)) (x275 (cdr x273))) (let ((sk w274)) (if (cons? x275) (let ((w276 (car x275)) (x277 (cdr x275))) (let ((fk w276)) (if (cons? x277) (let ((w278 (car x277)) (x279 (cdr x277))) (let ((i w278)) (if (null? x279) (progn (let ((res (gensym "res"))) (quasiquote (let (((unquote res) ((unquote f) (unquote v)))) (if (unquote res) (match-one (unquote abs) (car (unquote res)) (unquote p) (unquote g+s) (match-one (cdr (unquote res)) (unquote l) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))))) (fail219)))) (fail219)))) (fail219)))) (fail219)))) (fail219))) (fail219)))) (fail219)))) (fail219)) (fail219))) (fail219))) (fail219))) (fail219)))) (fail219)))) (fail219)))))) (if (cons? v196) (let ((w280 (car v196)) (x281 (cdr v196))) (let ((abs w280)) (if (cons? x281) (let ((w282 (car x281)) (x283 (cdr x281))) (let ((v w282)) (if (cons? x283) (let ((w284 (car x283)) (x285 (cdr x283))) (if (cons? w284) (let ((w286 (car w284)) (x287 (cdr w284))) (if (binary= w286 (quote =)) (if (cons? x287) (let ((w288 (car x287)) (x289 (cdr x287))) (let ((proc w288)) (if (cons? x289) (let ((w290 (car x289)) (x291 (cdr x289))) (let ((p w290)) (if (null? x291) (if (cons? x285) (let ((w292 (car x285)) (x293 (cdr x285))) (let ((g+s w292)) (let ((x x293)) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote proc) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) () (unquote-splicing x))))))))) (fail218)) (fail218)))) (fail218)))) (fail218)) (fail218))) (fail218))) (fail218)))) (fail218)))) (fail218)))))) (if (cons? v196) (let ((w294 (car v196)) (x295 (cdr v196))) (let ((abs w294)) (if (cons? x295) (let ((w296 (car x295)) (x297 (cdr x295))) (let ((v w296)) (if (cons? x297) (let ((w298 (car x297)) (x299 (cdr x297))) (if (cons? w298) (let ((w300 (car w298)) (x301 (cdr w298))) (if (binary= w300 (quote =)) (if (cons? x301) (let ((w302 (car x301)) (x303 (cdr x301))) (let ((g w302)) (if (cons? x303) (let ((w304 (car x303)) (x305 (cdr x303))) (let ((s w304)) (if (cons? x305) (let ((w306 (car x305)) (x307 (cdr x305))) (let ((p w306)) (if (null? x307) (if (cons? x299) (let ((w308 (car x299)) (x309 (cdr x299))) (let ((g+s w308)) (if (cons? x309) (let ((w310 (car x309)) (x311 (cdr x309))) (let ((sk w310)) (if (cons? x311) (let ((w312 (car x311)) (x313 (cdr x311))) (let ((fk w312)) (if (cons? x313) (let ((w314 (car x313)) (x315 (cdr x313))) (let ((i w314)) (if (null? x315) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote g) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) (((unquote g) (unquote v)) ((unquote s) (unquote v))) (unquote sk) (unquote fk) (unquote i)))))) (fail217)))) (fail217)))) (fail217)))) (fail217)))) (fail217)) (fail217)))) (fail217)))) (fail217)))) (fail217)) (fail217))) (fail217))) (fail217)))) (fail217)))) (fail217)))))) (if (cons? v196) (let ((w316 (car v196)) (x317 (cdr v196))) (let ((abs w316)) (if (cons? x317) (let ((w318 (car x317)) (x319 (cdr x317))) (let ((v w318)) (if (cons? x319) (let ((w320 (car x319)) (x321 (cdr x319))) (if (cons? w320) (let ((w322 (car w320)) (x323 (cdr w320))) (if (binary= w322 (quote =)) (if (cons? x323) (let ((w324 (car x323)) (x325 (cdr x323))) (if (binary= w324 0) (if (cons? x325) (let ((w326 (car x325)) (x327 (cdr x325))) (let ((m w326)) (if (cons? x327) (let ((w328 (car x327)) (x329 (cdr x327))) (let ((p w328)) (if (null? x329) (if (cons? x321) (let ((w330 (car x321)) (x331 (cdr x321))) (let ((g+s w330)) (if (cons? x331) (let ((w332 (car x331)) (x333 (cdr x331))) (let ((sk w332)) (if (cons? x333) (let ((w334 (car x333)) (x335 (cdr x333))) (let ((fk w334)) (if (cons? x335) (let ((w336 (car x335)) (x337 (cdr x335))) (let ((i w336)) (if (null? x337) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) (struct-ref (unquote v) (unquote m)))) (match-one (unquote abs) (unquote w) (unquote p) ((struct-ref (unquote v) (unquote m)) (struct-setq (unquote v) (unquote m))) (unquote sk) (unquote fk) (unquote i)))))) (fail216)))) (fail216)))) (fail216)))) (fail216)))) (fail216)) (fail216)))) (fail216)))) (fail216)) (fail216))) (fail216)) (fail216))) (fail216))) (fail216)))) (fail216)))) (fail216)))))) (if (cons? v196) (let ((w338 (car v196)) (x339 (cdr v196))) (let ((abs w338)) (if (cons? x339) (let ((w340 (car x339)) (x341 (cdr x339))) (let ((v w340)) (if (cons? x341) (let ((w342 (car x341)) (x343 (cdr x341))) (if (cons? w342) (let ((w344 (car w342)) (x345 (cdr w342))) (if (binary= w344 (quote $)) (if (cons? x345) (let ((w346 (car x345)) (x347 (cdr x345))) (let ((nn w346)) (let ((p x347)) (if (list? p) (if (cons? x343) (let ((w351 (car x343)) (x352 (cdr x343))) (let ((g+s w351)) (if (cons? x352) (let ((w353 (car x352)) (x354 (cdr x352))) (let ((sk w353)) (if (cons? x354) (let ((w355 (car x354)) (x356 (cdr x354))) (let ((fk w355)) (if (cons? x356) (let ((w357 (car x356)) (x358 (cdr x356))) (let ((i w357)) (if (null? x358) (progn (quasiquote (if ((unquote nn) (unquote v)) (match-$ (unquote abs) (and) 0 (unquote p) (unquote v) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))) (fail215)))) (fail215)))) (fail215)))) (fail215)))) (fail215)) (fail215))))) (fail215)) (fail215))) (fail215))) (fail215)))) (fail215)))) (fail215)))))) (if (cons? v196) (let ((w359 (car v196)) (x360 (cdr v196))) (let ((abs w359)) (if (cons? x360) (let ((w361 (car x360)) (x362 (cdr x360))) (let ((v w361)) (if (cons? x362) (let ((w363 (car x362)) (x364 (cdr x362))) (if (cons? w363) (let ((w365 (car w363)) (x366 (cdr w363))) (if (binary= w365 (quote $)) (if (cons? x366) (let ((w367 (car x366)) (x368 (cdr x366))) (let ((n w367)) (if (null? x368) (if (cons? x364) (let ((w369 (car x364)) (x370 (cdr x364))) (let ((g-s w369)) (if (cons? x370) (let ((w371 (car x370)) (x372 (cdr x370))) (let ((sk w371)) (if (cons? x372) (let ((w373 (car x372)) (x374 (cdr x372))) (let ((fk w373)) (if (cons? x374) (let ((w375 (car x374)) (x376 (cdr x374))) (let ((i w375)) (if (null? x376) (progn (quasiquote (if ((unquote n) (unquote v)) (insert-abs (unquote abs) (unquote sk)) (insert-abs (unquote abs) (unquote fk))))) (fail214)))) (fail214)))) (fail214)))) (fail214)))) (fail214)) (fail214)))) (fail214)) (fail214))) (fail214))) (fail214)))) (fail214)))) (fail214)))))) (if (cons? v196) (let ((w377 (car v196)) (x378 (cdr v196))) (let ((abs w377)) (if (cons? x378) (let ((w379 (car x378)) (x380 (cdr x378))) (let ((v w379)) (if (cons? x380) (let ((w381 (car x380)) (x382 (cdr x380))) (if (cons? w381) (let ((w383 (car w381)) (x384 (cdr w381))) (if (binary= w383 (quote ?)) (if (cons? x384) (let ((w385 (car x384)) (x386 (cdr x384))) (let ((pred w385)) (let ((p x386)) (if (cons? x382) (let ((w387 (car x382)) (x388 (cdr x382))) (let ((g+s w387)) (if (cons? x388) (let ((w389 (car x388)) (x390 (cdr x388))) (let ((sk w389)) (if (cons? x390) (let ((w391 (car x390)) (x392 (cdr x390))) (let ((fk w391)) (if (cons? x392) (let ((w393 (car x392)) (x394 (cdr x392))) (let ((i w393)) (if (null? x394) (progn (quasiquote (if ((unquote pred) (unquote v)) (match-one (unquote abs) (unquote v) (and (unquote-splicing p)) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))) (fail213)))) (fail213)))) (fail213)))) (fail213)))) (fail213))))) (fail213)) (fail213))) (fail213))) (fail213)))) (fail213)))) (fail213)))))) (if (cons? v196) (let ((w395 (car v196)) (x396 (cdr v196))) (let ((abs w395)) (if (cons? x396) (let ((w397 (car x396)) (x398 (cdr x396))) (let ((v w397)) (if (cons? x398) (let ((w399 (car x398)) (x400 (cdr x398))) (if (cons? w399) (let ((w401 (car w399)) (x402 (cdr w399))) (if (binary= w401 (quote set)) (if (cons? x402) (let ((w403 (car x402)) (x404 (cdr x402))) (let ((setter w403)) (if (null? x404) (if (cons? x400) (let ((w405 (car x400)) (x406 (cdr x400))) (if (cons? w405) (let ((w407 (car w405)) (x408 (cdr w405))) (let ((g w407)) (if (cons? x408) (let ((w409 (car x408)) (x410 (cdr x408))) (let ((s w409)) (if (list? s) (if (null? x410) (if (cons? x406) (let ((w414 (car x406)) (x415 (cdr x406))) (let ((sk w414)) (if (list? sk) (if (cons? x415) (let ((w419 (car x415)) (x420 (cdr x415))) (let ((fk w419)) (if (cons? x420) (let ((w421 (car x420)) (x422 (cdr x420))) (let ((i w421)) (if (null? x422) (progn (let ((x (gensym "x"))) (quasiquote (let (((unquote setter) (lambda ((unquote x)) ((unquote-splicing s) (unquote x))))) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))))) (fail212)))) (fail212)))) (fail212)) (fail212)))) (fail212)) (fail212)) (fail212)))) (fail212)))) (fail212))) (fail212)) (fail212)))) (fail212)) (fail212))) (fail212))) (fail212)))) (fail212)))) (fail212)))))) (if (cons? v196) (let ((w423 (car v196)) (x424 (cdr v196))) (let ((abs w423)) (if (cons? x424) (let ((w425 (car x424)) (x426 (cdr x424))) (let ((v w425)) (if (cons? x426) (let ((w427 (car x426)) (x428 (cdr x426))) (if (cons? w427) (let ((w429 (car w427)) (x430 (cdr w427))) (if (binary= w429 (quote get)) (if (cons? x430) (let ((w431 (car x430)) (x432 (cdr x430))) (let ((getter w431)) (if (null? x432) (if (cons? x428) (let ((w433 (car x428)) (x434 (cdr x428))) (if (cons? w433) (let ((w435 (car w433)) (x436 (cdr w433))) (let ((g w435)) (if (cons? x436) (let ((w437 (car x436)) (x438 (cdr x436))) (let ((s w437)) (if (null? x438) (if (cons? x434) (let ((w439 (car x434)) (x440 (cdr x434))) (let ((sk w439)) (if (list? sk) (if (cons? x440) (let ((w444 (car x440)) (x445 (cdr x440))) (let ((fk w444)) (if (cons? x445) (let ((w446 (car x445)) (x447 (cdr x445))) (let ((i w446)) (if (null? x447) (progn (quasiquote (let (((unquote getter) (lambda () (unquote g)))) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))))) (fail211)))) (fail211)))) (fail211)) (fail211)))) (fail211)) (fail211)))) (fail211)))) (fail211))) (fail211)) (fail211)))) (fail211)) (fail211))) (fail211))) (fail211)))) (fail211)))) (fail211)))))) (if (cons? v196) (let ((w448 (car v196)) (x449 (cdr v196))) (let ((abs w448)) (if (cons? x449) (let ((w450 (car x449)) (x451 (cdr x449))) (let ((v w450)) (if (cons? x451) (let ((w452 (car x451)) (x453 (cdr x451))) (if (cons? w452) (let ((w454 (car w452)) (x455 (cdr w452))) (if (binary= w454 (quote not)) (if (cons? x455) (let ((w456 (car x455)) (x457 (cdr x455))) (let ((p w456)) (if (null? x457) (if (cons? x453) (let ((w458 (car x453)) (x459 (cdr x453))) (let ((g+s w458)) (if (cons? x459) (let ((w460 (car x459)) (x461 (cdr x459))) (let ((sk w460)) (if (list? sk) (if (cons? x461) (let ((w465 (car x461)) (x466 (cdr x461))) (if (cons? w465) (let ((w467 (car w465)) (x468 (cdr w465))) (let ((fk w467)) (let ((fkk x468)) (if (list? fkk) (if (cons? x466) (let ((w472 (car x466)) (x473 (cdr x466))) (let ((i w472)) (if (null? x473) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-drop-ids ((unquote fk) (unquote abs) (unquote-splicing fkk))) ((unquote-splicing sk) i) i))) (fail210)))) (fail210)) (fail210))))) (fail210))) (fail210)) (fail210)))) (fail210)))) (fail210)) (fail210)))) (fail210)) (fail210))) (fail210))) (fail210)))) (fail210)))) (fail210)))))) (if (cons? v196) (let ((w474 (car v196)) (x475 (cdr v196))) (let ((abs w474)) (if (cons? x475) (let ((w476 (car x475)) (x477 (cdr x475))) (let ((v w476)) (if (cons? x477) (let ((w478 (car x477)) (x479 (cdr x477))) (if (cons? w478) (let ((w480 (car w478)) (x481 (cdr w478))) (if (binary= w480 (quote cond)) (if (cons? x481) (let ((w482 (car x481)) (x483 (cdr x481))) (let ((p w482)) (let ((ps x483)) (if (list? ps) (if (cons? x479) (let ((w487 (car x479)) (x488 (cdr x479))) (let ((g+s w487)) (if (cons? x488) (let ((w489 (car x488)) (x490 (cdr x488))) (let ((sk w489)) (if (cons? x490) (let ((w491 (car x490)) (x492 (cdr x490))) (let ((fk w491)) (if (cons? x492) (let ((w493 (car x492)) (x494 (cdr x492))) (let ((i w493)) (if (null? x494) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (abs-drop (match-one (unquote abs) (unquote v) (cond (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i)))) (fail209)))) (fail209)))) (fail209)))) (fail209)))) (fail209)) (fail209))))) (fail209)) (fail209))) (fail209))) (fail209)))) (fail209)))) (fail209)))))) (if (cons? v196) (let ((w495 (car v196)) (x496 (cdr v196))) (let ((abs w495)) (if (cons? x496) (let ((w497 (car x496)) (x498 (cdr x496))) (let ((v w497)) (if (cons? x498) (let ((w499 (car x498)) (x500 (cdr x498))) (if (cons? w499) (let ((w501 (car w499)) (x502 (cdr w499))) (if (binary= w501 (quote cond)) (if (cons? x502) (let ((w503 (car x502)) (x504 (cdr x502))) (let ((p w503)) (if (null? x504) (let ((x x500)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail208)))) (fail208)) (fail208))) (fail208))) (fail208)))) (fail208)))) (fail208)))))) (if (cons? v196) (let ((w505 (car v196)) (x506 (cdr v196))) (let ((abs w505)) (if (cons? x506) (let ((w507 (car x506)) (x508 (cdr x506))) (let ((v w507)) (if (cons? x508) (let ((w509 (car x508)) (x510 (cdr x508))) (if (cons? w509) (let ((w511 (car w509)) (x512 (cdr w509))) (if (binary= w511 (quote cond)) (if (null? x512) (if (cons? x510) (let ((w513 (car x510)) (x514 (cdr x510))) (let ((g+s w513)) (if (cons? x514) (let ((w515 (car x514)) (x516 (cdr x514))) (let ((sk w515)) (if (cons? x516) (let ((w517 (car x516)) (x518 (cdr x516))) (let ((fk w517)) (if (cons? x518) (let ((w519 (car x518)) (x520 (cdr x518))) (let ((i w519)) (if (null? x520) (progn (quasiquote (insert-abs (unquote abs) (unquote fk)))) (fail207)))) (fail207)))) (fail207)))) (fail207)))) (fail207)) (fail207)) (fail207))) (fail207))) (fail207)))) (fail207)))) (fail207)))))) (if (cons? v196) (let ((w521 (car v196)) (x522 (cdr v196))) (let ((abs w521)) (if (cons? x522) (let ((w523 (car x522)) (x524 (cdr x522))) (let ((v w523)) (if (cons? x524) (let ((w525 (car x524)) (x526 (cdr x524))) (if (cons? w525) (let ((w527 (car w525)) (x528 (cdr w525))) (if (binary= w527 (quote or)) (let ((p x528)) (if (list? p) (if (cons? x526) (let ((w532 (car x526)) (x533 (cdr x526))) (let ((g+s w532)) (if (cons? x533) (let ((w534 (car x533)) (x535 (cdr x533))) (let ((sk w534)) (if (cons? x535) (let ((w536 (car x535)) (x537 (cdr x535))) (let ((fk w536)) (if (cons? x537) (let ((w538 (car x537)) (x539 (cdr x537))) (let ((i w538)) (if (null? x539) (progn (quasiquote (match-extract-vars (unquote abs) (or (unquote-splicing p)) (abs-drop (match-gen-or (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail206)))) (fail206)))) (fail206)))) (fail206)))) (fail206)) (fail206))) (fail206))) (fail206))) (fail206)))) (fail206)))) (fail206)))))) (if (cons? v196) (let ((w540 (car v196)) (x541 (cdr v196))) (let ((abs w540)) (if (cons? x541) (let ((w542 (car x541)) (x543 (cdr x541))) (let ((v w542)) (if (cons? x543) (let ((w544 (car x543)) (x545 (cdr x543))) (if (cons? w544) (let ((w546 (car w544)) (x547 (cdr w544))) (if (binary= w546 (quote or)) (if (cons? x547) (let ((w548 (car x547)) (x549 (cdr x547))) (let ((p w548)) (if (null? x549) (let ((x x545)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail205)))) (fail205)) (fail205))) (fail205))) (fail205)))) (fail205)))) (fail205)))))) (if (cons? v196) (let ((w550 (car v196)) (x551 (cdr v196))) (let ((abs w550)) (if (cons? x551) (let ((w552 (car x551)) (x553 (cdr x551))) (let ((v w552)) (if (cons? x553) (let ((w554 (car x553)) (x555 (cdr x553))) (if (cons? w554) (let ((w556 (car w554)) (x557 (cdr w554))) (if (binary= w556 (quote or)) (if (null? x557) (if (cons? x555) (let ((w558 (car x555)) (x559 (cdr x555))) (let ((g+s w558)) (if (cons? x559) (let ((w560 (car x559)) (x561 (cdr x559))) (let ((sk w560)) (if (cons? x561) (let ((w562 (car x561)) (x563 (cdr x561))) (let ((fk w562)) (if (cons? x563) (let ((w564 (car x563)) (x565 (cdr x563))) (let ((i w564)) (if (null? x565) (progn (quasiquote (insert-abs (unquote abs) (unquote fk)))) (fail204)))) (fail204)))) (fail204)))) (fail204)))) (fail204)) (fail204)) (fail204))) (fail204))) (fail204)))) (fail204)))) (fail204)))))) (if (cons? v196) (let ((w566 (car v196)) (x567 (cdr v196))) (let ((abs w566)) (if (cons? x567) (let ((w568 (car x567)) (x569 (cdr x567))) (let ((v w568)) (if (cons? x569) (let ((w570 (car x569)) (x571 (cdr x569))) (if (cons? w570) (let ((w572 (car w570)) (x573 (cdr w570))) (if (binary= w572 (quote and)) (if (cons? x573) (let ((w574 (car x573)) (x575 (cdr x573))) (let ((p w574)) (let ((q x575)) (if (list? q) (if (cons? x571) (let ((w579 (car x571)) (x580 (cdr x571))) (let ((g+s w579)) (if (cons? x580) (let ((w581 (car x580)) (x582 (cdr x580))) (let ((sk w581)) (if (cons? x582) (let ((w583 (car x582)) (x584 (cdr x582))) (let ((fk w583)) (if (cons? x584) (let ((w585 (car x584)) (x586 (cdr x584))) (let ((i w585)) (if (null? x586) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-one (unquote v) (and (unquote-splicing q)) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)))) (fail203)))) (fail203)))) (fail203)))) (fail203)))) (fail203)) (fail203))))) (fail203)) (fail203))) (fail203))) (fail203)))) (fail203)))) (fail203)))))) (if (cons? v196) (let ((w587 (car v196)) (x588 (cdr v196))) (let ((abs w587)) (if (cons? x588) (let ((w589 (car x588)) (x590 (cdr x588))) (let ((v w589)) (if (cons? x590) (let ((w591 (car x590)) (x592 (cdr x590))) (if (cons? w591) (let ((w593 (car w591)) (x594 (cdr w591))) (if (binary= w593 (quote and)) (if (null? x594) (if (cons? x592) (let ((w595 (car x592)) (x596 (cdr x592))) (let ((g+s w595)) (if (cons? x596) (let ((w597 (car x596)) (x598 (cdr x596))) (let ((sk w597)) (if (list? sk) (if (cons? x598) (let ((w602 (car x598)) (x603 (cdr x598))) (let ((fk w602)) (if (cons? x603) (let ((w604 (car x603)) (x605 (cdr x603))) (let ((i w604)) (if (null? x605) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail202)))) (fail202)))) (fail202)) (fail202)))) (fail202)))) (fail202)) (fail202)) (fail202))) (fail202))) (fail202)))) (fail202)))) (fail202)))))) (if (cons? v196) (let ((w606 (car v196)) (x607 (cdr v196))) (let ((abs w606)) (if (cons? x607) (let ((w608 (car x607)) (x609 (cdr x607))) (let ((v w608)) (if (cons? x609) (let ((w610 (car x609)) (x611 (cdr x609))) (if (cons? w610) (let ((w612 (car w610)) (x613 (cdr w610))) (if (binary= w612 (quote quasiquote)) (if (cons? x613) (let ((w614 (car x613)) (x615 (cdr x613))) (let ((p w614)) (if (null? x615) (let ((x x611)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail201)))) (fail201)) (fail201))) (fail201))) (fail201)))) (fail201)))) (fail201)))))) (if (cons? v196) (let ((w616 (car v196)) (x617 (cdr v196))) (let ((a w616)) (if (cons? w616) (let ((w618 (car w616)) (x619 (cdr w616))) (let ((abs w618)) (if (cons? x619) (let ((w620 (car x619)) (x621 (cdr x619))) (if (cons? w620) (let ((w622 (car w620)) (x623 (cdr w620))) (if (cons? w622) (let ((w624 (car w622)) (x625 (cdr w622))) (let ((ccar w624)) (if (cons? x625) (let ((w626 (car x625)) (x627 (cdr x625))) (let ((ccdr w626)) (if (cons? x627) (let ((w628 (car x627)) (x629 (cdr x627))) (let ((pcons? w628)) (if (cons? x629) (let ((w630 (car x629)) (x631 (cdr x629))) (let ((qnull? w630)) (if (cons? x631) (let ((w632 (car x631)) (x633 (cdr x631))) (let ((qbinary= w632)) (if (null? x633) (if (cons? x623) (let ((w634 (car x623)) (x635 (cdr x623))) (let ((rr w634)) (if (null? x635) (if (null? x621) (if (cons? x617) (let ((w636 (car x617)) (x637 (cdr x617))) (let ((v w636)) (if (cons? x637) (let ((w638 (car x637)) (x639 (cdr x637))) (if (cons? w638) (let ((w640 (car w638)) (x641 (cdr w638))) (if (cons? w640) (let ((w642 (car w640)) (x643 (cdr w640))) (if (binary= w642 (quote unquote-splicing)) (if (cons? x643) (let ((w644 (car x643)) (x645 (cdr x643))) (let ((p w644)) (if (null? x645) (let ((ps x641)) (if (cons? x639) (let ((w646 (car x639)) (x647 (cdr x639))) (let ((g+s w646)) (if (cons? x647) (let ((w648 (car x647)) (x649 (cdr x647))) (let ((sk w648)) (if (cons? x649) (let ((w650 (car x649)) (x651 (cdr x649))) (let ((fk w650)) (if (cons? x651) (let ((w652 (car x651)) (x653 (cdr x651))) (let ((i w652)) (if (null? x653) (progn (let ((loop (gensym "loop")) (vv (gensym "v")) (pp (gensym "p"))) (quasiquote (recur (unquote loop) (((unquote vv) (unquote v)) ((unquote pp) (unquote p))) (if (cons? (unquote pp)) (if (and ((unquote pcons?) (unquote vv)) ((unquote qbinary=) ((unquote ccar) (unquote vv)) (car (unquote pp)))) ((unquote loop) ((unquote ccdr) (unquote vv)) (cdr (unquote pp))) (insert-abs (unquote a) (unquote fk))) (match-one (unquote a) (unquote vv) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))))) (fail200)))) (fail200)))) (fail200)))) (fail200)))) (fail200))) (fail200)))) (fail200)) (fail200))) (fail200))) (fail200))) (fail200)))) (fail200)) (fail200)) (fail200)))) (fail200)) (fail200)))) (fail200)))) (fail200)))) (fail200)))) (fail200)))) (fail200))) (fail200))) (fail200)))) (fail200)))) (fail200)))))) (if (cons? v196) (let ((w654 (car v196)) (x655 (cdr v196))) (let ((a w654)) (if (cons? w654) (let ((w656 (car w654)) (x657 (cdr w654))) (let ((qabs w656)) (if (cons? x657) (let ((w658 (car x657)) (x659 (cdr x657))) (if (cons? w658) (let ((w660 (car w658)) (x661 (cdr w658))) (if (cons? w660) (let ((w662 (car w660)) (x663 (cdr w660))) (let ((qcar w662)) (if (cons? x663) (let ((w664 (car x663)) (x665 (cdr x663))) (let ((qcdr w664)) (if (cons? x665) (let ((w666 (car x665)) (x667 (cdr x665))) (let ((qcons? w666)) (if (cons? x667) (let ((w668 (car x667)) (x669 (cdr x667))) (let ((qnull? w668)) (if (cons? x669) (let ((w670 (car x669)) (x671 (cdr x669))) (let ((qbinary= w670)) (if (null? x671) (if (cons? x661) (let ((w672 (car x661)) (x673 (cdr x661))) (let ((pp w672)) (if (null? x673) (if (null? x659) (if (cons? x655) (let ((w674 (car x655)) (x675 (cdr x655))) (let ((v w674)) (if (cons? x675) (let ((w676 (car x675)) (x677 (cdr x675))) (if (cons? w676) (let ((w678 (car w676)) (x679 (cdr w676))) (if (binary= w678 (quote unquote)) (if (cons? x679) (let ((w680 (car x679)) (x681 (cdr x679))) (let ((p w680)) (if (null? x681) (if (cons? x677) (let ((w682 (car x677)) (x683 (cdr x677))) (let ((g+s w682)) (if (cons? x683) (let ((w684 (car x683)) (x685 (cdr x683))) (let ((sk w684)) (if (list? sk) (if (cons? x685) (let ((w689 (car x685)) (x690 (cdr x685))) (let ((fk w689)) (if (cons? x690) (let ((w691 (car x690)) (x692 (cdr x690))) (let ((i w691)) (if (null? x692) (progn (quasiquote (if ((unquote qbinary=) (unquote v) (unquote p)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail199)))) (fail199)))) (fail199)) (fail199)))) (fail199)))) (fail199)) (fail199)))) (fail199)) (fail199))) (fail199))) (fail199)))) (fail199)) (fail199)) (fail199)))) (fail199)) (fail199)))) (fail199)))) (fail199)))) (fail199)))) (fail199)))) (fail199))) (fail199))) (fail199)))) (fail199)))) (fail199)))))) (if (cons? v196) (let ((w693 (car v196)) (x694 (cdr v196))) (let ((a w693)) (if (cons? w693) (let ((w695 (car w693)) (x696 (cdr w693))) (let ((qabs w695)) (if (cons? x696) (let ((w697 (car x696)) (x698 (cdr x696))) (if (cons? w697) (let ((w699 (car w697)) (x700 (cdr w697))) (if (cons? w699) (let ((w701 (car w699)) (x702 (cdr w699))) (let ((qcar w701)) (if (cons? x702) (let ((w703 (car x702)) (x704 (cdr x702))) (let ((qcdr w703)) (if (cons? x704) (let ((w705 (car x704)) (x706 (cdr x704))) (let ((qcons? w705)) (if (cons? x706) (let ((w707 (car x706)) (x708 (cdr x706))) (let ((qnull? w707)) (if (cons? x708) (let ((w709 (car x708)) (x710 (cdr x708))) (let ((qbinary= w709)) (if (null? x710) (if (cons? x700) (let ((w711 (car x700)) (x712 (cdr x700))) (let ((pp w711)) (if (null? x712) (if (null? x698) (if (cons? x694) (let ((w713 (car x694)) (x714 (cdr x694))) (let ((v w713)) (if (cons? x714) (let ((w715 (car x714)) (x716 (cdr x714))) (if (cons? w715) (let ((w717 (car w715)) (x718 (cdr w715))) (if (binary= w717 (quote quote)) (if (cons? x718) (let ((w719 (car x718)) (x720 (cdr x718))) (let ((p w719)) (if (null? x720) (if (cons? x716) (let ((w721 (car x716)) (x722 (cdr x716))) (let ((g+s w721)) (if (cons? x722) (let ((w723 (car x722)) (x724 (cdr x722))) (let ((sk w723)) (if (list? sk) (if (cons? x724) (let ((w728 (car x724)) (x729 (cdr x724))) (let ((fk w728)) (if (cons? x729) (let ((w730 (car x729)) (x731 (cdr x729))) (let ((i w730)) (if (null? x731) (progn (quasiquote (if ((unquote qbinary=) (unquote v) (quote (unquote p))) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail198)))) (fail198)))) (fail198)) (fail198)))) (fail198)))) (fail198)) (fail198)))) (fail198)) (fail198))) (fail198))) (fail198)))) (fail198)) (fail198)) (fail198)))) (fail198)) (fail198)))) (fail198)))) (fail198)))) (fail198)))) (fail198)))) (fail198))) (fail198))) (fail198)))) (fail198)))) (fail198)))))) (if (cons? v196) (let ((w732 (car v196)) (x733 (cdr v196))) (let ((a w732)) (if (cons? w732) (let ((w734 (car w732)) (x735 (cdr w732))) (let ((qabs w734)) (if (cons? x735) (let ((w736 (car x735)) (x737 (cdr x735))) (if (cons? w736) (let ((w738 (car w736)) (x739 (cdr w736))) (if (cons? w738) (let ((w740 (car w738)) (x741 (cdr w738))) (let ((qcar w740)) (if (cons? x741) (let ((w742 (car x741)) (x743 (cdr x741))) (let ((qcdr w742)) (if (cons? x743) (let ((w744 (car x743)) (x745 (cdr x743))) (let ((qcons? w744)) (if (cons? x745) (let ((w746 (car x745)) (x747 (cdr x745))) (let ((qnull? w746)) (if (cons? x747) (let ((w748 (car x747)) (x749 (cdr x747))) (let ((qbinary= w748)) (if (null? x749) (if (cons? x739) (let ((w750 (car x739)) (x751 (cdr x739))) (let ((pp w750)) (if (null? x751) (if (null? x737) (if (cons? x733) (let ((w752 (car x733)) (x753 (cdr x733))) (let ((v w752)) (if (cons? x753) (let ((w754 (car x753)) (x755 (cdr x753))) (if (null? w754) (if (cons? x755) (let ((w756 (car x755)) (x757 (cdr x755))) (let ((g+s w756)) (if (cons? x757) (let ((w758 (car x757)) (x759 (cdr x757))) (let ((sk w758)) (if (list? sk) (if (cons? x759) (let ((w763 (car x759)) (x764 (cdr x759))) (let ((fk w763)) (if (cons? x764) (let ((w765 (car x764)) (x766 (cdr x764))) (let ((i w765)) (if (null? x766) (progn (quasiquote (if ((unquote qnull?) (unquote v)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail197)))) (fail197)))) (fail197)) (fail197)))) (fail197)))) (fail197)) (fail197))) (fail197)))) (fail197)) (fail197)) (fail197)))) (fail197)) (fail197)))) (fail197)))) (fail197)))) (fail197)))) (fail197)))) (fail197))) (fail197))) (fail197)))) (fail197)))) (fail197))))) (defmacro match-gen-or x (let ((v767 x)) (let ((fail768 (lambda () (error <condition> "no matching pattern")))) (if (cons? v767) (let ((w769 (car v767)) (x770 (cdr v767))) (let ((abs w769)) (if (cons? x770) (let ((w771 (car x770)) (x772 (cdr x770))) (let ((v w771)) (if (cons? x772) (let ((w773 (car x772)) (x774 (cdr x772))) (let ((p w773)) (if (cons? x774) (let ((w775 (car x774)) (x776 (cdr x774))) (let ((g+s w775)) (if (cons? x776) (let ((w777 (car x776)) (x778 (cdr x776))) (let ((sk w777)) (if (list? sk) (if (cons? x778) (let ((w782 (car x778)) (x783 (cdr x778))) (let ((fk w782)) (if (cons? x783) (let ((w784 (car x783)) (x785 (cdr x783))) (let ((i w784)) (if (list? i) (if (cons? x785) (let ((w789 (car x785)) (x790 (cdr x785))) (letfuns ((loop (ls794 p-ls792 p-ls791) (if (null? ls794) (progn (let ((id-ls (reverse p-ls792)) (id (reverse p-ls791))) (if (null? x790) (progn (let ((sk2 (gensym "sk2"))) (quasiquote (let (((unquote sk2) (lambda (unquote id) (insert-abs (unquote abs) ((unquote-splicing sk) ((unquote-splicing i) (unquote-splicing id))))))) (match-gen-or-step (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-drop-ids ((unquote sk2) (unquote-splicing id))) (unquote fk) i))))) (fail768)))) (if (cons? ls794) (progn (let ((w795 (car ls794))) (if (cons? w795) (let ((w796 (car w795)) (x797 (cdr w795))) (let ((id w796)) (if (cons? x797) (let ((w798 (car x797)) (x799 (cdr x797))) (let ((id-ls w798)) (if (null? x799) (loop (cdr ls794) (cons id-ls p-ls792) (cons id p-ls791)) (fail768)))) (fail768)))) (fail768)))) (if else (progn (fail768)) (cond)))))) (loop w789 (quote ()) (quote ())))) (fail768)) (fail768)))) (fail768)))) (fail768)) (fail768)))) (fail768)))) (fail768)))) (fail768)))) (fail768)))) (fail768))))) (defmacro match-gen-or-step x (let ((v800 x)) (let ((fail801 (lambda () (let ((fail802 (lambda () (let ((fail803 (lambda () (error <condition> "no matching pattern")))) (if (cons? v800) (let ((w804 (car v800)) (x805 (cdr v800))) (let ((abs w804)) (if (cons? x805) (let ((w806 (car x805)) (x807 (cdr x805))) (let ((v w806)) (if (cons? x807) (let ((w808 (car x807)) (x809 (cdr x807))) (if (cons? w808) (let ((w810 (car w808)) (x811 (cdr w808))) (let ((p w810)) (let ((q x811)) (if (cons? x809) (let ((w812 (car x809)) (x813 (cdr x809))) (let ((g+s w812)) (if (cons? x813) (let ((w814 (car x813)) (x815 (cdr x813))) (let ((sk w814)) (if (cons? x815) (let ((w816 (car x815)) (x817 (cdr x815))) (let ((fk w816)) (if (cons? x817) (let ((w818 (car x817)) (x819 (cdr x817))) (let ((i w818)) (if (null? x819) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (match-gen-or-step (unquote v) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i)))) (fail803)))) (fail803)))) (fail803)))) (fail803)))) (fail803))))) (fail803))) (fail803)))) (fail803)))) (fail803)))))) (if (cons? v800) (let ((w820 (car v800)) (x821 (cdr v800))) (let ((abs w820)) (if (cons? x821) (let ((w822 (car x821)) (x823 (cdr x821))) (let ((v w822)) (if (cons? x823) (let ((w824 (car x823)) (x825 (cdr x823))) (if (cons? w824) (let ((w826 (car w824)) (x827 (cdr w824))) (let ((p w826)) (if (null? x827) (let ((x x825)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail802)))) (fail802))) (fail802)))) (fail802)))) (fail802)))))) (if (cons? v800) (let ((w828 (car v800)) (x829 (cdr v800))) (let ((abs w828)) (if (cons? x829) (let ((w830 (car x829)) (x831 (cdr x829))) (let ((v w830)) (if (cons? x831) (let ((w832 (car x831)) (x833 (cdr x831))) (if (null? w832) (if (cons? x833) (let ((w834 (car x833)) (x835 (cdr x833))) (let ((g+s w834)) (if (cons? x835) (let ((w836 (car x835)) (x837 (cdr x835))) (let ((sk w836)) (if (cons? x837) (let ((w838 (car x837)) (x839 (cdr x837))) (let ((fk w838)) (let ((x x839)) (progn (quasiquote (insert-abs (unquote abs) (unquote fk))))))) (fail801)))) (fail801)))) (fail801)) (fail801))) (fail801)))) (fail801)))) (fail801))))) (defmacro match-three x (let ((v840 x)) (let ((fail841 (lambda () (let ((fail842 (lambda () (let ((fail843 (lambda () (let ((fail844 (lambda () (let ((fail845 (lambda () (let ((fail846 (lambda () (let ((fail847 (lambda () (error <condition> "no matching pattern")))) (if (cons? v840) (let ((w848 (car v840)) (x849 (cdr v840))) (let ((a w848)) (if (cons? w848) (let ((w850 (car w848)) (x851 (cdr w848))) (let ((qabs w850)) (if (cons? x851) (let ((w852 (car x851)) (x853 (cdr x851))) (if (cons? w852) (let ((w854 (car w852)) (x855 (cdr w852))) (if (cons? w854) (let ((w856 (car w854)) (x857 (cdr w854))) (let ((qcar w856)) (if (cons? x857) (let ((w858 (car x857)) (x859 (cdr x857))) (let ((qcdr w858)) (if (cons? x859) (let ((w860 (car x859)) (x861 (cdr x859))) (let ((qcons? w860)) (if (cons? x861) (let ((w862 (car x861)) (x863 (cdr x861))) (let ((qnull? w862)) (if (cons? x863) (let ((w864 (car x863)) (x865 (cdr x863))) (let ((binary= w864)) (if (null? x865) (if (cons? x855) (let ((w866 (car x855)) (x867 (cdr x855))) (let ((qpp w866)) (if (null? x867) (if (null? x853) (if (cons? x849) (let ((w868 (car x849)) (x869 (cdr x849))) (let ((v w868)) (if (cons? x869) (let ((w870 (car x869)) (x871 (cdr x869))) (let ((x w870)) (if (cons? x871) (let ((w872 (car x871)) (x873 (cdr x871))) (let ((g+s w872)) (if (cons? x873) (let ((w874 (car x873)) (x875 (cdr x873))) (let ((sk w874)) (if (list? sk) (if (cons? x875) (let ((w879 (car x875)) (x880 (cdr x875))) (let ((fk w879)) (if (cons? x880) (let ((w881 (car x880)) (x882 (cdr x880))) (let ((id w881)) (if (list? id) (if (null? x882) (progn (if (if (symbol? x) (null? (member x id)) ()) (quasiquote (let (((unquote x) (unquote v))) (insert-abs (unquote a) ((unquote-splicing sk) ((unquote-splicing id) (unquote x)))))) (quasiquote (if ((unquote binary=) (unquote v) (unquote x)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote id))) (insert-abs (unquote a) (unquote fk)))))) (fail847)) (fail847)))) (fail847)))) (fail847)) (fail847)))) (fail847)))) (fail847)))) (fail847)))) (fail847)) (fail847)) (fail847)))) (fail847)) (fail847)))) (fail847)))) (fail847)))) (fail847)))) (fail847)))) (fail847))) (fail847))) (fail847)))) (fail847)))) (fail847)))))) (if (cons? v840) (let ((w886 (car v840)) (x887 (cdr v840))) (let ((abs w886)) (if (cons? x887) (let ((w888 (car x887)) (x889 (cdr x887))) (let ((v w888)) (if (cons? x889) (let ((w890 (car x889)) (x891 (cdr x889))) (if (binary= w890 (quote _)) (if (cons? x891) (let ((w892 (car x891)) (x893 (cdr x891))) (let ((g+s w892)) (if (cons? x893) (let ((w894 (car x893)) (x895 (cdr x893))) (let ((sk w894)) (if (list? sk) (if (cons? x895) (let ((w899 (car x895)) (x900 (cdr x895))) (let ((fk w899)) (if (cons? x900) (let ((w901 (car x900)) (x902 (cdr x900))) (let ((i w901)) (if (null? x902) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail846)))) (fail846)))) (fail846)) (fail846)))) (fail846)))) (fail846)) (fail846))) (fail846)))) (fail846)))) (fail846)))))) (if (cons? v840) (let ((w903 (car v840)) (x904 (cdr v840))) (let ((abs w903)) (if (cons? x904) (let ((w905 (car x904)) (x906 (cdr x904))) (let ((v w905)) (if (cons? x906) (let ((w907 (car x906)) (x908 (cdr x906))) (if (vector? w907) (let ((len909 (vector-size w907))) (if (>= len909 0) (letfuns ((loop911 (j912 p-ls910) (if (>= j912 len909) (let ((p (reverse p-ls910))) (if (cons? x908) (let ((w914 (car x908)) (x915 (cdr x908))) (let ((g+s w914)) (let ((x x915)) (progn (quasiquote (match-vector (unquote abs) (unquote v) 0 () (unquote p) (unquote-splicing x))))))) (fail845))) (let ((w913 (vector-ref w907 j912))) (let ((p w913)) (loop911 (+ j912 1) (cons p p-ls910))))))) (loop911 0 (quote ()))) (fail845))) (fail845))) (fail845)))) (fail845)))) (fail845)))))) (if (cons? v840) (let ((w916 (car v840)) (x917 (cdr v840))) (let ((a w916)) (if (cons? w916) (let ((w918 (car w916)) (x919 (cdr w916))) (let ((abs w918)) (if (cons? x919) (let ((w920 (car x919)) (x921 (cdr x919))) (if (cons? w920) (let ((w922 (car w920)) (x923 (cdr w920))) (if (cons? w922) (let ((w924 (car w922)) (x925 (cdr w922))) (let ((qcar w924)) (if (cons? x925) (let ((w926 (car x925)) (x927 (cdr x925))) (let ((qcdr w926)) (if (cons? x927) (let ((w928 (car x927)) (x929 (cdr x927))) (let ((qcons? w928)) (if (cons? x929) (let ((w930 (car x929)) (x931 (cdr x929))) (let ((qnull? w930)) (if (cons? x931) (let ((w932 (car x931)) (x933 (cdr x931))) (let ((qbinary= w932)) (if (null? x933) (if (cons? x923) (let ((w934 (car x923)) (x935 (cdr x923))) (let ((pp w934)) (if (null? x935) (if (null? x921) (if (cons? x917) (let ((w936 (car x917)) (x937 (cdr x917))) (let ((v w936)) (if (cons? x937) (let ((w938 (car x937)) (x939 (cdr x937))) (if (cons? w938) (let ((w940 (car w938)) (x941 (cdr w938))) (let ((p w940)) (let ((q x941)) (if (cons? x939) (let ((w942 (car x939)) (x943 (cdr x939))) (let ((g+s w942)) (if (cons? x943) (let ((w944 (car x943)) (x945 (cdr x943))) (let ((sk w944)) (if (cons? x945) (let ((w946 (car x945)) (x947 (cdr x945))) (let ((fk w946)) (if (cons? x947) (let ((w948 (car x947)) (x949 (cdr x947))) (let ((i w948)) (if (null? x949) (progn (let ((w (gensym "w")) (x (gensym "x"))) (quasiquote (if ((unquote qcons?) (unquote v)) (let (((unquote w) ((unquote qcar) (unquote v))) ((unquote x) ((unquote qcdr) (unquote v)))) (match-one (unquote a) (unquote w) (unquote p) (((unquote qcar) (unquote v)) ((setter car) (unquote v))) (match-one (unquote x) (unquote q) (((unquote qcdr) (unquote v)) ((setter cdr) (unquote v))) (unquote sk) (unquote fk)) (unquote fk) (unquote i))) (insert-abs (unquote a) (unquote fk)))))) (fail844)))) (fail844)))) (fail844)))) (fail844)))) (fail844))))) (fail844))) (fail844)))) (fail844)) (fail844)) (fail844)))) (fail844)) (fail844)))) (fail844)))) (fail844)))) (fail844)))) (fail844)))) (fail844))) (fail844))) (fail844)))) (fail844)))) (fail844)))))) (if (cons? v840) (let ((w950 (car v840)) (x951 (cdr v840))) (let ((abs w950)) (if (cons? x951) (let ((w952 (car x951)) (x953 (cdr x951))) (let ((v w952)) (if (cons? x953) (let ((w954 (car x953)) (x955 (cdr x953))) (if (cons? w954) (let ((w956 (car w954)) (x957 (cdr w954))) (let ((p w956)) (if (cons? x957) (let ((w958 (car x957)) (x959 (cdr x957))) (if (binary= w958 (quote ***)) (let ((q x959)) (if (cons? x955) (let ((w960 (car x955)) (x961 (cdr x955))) (let ((g+s w960)) (if (cons? x961) (let ((w962 (car x961)) (x963 (cdr x961))) (let ((sk w962)) (if (cons? x963) (let ((w964 (car x963)) (x965 (cdr x963))) (let ((fk w964)) (if (cons? x965) (let ((w966 (car x965)) (x967 (cdr x965))) (let ((i w966)) (if (null? x967) (progn (quasiquote (error <condition> (fmt "invalid use of *** ~a" ((unquote p) *** (unquote-splicing q)))))) (fail843)))) (fail843)))) (fail843)))) (fail843)))) (fail843))) (fail843))) (fail843)))) (fail843))) (fail843)))) (fail843)))) (fail843)))))) (if (cons? v840) (let ((w968 (car v840)) (x969 (cdr v840))) (let ((abs w968)) (if (cons? x969) (let ((w970 (car x969)) (x971 (cdr x969))) (let ((v w970)) (if (cons? x971) (let ((w972 (car x971)) (x973 (cdr x971))) (if (cons? w972) (let ((w974 (car w972)) (x975 (cdr w972))) (let ((p w974)) (if (cons? x975) (let ((w976 (car x975)) (x977 (cdr x975))) (if (binary= w976 (quote ***)) (if (cons? x977) (let ((w978 (car x977)) (x979 (cdr x977))) (let ((q w978)) (if (null? x979) (if (cons? x973) (let ((w980 (car x973)) (x981 (cdr x973))) (let ((g+s w980)) (if (cons? x981) (let ((w982 (car x981)) (x983 (cdr x981))) (let ((sk w982)) (if (cons? x983) (let ((w984 (car x983)) (x985 (cdr x983))) (let ((fk w984)) (if (cons? x985) (let ((w986 (car x985)) (x987 (cdr x985))) (let ((i w986)) (if (null? x987) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-gen-search (unquote v) (unquote p) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i) ()))) (fail842)))) (fail842)))) (fail842)))) (fail842)))) (fail842)) (fail842)))) (fail842)) (fail842))) (fail842)))) (fail842))) (fail842)))) (fail842)))) (fail842)))))) (if (cons? v840) (let ((w988 (car v840)) (x989 (cdr v840))) (let ((a w988)) (if (cons? w988) (let ((w990 (car w988)) (x991 (cdr w988))) (let ((abs w990)) (if (cons? x991) (let ((w992 (car x991)) (x993 (cdr x991))) (if (cons? w992) (let ((w994 (car w992)) (x995 (cdr w992))) (if (cons? w994) (let ((w996 (car w994)) (x997 (cdr w994))) (let ((qcar w996)) (if (cons? x997) (let ((w998 (car x997)) (x999 (cdr x997))) (let ((qcdr w998)) (if (cons? x999) (let ((w1000 (car x999)) (x1001 (cdr x999))) (let ((qcons? w1000)) (if (cons? x1001) (let ((w1002 (car x1001)) (x1003 (cdr x1001))) (let ((qnull? w1002)) (if (null? x1003) (if (cons? x995) (let ((w1004 (car x995)) (x1005 (cdr x995))) (let ((rr w1004)) (if (null? x1005) (if (null? x993) (if (cons? x989) (let ((w1006 (car x989)) (x1007 (cdr x989))) (let ((v w1006)) (if (cons? x1007) (let ((w1008 (car x1007)) (x1009 (cdr x1007))) (if (cons? w1008) (let ((w1010 (car w1008)) (x1011 (cdr w1008))) (let ((p w1010)) (if (null? x1011) (if (cons? x1009) (let ((w1012 (car x1009)) (x1013 (cdr x1009))) (let ((g+s w1012)) (if (cons? x1013) (let ((w1014 (car x1013)) (x1015 (cdr x1013))) (let ((sk w1014)) (if (cons? x1015) (let ((w1016 (car x1015)) (x1017 (cdr x1015))) (let ((fk w1016)) (if (cons? x1017) (let ((w1018 (car x1017)) (x1019 (cdr x1017))) (let ((i w1018)) (if (null? x1019) (progn (let ((w (gensym "w"))) (quasiquote (if (and ((unquote qcons?) (unquote v)) ((unquote qnull?) ((unquote qcdr) (unquote v)))) (let (((unquote w) ((unquote qcar) (unquote v)))) (match-one (unquote a) (unquote w) (unquote p) (((unquote qcar) (unquote v)) ((setter car) (unquote v))) (unquote sk) (unquote fk) (unquote i))) (unquote fk))))) (fail841)))) (fail841)))) (fail841)))) (fail841)))) (fail841)) (fail841)))) (fail841))) (fail841)))) (fail841)) (fail841)) (fail841)))) (fail841)) (fail841)))) (fail841)))) (fail841)))) (fail841)))) (fail841))) (fail841))) (fail841)))) (fail841)))) (fail841))))) (defmacro match-vector x (let ((v1020 x)) (let ((fail1021 (lambda () (let ((fail1022 (lambda () (let ((fail1023 (lambda () (error <condition> "no matching pattern")))) (let ((x v1020)) (progn (quasiquote (match-vector-two (unquote-splicing x))))))))) (if (cons? v1020) (let ((w1024 (car v1020)) (x1025 (cdr v1020))) (let ((abs w1024)) (if (cons? x1025) (let ((w1026 (car x1025)) (x1027 (cdr x1025))) (let ((v w1026)) (if (cons? x1027) (let ((w1028 (car x1027)) (x1029 (cdr x1027))) (let ((n w1028)) (if (cons? x1029) (let ((w1030 (car x1029)) (x1031 (cdr x1029))) (let ((pats w1030)) (if (cons? x1031) (let ((w1032 (car x1031)) (x1033 (cdr x1031))) (if (cons? w1032) (let ((w1034 (car w1032)) (x1035 (cdr w1032))) (let ((p w1034)) (if (cons? x1035) (let ((w1036 (car x1035)) (x1037 (cdr x1035))) (if (binary= w1036 (quote ___)) (if (null? x1037) (if (cons? x1033) (let ((w1038 (car x1033)) (x1039 (cdr x1033))) (let ((sk w1038)) (if (cons? x1039) (let ((w1040 (car x1039)) (x1041 (cdr x1039))) (let ((fk w1040)) (if (cons? x1041) (let ((w1042 (car x1041)) (x1043 (cdr x1041))) (let ((i w1042)) (if (null? x1043) (progn (quasiquote (match-gen-vector-ellipses (unquote abs) (unquote v) (unquote n) (unquote pats) (unquote p) (unquote sk) (unquote fk) (unquote i)))) (fail1022)))) (fail1022)))) (fail1022)))) (fail1022)) (fail1022)) (fail1022))) (fail1022)))) (fail1022))) (fail1022)))) (fail1022)))) (fail1022)))) (fail1022)))) (fail1022)))))) (if (cons? v1020) (let ((w1044 (car v1020)) (x1045 (cdr v1020))) (let ((abs w1044)) (if (cons? x1045) (let ((w1046 (car x1045)) (x1047 (cdr x1045))) (let ((v w1046)) (if (cons? x1047) (let ((w1048 (car x1047)) (x1049 (cdr x1047))) (let ((n w1048)) (if (cons? x1049) (let ((w1050 (car x1049)) (x1051 (cdr x1049))) (let ((pats w1050)) (if (cons? x1051) (let ((w1052 (car x1051)) (x1053 (cdr x1051))) (if (cons? w1052) (let ((w1054 (car w1052)) (x1055 (cdr w1052))) (let ((p w1054)) (if (cons? x1055) (let ((w1056 (car x1055)) (x1057 (cdr x1055))) (let ((q w1056)) (if (null? x1057) (let ((x x1053)) (progn (quasiquote (match-check-ellipse (unquote q) (match-gen-vector-ellipses (unquote abs) (unquote v) (unquote n) (unquote pats) (unquote p) (unquote-splicing x)) (match-vector-two (unquote abs) (unquote v) (unquote n) (unquote pats) ((unquote p) (unquote q)) (unquote-splicing x)))))) (fail1021)))) (fail1021)))) (fail1021))) (fail1021)))) (fail1021)))) (fail1021)))) (fail1021)))) (fail1021))))) (defmacro match-vector-two x (let ((v1058 x)) (let ((fail1059 (lambda () (let ((fail1060 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1058) (let ((w1061 (car v1058)) (x1062 (cdr v1058))) (let ((abs w1061)) (if (cons? x1062) (let ((w1063 (car x1062)) (x1064 (cdr x1062))) (let ((v w1063)) (if (cons? x1064) (let ((w1065 (car x1064)) (x1066 (cdr x1064))) (let ((n w1065)) (if (cons? x1066) (let ((w1067 (car x1066)) (x1068 (cdr x1066))) (let ((pats w1067)) (if (list? pats) (if (cons? x1068) (let ((w1072 (car x1068)) (x1073 (cdr x1068))) (if (cons? w1072) (let ((w1074 (car w1072)) (x1075 (cdr w1072))) (let ((p w1074)) (let ((q x1075)) (let ((x x1073)) (progn (quasiquote (match-vector (unquote abs) (unquote v) (+ (unquote n) 1) ((unquote-splicing pats) ((unquote p) (unquote n))) (unquote q) (unquote-splicing x)))))))) (fail1060))) (fail1060)) (fail1060)))) (fail1060)))) (fail1060)))) (fail1060)))) (fail1060)))))) (if (cons? v1058) (let ((w1076 (car v1058)) (x1077 (cdr v1058))) (let ((abs w1076)) (if (cons? x1077) (let ((w1078 (car x1077)) (x1079 (cdr x1077))) (let ((v w1078)) (if (cons? x1079) (let ((w1080 (car x1079)) (x1081 (cdr x1079))) (let ((n w1080)) (if (cons? x1081) (let ((w1082 (car x1081)) (x1083 (cdr x1081))) (let ((a w1082)) (letfuns ((loop (ls1087 p-ls1085 p-ls1084) (if (null? ls1087) (progn (let ((index (reverse p-ls1085)) (pat (reverse p-ls1084))) (if (cons? x1083) (let ((w1089 (car x1083)) (x1090 (cdr x1083))) (if (null? w1089) (if (cons? x1090) (let ((w1091 (car x1090)) (x1092 (cdr x1090))) (let ((sk w1091)) (if (cons? x1092) (let ((w1093 (car x1092)) (x1094 (cdr x1092))) (let ((fk w1093)) (if (cons? x1094) (let ((w1095 (car x1094)) (x1096 (cdr x1094))) (let ((i w1095)) (if (null? x1096) (progn (let ((len (gensym "len"))) (quasiquote (if (vector? (unquote v)) (let (((unquote len) (vector-size (unquote v)))) (if (= (unquote len) (unquote n)) (match-vector-step (unquote abs) (unquote v) (unquote a) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk)))) (insert-abs (unquote abs) (unquote fk)))))) (fail1059)))) (fail1059)))) (fail1059)))) (fail1059)) (fail1059))) (fail1059)))) (if (cons? ls1087) (progn (let ((w1088 (car ls1087))) (if (cons? w1088) (let ((w1097 (car w1088)) (x1098 (cdr w1088))) (let ((pat w1097)) (if (cons? x1098) (let ((w1099 (car x1098)) (x1100 (cdr x1098))) (let ((index w1099)) (if (null? x1100) (loop (cdr ls1087) (cons index p-ls1085) (cons pat p-ls1084)) (fail1059)))) (fail1059)))) (fail1059)))) (if else (progn (fail1059)) (cond)))))) (loop w1082 (quote ()) (quote ()))))) (fail1059)))) (fail1059)))) (fail1059)))) (fail1059))))) (defmacro match-vector-step x (let ((v1101 x)) (let ((fail1102 (lambda () (let ((fail1103 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1101) (let ((w1104 (car v1101)) (x1105 (cdr v1101))) (let ((abs w1104)) (if (cons? x1105) (let ((w1106 (car x1105)) (x1107 (cdr x1105))) (let ((v w1106)) (if (cons? x1107) (let ((w1108 (car x1107)) (x1109 (cdr x1107))) (if (cons? w1108) (let ((w1110 (car w1108)) (x1111 (cdr w1108))) (if (cons? w1110) (let ((w1112 (car w1110)) (x1113 (cdr w1110))) (let ((pat w1112)) (if (cons? x1113) (let ((w1114 (car x1113)) (x1115 (cdr x1113))) (let ((index w1114)) (if (null? x1115) (let ((rest x1111)) (if (cons? x1109) (let ((w1116 (car x1109)) (x1117 (cdr x1109))) (let ((sk w1116)) (if (cons? x1117) (let ((w1118 (car x1117)) (x1119 (cdr x1117))) (let ((fk w1118)) (if (cons? x1119) (let ((w1120 (car x1119)) (x1121 (cdr x1119))) (let ((i w1120)) (if (null? x1121) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) (vector-ref (unquote v) (unquote index)))) (match-one (unquote abs) (unquote w) (unquote pat) ((vector-ref (unquote v) (unquote index)) ((setter vector-ref) (unquote v) (unquote index))) (match-vector-step (unquote v) (unquote rest) (unquote sk) (unquote fk)) (unquote fk) (unquote i)))))) (fail1103)))) (fail1103)))) (fail1103)))) (fail1103))) (fail1103)))) (fail1103)))) (fail1103))) (fail1103))) (fail1103)))) (fail1103)))) (fail1103)))))) (if (cons? v1101) (let ((w1122 (car v1101)) (x1123 (cdr v1101))) (let ((abs w1122)) (if (cons? x1123) (let ((w1124 (car x1123)) (x1125 (cdr x1123))) (let ((v w1124)) (if (cons? x1125) (let ((w1126 (car x1125)) (x1127 (cdr x1125))) (if (null? w1126) (if (cons? x1127) (let ((w1128 (car x1127)) (x1129 (cdr x1127))) (let ((sk w1128)) (if (list? sk) (if (cons? x1129) (let ((w1133 (car x1129)) (x1134 (cdr x1129))) (let ((fk w1133)) (if (cons? x1134) (let ((w1135 (car x1134)) (x1136 (cdr x1134))) (let ((i w1135)) (if (null? x1136) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail1102)))) (fail1102)))) (fail1102)) (fail1102)))) (fail1102)) (fail1102))) (fail1102)))) (fail1102)))) (fail1102))))) (defmacro match-gen-vector-ellipses x (let ((v1137 x)) (let ((fail1138 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1137) (let ((w1139 (car v1137)) (x1140 (cdr v1137))) (let ((abs w1139)) (if (cons? x1140) (let ((w1141 (car x1140)) (x1142 (cdr x1140))) (let ((v w1141)) (if (cons? x1142) (let ((w1143 (car x1142)) (x1144 (cdr x1142))) (let ((n w1143)) (if (cons? x1144) (let ((w1145 (car x1144)) (x1146 (cdr x1144))) (let ((a w1145)) (letfuns ((loop (ls1150 p-ls1148 p-ls1147) (if (null? ls1150) (progn (let ((index (reverse p-ls1148)) (pat (reverse p-ls1147))) (if (cons? x1146) (let ((w1152 (car x1146)) (x1153 (cdr x1146))) (let ((p w1152)) (if (cons? x1153) (let ((w1154 (car x1153)) (x1155 (cdr x1153))) (let ((sk w1154)) (if (cons? x1155) (let ((w1156 (car x1155)) (x1157 (cdr x1155))) (let ((fk w1156)) (if (cons? x1157) (let ((w1158 (car x1157)) (x1159 (cdr x1157))) (let ((i w1158)) (if (null? x1159) (progn (let ((len (gensym "len"))) (quasiquote (if (vector? (unquote v)) (let (((unquote len) (vector-size (unquote v)))) (if (>= (unquote len) (unquote n)) (match-vector-step (unquote abs) (unquote v) (unquote a) (match-vector-tail (unquote v) (unquote p) (unquote n) (unquote len) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk)))) (insert-abs (unquote abs) (unquote fk)))))) (fail1138)))) (fail1138)))) (fail1138)))) (fail1138)))) (fail1138)))) (if (cons? ls1150) (progn (let ((w1151 (car ls1150))) (if (cons? w1151) (let ((w1160 (car w1151)) (x1161 (cdr w1151))) (let ((pat w1160)) (if (cons? x1161) (let ((w1162 (car x1161)) (x1163 (cdr x1161))) (let ((index w1162)) (if (null? x1163) (loop (cdr ls1150) (cons index p-ls1148) (cons pat p-ls1147)) (fail1138)))) (fail1138)))) (fail1138)))) (if else (progn (fail1138)) (cond)))))) (loop w1145 (quote ()) (quote ()))))) (fail1138)))) (fail1138)))) (fail1138)))) (fail1138))))) (defmacro match-vector-tail x (let ((v1164 x)) (let ((fail1165 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1164) (let ((w1166 (car v1164)) (x1167 (cdr v1164))) (let ((abs w1166)) (if (cons? x1167) (let ((w1168 (car x1167)) (x1169 (cdr x1167))) (let ((v w1168)) (if (cons? x1169) (let ((w1170 (car x1169)) (x1171 (cdr x1169))) (let ((p w1170)) (if (cons? x1171) (let ((w1172 (car x1171)) (x1173 (cdr x1171))) (let ((n w1172)) (if (cons? x1173) (let ((w1174 (car x1173)) (x1175 (cdr x1173))) (let ((len w1174)) (if (cons? x1175) (let ((w1176 (car x1175)) (x1177 (cdr x1175))) (let ((sk w1176)) (if (cons? x1177) (let ((w1178 (car x1177)) (x1179 (cdr x1177))) (let ((fk w1178)) (if (cons? x1179) (let ((w1180 (car x1179)) (x1181 (cdr x1179))) (let ((i w1180)) (if (null? x1181) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-vector-tail-two (unquote v) (unquote p) (unquote n) (unquote len) (unquote sk) (unquote fk) (unquote i)) (unquote i) ()))) (fail1165)))) (fail1165)))) (fail1165)))) (fail1165)))) (fail1165)))) (fail1165)))) (fail1165)))) (fail1165)))) (fail1165))))) (defmacro match-vector-tail-two x (let ((v1182 x)) (let ((fail1183 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1182) (let ((w1184 (car v1182)) (x1185 (cdr v1182))) (let ((abs w1184)) (if (cons? x1185) (let ((w1186 (car x1185)) (x1187 (cdr x1185))) (let ((v w1186)) (if (cons? x1187) (let ((w1188 (car x1187)) (x1189 (cdr x1187))) (let ((p w1188)) (if (cons? x1189) (let ((w1190 (car x1189)) (x1191 (cdr x1189))) (let ((n w1190)) (if (cons? x1191) (let ((w1192 (car x1191)) (x1193 (cdr x1191))) (let ((len w1192)) (if (cons? x1193) (let ((w1194 (car x1193)) (x1195 (cdr x1193))) (let ((sk w1194)) (if (list? sk) (if (cons? x1195) (let ((w1199 (car x1195)) (x1200 (cdr x1195))) (let ((fk w1199)) (if (cons? x1200) (let ((w1201 (car x1200)) (x1202 (cdr x1200))) (let ((i w1201)) (if (cons? x1202) (let ((w1203 (car x1202)) (x1204 (cdr x1202))) (letfuns ((loop (ls1208 p-ls1206 p-ls1205) (if (null? ls1208) (progn (let ((id-ls (reverse p-ls1206)) (id (reverse p-ls1205))) (if (null? x1204) (progn (let ((loop (gensym "loop")) (j (gensym "j")) (w (gensym "w"))) (quasiquote (recur (unquote loop) (((unquote j) (unquote n)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (if (>= (unquote j) (unquote len)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))) (let (((unquote w) (vector-ref (unquote v) (unquote j)))) (match-one (unquote abs) (unquote w) (unquote p) ((vector-ref (unquote v) (unquote j)) ((setter vector-ref) (unquote v) (unquote j))) (match-drop-ids ((unquote loop) (+ (unquote j) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))))))) (fail1183)))) (if (cons? ls1208) (progn (let ((w1209 (car ls1208))) (if (cons? w1209) (let ((w1210 (car w1209)) (x1211 (cdr w1209))) (let ((id w1210)) (if (cons? x1211) (let ((w1212 (car x1211)) (x1213 (cdr x1211))) (let ((id-ls w1212)) (if (null? x1213) (loop (cdr ls1208) (cons id-ls p-ls1206) (cons id p-ls1205)) (fail1183)))) (fail1183)))) (fail1183)))) (if else (progn (fail1183)) (cond)))))) (loop w1203 (quote ()) (quote ())))) (fail1183)))) (fail1183)))) (fail1183)) (fail1183)))) (fail1183)))) (fail1183)))) (fail1183)))) (fail1183)))) (fail1183)))) (fail1183))))) (defmacro match-abstract x (let ((v1214 x)) (let ((fail1215 (lambda () (let ((fail1216 (lambda () (let ((fail1217 (lambda () (let ((fail1218 (lambda () (let ((fail1219 (lambda () (let ((fail1220 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1214) (let ((w1221 (car v1214)) (x1222 (cdr v1214))) (if (null? w1221) (if (cons? x1222) (let ((w1223 (car x1222)) (x1224 (cdr x1222))) (let ((abs w1223)) (if (cons? x1224) (let ((w1225 (car x1224)) (x1226 (cdr x1224))) (let ((phd w1225)) (if (cons? x1226) (let ((w1227 (car x1226)) (x1228 (cdr x1226))) (let ((y w1227)) (if (cons? x1228) (let ((w1229 (car x1228)) (x1230 (cdr x1228))) (let ((p w1229)) (if (cons? x1230) (let ((w1231 (car x1230)) (x1232 (cdr x1230))) (let ((g+s w1231)) (if (cons? x1232) (let ((w1233 (car x1232)) (x1234 (cdr x1232))) (let ((sk w1233)) (if (cons? x1234) (let ((w1235 (car x1234)) (x1236 (cdr x1234))) (let ((fk w1235)) (if (cons? x1236) (let ((w1237 (car x1236)) (x1238 (cdr x1236))) (let ((i w1237)) (if (null? x1238) (progn (quasiquote (match-phd () (unquote phd) (unquote abs) (unquote y) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail1220)))) (fail1220)))) (fail1220)))) (fail1220)))) (fail1220)))) (fail1220)))) (fail1220)))) (fail1220)))) (fail1220)) (fail1220))) (fail1220)))))) (if (cons? v1214) (let ((w1239 (car v1214)) (x1240 (cdr v1214))) (let ((x w1239)) (if (list? x) (if (cons? x1240) (let ((w1244 (car x1240)) (x1245 (cdr x1240))) (if (cons? w1244) (let ((w1246 (car w1244)) (x1247 (cdr w1244))) (if (cons? w1246) (let ((w1248 (car w1246)) (x1249 (cdr w1246))) (let ((a w1248)) (if (cons? x1249) (let ((w1250 (car x1249)) (x1251 (cdr x1249))) (let ((aa w1250)) (let ((as x1251)) (if (list? as) (let ((us x1247)) (if (list? us) (if (cons? x1245) (let ((w1258 (car x1245)) (x1259 (cdr x1245))) (let ((phd w1258)) (if (cons? x1259) (let ((w1260 (car x1259)) (x1261 (cdr x1259))) (let ((y w1260)) (if (cons? x1261) (let ((w1262 (car x1261)) (x1263 (cdr x1261))) (if (cons? w1262) (let ((w1264 (car w1262)) (x1265 (cdr w1262))) (let ((b w1264)) (let ((ps x1265)) (if (cons? x1263) (let ((w1266 (car x1263)) (x1267 (cdr x1263))) (let ((g+s w1266)) (if (cons? x1267) (let ((w1268 (car x1267)) (x1269 (cdr x1267))) (let ((sk w1268)) (if (cons? x1269) (let ((w1270 (car x1269)) (x1271 (cdr x1269))) (let ((fk w1270)) (if (cons? x1271) (let ((w1272 (car x1271)) (x1273 (cdr x1271))) (let ((i w1272)) (if (null? x1273) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) ((unquote a) (unquote y)))) (if (unquote ret) (let (((unquote aa) (car (unquote ret)))) (match-one ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) ((unquote aa) (unquote-splicing i)))) (insert-abs ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a) (unquote aa) (unquote-splicing as)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) ((unquote b) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1219)))) (fail1219)))) (fail1219)))) (fail1219)))) (fail1219))))) (fail1219))) (fail1219)))) (fail1219)))) (fail1219)) (fail1219))) (fail1219))))) (fail1219)))) (fail1219))) (fail1219))) (fail1219)) (fail1219)))) (fail1219)))))) (if (cons? v1214) (let ((w1274 (car v1214)) (x1275 (cdr v1214))) (let ((x w1274)) (if (list? x) (if (cons? x1275) (let ((w1279 (car x1275)) (x1280 (cdr x1275))) (if (cons? w1279) (let ((w1281 (car w1279)) (x1282 (cdr w1279))) (if (cons? w1281) (let ((w1283 (car w1281)) (x1284 (cdr w1281))) (let ((a w1283)) (if (null? x1284) (let ((us x1282)) (if (list? us) (if (cons? x1280) (let ((w1288 (car x1280)) (x1289 (cdr x1280))) (let ((phd w1288)) (if (cons? x1289) (let ((w1290 (car x1289)) (x1291 (cdr x1289))) (let ((y w1290)) (if (cons? x1291) (let ((w1292 (car x1291)) (x1293 (cdr x1291))) (if (cons? w1292) (let ((w1294 (car w1292)) (x1295 (cdr w1292))) (let ((b w1294)) (let ((ps x1295)) (if (cons? x1293) (let ((w1296 (car x1293)) (x1297 (cdr x1293))) (let ((g+s w1296)) (if (cons? x1297) (let ((w1298 (car x1297)) (x1299 (cdr x1297))) (let ((sk w1298)) (if (cons? x1299) (let ((w1300 (car x1299)) (x1301 (cdr x1299))) (let ((fk w1300)) (if (cons? x1301) (let ((w1302 (car x1301)) (x1303 (cdr x1301))) (let ((i w1302)) (if (null? x1303) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) ((unquote a) (unquote y)))) (if (unquote ret) (match-one ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) ((unquote b) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1218)))) (fail1218)))) (fail1218)))) (fail1218)))) (fail1218))))) (fail1218))) (fail1218)))) (fail1218)))) (fail1218)) (fail1218))) (fail1218)))) (fail1218))) (fail1218))) (fail1218)) (fail1218)))) (fail1218)))))) (if (cons? v1214) (let ((w1304 (car v1214)) (x1305 (cdr v1214))) (let ((x w1304)) (if (list? x) (if (cons? x1305) (let ((w1309 (car x1305)) (x1310 (cdr x1305))) (if (cons? w1309) (let ((w1311 (car w1309)) (x1312 (cdr w1309))) (if (cons? w1311) (let ((w1313 (car w1311)) (x1314 (cdr w1311))) (let ((a w1313)) (if (cons? x1314) (let ((w1315 (car x1314)) (x1316 (cdr x1314))) (let ((aa w1315)) (let ((as x1316)) (if (list? as) (let ((us x1312)) (if (list? us) (if (cons? x1310) (let ((w1323 (car x1310)) (x1324 (cdr x1310))) (let ((phd w1323)) (if (cons? x1324) (let ((w1325 (car x1324)) (x1326 (cdr x1324))) (let ((y w1325)) (if (cons? x1326) (let ((w1327 (car x1326)) (x1328 (cdr x1326))) (if (cons? w1327) (let ((w1329 (car w1327)) (x1330 (cdr w1327))) (if (cons? w1329) (let ((w1331 (car w1329)) (x1332 (cdr w1329))) (let ((b w1331)) (let ((bs x1332)) (if (list? bs) (let ((ps x1330)) (if (cons? x1328) (let ((w1336 (car x1328)) (x1337 (cdr x1328))) (let ((g+s w1336)) (if (cons? x1337) (let ((w1338 (car x1337)) (x1339 (cdr x1337))) (let ((sk w1338)) (if (cons? x1339) (let ((w1340 (car x1339)) (x1341 (cdr x1339))) (let ((fk w1340)) (if (cons? x1341) (let ((w1342 (car x1341)) (x1343 (cdr x1341))) (let ((i w1342)) (if (null? x1343) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) (((unquote a) (unquote-splicing bs)) (unquote y)))) (if (unquote ret) (let (((unquote aa) (car (unquote ret)))) (match-one ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) ((unquote aa) (unquote-splicing i)))) (insert-abs ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a) (unquote aa) (unquote-splicing as)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) (((unquote b) (unquote-splicing bs)) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1217)))) (fail1217)))) (fail1217)))) (fail1217)))) (fail1217))) (fail1217))))) (fail1217))) (fail1217))) (fail1217)))) (fail1217)))) (fail1217)) (fail1217))) (fail1217))))) (fail1217)))) (fail1217))) (fail1217))) (fail1217)) (fail1217)))) (fail1217)))))) (if (cons? v1214) (let ((w1344 (car v1214)) (x1345 (cdr v1214))) (let ((x w1344)) (if (list? x) (if (cons? x1345) (let ((w1349 (car x1345)) (x1350 (cdr x1345))) (if (cons? w1349) (let ((w1351 (car w1349)) (x1352 (cdr w1349))) (if (cons? w1351) (let ((w1353 (car w1351)) (x1354 (cdr w1351))) (let ((a w1353)) (if (null? x1354) (let ((us x1352)) (if (list? us) (if (cons? x1350) (let ((w1358 (car x1350)) (x1359 (cdr x1350))) (let ((phd w1358)) (if (cons? x1359) (let ((w1360 (car x1359)) (x1361 (cdr x1359))) (let ((y w1360)) (if (cons? x1361) (let ((w1362 (car x1361)) (x1363 (cdr x1361))) (if (cons? w1362) (let ((w1364 (car w1362)) (x1365 (cdr w1362))) (if (cons? w1364) (let ((w1366 (car w1364)) (x1367 (cdr w1364))) (let ((b w1366)) (let ((bs x1367)) (if (list? bs) (let ((ps x1365)) (if (cons? x1363) (let ((w1371 (car x1363)) (x1372 (cdr x1363))) (let ((g+s w1371)) (if (cons? x1372) (let ((w1373 (car x1372)) (x1374 (cdr x1372))) (let ((sk w1373)) (if (cons? x1374) (let ((w1375 (car x1374)) (x1376 (cdr x1374))) (let ((fk w1375)) (if (cons? x1376) (let ((w1377 (car x1376)) (x1378 (cdr x1376))) (let ((i w1377)) (if (null? x1378) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) (((unquote a) (unquote-splicing bs)) (unquote y)))) (if (unquote ret) (match-one ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) (((unquote b) (unquote-splicing bs)) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1216)))) (fail1216)))) (fail1216)))) (fail1216)))) (fail1216))) (fail1216))))) (fail1216))) (fail1216))) (fail1216)))) (fail1216)))) (fail1216)) (fail1216))) (fail1216)))) (fail1216))) (fail1216))) (fail1216)) (fail1216)))) (fail1216)))))) (if (cons? v1214) (let ((w1379 (car v1214)) (x1380 (cdr v1214))) (let ((x w1379)) (if (cons? x1380) (let ((w1381 (car x1380)) (x1382 (cdr x1380))) (if (null? w1381) (if (cons? x1382) (let ((w1383 (car x1382)) (x1384 (cdr x1382))) (let ((phd w1383)) (if (cons? x1384) (let ((w1385 (car x1384)) (x1386 (cdr x1384))) (let ((y w1385)) (if (cons? x1386) (let ((w1387 (car x1386)) (x1388 (cdr x1386))) (let ((p w1387)) (let ((l x1388)) (progn (quasiquote (match-phd () (unquote phd) (unquote x) (unquote y) (unquote p) (unquote-splicing l))))))) (fail1215)))) (fail1215)))) (fail1215)) (fail1215))) (fail1215)))) (fail1215))))) (defmacro match-phd x (let ((v1389 x)) (let ((fail1390 (lambda () (let ((fail1391 (lambda () (let ((fail1392 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1389) (let ((w1393 (car v1389)) (x1394 (cdr v1389))) (if (null? w1393) (if (cons? x1394) (let ((w1395 (car x1394)) (x1396 (cdr x1394))) (let ((phd w1395)) (if (cons? x1396) (let ((w1397 (car x1396)) (x1398 (cdr x1396))) (let ((abs w1397)) (let ((l x1398)) (progn (quasiquote (match-three ((unquote abs) (unquote phd)) (unquote-splicing l))))))) (fail1392)))) (fail1392)) (fail1392))) (fail1392)))))) (if (cons? v1389) (let ((w1399 (car v1389)) (x1400 (cdr v1389))) (let ((phd w1399)) (if (list? phd) (if (cons? x1400) (let ((w1404 (car x1400)) (x1405 (cdr x1400))) (if (cons? w1404) (let ((w1406 (car w1404)) (x1407 (cdr w1404))) (let ((c w1406)) (if (cons? x1407) (let ((w1408 (car x1407)) (x1409 (cdr x1407))) (if (cons? w1408) (let ((w1410 (car w1408)) (x1411 (cdr w1408))) (if (cons? w1410) (let ((w1412 (car w1410)) (x1413 (cdr w1410))) (let ((h w1412)) (if (cons? x1413) (let ((w1414 (car x1413)) (x1415 (cdr x1413))) (let ((a w1414)) (if (null? x1415) (let ((hh x1411)) (if (list? hh) (if (null? x1409) (if (cons? x1405) (let ((w1419 (car x1405)) (x1420 (cdr x1405))) (let ((abs w1419)) (if (cons? x1420) (let ((w1421 (car x1420)) (x1422 (cdr x1420))) (let ((v w1421)) (if (cons? x1422) (let ((w1423 (car x1422)) (x1424 (cdr x1422))) (if (cons? w1423) (let ((w1425 (car w1423)) (x1426 (cdr w1423))) (let ((h2 w1425)) (let ((l x1426)) (if (cons? x1424) (let ((w1427 (car x1424)) (x1428 (cdr x1424))) (let ((g+s w1427)) (if (cons? x1428) (let ((w1429 (car x1428)) (x1430 (cdr x1428))) (let ((sk w1429)) (if (cons? x1430) (let ((w1431 (car x1430)) (x1432 (cdr x1430))) (let ((fk w1431)) (if (cons? x1432) (let ((w1433 (car x1432)) (x1434 (cdr x1432))) (let ((i w1433)) (if (null? x1434) (progn (if (eq h h2) (quasiquote (match-one ((unquote abs) ((unquote a) (((unquote h) (unquote a)) (unquote-splicing hh) (unquote-splicing phd)))) (unquote v) (unquote l) (unquote g+s) (set-phd-sk (unquote c) (unquote sk)) (set-phd-fk (unquote c) (unquote fk)) (unquote i))) (quasiquote (match-phd (((unquote h) (unquote a)) (unquote-splicing phd)) ((unquote c) (unquote hh)) (unquote abs) (unquote v) ((unquote h2) (unquote-splicing l)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1391)))) (fail1391)))) (fail1391)))) (fail1391)))) (fail1391))))) (fail1391))) (fail1391)))) (fail1391)))) (fail1391)) (fail1391)) (fail1391))) (fail1391)))) (fail1391)))) (fail1391))) (fail1391))) (fail1391)))) (fail1391))) (fail1391)) (fail1391)))) (fail1391)))))) (if (cons? v1389) (let ((w1435 (car v1389)) (x1436 (cdr v1389))) (let ((phd w1435)) (if (cons? x1436) (let ((w1437 (car x1436)) (x1438 (cdr x1436))) (if (cons? w1437) (let ((w1439 (car w1437)) (x1440 (cdr w1437))) (let ((c w1439)) (if (cons? x1440) (let ((w1441 (car x1440)) (x1442 (cdr x1440))) (if (null? w1441) (if (null? x1442) (if (cons? x1438) (let ((w1443 (car x1438)) (x1444 (cdr x1438))) (let ((abs w1443)) (let ((l x1444)) (progn (quasiquote (match-three ((unquote abs) ((unquote c) (unquote phd))) (unquote-splicing l))))))) (fail1390)) (fail1390)) (fail1390))) (fail1390)))) (fail1390))) (fail1390)))) (fail1390))))) (defmacro set-phd-fk x (let ((v1445 x)) (let ((fail1446 (lambda () (let ((fail1447 (lambda () (let ((fail1448 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1445) (let ((w1449 (car v1445)) (x1450 (cdr v1445))) (if (cons? w1449) (let ((w1451 (car w1449)) (x1452 (cdr w1449))) (let ((abs w1451)) (if (cons? x1452) (let ((w1453 (car x1452)) (x1454 (cdr x1452))) (if (cons? w1453) (let ((w1455 (car w1453)) (x1456 (cdr w1453))) (let ((c w1455)) (if (cons? x1456) (let ((w1457 (car x1456)) (x1458 (cdr x1456))) (let ((pp w1457)) (if (null? x1458) (if (null? x1454) (if (cons? x1450) (let ((w1459 (car x1450)) (x1460 (cdr x1450))) (let ((cc w1459)) (if (cons? x1460) (let ((w1461 (car x1460)) (x1462 (cdr x1460))) (if (cons? w1461) (let ((w1463 (car w1461)) (x1464 (cdr w1461))) (let ((fk w1463)) (let ((fkk x1464)) (if (list? fkk) (if (null? x1462) (progn (quasiquote (fk ((unquote abs) ((unquote cc) (unquote pp))) (unquote-splicing fkk)))) (fail1448)) (fail1448))))) (fail1448))) (fail1448)))) (fail1448)) (fail1448)) (fail1448)))) (fail1448)))) (fail1448))) (fail1448)))) (fail1448))) (fail1448)))))) (if (cons? v1445) (let ((w1468 (car v1445)) (x1469 (cdr v1445))) (let ((abs w1468)) (if (cons? x1469) (let ((w1470 (car x1469)) (x1471 (cdr x1469))) (let ((cc w1470)) (if (cons? x1471) (let ((w1472 (car x1471)) (x1473 (cdr x1471))) (if (cons? w1472) (let ((w1474 (car w1472)) (x1475 (cdr w1472))) (let ((fk w1474)) (if (null? x1475) (if (null? x1473) (progn (quasiquote ((unquote fk)))) (fail1447)) (fail1447)))) (fail1447))) (fail1447)))) (fail1447)))) (fail1447)))))) (if (cons? v1445) (let ((w1476 (car v1445)) (x1477 (cdr v1445))) (let ((abs w1476)) (if (cons? x1477) (let ((w1478 (car x1477)) (x1479 (cdr x1477))) (let ((cc w1478)) (if (cons? x1479) (let ((w1480 (car x1479)) (x1481 (cdr x1479))) (if (cons? w1480) (let ((w1482 (car w1480)) (x1483 (cdr w1480))) (if (binary= w1482 (quote progn)) (let ((l x1483)) (if (null? x1481) (progn (quasiquote (progn (unquote-splicing l)))) (fail1446))) (fail1446))) (fail1446))) (fail1446)))) (fail1446)))) (fail1446))))) (defmacro set-phd-sk x (let ((v1484 x)) (let ((fail1485 (lambda () (let ((fail1486 (lambda () (let ((fail1487 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1484) (let ((w1488 (car v1484)) (x1489 (cdr v1484))) (if (cons? w1488) (let ((w1490 (car w1488)) (x1491 (cdr w1488))) (let ((abs w1490)) (if (cons? x1491) (let ((w1492 (car x1491)) (x1493 (cdr x1491))) (if (cons? w1492) (let ((w1494 (car w1492)) (x1495 (cdr w1492))) (let ((c w1494)) (if (cons? x1495) (let ((w1496 (car x1495)) (x1497 (cdr x1495))) (let ((pp w1496)) (if (null? x1497) (if (null? x1493) (if (cons? x1489) (let ((w1498 (car x1489)) (x1499 (cdr x1489))) (let ((cc w1498)) (if (cons? x1499) (let ((w1500 (car x1499)) (x1501 (cdr x1499))) (if (cons? w1500) (let ((w1502 (car w1500)) (x1503 (cdr w1500))) (let ((fk w1502)) (let ((fkk x1503)) (if (list? fkk) (let ((i x1501)) (if (list? i) (progn (quasiquote ((unquote fk) ((unquote abs) ((unquote cc) (unquote pp))) (unquote-splicing fkk) (unquote-splicing i)))) (fail1487))) (fail1487))))) (fail1487))) (fail1487)))) (fail1487)) (fail1487)) (fail1487)))) (fail1487)))) (fail1487))) (fail1487)))) (fail1487))) (fail1487)))))) (if (cons? v1484) (let ((w1510 (car v1484)) (x1511 (cdr v1484))) (let ((abs w1510)) (if (cons? x1511) (let ((w1512 (car x1511)) (x1513 (cdr x1511))) (let ((cc w1512)) (if (cons? x1513) (let ((w1514 (car x1513)) (x1515 (cdr x1513))) (if (cons? w1514) (let ((w1516 (car w1514)) (x1517 (cdr w1514))) (let ((fk w1516)) (if (null? x1517) (let ((i x1515)) (if (list? i) (progn (quasiquote ((unquote fk)))) (fail1486))) (fail1486)))) (fail1486))) (fail1486)))) (fail1486)))) (fail1486)))))) (if (cons? v1484) (let ((w1521 (car v1484)) (x1522 (cdr v1484))) (let ((abs w1521)) (if (cons? x1522) (let ((w1523 (car x1522)) (x1524 (cdr x1522))) (let ((cc w1523)) (if (cons? x1524) (let ((w1525 (car x1524)) (x1526 (cdr x1524))) (if (cons? w1525) (let ((w1527 (car w1525)) (x1528 (cdr w1525))) (if (binary= w1527 (quote progn)) (let ((l x1528)) (let ((i x1526)) (if (list? i) (progn (quasiquote (progn (unquote-splicing l)))) (fail1485)))) (fail1485))) (fail1485))) (fail1485)))) (fail1485)))) (fail1485))))) (defmacro match-$ x (let ((v1532 x)) (let ((fail1533 (lambda () (let ((fail1534 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1532) (let ((w1535 (car v1532)) (x1536 (cdr v1532))) (if (cons? x1536) (let ((w1537 (car x1536)) (x1538 (cdr x1536))) (let ((abs w1537)) (if (cons? x1538) (let ((w1539 (car x1538)) (x1540 (cdr x1538))) (let ((newpat w1539)) (if (cons? x1540) (let ((w1541 (car x1540)) (x1542 (cdr x1540))) (let ((m w1541)) (if (cons? x1542) (let ((w1543 (car x1542)) (x1544 (cdr x1542))) (if (null? w1543) (if (cons? x1544) (let ((w1545 (car x1544)) (x1546 (cdr x1544))) (let ((v w1545)) (if (cons? x1546) (let ((w1547 (car x1546)) (x1548 (cdr x1546))) (let ((kt w1547)) (if (cons? x1548) (let ((w1549 (car x1548)) (x1550 (cdr x1548))) (let ((ke w1549)) (if (cons? x1550) (let ((w1551 (car x1550)) (x1552 (cdr x1550))) (let ((i w1551)) (if (null? x1552) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote newpat) () (unquote kt) (unquote ke) (unquote i)))) (fail1534)))) (fail1534)))) (fail1534)))) (fail1534)))) (fail1534)) (fail1534))) (fail1534)))) (fail1534)))) (fail1534)))) (fail1534))) (fail1534)))))) (if (cons? v1532) (let ((w1553 (car v1532)) (x1554 (cdr v1532))) (let ((abs w1553)) (if (cons? x1554) (let ((w1555 (car x1554)) (x1556 (cdr x1554))) (let ((a w1555)) (if (list? a) (if (cons? x1556) (let ((w1560 (car x1556)) (x1561 (cdr x1556))) (let ((m w1560)) (if (cons? x1561) (let ((w1562 (car x1561)) (x1563 (cdr x1561))) (if (cons? w1562) (let ((w1564 (car w1562)) (x1565 (cdr w1562))) (let ((p1 w1564)) (let ((p2 x1565)) (if (list? p2) (let ((v x1563)) (progn (quasiquote (match-$ (unquote abs) ((unquote-splicing a) (= 0 (unquote m) (unquote p1))) (unquote (+ m 1)) (unquote p2) (unquote-splicing v))))) (fail1533))))) (fail1533))) (fail1533)))) (fail1533)) (fail1533)))) (fail1533)))) (fail1533))))) (defmacro match-gen-ellipses x (let ((v1569 x)) (let ((fail1570 (lambda () (let ((fail1571 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1569) (let ((w1572 (car v1569)) (x1573 (cdr v1569))) (let ((abs w1572)) (if (cons? x1573) (let ((w1574 (car x1573)) (x1575 (cdr x1573))) (let ((v w1574)) (if (cons? x1575) (let ((w1576 (car x1575)) (x1577 (cdr x1575))) (let ((p w1576)) (if (cons? x1577) (let ((w1578 (car x1577)) (x1579 (cdr x1577))) (let ((r w1578)) (if (cons? x1579) (let ((w1580 (car x1579)) (x1581 (cdr x1579))) (let ((g+s w1580)) (if (cons? x1581) (let ((w1582 (car x1581)) (x1583 (cdr x1581))) (let ((sk w1582)) (if (list? sk) (if (cons? x1583) (let ((w1587 (car x1583)) (x1588 (cdr x1583))) (let ((fk w1587)) (if (cons? x1588) (let ((w1589 (car x1588)) (x1590 (cdr x1588))) (let ((i w1589)) (if (cons? x1590) (let ((w1591 (car x1590)) (x1592 (cdr x1590))) (letfuns ((loop (ls1596 p-ls1594 p-ls1593) (if (null? ls1596) (progn (let ((id-ls (reverse p-ls1594)) (id (reverse p-ls1593))) (if (null? x1592) (progn (let ((tail-len (gensym "tail-len")) (len (gensym "len")) (n (gensym "n")) (ls (gensym "ls")) (w (gensym "w"))) (quasiquote (match-verify-no-ellipses (unquote r) (let* (((unquote tail-len) (length (quote (unquote r)))) ((unquote ls) (unquote v)) ((unquote len) (length (unquote ls)))) (if (< (unquote len) (unquote tail-len)) (unquote fk) (recur loop (((unquote ls) (unquote ls)) ((unquote n) (unquote len)) (unquote-splicing (map (lambda (id-ls) (quasiquote (id-ls (quote ())))) id-ls))) (cond ((= (unquote n) (unquote tail-len)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (match-one (unquote abs) (unquote ls) (unquote r) (() ()) (unquote sk) (unquote fk) (unquote i)))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote n) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls))))))) (unquote fk) (unquote i))))) (else (unquote fk)))))))))) (fail1571)))) (if (cons? ls1596) (progn (let ((w1597 (car ls1596))) (if (cons? w1597) (let ((w1598 (car w1597)) (x1599 (cdr w1597))) (let ((id w1598)) (if (cons? x1599) (let ((w1600 (car x1599)) (x1601 (cdr x1599))) (let ((id-ls w1600)) (if (null? x1601) (loop (cdr ls1596) (cons id-ls p-ls1594) (cons id p-ls1593)) (fail1571)))) (fail1571)))) (fail1571)))) (if else (progn (fail1571)) (cond)))))) (loop w1591 (quote ()) (quote ())))) (fail1571)))) (fail1571)))) (fail1571)) (fail1571)))) (fail1571)))) (fail1571)))) (fail1571)))) (fail1571)))) (fail1571)))) (fail1571)))))) (if (cons? v1569) (let ((w1602 (car v1569)) (x1603 (cdr v1569))) (let ((abs w1602)) (if (cons? x1603) (let ((w1604 (car x1603)) (x1605 (cdr x1603))) (let ((v w1604)) (if (cons? x1605) (let ((w1606 (car x1605)) (x1607 (cdr x1605))) (let ((p w1606)) (if (cons? x1607) (let ((w1608 (car x1607)) (x1609 (cdr x1607))) (if (null? w1608) (if (cons? x1609) (let ((w1610 (car x1609)) (x1611 (cdr x1609))) (let ((g+s w1610)) (if (cons? x1611) (let ((w1612 (car x1611)) (x1613 (cdr x1611))) (let ((sk w1612)) (if (list? sk) (if (cons? x1613) (let ((w1617 (car x1613)) (x1618 (cdr x1613))) (let ((fk w1617)) (if (cons? x1618) (let ((w1619 (car x1618)) (x1620 (cdr x1618))) (let ((i w1619)) (if (cons? x1620) (let ((w1621 (car x1620)) (x1622 (cdr x1620))) (letfuns ((loop (ls1626 p-ls1624 p-ls1623) (if (null? ls1626) (progn (let ((id-ls (reverse p-ls1624)) (id (reverse p-ls1623))) (if (null? x1622) (progn (let ((ls (gensym "ls")) (w (gensym "w"))) (quasiquote (match-check-identifier (unquote p) (let (((unquote p) (unquote v))) (if (list? (unquote p)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote abs) (unquote fk)))) (recur loop (((unquote ls) (unquote v)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((null? (unquote ls)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))) (fail1570)))) (if (cons? ls1626) (progn (let ((w1627 (car ls1626))) (if (cons? w1627) (let ((w1628 (car w1627)) (x1629 (cdr w1627))) (let ((id w1628)) (if (cons? x1629) (let ((w1630 (car x1629)) (x1631 (cdr x1629))) (let ((id-ls w1630)) (if (null? x1631) (loop (cdr ls1626) (cons id-ls p-ls1624) (cons id p-ls1623)) (fail1570)))) (fail1570)))) (fail1570)))) (if else (progn (fail1570)) (cond)))))) (loop w1621 (quote ()) (quote ())))) (fail1570)))) (fail1570)))) (fail1570)) (fail1570)))) (fail1570)))) (fail1570)) (fail1570))) (fail1570)))) (fail1570)))) (fail1570)))) (fail1570))))) (defmacro match-verify-no-ellipses x (let ((v1632 x)) (let ((fail1633 (lambda () (let ((fail1634 (lambda () (let ((fail1635 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1632) (let ((w1636 (car v1632)) (x1637 (cdr v1632))) (let ((x w1636)) (if (cons? x1637) (let ((w1638 (car x1637)) (x1639 (cdr x1637))) (let ((sk w1638)) (if (null? x1639) (progn (quasiquote (error <condition> (fmt "dotted tail not allowed after ellipse ~a" (unquote x))))) (fail1635)))) (fail1635)))) (fail1635)))))) (if (cons? v1632) (let ((w1640 (car v1632)) (x1641 (cdr v1632))) (if (null? w1640) (if (cons? x1641) (let ((w1642 (car x1641)) (x1643 (cdr x1641))) (let ((sk w1642)) (if (null? x1643) (progn sk) (fail1634)))) (fail1634)) (fail1634))) (fail1634)))))) (if (cons? v1632) (let ((w1644 (car v1632)) (x1645 (cdr v1632))) (if (cons? w1644) (let ((w1646 (car w1644)) (x1647 (cdr w1644))) (let ((x w1646)) (let ((y x1647)) (if (cons? x1645) (let ((w1648 (car x1645)) (x1649 (cdr x1645))) (let ((sk w1648)) (if (null? x1649) (progn (quasiquote (match-check-ellipse (unquote x) (error <condition> "multiple ellipse patterns not allowed at same level") (match-verify-no-ellipses (unquote y) (unquote sk))))) (fail1633)))) (fail1633))))) (fail1633))) (fail1633))))) (defmacro match-drop-ids x (let ((v1650 x)) (let ((fail1651 (lambda () (let ((fail1652 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1650) (let ((w1653 (car v1650)) (x1654 (cdr v1650))) (let ((abs w1653)) (if (cons? x1654) (let ((w1655 (car x1654)) (x1656 (cdr x1654))) (let ((expr w1655)) (let ((ids x1656)) (if (list? ids) (progn expr) (fail1652))))) (fail1652)))) (fail1652)))))) (if (cons? v1650) (let ((w1660 (car v1650)) (x1661 (cdr v1650))) (let ((expr w1660)) (if (null? x1661) (progn expr) (fail1651)))) (fail1651))))) (defmacro match-gen-search x (let ((v1662 x)) (let ((fail1663 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1662) (let ((w1664 (car v1662)) (x1665 (cdr v1662))) (let ((abs w1664)) (if (cons? x1665) (let ((w1666 (car x1665)) (x1667 (cdr x1665))) (let ((v w1666)) (if (cons? x1667) (let ((w1668 (car x1667)) (x1669 (cdr x1667))) (let ((p w1668)) (if (cons? x1669) (let ((w1670 (car x1669)) (x1671 (cdr x1669))) (let ((q w1670)) (if (cons? x1671) (let ((w1672 (car x1671)) (x1673 (cdr x1671))) (let ((g+s w1672)) (if (cons? x1673) (let ((w1674 (car x1673)) (x1675 (cdr x1673))) (let ((sk w1674)) (if (cons? x1675) (let ((w1676 (car x1675)) (x1677 (cdr x1675))) (let ((fk w1676)) (if (cons? x1677) (let ((w1678 (car x1677)) (x1679 (cdr x1677))) (let ((i w1678)) (if (cons? x1679) (let ((w1680 (car x1679)) (x1681 (cdr x1679))) (letfuns ((loop (ls1685 p-ls1683 p-ls1682) (if (null? ls1685) (progn (let ((id-ls (reverse p-ls1683)) (id (reverse p-ls1682))) (if (null? x1681) (progn (let ((try (gensym "try")) (next (gensym "next")) (ls (gensym "ls")) (w (gensym "w")) (u (gensym "u")) (fail (gensym "fail"))) (quasiquote (letfuns (((unquote try) ((unquote w) (unquote fail) (unquote-splicing id-ls)) (match-one (unquote abs) (unquote w) (unquote q) (unquote g+s) (match-drop-ids (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))))) (unquote sk))) (match-drop-ids ((unquote next) (unquote w) (unquote fail) (unquote-splicing id-ls))) (unquote i))) ((unquote next) ((unquote w) (unquote fail) (unquote-splicing id-ls)) (if (not (cons? (unquote w))) ((unquote fail)) (let (((unquote u) (car (unquote w)))) (match-one (unquote abs) (unquote u) (unquote p) ((car (unquote w)) ((setter car) (unquote w))) (match-drop-ids (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id-ls) (cons (unquote id) (unquote id-ls)))) id id-ls))) (recur (unquote ls) (((unquote ls) (cdr (unquote w)))) (if (cons? (unquote ls)) ((unquote try) (car (unquote ls)) (lambda () ((unquote ls) (cdr (unquote ls)))) (unquote-splicing id-ls)) ((unquote fail)))))) ((unquote fail)) (unquote i)))))) (let (unquote (map (lambda (id-ls) (quasiquote (id-ls (quote ())))) id-ls)) ((unquote try) (unquote v) (lambda () (insert-abs (unquote abs) (unquote fk))) (unquote-splicing id-ls))))))) (fail1663)))) (if (cons? ls1685) (progn (let ((w1686 (car ls1685))) (if (cons? w1686) (let ((w1687 (car w1686)) (x1688 (cdr w1686))) (let ((id w1687)) (if (cons? x1688) (let ((w1689 (car x1688)) (x1690 (cdr x1688))) (let ((id-ls w1689)) (if (null? x1690) (loop (cdr ls1685) (cons id-ls p-ls1683) (cons id p-ls1682)) (fail1663)))) (fail1663)))) (fail1663)))) (if else (progn (fail1663)) (cond)))))) (loop w1680 (quote ()) (quote ())))) (fail1663)))) (fail1663)))) (fail1663)))) (fail1663)))) (fail1663)))) (fail1663)))) (fail1663)))) (fail1663)))) (fail1663))))) (defmacro match-quasiquote x (let ((v1691 x)) (let ((fail1692 (lambda () (let ((fail1693 (lambda () (let ((fail1694 (lambda () (let ((fail1695 (lambda () (let ((fail1696 (lambda () (let ((fail1697 (lambda () (let ((fail1698 (lambda () (let ((fail1699 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1691) (let ((w1700 (car v1691)) (x1701 (cdr v1691))) (let ((abs w1700)) (if (cons? x1701) (let ((w1702 (car x1701)) (x1703 (cdr x1701))) (let ((v w1702)) (if (cons? x1703) (let ((w1704 (car x1703)) (x1705 (cdr x1703))) (let ((x w1704)) (if (cons? x1705) (let ((w1706 (car x1705)) (x1707 (cdr x1705))) (let ((g+s w1706)) (if (cons? x1707) (let ((w1708 (car x1707)) (x1709 (cdr x1707))) (let ((sk w1708)) (if (cons? x1709) (let ((w1710 (car x1709)) (x1711 (cdr x1709))) (let ((fk w1710)) (if (cons? x1711) (let ((w1712 (car x1711)) (x1713 (cdr x1711))) (let ((i w1712)) (let ((depth x1713)) (progn (quasiquote (match-one (unquote abs) (unquote v) (quote (unquote x)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))))) (fail1699)))) (fail1699)))) (fail1699)))) (fail1699)))) (fail1699)))) (fail1699)))) (fail1699)))))) (if (cons? v1691) (let ((w1714 (car v1691)) (x1715 (cdr v1691))) (let ((abs w1714)) (if (cons? x1715) (let ((w1716 (car x1715)) (x1717 (cdr x1715))) (let ((v w1716)) (if (cons? x1717) (let ((w1718 (car x1717)) (x1719 (cdr x1717))) (if (vector? w1718) (let ((len1720 (vector-size w1718))) (if (>= len1720 0) (letfuns ((loop1722 (j1723 p-ls1721) (if (>= j1723 len1720) (let ((elt (reverse p-ls1721))) (if (cons? x1719) (let ((w1725 (car x1719)) (x1726 (cdr x1719))) (let ((g+s w1725)) (if (cons? x1726) (let ((w1727 (car x1726)) (x1728 (cdr x1726))) (let ((sk w1727)) (if (cons? x1728) (let ((w1729 (car x1728)) (x1730 (cdr x1728))) (let ((fk w1729)) (if (cons? x1730) (let ((w1731 (car x1730)) (x1732 (cdr x1730))) (let ((i w1731)) (let ((depth x1732)) (progn (let ((ls (gensym "ls"))) (quasiquote (if (vector? (unquote v)) (let (((unquote ls) (convert (unquote v) <list>))) (match-quasiquote (unquote abs) (unquote ls) (unquote elt) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))) (insert-abs (unquote abs) (unquote fk))))))))) (fail1698)))) (fail1698)))) (fail1698)))) (fail1698))) (let ((w1724 (vector-ref w1718 j1723))) (let ((elt w1724)) (loop1722 (+ j1723 1) (cons elt p-ls1721))))))) (loop1722 0 (quote ()))) (fail1698))) (fail1698))) (fail1698)))) (fail1698)))) (fail1698)))))) (if (cons? v1691) (let ((w1733 (car v1691)) (x1734 (cdr v1691))) (let ((a w1733)) (if (cons? w1733) (let ((w1735 (car w1733)) (x1736 (cdr w1733))) (let ((abs w1735)) (if (cons? x1736) (let ((w1737 (car x1736)) (x1738 (cdr x1736))) (if (cons? w1737) (let ((w1739 (car w1737)) (x1740 (cdr w1737))) (if (cons? w1739) (let ((w1741 (car w1739)) (x1742 (cdr w1739))) (let ((qcar w1741)) (if (cons? x1742) (let ((w1743 (car x1742)) (x1744 (cdr x1742))) (let ((qcdr w1743)) (if (cons? x1744) (let ((w1745 (car x1744)) (x1746 (cdr x1744))) (let ((qcons? w1745)) (if (cons? x1746) (let ((w1747 (car x1746)) (x1748 (cdr x1746))) (let ((qnull? w1747)) (if (cons? x1748) (let ((w1749 (car x1748)) (x1750 (cdr x1748))) (let ((qbinary= w1749)) (if (null? x1750) (if (cons? x1740) (let ((w1751 (car x1740)) (x1752 (cdr x1740))) (let ((pp w1751)) (if (null? x1752) (if (null? x1738) (if (cons? x1734) (let ((w1753 (car x1734)) (x1754 (cdr x1734))) (let ((v w1753)) (if (cons? x1754) (let ((w1755 (car x1754)) (x1756 (cdr x1754))) (if (cons? w1755) (let ((w1757 (car w1755)) (x1758 (cdr w1755))) (let ((p w1757)) (let ((q x1758)) (if (cons? x1756) (let ((w1759 (car x1756)) (x1760 (cdr x1756))) (let ((g+s w1759)) (if (cons? x1760) (let ((w1761 (car x1760)) (x1762 (cdr x1760))) (let ((sk w1761)) (if (cons? x1762) (let ((w1763 (car x1762)) (x1764 (cdr x1762))) (let ((fk w1763)) (if (cons? x1764) (let ((w1765 (car x1764)) (x1766 (cdr x1764))) (let ((i w1765)) (let ((depth x1766)) (progn (let ((w (gensym "w"))) (quasiquote (if ((unquote qcons?) (unquote v)) (let (((unquote w) ((unquote qcar) (unquote v))) ((unquote x) ((unquote qcdr) (unquote v)))) (match-quasiquote (unquote a) (unquote w) (unquote p) (unquote g+s) (match-quasiquote-step (unquote x) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote depth)) (unquote fk) (unquote i) (unquote-splicing depth))) (insert-abs (unquote a) (unquote fk))))))))) (fail1697)))) (fail1697)))) (fail1697)))) (fail1697))))) (fail1697))) (fail1697)))) (fail1697)) (fail1697)) (fail1697)))) (fail1697)) (fail1697)))) (fail1697)))) (fail1697)))) (fail1697)))) (fail1697)))) (fail1697))) (fail1697))) (fail1697)))) (fail1697)))) (fail1697)))))) (if (cons? v1691) (let ((w1767 (car v1691)) (x1768 (cdr v1691))) (let ((abs w1767)) (if (cons? x1768) (let ((w1769 (car x1768)) (x1770 (cdr x1768))) (let ((v w1769)) (if (cons? x1770) (let ((w1771 (car x1770)) (x1772 (cdr x1770))) (if (cons? w1771) (let ((w1773 (car w1771)) (x1774 (cdr w1771))) (if (binary= w1773 (quote unquote-splicing)) (if (cons? x1774) (let ((w1775 (car x1774)) (x1776 (cdr x1774))) (let ((p w1775)) (if (null? x1776) (if (cons? x1772) (let ((w1777 (car x1772)) (x1778 (cdr x1772))) (let ((g+s w1777)) (if (cons? x1778) (let ((w1779 (car x1778)) (x1780 (cdr x1778))) (let ((sk w1779)) (if (cons? x1780) (let ((w1781 (car x1780)) (x1782 (cdr x1780))) (let ((fk w1781)) (if (cons? x1782) (let ((w1783 (car x1782)) (x1784 (cdr x1782))) (let ((i w1783)) (if (cons? x1784) (let ((w1785 (car x1784)) (x1786 (cdr x1784))) (let ((x w1785)) (let ((depth x1786)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))))))) (fail1696)))) (fail1696)))) (fail1696)))) (fail1696)))) (fail1696)) (fail1696)))) (fail1696)) (fail1696))) (fail1696))) (fail1696)))) (fail1696)))) (fail1696)))))) (if (cons? v1691) (let ((w1787 (car v1691)) (x1788 (cdr v1691))) (let ((abs w1787)) (if (cons? x1788) (let ((w1789 (car x1788)) (x1790 (cdr x1788))) (let ((v w1789)) (if (cons? x1790) (let ((w1791 (car x1790)) (x1792 (cdr x1790))) (if (cons? w1791) (let ((w1793 (car w1791)) (x1794 (cdr w1791))) (if (binary= w1793 (quote unquote)) (if (cons? x1794) (let ((w1795 (car x1794)) (x1796 (cdr x1794))) (let ((p w1795)) (if (null? x1796) (if (cons? x1792) (let ((w1797 (car x1792)) (x1798 (cdr x1792))) (let ((g+s w1797)) (if (cons? x1798) (let ((w1799 (car x1798)) (x1800 (cdr x1798))) (let ((sk w1799)) (if (cons? x1800) (let ((w1801 (car x1800)) (x1802 (cdr x1800))) (let ((fk w1801)) (if (cons? x1802) (let ((w1803 (car x1802)) (x1804 (cdr x1802))) (let ((i w1803)) (if (cons? x1804) (let ((w1805 (car x1804)) (x1806 (cdr x1804))) (let ((x w1805)) (let ((depth x1806)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))))))) (fail1695)))) (fail1695)))) (fail1695)))) (fail1695)))) (fail1695)) (fail1695)))) (fail1695)) (fail1695))) (fail1695))) (fail1695)))) (fail1695)))) (fail1695)))))) (if (cons? v1691) (let ((w1807 (car v1691)) (x1808 (cdr v1691))) (let ((abs w1807)) (if (cons? x1808) (let ((w1809 (car x1808)) (x1810 (cdr x1808))) (let ((v w1809)) (if (cons? x1810) (let ((w1811 (car x1810)) (x1812 (cdr x1810))) (if (cons? w1811) (let ((w1813 (car w1811)) (x1814 (cdr w1811))) (if (binary= w1813 (quote quasiquote)) (if (cons? x1814) (let ((w1815 (car x1814)) (x1816 (cdr x1814))) (let ((p w1815)) (if (null? x1816) (if (cons? x1812) (let ((w1817 (car x1812)) (x1818 (cdr x1812))) (let ((g+s w1817)) (if (cons? x1818) (let ((w1819 (car x1818)) (x1820 (cdr x1818))) (let ((sk w1819)) (if (cons? x1820) (let ((w1821 (car x1820)) (x1822 (cdr x1820))) (let ((fk w1821)) (if (cons? x1822) (let ((w1823 (car x1822)) (x1824 (cdr x1822))) (let ((i w1823)) (let ((depth x1824)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote ()) (unquote-splicing depth))))))) (fail1694)))) (fail1694)))) (fail1694)))) (fail1694)) (fail1694)))) (fail1694)) (fail1694))) (fail1694))) (fail1694)))) (fail1694)))) (fail1694)))))) (if (cons? v1691) (let ((w1825 (car v1691)) (x1826 (cdr v1691))) (let ((a w1825)) (if (cons? w1825) (let ((w1827 (car w1825)) (x1828 (cdr w1825))) (let ((abs w1827)) (if (cons? x1828) (let ((w1829 (car x1828)) (x1830 (cdr x1828))) (if (cons? w1829) (let ((w1831 (car w1829)) (x1832 (cdr w1829))) (if (cons? w1831) (let ((w1833 (car w1831)) (x1834 (cdr w1831))) (let ((qcar w1833)) (if (cons? x1834) (let ((w1835 (car x1834)) (x1836 (cdr x1834))) (let ((qcdr w1835)) (if (cons? x1836) (let ((w1837 (car x1836)) (x1838 (cdr x1836))) (let ((qcons? w1837)) (if (cons? x1838) (let ((w1839 (car x1838)) (x1840 (cdr x1838))) (let ((qnull? w1839)) (if (cons? x1840) (let ((w1841 (car x1840)) (x1842 (cdr x1840))) (let ((qbinary= w1841)) (if (null? x1842) (if (cons? x1832) (let ((w1843 (car x1832)) (x1844 (cdr x1832))) (let ((pp w1843)) (if (null? x1844) (if (null? x1830) (if (cons? x1826) (let ((w1845 (car x1826)) (x1846 (cdr x1826))) (let ((v w1845)) (if (cons? x1846) (let ((w1847 (car x1846)) (x1848 (cdr x1846))) (if (cons? w1847) (let ((w1849 (car w1847)) (x1850 (cdr w1847))) (if (cons? w1849) (let ((w1851 (car w1849)) (x1852 (cdr w1849))) (if (binary= w1851 (quote unquote-splicing)) (if (cons? x1852) (let ((w1853 (car x1852)) (x1854 (cdr x1852))) (let ((p w1853)) (if (null? x1854) (let ((rest x1850)) (if (cons? x1848) (let ((w1855 (car x1848)) (x1856 (cdr x1848))) (let ((g+s w1855)) (if (cons? x1856) (let ((w1857 (car x1856)) (x1858 (cdr x1856))) (let ((sk w1857)) (if (cons? x1858) (let ((w1859 (car x1858)) (x1860 (cdr x1858))) (let ((fk w1859)) (if (cons? x1860) (let ((w1861 (car x1860)) (x1862 (cdr x1860))) (let ((i w1861)) (if (null? x1862) (progn (let ((tmp (gensym "tmp"))) (quasiquote (if ((unquote qcons?) (unquote v)) (match-one (unquote a) (unquote v) ((unquote p) (unquote-splicing tmp)) (match-quasiquote (unquote tmp) (unquote rest) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote a) (unquote fk)))))) (fail1693)))) (fail1693)))) (fail1693)))) (fail1693)))) (fail1693))) (fail1693)))) (fail1693)) (fail1693))) (fail1693))) (fail1693))) (fail1693)))) (fail1693)) (fail1693)) (fail1693)))) (fail1693)) (fail1693)))) (fail1693)))) (fail1693)))) (fail1693)))) (fail1693)))) (fail1693))) (fail1693))) (fail1693)))) (fail1693)))) (fail1693)))))) (if (cons? v1691) (let ((w1863 (car v1691)) (x1864 (cdr v1691))) (let ((abs w1863)) (if (cons? x1864) (let ((w1865 (car x1864)) (x1866 (cdr x1864))) (let ((v w1865)) (if (cons? x1866) (let ((w1867 (car x1866)) (x1868 (cdr x1866))) (if (cons? w1867) (let ((w1869 (car w1867)) (x1870 (cdr w1867))) (if (binary= w1869 (quote unquote)) (if (cons? x1870) (let ((w1871 (car x1870)) (x1872 (cdr x1870))) (let ((p w1871)) (if (null? x1872) (if (cons? x1868) (let ((w1873 (car x1868)) (x1874 (cdr x1868))) (let ((g+s w1873)) (if (cons? x1874) (let ((w1875 (car x1874)) (x1876 (cdr x1874))) (let ((sk w1875)) (if (cons? x1876) (let ((w1877 (car x1876)) (x1878 (cdr x1876))) (let ((fk w1877)) (if (cons? x1878) (let ((w1879 (car x1878)) (x1880 (cdr x1878))) (let ((i w1879)) (if (null? x1880) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail1692)))) (fail1692)))) (fail1692)))) (fail1692)))) (fail1692)) (fail1692)))) (fail1692)) (fail1692))) (fail1692))) (fail1692)))) (fail1692)))) (fail1692))))) (defmacro match-quasiquote-step x (let ((v1881 x)) (let ((fail1882 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1881) (let ((w1883 (car v1881)) (x1884 (cdr v1881))) (let ((abs w1883)) (if (cons? x1884) (let ((w1885 (car x1884)) (x1886 (cdr x1884))) (let ((x w1885)) (if (cons? x1886) (let ((w1887 (car x1886)) (x1888 (cdr x1886))) (let ((q w1887)) (if (cons? x1888) (let ((w1889 (car x1888)) (x1890 (cdr x1888))) (let ((g+s w1889)) (if (cons? x1890) (let ((w1891 (car x1890)) (x1892 (cdr x1890))) (let ((sk w1891)) (if (cons? x1892) (let ((w1893 (car x1892)) (x1894 (cdr x1892))) (let ((fk w1893)) (if (cons? x1894) (let ((w1895 (car x1894)) (x1896 (cdr x1894))) (let ((depth w1895)) (if (cons? x1896) (let ((w1897 (car x1896)) (x1898 (cdr x1896))) (let ((i w1897)) (if (null? x1898) (progn (quasiquote (match-quasiquote (unquote abs) (unquote x) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth)))) (fail1882)))) (fail1882)))) (fail1882)))) (fail1882)))) (fail1882)))) (fail1882)))) (fail1882)))) (fail1882)))) (fail1882))))) (defmacro match-extract-vars x (let ((v1899 x)) (let ((fail1900 (lambda () (let ((fail1901 (lambda () (let ((fail1902 (lambda () (let ((fail1903 (lambda () (let ((fail1904 (lambda () (let ((fail1905 (lambda () (let ((fail1906 (lambda () (let ((fail1907 (lambda () (let ((fail1908 (lambda () (let ((fail1909 (lambda () (let ((fail1910 (lambda () (let ((fail1911 (lambda () (let ((fail1912 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1899) (let ((w1913 (car v1899)) (x1914 (cdr v1899))) (if (cons? w1913) (let ((w1915 (car w1913)) (x1916 (cdr w1913))) (let ((abs w1915)) (if (cons? x1916) (let ((w1917 (car x1916)) (x1918 (cdr x1916))) (let ((phd w1917)) (if (null? x1918) (if (cons? x1914) (let ((w1919 (car x1914)) (x1920 (cdr x1914))) (let ((p w1919)) (if (cons? x1920) (let ((w1921 (car x1920)) (x1922 (cdr x1920))) (let ((k w1921)) (if (cons? x1922) (let ((w1923 (car x1922)) (x1924 (cdr x1922))) (let ((i w1923)) (if (cons? x1924) (let ((w1925 (car x1924)) (x1926 (cdr x1924))) (let ((v w1925)) (if (null? x1926) (progn (quasiquote (abs-extract-vars () (unquote abs) (unquote phd) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail1912)))) (fail1912)))) (fail1912)))) (fail1912)))) (fail1912)) (fail1912)))) (fail1912)))) (fail1912))) (fail1912)))))) (if (cons? v1899) (let ((w1927 (car v1899)) (x1928 (cdr v1899))) (let ((abs w1927)) (if (cons? x1928) (let ((w1929 (car x1928)) (x1930 (cdr x1928))) (if (cons? w1929) (let ((w1931 (car w1929)) (x1932 (cdr w1929))) (if (binary= w1931 (quote <>)) (if (cons? x1932) (let ((w1933 (car x1932)) (x1934 (cdr x1932))) (let ((f w1933)) (if (cons? x1934) (let ((w1935 (car x1934)) (x1936 (cdr x1934))) (let ((p w1935)) (if (null? x1936) (if (cons? x1930) (let ((w1937 (car x1930)) (x1938 (cdr x1930))) (let ((k w1937)) (if (cons? x1938) (let ((w1939 (car x1938)) (x1940 (cdr x1938))) (let ((i w1939)) (if (cons? x1940) (let ((w1941 (car x1940)) (x1942 (cdr x1940))) (let ((v w1941)) (if (null? x1942) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail1911)))) (fail1911)))) (fail1911)))) (fail1911)) (fail1911)))) (fail1911)))) (fail1911)) (fail1911))) (fail1911))) (fail1911)))) (fail1911)))))) (if (cons? v1899) (let ((w1943 (car v1899)) (x1944 (cdr v1899))) (let ((abs w1943)) (if (cons? x1944) (let ((w1945 (car x1944)) (x1946 (cdr x1944))) (if (cons? w1945) (let ((w1947 (car w1945)) (x1948 (cdr w1945))) (if (binary= w1947 (quote not)) (let ((p x1948)) (let ((x x1946)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail1910))) (fail1910))) (fail1910)))) (fail1910)))))) (if (cons? v1899) (let ((w1949 (car v1899)) (x1950 (cdr v1899))) (let ((abs w1949)) (if (cons? x1950) (let ((w1951 (car x1950)) (x1952 (cdr x1950))) (if (cons? w1951) (let ((w1953 (car w1951)) (x1954 (cdr w1951))) (if (binary= w1953 (quote or)) (let ((p x1954)) (let ((x x1952)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail1909))) (fail1909))) (fail1909)))) (fail1909)))))) (if (cons? v1899) (let ((w1955 (car v1899)) (x1956 (cdr v1899))) (let ((abs w1955)) (if (cons? x1956) (let ((w1957 (car x1956)) (x1958 (cdr x1956))) (if (cons? w1957) (let ((w1959 (car w1957)) (x1960 (cdr w1957))) (if (binary= w1959 (quote and)) (let ((p x1960)) (let ((x x1958)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail1908))) (fail1908))) (fail1908)))) (fail1908)))))) (if (cons? v1899) (let ((w1961 (car v1899)) (x1962 (cdr v1899))) (let ((abs w1961)) (if (cons? x1962) (let ((w1963 (car x1962)) (x1964 (cdr x1962))) (if (cons? w1963) (let ((w1965 (car w1963)) (x1966 (cdr w1963))) (if (binary= w1965 (quote quasiquote)) (if (cons? x1966) (let ((w1967 (car x1966)) (x1968 (cdr x1966))) (let ((x w1967)) (if (null? x1968) (if (cons? x1964) (let ((w1969 (car x1964)) (x1970 (cdr x1964))) (let ((k w1969)) (if (cons? x1970) (let ((w1971 (car x1970)) (x1972 (cdr x1970))) (let ((i w1971)) (if (cons? x1972) (let ((w1973 (car x1972)) (x1974 (cdr x1972))) (let ((v w1973)) (if (null? x1974) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (t)))) (fail1907)))) (fail1907)))) (fail1907)))) (fail1907)) (fail1907)))) (fail1907)) (fail1907))) (fail1907))) (fail1907)))) (fail1907)))))) (if (cons? v1899) (let ((w1975 (car v1899)) (x1976 (cdr v1899))) (let ((abs w1975)) (if (cons? x1976) (let ((w1977 (car x1976)) (x1978 (cdr x1976))) (if (cons? w1977) (let ((w1979 (car w1977)) (x1980 (cdr w1977))) (if (binary= w1979 (quote unquote-splicing)) (if (cons? x1980) (let ((w1981 (car x1980)) (x1982 (cdr x1980))) (let ((x w1981)) (if (null? x1982) (if (cons? x1978) (let ((w1983 (car x1978)) (x1984 (cdr x1978))) (if (cons? w1983) (let ((w1985 (car w1983)) (x1986 (cdr w1983))) (let ((k w1985)) (let ((kk x1986)) (if (list? kk) (if (cons? x1984) (let ((w1990 (car x1984)) (x1991 (cdr x1984))) (let ((i w1990)) (if (cons? x1991) (let ((w1992 (car x1991)) (x1993 (cdr x1991))) (let ((v w1992)) (if (null? x1993) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail1906)))) (fail1906)))) (fail1906)) (fail1906))))) (fail1906))) (fail1906)) (fail1906)))) (fail1906)) (fail1906))) (fail1906))) (fail1906)))) (fail1906)))))) (if (cons? v1899) (let ((w1994 (car v1899)) (x1995 (cdr v1899))) (let ((abs w1994)) (if (cons? x1995) (let ((w1996 (car x1995)) (x1997 (cdr x1995))) (if (cons? w1996) (let ((w1998 (car w1996)) (x1999 (cdr w1996))) (if (binary= w1998 (quote unquote)) (if (cons? x1999) (let ((w2000 (car x1999)) (x2001 (cdr x1999))) (let ((x w2000)) (if (null? x2001) (if (cons? x1997) (let ((w2002 (car x1997)) (x2003 (cdr x1997))) (if (cons? w2002) (let ((w2004 (car w2002)) (x2005 (cdr w2002))) (let ((k w2004)) (let ((kk x2005)) (if (list? kk) (if (cons? x2003) (let ((w2009 (car x2003)) (x2010 (cdr x2003))) (let ((i w2009)) (if (cons? x2010) (let ((w2011 (car x2010)) (x2012 (cdr x2010))) (let ((v w2011)) (if (null? x2012) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail1905)))) (fail1905)))) (fail1905)) (fail1905))))) (fail1905))) (fail1905)) (fail1905)))) (fail1905)) (fail1905))) (fail1905))) (fail1905)))) (fail1905)))))) (if (cons? v1899) (let ((w2013 (car v1899)) (x2014 (cdr v1899))) (let ((abs w2013)) (if (cons? x2014) (let ((w2015 (car x2014)) (x2016 (cdr x2014))) (if (cons? w2015) (let ((w2017 (car w2015)) (x2018 (cdr w2015))) (if (binary= w2017 (quote quote)) (if (cons? x2018) (let ((w2019 (car x2018)) (x2020 (cdr x2018))) (let ((x w2019)) (if (null? x2020) (if (cons? x2016) (let ((w2021 (car x2016)) (x2022 (cdr x2016))) (if (cons? w2021) (let ((w2023 (car w2021)) (x2024 (cdr w2021))) (let ((k w2023)) (let ((kk x2024)) (if (list? kk) (if (cons? x2022) (let ((w2028 (car x2022)) (x2029 (cdr x2022))) (let ((i w2028)) (if (cons? x2029) (let ((w2030 (car x2029)) (x2031 (cdr x2029))) (let ((v w2030)) (if (null? x2031) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail1904)))) (fail1904)))) (fail1904)) (fail1904))))) (fail1904))) (fail1904)) (fail1904)))) (fail1904)) (fail1904))) (fail1904))) (fail1904)))) (fail1904)))))) (if (cons? v1899) (let ((w2032 (car v1899)) (x2033 (cdr v1899))) (let ((abs w2032)) (if (cons? x2033) (let ((w2034 (car x2033)) (x2035 (cdr x2033))) (if (cons? w2034) (let ((w2036 (car w2034)) (x2037 (cdr w2034))) (if (binary= w2036 (quote =)) (if (cons? x2037) (let ((w2038 (car x2037)) (x2039 (cdr x2037))) (let ((u w2038)) (if (cons? x2039) (let ((w2040 (car x2039)) (x2041 (cdr x2039))) (let ((m w2040)) (if (cons? x2041) (let ((w2042 (car x2041)) (x2043 (cdr x2041))) (let ((p w2042)) (if (null? x2043) (let ((x x2035)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x))))) (fail1903)))) (fail1903)))) (fail1903)))) (fail1903)) (fail1903))) (fail1903))) (fail1903)))) (fail1903)))))) (if (cons? v1899) (let ((w2044 (car v1899)) (x2045 (cdr v1899))) (let ((abs w2044)) (if (cons? x2045) (let ((w2046 (car x2045)) (x2047 (cdr x2045))) (if (cons? w2046) (let ((w2048 (car w2046)) (x2049 (cdr w2046))) (if (binary= w2048 (quote =)) (if (cons? x2049) (let ((w2050 (car x2049)) (x2051 (cdr x2049))) (let ((proc w2050)) (if (cons? x2051) (let ((w2052 (car x2051)) (x2053 (cdr x2051))) (let ((p w2052)) (if (null? x2053) (let ((x x2047)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x))))) (fail1902)))) (fail1902)))) (fail1902)) (fail1902))) (fail1902))) (fail1902)))) (fail1902)))))) (if (cons? v1899) (let ((w2054 (car v1899)) (x2055 (cdr v1899))) (let ((abs w2054)) (if (cons? x2055) (let ((w2056 (car x2055)) (x2057 (cdr x2055))) (if (cons? w2056) (let ((w2058 (car w2056)) (x2059 (cdr w2056))) (if (binary= w2058 (quote $)) (if (cons? x2059) (let ((w2060 (car x2059)) (x2061 (cdr x2059))) (let ((rec w2060)) (let ((p x2061)) (let ((x x2057)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))))) (fail1901)) (fail1901))) (fail1901))) (fail1901)))) (fail1901)))))) (if (cons? v1899) (let ((w2062 (car v1899)) (x2063 (cdr v1899))) (let ((abs w2062)) (if (cons? x2063) (let ((w2064 (car x2063)) (x2065 (cdr x2063))) (if (cons? w2064) (let ((w2066 (car w2064)) (x2067 (cdr w2064))) (if (binary= w2066 (quote ?)) (if (cons? x2067) (let ((w2068 (car x2067)) (x2069 (cdr x2067))) (let ((pred w2068)) (let ((p x2069)) (let ((x x2065)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))))) (fail1900)) (fail1900))) (fail1900))) (fail1900)))) (fail1900))))) (defmacro match-extract-vars2 x (let ((v2070 x)) (let ((fail2071 (lambda () (let ((fail2072 (lambda () (let ((fail2073 (lambda () (let ((fail2074 (lambda () (let ((fail2075 (lambda () (let ((fail2076 (lambda () (let ((fail2077 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2070) (let ((w2078 (car v2070)) (x2079 (cdr v2070))) (let ((abs w2078)) (if (cons? x2079) (let ((w2080 (car x2079)) (x2081 (cdr x2079))) (let ((p w2080)) (if (cons? x2081) (let ((w2082 (car x2081)) (x2083 (cdr x2081))) (if (cons? w2082) (let ((w2084 (car w2082)) (x2085 (cdr w2082))) (let ((k w2084)) (let ((kk x2085)) (if (list? kk) (if (cons? x2083) (let ((w2089 (car x2083)) (x2090 (cdr x2083))) (let ((i w2089)) (if (list? i) (if (cons? x2090) (let ((w2094 (car x2090)) (x2095 (cdr x2090))) (let ((v w2094)) (if (null? x2095) (progn (let ((p-ls (gensym "p-ls"))) (if (let ((G002096 (member p i))) (if G002096 G002096 (null? (symbol? p)))) (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v))) (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (((unquote p) (unquote p-ls)) (unquote-splicing v))))))) (fail2077)))) (fail2077)) (fail2077)))) (fail2077)) (fail2077))))) (fail2077))) (fail2077)))) (fail2077)))) (fail2077)))))) (if (cons? v2070) (let ((w2097 (car v2070)) (x2098 (cdr v2070))) (let ((abs w2097)) (if (cons? x2098) (let ((w2099 (car x2098)) (x2100 (cdr x2098))) (if (binary= w2099 (quote ***)) (if (cons? x2100) (let ((w2101 (car x2100)) (x2102 (cdr x2100))) (if (cons? w2101) (let ((w2103 (car w2101)) (x2104 (cdr w2101))) (let ((k w2103)) (let ((kk x2104)) (if (list? kk) (if (cons? x2102) (let ((w2108 (car x2102)) (x2109 (cdr x2102))) (let ((i w2108)) (if (cons? x2109) (let ((w2110 (car x2109)) (x2111 (cdr x2109))) (let ((v w2110)) (if (null? x2111) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2076)))) (fail2076)))) (fail2076)) (fail2076))))) (fail2076))) (fail2076)) (fail2076))) (fail2076)))) (fail2076)))))) (if (cons? v2070) (let ((w2112 (car v2070)) (x2113 (cdr v2070))) (let ((abs w2112)) (if (cons? x2113) (let ((w2114 (car x2113)) (x2115 (cdr x2113))) (if (binary= w2114 (quote ___)) (if (cons? x2115) (let ((w2116 (car x2115)) (x2117 (cdr x2115))) (if (cons? w2116) (let ((w2118 (car w2116)) (x2119 (cdr w2116))) (let ((k w2118)) (let ((kk x2119)) (if (list? kk) (if (cons? x2117) (let ((w2123 (car x2117)) (x2124 (cdr x2117))) (let ((i w2123)) (if (cons? x2124) (let ((w2125 (car x2124)) (x2126 (cdr x2124))) (let ((v w2125)) (if (null? x2126) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2075)))) (fail2075)))) (fail2075)) (fail2075))))) (fail2075))) (fail2075)) (fail2075))) (fail2075)))) (fail2075)))))) (if (cons? v2070) (let ((w2127 (car v2070)) (x2128 (cdr v2070))) (let ((abs w2127)) (if (cons? x2128) (let ((w2129 (car x2128)) (x2130 (cdr x2128))) (if (binary= w2129 (quote _)) (if (cons? x2130) (let ((w2131 (car x2130)) (x2132 (cdr x2130))) (if (cons? w2131) (let ((w2133 (car w2131)) (x2134 (cdr w2131))) (let ((k w2133)) (let ((kk x2134)) (if (list? kk) (if (cons? x2132) (let ((w2138 (car x2132)) (x2139 (cdr x2132))) (let ((i w2138)) (if (cons? x2139) (let ((w2140 (car x2139)) (x2141 (cdr x2139))) (let ((v w2140)) (if (null? x2141) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2074)))) (fail2074)))) (fail2074)) (fail2074))))) (fail2074))) (fail2074)) (fail2074))) (fail2074)))) (fail2074)))))) (if (cons? v2070) (let ((w2142 (car v2070)) (x2143 (cdr v2070))) (let ((abs w2142)) (if (cons? x2143) (let ((w2144 (car x2143)) (x2145 (cdr x2143))) (if (vector? w2144) (let ((len2146 (vector-size w2144))) (if (>= len2146 0) (letfuns ((loop2148 (j2149 p-ls2147) (if (>= j2149 len2146) (let ((p (reverse p-ls2147))) (let ((x x2145)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (let ((w2150 (vector-ref w2144 j2149))) (let ((p w2150)) (loop2148 (+ j2149 1) (cons p p-ls2147))))))) (loop2148 0 (quote ()))) (fail2073))) (fail2073))) (fail2073)))) (fail2073)))))) (if (cons? v2070) (let ((w2151 (car v2070)) (x2152 (cdr v2070))) (let ((abs w2151)) (if (cons? x2152) (let ((w2153 (car x2152)) (x2154 (cdr x2152))) (if (cons? w2153) (let ((w2155 (car w2153)) (x2156 (cdr w2153))) (let ((p w2155)) (let ((q x2156)) (if (cons? x2154) (let ((w2157 (car x2154)) (x2158 (cdr x2154))) (let ((k w2157)) (if (cons? x2158) (let ((w2159 (car x2158)) (x2160 (cdr x2158))) (let ((i w2159)) (if (cons? x2160) (let ((w2161 (car x2160)) (x2162 (cdr x2160))) (let ((v w2161)) (if (null? x2162) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-extract-vars-step (unquote q) (unquote k) (unquote i) (unquote v)) (unquote i) ()))) (fail2072)))) (fail2072)))) (fail2072)))) (fail2072))))) (fail2072))) (fail2072)))) (fail2072)))))) (if (cons? v2070) (let ((w2163 (car v2070)) (x2164 (cdr v2070))) (let ((abs w2163)) (if (cons? x2164) (let ((w2165 (car x2164)) (x2166 (cdr x2164))) (if (cons? w2165) (let ((w2167 (car w2165)) (x2168 (cdr w2165))) (let ((p w2167)) (if (cons? x2168) (let ((w2169 (car x2168)) (x2170 (cdr x2168))) (let ((q w2169)) (let ((r x2170)) (if (cons? x2166) (let ((w2171 (car x2166)) (x2172 (cdr x2166))) (let ((k w2171)) (if (cons? x2172) (let ((w2173 (car x2172)) (x2174 (cdr x2172))) (let ((i w2173)) (if (cons? x2174) (let ((w2175 (car x2174)) (x2176 (cdr x2174))) (let ((v w2175)) (if (null? x2176) (progn (quasiquote (match-check-ellipse (unquote q) (match-extract-vars (unquote abs) ((unquote p) (unquote-splicing r)) (unquote k) (unquote i) (unquote v)) (match-extract-vars (unquote abs) (unquote p) (match-extract-vars-step ((unquote q) (unquote-splicing r)) (unquote k) (unquote i) (unquote v)) (unquote i) ())))) (fail2071)))) (fail2071)))) (fail2071)))) (fail2071))))) (fail2071)))) (fail2071))) (fail2071)))) (fail2071))))) (defmacro abs-extract-vars x (let ((v2177 x)) (let ((fail2178 (lambda () (let ((fail2179 (lambda () (let ((fail2180 (lambda () (let ((fail2181 (lambda () (let ((fail2182 (lambda () (let ((fail2183 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2177) (let ((w2184 (car v2177)) (x2185 (cdr v2177))) (if (null? w2184) (if (cons? x2185) (let ((w2186 (car x2185)) (x2187 (cdr x2185))) (let ((a w2186)) (if (cons? x2187) (let ((w2188 (car x2187)) (x2189 (cdr x2187))) (let ((phd w2188)) (if (cons? x2189) (let ((w2190 (car x2189)) (x2191 (cdr x2189))) (let ((p w2190)) (if (cons? x2191) (let ((w2192 (car x2191)) (x2193 (cdr x2191))) (let ((k w2192)) (if (cons? x2193) (let ((w2194 (car x2193)) (x2195 (cdr x2193))) (let ((i w2194)) (if (cons? x2195) (let ((w2196 (car x2195)) (x2197 (cdr x2195))) (let ((v w2196)) (if (null? x2197) (progn (quasiquote (match-extract-phd () (unquote phd) (unquote a) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail2183)))) (fail2183)))) (fail2183)))) (fail2183)))) (fail2183)))) (fail2183)))) (fail2183)) (fail2183))) (fail2183)))))) (if (cons? v2177) (let ((w2198 (car v2177)) (x2199 (cdr v2177))) (let ((abs w2198)) (if (list? abs) (if (cons? x2199) (let ((w2203 (car x2199)) (x2204 (cdr x2199))) (if (cons? w2203) (let ((w2205 (car w2203)) (x2206 (cdr w2203))) (if (cons? w2205) (let ((w2207 (car w2205)) (x2208 (cdr w2205))) (let ((a w2207)) (if (null? x2208) (let ((us x2206)) (if (list? us) (if (cons? x2204) (let ((w2212 (car x2204)) (x2213 (cdr x2204))) (let ((phd w2212)) (if (cons? x2213) (let ((w2214 (car x2213)) (x2215 (cdr x2213))) (if (cons? w2214) (let ((w2216 (car w2214)) (x2217 (cdr w2214))) (let ((b w2216)) (let ((w x2217)) (if (list? w) (if (cons? x2215) (let ((w2221 (car x2215)) (x2222 (cdr x2215))) (let ((k w2221)) (if (cons? x2222) (let ((w2223 (car x2222)) (x2224 (cdr x2222))) (let ((i w2223)) (if (cons? x2224) (let ((w2225 (car x2224)) (x2226 (cdr x2224))) (let ((v w2225)) (if (null? x2226) (progn (if (eq a b) (quasiquote (match-extract-vars ((((unquote a)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (unquote v))) (quasiquote (abs-extract-vars (((unquote a)) (unquote-splicing abs)) (unquote us) (unquote phd) ((unquote b) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2182)))) (fail2182)))) (fail2182)))) (fail2182)) (fail2182))))) (fail2182))) (fail2182)))) (fail2182)) (fail2182))) (fail2182)))) (fail2182))) (fail2182))) (fail2182)) (fail2182)))) (fail2182)))))) (if (cons? v2177) (let ((w2227 (car v2177)) (x2228 (cdr v2177))) (let ((abs w2227)) (if (list? abs) (if (cons? x2228) (let ((w2232 (car x2228)) (x2233 (cdr x2228))) (if (cons? w2232) (let ((w2234 (car w2232)) (x2235 (cdr w2232))) (if (cons? w2234) (let ((w2236 (car w2234)) (x2237 (cdr w2234))) (let ((a w2236)) (if (cons? x2237) (let ((w2238 (car x2237)) (x2239 (cdr x2237))) (let ((x w2238)) (let ((xs x2239)) (let ((us x2235)) (if (list? us) (if (cons? x2233) (let ((w2243 (car x2233)) (x2244 (cdr x2233))) (let ((phd w2243)) (if (cons? x2244) (let ((w2245 (car x2244)) (x2246 (cdr x2244))) (if (cons? w2245) (let ((w2247 (car w2245)) (x2248 (cdr w2245))) (let ((b w2247)) (let ((w x2248)) (if (list? w) (if (cons? x2246) (let ((w2252 (car x2246)) (x2253 (cdr x2246))) (let ((k w2252)) (if (cons? x2253) (let ((w2254 (car x2253)) (x2255 (cdr x2253))) (let ((i w2254)) (if (cons? x2255) (let ((w2256 (car x2255)) (x2257 (cdr x2255))) (let ((v w2256)) (if (null? x2257) (progn (if (eq a b) (let ((x-ls (gensym "x-ls"))) (quasiquote (match-extract-vars ((((unquote a) (unquote-splicing xs)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (((unquote x) (unquote x-ls)) (unquote-splicing v))))) (quasiquote (abs-extract-vars (((unquote a) (unquote x) (unquote-splicing xs)) (unquote-splicing abs)) (unquote us) (unquote phd) ((unquote b) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2181)))) (fail2181)))) (fail2181)))) (fail2181)) (fail2181))))) (fail2181))) (fail2181)))) (fail2181)) (fail2181)))))) (fail2181)))) (fail2181))) (fail2181))) (fail2181)) (fail2181)))) (fail2181)))))) (if (cons? v2177) (let ((w2258 (car v2177)) (x2259 (cdr v2177))) (let ((abs w2258)) (if (list? abs) (if (cons? x2259) (let ((w2263 (car x2259)) (x2264 (cdr x2259))) (if (cons? w2263) (let ((w2265 (car w2263)) (x2266 (cdr w2263))) (if (cons? w2265) (let ((w2267 (car w2265)) (x2268 (cdr w2265))) (let ((a w2267)) (if (null? x2268) (let ((us x2266)) (if (list? us) (if (cons? x2264) (let ((w2272 (car x2264)) (x2273 (cdr x2264))) (let ((phd w2272)) (if (cons? x2273) (let ((w2274 (car x2273)) (x2275 (cdr x2273))) (if (cons? w2274) (let ((w2276 (car w2274)) (x2277 (cdr w2274))) (if (cons? w2276) (let ((w2278 (car w2276)) (x2279 (cdr w2276))) (let ((b w2278)) (let ((bs x2279)) (if (list? bs) (let ((w x2277)) (if (list? w) (if (cons? x2275) (let ((w2286 (car x2275)) (x2287 (cdr x2275))) (let ((k w2286)) (if (cons? x2287) (let ((w2288 (car x2287)) (x2289 (cdr x2287))) (let ((i w2288)) (if (cons? x2289) (let ((w2290 (car x2289)) (x2291 (cdr x2289))) (let ((v w2290)) (if (null? x2291) (progn (if (eq a b) (quasiquote (match-extract-vars ((((unquote a)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (unquote v))) (quasiquote (abs-extract-vars (((unquote a)) (unquote-splicing abs)) (unquote us) (unquote phd) (((unquote b) (unquote-splicing bs)) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2180)))) (fail2180)))) (fail2180)))) (fail2180)) (fail2180))) (fail2180))))) (fail2180))) (fail2180))) (fail2180)))) (fail2180)) (fail2180))) (fail2180)))) (fail2180))) (fail2180))) (fail2180)) (fail2180)))) (fail2180)))))) (if (cons? v2177) (let ((w2292 (car v2177)) (x2293 (cdr v2177))) (let ((abs w2292)) (if (list? abs) (if (cons? x2293) (let ((w2297 (car x2293)) (x2298 (cdr x2293))) (if (cons? w2297) (let ((w2299 (car w2297)) (x2300 (cdr w2297))) (if (cons? w2299) (let ((w2301 (car w2299)) (x2302 (cdr w2299))) (let ((a w2301)) (if (cons? x2302) (let ((w2303 (car x2302)) (x2304 (cdr x2302))) (let ((x w2303)) (let ((xs x2304)) (let ((us x2300)) (if (list? us) (if (cons? x2298) (let ((w2308 (car x2298)) (x2309 (cdr x2298))) (let ((phd w2308)) (if (cons? x2309) (let ((w2310 (car x2309)) (x2311 (cdr x2309))) (if (cons? w2310) (let ((w2312 (car w2310)) (x2313 (cdr w2310))) (if (cons? w2312) (let ((w2314 (car w2312)) (x2315 (cdr w2312))) (let ((b w2314)) (let ((bs x2315)) (if (list? bs) (let ((w x2313)) (if (list? w) (if (cons? x2311) (let ((w2322 (car x2311)) (x2323 (cdr x2311))) (let ((k w2322)) (if (cons? x2323) (let ((w2324 (car x2323)) (x2325 (cdr x2323))) (let ((i w2324)) (if (cons? x2325) (let ((w2326 (car x2325)) (x2327 (cdr x2325))) (let ((v w2326)) (if (null? x2327) (progn (if (eq a b) (let ((x-ls (gensym "x-ls"))) (quasiquote (match-extract-vars ((((unquote a) (unquote-splicing xs)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (((unquote x) (unquote x-ls)) (unquote-splicing v))))) (quasiquote (abs-extract-vars (((unquote a) (unquote x) (unquote-splicing xs)) (unquote-splicing abs)) (unquote us) (unquote phd) (((unquote b) (unquote-splicing bs)) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2179)))) (fail2179)))) (fail2179)))) (fail2179)) (fail2179))) (fail2179))))) (fail2179))) (fail2179))) (fail2179)))) (fail2179)) (fail2179)))))) (fail2179)))) (fail2179))) (fail2179))) (fail2179)) (fail2179)))) (fail2179)))))) (if (cons? v2177) (let ((w2328 (car v2177)) (x2329 (cdr v2177))) (let ((abs w2328)) (if (cons? x2329) (let ((w2330 (car x2329)) (x2331 (cdr x2329))) (if (null? w2330) (if (cons? x2331) (let ((w2332 (car x2331)) (x2333 (cdr x2331))) (let ((phd w2332)) (if (cons? x2333) (let ((w2334 (car x2333)) (x2335 (cdr x2333))) (let ((p w2334)) (let ((l x2335)) (progn (quasiquote (match-extract-phd () (unquote phd) (unquote abs) (unquote p) (unquote-splicing l))))))) (fail2178)))) (fail2178)) (fail2178))) (fail2178)))) (fail2178))))) (defmacro match-extract-phd x (let ((v2336 x)) (let ((fail2337 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2336) (let ((w2338 (car v2336)) (x2339 (cdr v2336))) (if (cons? x2339) (let ((w2340 (car x2339)) (x2341 (cdr x2339))) (let ((phd w2340)) (if (cons? x2341) (let ((w2342 (car x2341)) (x2343 (cdr x2341))) (let ((abs w2342)) (let ((l x2343)) (progn (quasiquote (match-extract-vars2 ((unquote abs) (unquote phd)) (unquote-splicing l))))))) (fail2337)))) (fail2337))) (fail2337))))) (defmacro match-extract-vars-step x (let ((v2344 x)) (let ((fail2345 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2344) (let ((w2346 (car v2344)) (x2347 (cdr v2344))) (let ((abs w2346)) (if (cons? x2347) (let ((w2348 (car x2347)) (x2349 (cdr x2347))) (let ((p w2348)) (if (cons? x2349) (let ((w2350 (car x2349)) (x2351 (cdr x2349))) (let ((k w2350)) (if (cons? x2351) (let ((w2352 (car x2351)) (x2353 (cdr x2351))) (let ((i w2352)) (if (cons? x2353) (let ((w2354 (car x2353)) (x2355 (cdr x2353))) (let ((v w2354)) (if (cons? x2355) (let ((w2356 (car x2355)) (x2357 (cdr x2355))) (let ((a w2356)) (letfuns ((loop (ls2361 p-ls2359 p-ls2358) (if (null? ls2361) (progn (let ((v2-ls (reverse p-ls2359)) (v2 (reverse p-ls2358))) (if (null? x2357) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote k) ((unquote-splicing v2) (unquote-splicing i)) ((unquote-splicing a) (unquote-splicing v))))) (fail2345)))) (if (cons? ls2361) (progn (let ((w2362 (car ls2361))) (if (cons? w2362) (let ((w2363 (car w2362)) (x2364 (cdr w2362))) (let ((v2 w2363)) (if (cons? x2364) (let ((w2365 (car x2364)) (x2366 (cdr x2364))) (let ((v2-ls w2365)) (if (null? x2366) (loop (cdr ls2361) (cons v2-ls p-ls2359) (cons v2 p-ls2358)) (fail2345)))) (fail2345)))) (fail2345)))) (if else (progn (fail2345)) (cond)))))) (loop w2356 (quote ()) (quote ()))))) (fail2345)))) (fail2345)))) (fail2345)))) (fail2345)))) (fail2345)))) (fail2345))))) (defmacro match-extract-quasiquote-vars x (let ((v2367 x)) (let ((fail2368 (lambda () (let ((fail2369 (lambda () (let ((fail2370 (lambda () (let ((fail2371 (lambda () (let ((fail2372 (lambda () (let ((fail2373 (lambda () (let ((fail2374 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2367) (let ((w2375 (car v2367)) (x2376 (cdr v2367))) (let ((abs w2375)) (if (cons? x2376) (let ((w2377 (car x2376)) (x2378 (cdr x2376))) (let ((x w2377)) (if (cons? x2378) (let ((w2379 (car x2378)) (x2380 (cdr x2378))) (if (cons? w2379) (let ((w2381 (car w2379)) (x2382 (cdr w2379))) (let ((k w2381)) (let ((kk x2382)) (if (list? kk) (if (cons? x2380) (let ((w2386 (car x2380)) (x2387 (cdr x2380))) (let ((i w2386)) (if (cons? x2387) (let ((w2388 (car x2387)) (x2389 (cdr x2387))) (let ((v w2388)) (if (cons? x2389) (let ((w2390 (car x2389)) (x2391 (cdr x2389))) (if (cons? w2390) (let ((w2392 (car w2390)) (x2393 (cdr w2390))) (let ((t w2392)) (let ((d x2393)) (if (null? x2391) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2374))))) (fail2374))) (fail2374)))) (fail2374)))) (fail2374)) (fail2374))))) (fail2374))) (fail2374)))) (fail2374)))) (fail2374)))))) (if (cons? v2367) (let ((w2394 (car v2367)) (x2395 (cdr v2367))) (let ((abs w2394)) (if (cons? x2395) (let ((w2396 (car x2395)) (x2397 (cdr x2395))) (if (vector? w2396) (let ((len2398 (vector-size w2396))) (if (>= len2398 0) (letfuns ((loop2400 (j2401 p-ls2399) (if (>= j2401 len2398) (let ((x (reverse p-ls2399))) (if (cons? x2397) (let ((w2403 (car x2397)) (x2404 (cdr x2397))) (let ((k w2403)) (if (cons? x2404) (let ((w2405 (car x2404)) (x2406 (cdr x2404))) (let ((i w2405)) (if (cons? x2406) (let ((w2407 (car x2406)) (x2408 (cdr x2406))) (let ((v w2407)) (if (cons? x2408) (let ((w2409 (car x2408)) (x2410 (cdr x2408))) (if (cons? w2409) (let ((w2411 (car w2409)) (x2412 (cdr w2409))) (let ((t w2411)) (let ((d x2412)) (if (null? x2410) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail2373))))) (fail2373))) (fail2373)))) (fail2373)))) (fail2373)))) (fail2373))) (let ((w2402 (vector-ref w2396 j2401))) (let ((x w2402)) (loop2400 (+ j2401 1) (cons x p-ls2399))))))) (loop2400 0 (quote ()))) (fail2373))) (fail2373))) (fail2373)))) (fail2373)))))) (if (cons? v2367) (let ((w2413 (car v2367)) (x2414 (cdr v2367))) (let ((abs w2413)) (if (cons? x2414) (let ((w2415 (car x2414)) (x2416 (cdr x2414))) (if (cons? w2415) (let ((w2417 (car w2415)) (x2418 (cdr w2415))) (let ((x w2417)) (let ((y x2418)) (if (cons? x2416) (let ((w2419 (car x2416)) (x2420 (cdr x2416))) (let ((k w2419)) (if (cons? x2420) (let ((w2421 (car x2420)) (x2422 (cdr x2420))) (let ((i w2421)) (if (cons? x2422) (let ((w2423 (car x2422)) (x2424 (cdr x2422))) (let ((v w2423)) (if (cons? x2424) (let ((w2425 (car x2424)) (x2426 (cdr x2424))) (if (cons? w2425) (let ((w2427 (car w2425)) (x2428 (cdr w2425))) (let ((t w2427)) (let ((d x2428)) (if (null? x2426) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (match-extract-quasiquote-vars-step (unquote y) (unquote k) (unquote i) (unquote v) (unquote d)) (unquote i) ()))) (fail2372))))) (fail2372))) (fail2372)))) (fail2372)))) (fail2372)))) (fail2372))))) (fail2372))) (fail2372)))) (fail2372)))))) (if (cons? v2367) (let ((w2429 (car v2367)) (x2430 (cdr v2367))) (let ((abs w2429)) (if (cons? x2430) (let ((w2431 (car x2430)) (x2432 (cdr x2430))) (if (cons? w2431) (let ((w2433 (car w2431)) (x2434 (cdr w2431))) (if (binary= w2433 (quote uunquote)) (if (cons? x2434) (let ((w2435 (car x2434)) (x2436 (cdr x2434))) (let ((x w2435)) (if (null? x2436) (if (cons? x2432) (let ((w2437 (car x2432)) (x2438 (cdr x2432))) (let ((k w2437)) (if (cons? x2438) (let ((w2439 (car x2438)) (x2440 (cdr x2438))) (let ((i w2439)) (if (cons? x2440) (let ((w2441 (car x2440)) (x2442 (cdr x2440))) (let ((v w2441)) (if (cons? x2442) (let ((w2443 (car x2442)) (x2444 (cdr x2442))) (if (cons? w2443) (let ((w2445 (car w2443)) (x2446 (cdr w2443))) (let ((t w2445)) (let ((d x2446)) (if (null? x2444) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail2371))))) (fail2371))) (fail2371)))) (fail2371)))) (fail2371)))) (fail2371)) (fail2371)))) (fail2371)) (fail2371))) (fail2371))) (fail2371)))) (fail2371)))))) (if (cons? v2367) (let ((w2447 (car v2367)) (x2448 (cdr v2367))) (let ((abs w2447)) (if (cons? x2448) (let ((w2449 (car x2448)) (x2450 (cdr x2448))) (if (cons? w2449) (let ((w2451 (car w2449)) (x2452 (cdr w2449))) (if (binary= w2451 (quote uunquote)) (if (cons? x2452) (let ((w2453 (car x2452)) (x2454 (cdr x2452))) (let ((x w2453)) (if (null? x2454) (if (cons? x2450) (let ((w2455 (car x2450)) (x2456 (cdr x2450))) (let ((k w2455)) (if (cons? x2456) (let ((w2457 (car x2456)) (x2458 (cdr x2456))) (let ((i w2457)) (if (cons? x2458) (let ((w2459 (car x2458)) (x2460 (cdr x2458))) (let ((v w2459)) (if (cons? x2460) (let ((w2461 (car x2460)) (x2462 (cdr x2460))) (if (cons? w2461) (let ((w2463 (car w2461)) (x2464 (cdr w2461))) (let ((t w2463)) (if (null? x2464) (if (null? x2462) (progn (quasiquote (match-extract-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v)))) (fail2370)) (fail2370)))) (fail2370))) (fail2370)))) (fail2370)))) (fail2370)))) (fail2370)) (fail2370)))) (fail2370)) (fail2370))) (fail2370))) (fail2370)))) (fail2370)))))) (if (cons? v2367) (let ((w2465 (car v2367)) (x2466 (cdr v2367))) (let ((abs w2465)) (if (cons? x2466) (let ((w2467 (car x2466)) (x2468 (cdr x2466))) (if (cons? w2467) (let ((w2469 (car w2467)) (x2470 (cdr w2467))) (let ((sk22472 (lambda () (if (cons? x2470) (let ((w2473 (car x2470)) (x2474 (cdr x2470))) (let ((x w2473)) (if (null? x2474) (if (cons? x2468) (let ((w2475 (car x2468)) (x2476 (cdr x2468))) (let ((k w2475)) (if (cons? x2476) (let ((w2477 (car x2476)) (x2478 (cdr x2476))) (let ((i w2477)) (if (cons? x2478) (let ((w2479 (car x2478)) (x2480 (cdr x2478))) (let ((v w2479)) (if (cons? x2480) (let ((w2481 (car x2480)) (x2482 (cdr x2480))) (let ((d w2481)) (if (null? x2482) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) ((quote uunquote) (unquote x)) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail2369)))) (fail2369)))) (fail2369)))) (fail2369)))) (fail2369)) (fail2369)))) (fail2369))))) (if (binary= w2469 (quote unquote)) (sk22472) (if (binary= w2469 (quote unquote-splicing)) (sk22472) (fail2369))))) (fail2369))) (fail2369)))) (fail2369)))))) (if (cons? v2367) (let ((w2483 (car v2367)) (x2484 (cdr v2367))) (let ((abs w2483)) (if (cons? x2484) (let ((w2485 (car x2484)) (x2486 (cdr x2484))) (if (cons? w2485) (let ((w2487 (car w2485)) (x2488 (cdr w2485))) (if (binary= w2487 (quote quasiquote)) (if (cons? x2488) (let ((w2489 (car x2488)) (x2490 (cdr x2488))) (let ((x w2489)) (if (null? x2490) (if (cons? x2486) (let ((w2491 (car x2486)) (x2492 (cdr x2486))) (let ((k w2491)) (if (cons? x2492) (let ((w2493 (car x2492)) (x2494 (cdr x2492))) (let ((i w2493)) (if (cons? x2494) (let ((w2495 (car x2494)) (x2496 (cdr x2494))) (let ((v w2495)) (if (cons? x2496) (let ((w2497 (car x2496)) (x2498 (cdr x2496))) (let ((d w2497)) (if (null? x2498) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (t (unquote-splicing d))))) (fail2368)))) (fail2368)))) (fail2368)))) (fail2368)))) (fail2368)) (fail2368)))) (fail2368)) (fail2368))) (fail2368))) (fail2368)))) (fail2368))))) (defmacro match-extract-quasiquote-vars-step x (let ((v2499 x)) (let ((fail2500 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2499) (let ((w2501 (car v2499)) (x2502 (cdr v2499))) (if (cons? x2502) (let ((w2503 (car x2502)) (x2504 (cdr x2502))) (let ((abs w2503)) (if (cons? x2504) (let ((w2505 (car x2504)) (x2506 (cdr x2504))) (let ((x w2505)) (if (cons? x2506) (let ((w2507 (car x2506)) (x2508 (cdr x2506))) (let ((k w2507)) (if (cons? x2508) (let ((w2509 (car x2508)) (x2510 (cdr x2508))) (let ((i w2509)) (if (cons? x2510) (let ((w2511 (car x2510)) (x2512 (cdr x2510))) (let ((v w2511)) (if (cons? x2512) (let ((w2513 (car x2512)) (x2514 (cdr x2512))) (let ((d w2513)) (if (cons? x2514) (let ((w2515 (car x2514)) (x2516 (cdr x2514))) (let ((a w2515)) (letfuns ((loop (ls2520 p-ls2518 p-ls2517) (if (null? ls2520) (progn (let ((v2-ls (reverse p-ls2518)) (v2 (reverse p-ls2517))) (if (null? x2516) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) ((unquote-splicing v2) (unquote-splicing i)) ((unquote-splicing a) (unquote-splicing v)) (unquote d)))) (fail2500)))) (if (cons? ls2520) (progn (let ((w2521 (car ls2520))) (if (cons? w2521) (let ((w2522 (car w2521)) (x2523 (cdr w2521))) (let ((v2 w2522)) (if (cons? x2523) (let ((w2524 (car x2523)) (x2525 (cdr x2523))) (let ((v2-ls w2524)) (if (null? x2525) (loop (cdr ls2520) (cons v2-ls p-ls2518) (cons v2 p-ls2517)) (fail2500)))) (fail2500)))) (fail2500)))) (if else (progn (fail2500)) (cond)))))) (loop w2515 (quote ()) (quote ()))))) (fail2500)))) (fail2500)))) (fail2500)))) (fail2500)))) (fail2500)))) (fail2500)))) (fail2500))) (fail2500))))) (defmacro match-check-ellipse x (let ((v2526 x)) (let ((fail2527 (lambda () (let ((fail2528 (lambda () (let ((fail2529 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2526) (let ((w2530 (car v2526)) (x2531 (cdr v2526))) (let ((id w2530)) (if (cons? x2531) (let ((w2532 (car x2531)) (x2533 (cdr x2531))) (let ((success-k w2532)) (if (cons? x2533) (let ((w2534 (car x2533)) (x2535 (cdr x2533))) (let ((failure-k w2534)) (if (null? x2535) (progn (if (binary= id (quote ...)) success-k failure-k)) (fail2529)))) (fail2529)))) (fail2529)))) (fail2529)))))) (if (cons? v2526) (let ((w2536 (car v2526)) (x2537 (cdr v2526))) (if (vector? w2536) (let ((len2538 (vector-size w2536))) (if (>= len2538 0) (letfuns ((loop2540 (j2541 p-ls2539) (if (>= j2541 len2538) (let ((a (reverse p-ls2539))) (if (cons? x2537) (let ((w2543 (car x2537)) (x2544 (cdr x2537))) (let ((success-k w2543)) (if (cons? x2544) (let ((w2545 (car x2544)) (x2546 (cdr x2544))) (let ((failure-k w2545)) (if (null? x2546) (progn failure-k) (fail2528)))) (fail2528)))) (fail2528))) (let ((w2542 (vector-ref w2536 j2541))) (let ((a w2542)) (loop2540 (+ j2541 1) (cons a p-ls2539))))))) (loop2540 0 (quote ()))) (fail2528))) (fail2528))) (fail2528)))))) (if (cons? v2526) (let ((w2547 (car v2526)) (x2548 (cdr v2526))) (if (cons? w2547) (let ((w2549 (car w2547)) (x2550 (cdr w2547))) (let ((a w2549)) (let ((b x2550)) (if (cons? x2548) (let ((w2551 (car x2548)) (x2552 (cdr x2548))) (let ((success-k w2551)) (if (cons? x2552) (let ((w2553 (car x2552)) (x2554 (cdr x2552))) (let ((failure-k w2553)) (if (null? x2554) (progn failure-k) (fail2527)))) (fail2527)))) (fail2527))))) (fail2527))) (fail2527))))) (defmacro match-check-identifier x (let ((v2555 x)) (let ((fail2556 (lambda () (let ((fail2557 (lambda () (let ((fail2558 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2555) (let ((w2559 (car v2555)) (x2560 (cdr v2555))) (let ((x w2559)) (if (cons? x2560) (let ((w2561 (car x2560)) (x2562 (cdr x2560))) (let ((success-k w2561)) (if (cons? x2562) (let ((w2563 (car x2562)) (x2564 (cdr x2562))) (let ((failure-k w2563)) (if (null? x2564) (progn (if (symbol? x) success-k failure-k)) (fail2558)))) (fail2558)))) (fail2558)))) (fail2558)))))) (if (cons? v2555) (let ((w2565 (car v2555)) (x2566 (cdr v2555))) (if (vector? w2565) (let ((len2567 (vector-size w2565))) (if (>= len2567 0) (letfuns ((loop2569 (j2570 p-ls2568) (if (>= j2570 len2567) (let ((x (reverse p-ls2568))) (if (cons? x2566) (let ((w2572 (car x2566)) (x2573 (cdr x2566))) (let ((success-k w2572)) (if (cons? x2573) (let ((w2574 (car x2573)) (x2575 (cdr x2573))) (let ((failure-k w2574)) (if (null? x2575) (progn failure-k) (fail2557)))) (fail2557)))) (fail2557))) (let ((w2571 (vector-ref w2565 j2570))) (let ((x w2571)) (loop2569 (+ j2570 1) (cons x p-ls2568))))))) (loop2569 0 (quote ()))) (fail2557))) (fail2557))) (fail2557)))))) (if (cons? v2555) (let ((w2576 (car v2555)) (x2577 (cdr v2555))) (if (cons? w2576) (let ((w2578 (car w2576)) (x2579 (cdr w2576))) (let ((x w2578)) (let ((y x2579)) (if (cons? x2577) (let ((w2580 (car x2577)) (x2581 (cdr x2577))) (let ((success-k w2580)) (if (cons? x2581) (let ((w2582 (car x2581)) (x2583 (cdr x2581))) (let ((failure-k w2582)) (if (null? x2583) (progn failure-k) (fail2556)))) (fail2556)))) (fail2556))))) (fail2556))) (fail2556))))) (defmacro defmatchfun args (let ((name (car args)) (arg (gensym "arg")) (matchers (cdr args))) (if (symbol? name) (quasiquote (deflocal (unquote name) (named-lambda (unquote name) ((unquote arg)) (smatch (unquote arg) (unquote-splicing matchers))))) (if (eq (car name) (quote setter)) (quasiquote ((setter setter) (unquote (cadr name)) (named-lambda (unquote name) ((unquote arg)) (smatch (unquote arg) (unquote-splicing matchers))))) (error <condition> "bad defmatchfun syntax"))))) (defmacro match-lambda matchers (let ((x (gensym "arg"))) (quasiquote (lambda ((unquote x)) (smatch (unquote x) (unquote-splicing matchers)))))) (defmacro match-lambda* matchers (let ((x (gensym "arg"))) (quasiquote (lambda (unquote x) (smatch (unquote x) (unquote-splicing matchers)))))) (defmacro match-let x (let ((v2584 x)) (let ((fail2585 (lambda () (let ((fail2586 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2584) (let ((w2587 (car v2584)) (x2588 (cdr v2584))) (let ((loop w2587)) (let ((rest x2588)) (progn (quasiquote (match-named-let loop () (unquote-splicing rest))))))) (fail2586)))))) (if (cons? v2584) (let ((w2589 (car v2584)) (x2590 (cdr v2584))) (let ((vars w2589)) (if (list? vars) (let ((body x2590)) (progn (quasiquote (match-let/helper let () () (unquote vars) (unquote-splicing body))))) (fail2585)))) (fail2585))))) (defmacro match-letrec x (let ((v2594 x)) (let ((fail2595 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2594) (let ((w2596 (car v2594)) (x2597 (cdr v2594))) (let ((vars w2596)) (let ((body x2597)) (progn (quasiquote (match-let/helper letrec () () (unquote vars) (unquote-splicing body))))))) (fail2595))))) (defmacro match-let/helper x (let ((v2598 x)) (let ((fail2599 (lambda () (let ((fail2600 (lambda () (let ((fail2601 (lambda () (let ((fail2602 (lambda () (let ((fail2603 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2598) (let ((w2604 (car v2598)) (x2605 (cdr v2598))) (let ((let w2604)) (if (cons? x2605) (let ((w2606 (car x2605)) (x2607 (cdr x2605))) (let ((v w2606)) (if (list? v) (if (cons? x2607) (let ((w2611 (car x2607)) (x2612 (cdr x2607))) (let ((p w2611)) (if (list? p) (if (cons? x2612) (let ((w2616 (car x2612)) (x2617 (cdr x2612))) (if (cons? w2616) (let ((w2618 (car w2616)) (x2619 (cdr w2616))) (if (cons? w2618) (let ((w2620 (car w2618)) (x2621 (cdr w2618))) (let ((a w2620)) (if (cons? x2621) (let ((w2622 (car x2621)) (x2623 (cdr x2621))) (let ((expr w2622)) (if (null? x2623) (let ((rest x2619)) (let ((body x2617)) (progn (quasiquote (match-let/helper (unquote let) ((unquote-splicing v) ((unquote a) (unquote expr))) (unquote p) (unquote rest) (unquote-splicing body)))))) (fail2603)))) (fail2603)))) (fail2603))) (fail2603))) (fail2603)) (fail2603)))) (fail2603)) (fail2603)))) (fail2603)))) (fail2603)))))) (if (cons? v2598) (let ((w2624 (car v2598)) (x2625 (cdr v2598))) (let ((let w2624)) (if (cons? x2625) (let ((w2626 (car x2625)) (x2627 (cdr x2625))) (let ((v w2626)) (if (list? v) (if (cons? x2627) (let ((w2631 (car x2627)) (x2632 (cdr x2627))) (let ((p w2631)) (if (list? p) (if (cons? x2632) (let ((w2636 (car x2632)) (x2637 (cdr x2632))) (if (cons? w2636) (let ((w2638 (car w2636)) (x2639 (cdr w2636))) (if (cons? w2638) (let ((w2640 (car w2638)) (x2641 (cdr w2638))) (if (vector? w2640) (let ((len2642 (vector-size w2640))) (if (>= len2642 0) (letfuns ((loop2644 (j2645 p-ls2643) (if (>= j2645 len2642) (let ((a (reverse p-ls2643))) (if (cons? x2641) (let ((w2647 (car x2641)) (x2648 (cdr x2641))) (let ((expr w2647)) (if (null? x2648) (let ((rest x2639)) (let ((body x2637)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-let/helper let ((unquote-splicing v) ((unquote tmp) (unquote expr))) ((unquote-splicing p) (#((unquote-splicing a)) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail2602)))) (fail2602))) (let ((w2646 (vector-ref w2640 j2645))) (let ((a w2646)) (loop2644 (+ j2645 1) (cons a p-ls2643))))))) (loop2644 0 (quote ()))) (fail2602))) (fail2602))) (fail2602))) (fail2602))) (fail2602)) (fail2602)))) (fail2602)) (fail2602)))) (fail2602)))) (fail2602)))))) (if (cons? v2598) (let ((w2649 (car v2598)) (x2650 (cdr v2598))) (let ((let w2649)) (if (cons? x2650) (let ((w2651 (car x2650)) (x2652 (cdr x2650))) (let ((v w2651)) (if (list? v) (if (cons? x2652) (let ((w2656 (car x2652)) (x2657 (cdr x2652))) (let ((p w2656)) (if (list? p) (if (cons? x2657) (let ((w2661 (car x2657)) (x2662 (cdr x2657))) (if (cons? w2661) (let ((w2663 (car w2661)) (x2664 (cdr w2661))) (if (cons? w2663) (let ((w2665 (car w2663)) (x2666 (cdr w2663))) (if (cons? w2665) (let ((w2667 (car w2665)) (x2668 (cdr w2665))) (let ((a w2667)) (let ((b x2668)) (if (cons? x2666) (let ((w2669 (car x2666)) (x2670 (cdr x2666))) (let ((expr w2669)) (if (null? x2670) (let ((rest x2664)) (let ((body x2662)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-let/helper let ((unquote-splicing v) ((unquote tmp) (unquote expr))) ((unquote-splicing p) (((unquote a) (unquote-splicing b)) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail2601)))) (fail2601))))) (fail2601))) (fail2601))) (fail2601))) (fail2601)) (fail2601)))) (fail2601)) (fail2601)))) (fail2601)))) (fail2601)))))) (if (cons? v2598) (let ((w2671 (car v2598)) (x2672 (cdr v2598))) (let ((let w2671)) (if (cons? x2672) (let ((w2673 (car x2672)) (x2674 (cdr x2672))) (let ((a w2673)) (letfuns ((loop (ls2678 p-ls2676 p-ls2675) (if (null? ls2678) (progn (let ((expr (reverse p-ls2676)) (var (reverse p-ls2675))) (if (cons? x2674) (let ((w2680 (car x2674)) (x2681 (cdr x2674))) (let ((b w2680)) (letfuns ((loop (ls2685 p-ls2683 p-ls2682) (if (null? ls2685) (progn (let ((tmp (reverse p-ls2683)) (pat (reverse p-ls2682))) (if (cons? x2681) (let ((w2687 (car x2681)) (x2688 (cdr x2681))) (if (null? w2687) (let ((body x2688)) (progn (quasiquote ((unquote let) (unquote a) (match-let* (unquote b) (unquote-splicing body)))))) (fail2600))) (fail2600)))) (if (cons? ls2685) (progn (let ((w2686 (car ls2685))) (if (cons? w2686) (let ((w2689 (car w2686)) (x2690 (cdr w2686))) (let ((pat w2689)) (if (cons? x2690) (let ((w2691 (car x2690)) (x2692 (cdr x2690))) (let ((tmp w2691)) (if (null? x2692) (loop (cdr ls2685) (cons tmp p-ls2683) (cons pat p-ls2682)) (fail2600)))) (fail2600)))) (fail2600)))) (if else (progn (fail2600)) (cond)))))) (loop w2680 (quote ()) (quote ()))))) (fail2600)))) (if (cons? ls2678) (progn (let ((w2679 (car ls2678))) (if (cons? w2679) (let ((w2693 (car w2679)) (x2694 (cdr w2679))) (let ((var w2693)) (if (cons? x2694) (let ((w2695 (car x2694)) (x2696 (cdr x2694))) (let ((expr w2695)) (if (null? x2696) (loop (cdr ls2678) (cons expr p-ls2676) (cons var p-ls2675)) (fail2600)))) (fail2600)))) (fail2600)))) (if else (progn (fail2600)) (cond)))))) (loop w2673 (quote ()) (quote ()))))) (fail2600)))) (fail2600)))))) (if (cons? v2598) (let ((w2697 (car v2598)) (x2698 (cdr v2598))) (let ((let w2697)) (if (cons? x2698) (let ((w2699 (car x2698)) (x2700 (cdr x2698))) (let ((a w2699)) (letfuns ((loop (ls2704 p-ls2702 p-ls2701) (if (null? ls2704) (progn (let ((expr (reverse p-ls2702)) (var (reverse p-ls2701))) (if (cons? x2700) (let ((w2706 (car x2700)) (x2707 (cdr x2700))) (if (null? w2706) (if (cons? x2707) (let ((w2708 (car x2707)) (x2709 (cdr x2707))) (if (null? w2708) (let ((body x2709)) (progn (quasiquote ((unquote let) (unquote a) (unquote-splicing body))))) (fail2599))) (fail2599)) (fail2599))) (fail2599)))) (if (cons? ls2704) (progn (let ((w2705 (car ls2704))) (if (cons? w2705) (let ((w2710 (car w2705)) (x2711 (cdr w2705))) (let ((var w2710)) (if (cons? x2711) (let ((w2712 (car x2711)) (x2713 (cdr x2711))) (let ((expr w2712)) (if (null? x2713) (loop (cdr ls2704) (cons expr p-ls2702) (cons var p-ls2701)) (fail2599)))) (fail2599)))) (fail2599)))) (if else (progn (fail2599)) (cond)))))) (loop w2699 (quote ()) (quote ()))))) (fail2599)))) (fail2599))))) (defmacro match-named-let x (let ((v2714 x)) (let ((fail2715 (lambda () (let ((fail2716 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2714) (let ((w2717 (car v2714)) (x2718 (cdr v2714))) (if (cons? x2718) (let ((w2719 (car x2718)) (x2720 (cdr x2718))) (let ((loop w2719)) (if (cons? x2720) (let ((w2721 (car x2720)) (x2722 (cdr x2720))) (let ((v w2721)) (if (list? v) (if (cons? x2722) (let ((w2726 (car x2722)) (x2727 (cdr x2722))) (if (cons? w2726) (let ((w2728 (car w2726)) (x2729 (cdr w2726))) (if (cons? w2728) (let ((w2730 (car w2728)) (x2731 (cdr w2728))) (let ((pat w2730)) (if (cons? x2731) (let ((w2732 (car x2731)) (x2733 (cdr x2731))) (let ((expr w2732)) (if (null? x2733) (let ((rest x2729)) (let ((body x2727)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-named-let (unquote loop) ((unquote-splicing v) ((unquote pat) (unquote expr) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail2716)))) (fail2716)))) (fail2716))) (fail2716))) (fail2716)) (fail2716)))) (fail2716)))) (fail2716))) (fail2716)))))) (if (cons? v2714) (let ((w2734 (car v2714)) (x2735 (cdr v2714))) (let ((loop w2734)) (if (cons? x2735) (let ((w2736 (car x2735)) (x2737 (cdr x2735))) (letfuns ((loop (ls2742 p-ls2740 p-ls2739 p-ls2738) (if (null? ls2742) (progn (let ((var (reverse p-ls2740)) (expr (reverse p-ls2739)) (pat (reverse p-ls2738))) (if (cons? x2737) (let ((w2744 (car x2737)) (x2745 (cdr x2737))) (if (null? w2744) (let ((body x2745)) (progn (quasiquote (recur loop (unquote (map (lambda (var expr) (quasiquote ((unquote var) (unquote expr)))) var expr)) (match-let (unquote (map (lambda (pat var) (quasiquote ((unquote pat) (unquote var)))) pat var)) (unquote-splicing body)))))) (fail2715))) (fail2715)))) (if (cons? ls2742) (progn (let ((w2743 (car ls2742))) (if (cons? w2743) (let ((w2746 (car w2743)) (x2747 (cdr w2743))) (let ((pat w2746)) (if (cons? x2747) (let ((w2748 (car x2747)) (x2749 (cdr x2747))) (let ((expr w2748)) (if (cons? x2749) (let ((w2750 (car x2749)) (x2751 (cdr x2749))) (let ((var w2750)) (if (null? x2751) (loop (cdr ls2742) (cons var p-ls2740) (cons expr p-ls2739) (cons pat p-ls2738)) (fail2715)))) (fail2715)))) (fail2715)))) (fail2715)))) (if else (progn (fail2715)) (cond)))))) (loop w2736 (quote ()) (quote ()) (quote ())))) (fail2715)))) (fail2715))))) (defmacro match-let* x (let ((v2752 x)) (let ((fail2753 (lambda () (let ((fail2754 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2752) (let ((w2755 (car v2752)) (x2756 (cdr v2752))) (if (cons? w2755) (let ((w2757 (car w2755)) (x2758 (cdr w2755))) (if (cons? w2757) (let ((w2759 (car w2757)) (x2760 (cdr w2757))) (let ((pat w2759)) (if (cons? x2760) (let ((w2761 (car x2760)) (x2762 (cdr x2760))) (let ((expr w2761)) (if (null? x2762) (let ((rest x2758)) (let ((body x2756)) (progn (quasiquote (smatch (unquote expr) ((unquote pat) (match-let* (unquote rest) (unquote-splicing body)))))))) (fail2754)))) (fail2754)))) (fail2754))) (fail2754))) (fail2754)))))) (if (cons? v2752) (let ((w2763 (car v2752)) (x2764 (cdr v2752))) (if (null? w2763) (let ((body x2764)) (progn (quasiquote (progn (unquote-splicing body))))) (fail2753))) (fail2753))))))