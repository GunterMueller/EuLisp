(defmodule smatch (syntax (syntax-0) import (level-0) export (smatch)) (defmacro smatch X (let ((v0 X)) (let ((fail1 (lambda () (let ((fail2 (lambda () (let ((fail3 (lambda () (let ((fail4 (lambda () (let ((fail5 (lambda () (let ((fail6 (lambda () (let ((fail7 (lambda () (error <condition> "no matching pattern")))) (let ((l v0)) (if (list? l) (progn (quasiquote (match* (() ((car cdr cons? null? binary=) ())) (unquote-splicing l)))) (fail7))))))) (if (cons? v0) (let ((w11 (car v0)) (x12 (cdr v0))) (if (binary= w11 (quote -phd)) (if (cons? x12) (let ((w13 (car x12)) (x14 (cdr x12))) (let ((p w13)) (let ((l x14)) (progn (quasiquote (match* (() (unquote p)) (unquote-splicing l))))))) (fail6)) (fail6))) (fail6)))))) (if (cons? v0) (let ((w15 (car v0)) (x16 (cdr v0))) (if (binary= w15 (quote -abs)) (if (cons? x16) (let ((w17 (car x16)) (x18 (cdr x16))) (let ((abs w17)) (let ((l x18)) (progn (quasiquote (match* ((unquote abs) ((car cdr cons? null? binary=) ())) (unquote-splicing l))))))) (fail5)) (fail5))) (fail5)))))) (if (cons? v0) (let ((w19 (car v0)) (x20 (cdr v0))) (if (binary= w19 (quote -phd)) (if (cons? x20) (let ((w21 (car x20)) (x22 (cdr x20))) (let ((p w21)) (if (cons? x22) (let ((w23 (car x22)) (x24 (cdr x22))) (if (binary= w23 (quote -abs)) (if (cons? x24) (let ((w25 (car x24)) (x26 (cdr x24))) (let ((abs w25)) (let ((l x26)) (progn (quasiquote (match* ((unquote abs) (unquote p)) (unquote-splicing l))))))) (fail4)) (fail4))) (fail4)))) (fail4)) (fail4))) (fail4)))))) (if (cons? v0) (let ((w27 (car v0)) (x28 (cdr v0))) (if (binary= w27 (quote -abs)) (if (cons? x28) (let ((w29 (car x28)) (x30 (cdr x28))) (let ((abs w29)) (if (cons? x30) (let ((w31 (car x30)) (x32 (cdr x30))) (if (binary= w31 (quote -phd)) (if (cons? x32) (let ((w33 (car x32)) (x34 (cdr x32))) (let ((p w33)) (let ((l x34)) (progn (quasiquote (match* ((unquote abs) (unquote p)) (unquote-splicing l))))))) (fail3)) (fail3))) (fail3)))) (fail3)) (fail3))) (fail3)))))) (if (cons? v0) (let ((w35 (car v0)) (x36 (cdr v0))) (let ((atom w35)) (if (null? x36) (progn (error <condition> "no match clauses")) (fail2)))) (fail2)))))) (if (null? v0) (progn (error <condition> "missing match expression")) (fail1))))) (defmacro match* X (let ((v37 X)) (let ((fail38 (lambda () (let ((fail39 (lambda () (let ((fail40 (lambda () (error <condition> "no matching pattern")))) (if (cons? v37) (let ((w41 (car v37)) (x42 (cdr v37))) (let ((abs w41)) (if (cons? x42) (let ((w43 (car x42)) (x44 (cdr x42))) (let ((atom w43)) (let ((b x44)) (if (list? b) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote atom))) (match-next (unquote abs) (unquote v) ((unquote atom) (setq (unquote atom))) (unquote-splicing b)))))) (fail40))))) (fail40)))) (fail40)))))) (if (cons? v37) (let ((w48 (car v37)) (x49 (cdr v37))) (let ((abs w48)) (if (cons? x49) (let ((w50 (car x49)) (x51 (cdr x49))) (let ((a w50)) (if (vector? w50) (let ((len52 (vector-size w50))) (if (>= len52 0) (letfuns ((loop54 (j55 p-ls53) (if (>= j55 len52) (let ((vec (reverse p-ls53))) (letfuns ((loop (ls61 p-ls59 p-ls58 p-ls57) (if (null? ls61) (progn (let ((body (reverse p-ls59)) (pat (reverse p-ls58)) (b (reverse p-ls57))) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote a))) (match-next (unquote abs) (unquote v) ((unquote v) (setq (unquote v))) (unquote-splicing b)))))))) (if (cons? ls61) (progn (let ((w62 (car ls61))) (let ((b w62)) (if (cons? w62) (let ((w63 (car w62)) (x64 (cdr w62))) (let ((pat w63)) (let ((body x64)) (loop (cdr ls61) (cons body p-ls59) (cons pat p-ls58) (cons b p-ls57))))) (fail39))))) (if else (progn (fail39)) (cond)))))) (loop x51 (quote ()) (quote ()) (quote ())))) (let ((w56 (vector-ref w50 j55))) (let ((vec w56)) (loop54 (+ j55 1) (cons vec p-ls53))))))) (loop54 0 (quote ()))) (fail39))) (fail39)))) (fail39)))) (fail39)))))) (if (cons? v37) (let ((w65 (car v37)) (x66 (cdr v37))) (let ((abs w65)) (if (cons? x66) (let ((w67 (car x66)) (x68 (cdr x66))) (let ((app w67)) (if (list? app) (letfuns ((loop (ls76 p-ls74 p-ls73 p-ls72) (if (null? ls76) (progn (let ((body (reverse p-ls74)) (pat (reverse p-ls73)) (a (reverse p-ls72))) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote app))) (match-next (unquote abs) (unquote v) ((unquote app) (setq (unquote app))) (unquote-splicing a)))))))) (if (cons? ls76) (progn (let ((w77 (car ls76))) (let ((a w77)) (if (cons? w77) (let ((w78 (car w77)) (x79 (cdr w77))) (let ((pat w78)) (let ((body x79)) (loop (cdr ls76) (cons body p-ls74) (cons pat p-ls73) (cons a p-ls72))))) (fail38))))) (if else (progn (fail38)) (cond)))))) (loop x68 (quote ()) (quote ()) (quote ()))) (fail38)))) (fail38)))) (fail38))))) (defmacro match-next X (let ((v80 X)) (let ((fail81 (lambda () (let ((fail82 (lambda () (let ((fail83 (lambda () (error <condition> "no matching pattern")))) (if (cons? v80) (let ((w84 (car v80)) (x85 (cdr v80))) (let ((abs w84)) (if (cons? x85) (let ((w86 (car x85)) (x87 (cdr x85))) (let ((v w86)) (if (cons? x87) (let ((w88 (car x87)) (x89 (cdr x87))) (let ((g+s w88)) (if (cons? x89) (let ((w90 (car x89)) (x91 (cdr x89))) (if (cons? w90) (let ((w92 (car w90)) (x93 (cdr w90))) (let ((pat w92)) (let ((body x93)) (let ((rest x91)) (progn (let ((failure (gensym "fail"))) (quasiquote (match-next (unquote abs) (unquote v) (unquote g+s) ((unquote pat) (=> (unquote failure)) (unquote-splicing body)) (unquote-splicing rest))))))))) (fail83))) (fail83)))) (fail83)))) (fail83)))) (fail83)))))) (if (cons? v80) (let ((w94 (car v80)) (x95 (cdr v80))) (let ((abs w94)) (if (cons? x95) (let ((w96 (car x95)) (x97 (cdr x95))) (let ((v w96)) (if (cons? x97) (let ((w98 (car x97)) (x99 (cdr x97))) (let ((g+s w98)) (if (cons? x99) (let ((w100 (car x99)) (x101 (cdr x99))) (if (cons? w100) (let ((w102 (car w100)) (x103 (cdr w100))) (let ((pat w102)) (if (cons? x103) (let ((w104 (car x103)) (x105 (cdr x103))) (if (cons? w104) (let ((w106 (car w104)) (x107 (cdr w104))) (if (binary= w106 (quote =>)) (if (cons? x107) (let ((w108 (car x107)) (x109 (cdr x107))) (let ((failure w108)) (if (null? x109) (let ((body x105)) (let ((rest x101)) (progn (quasiquote (let (((unquote failure) (lambda () (match-next (unquote abs) (unquote v) (unquote g+s) (unquote-splicing rest))))) (match-one (unquote abs) (unquote v) (unquote pat) (unquote g+s) (match-drop-ids (progn (unquote-splicing body))) (match-drop-ids ((unquote failure))) ())))))) (fail82)))) (fail82)) (fail82))) (fail82))) (fail82)))) (fail82))) (fail82)))) (fail82)))) (fail82)))) (fail82)))))) (if (cons? v80) (let ((w110 (car v80)) (x111 (cdr v80))) (let ((abs w110)) (if (cons? x111) (let ((w112 (car x111)) (x113 (cdr x111))) (let ((v w112)) (if (cons? x113) (let ((w114 (car x113)) (x115 (cdr x113))) (let ((g+s w114)) (if (null? x115) (progn (quasiquote (error <condition> "no matching pattern"))) (fail81)))) (fail81)))) (fail81)))) (fail81))))) (defmacro abs-drop x (let ((v116 x)) (let ((fail117 (lambda () (let ((fail118 (lambda () (error <condition> "no matching pattern")))) (if (cons? v116) (let ((w119 (car v116)) (x120 (cdr v116))) (let ((a w119)) (if (cons? x120) (let ((w121 (car x120)) (x122 (cdr x120))) (let ((k w121)) (if (list? k) (if (cons? x122) (let ((w126 (car x122)) (x127 (cdr x122))) (let ((v w126)) (if (null? x127) (progn (append k (quasiquote ((unquote v))))) (fail118)))) (fail118)) (fail118)))) (fail118)))) (fail118)))))) (if (cons? v116) (let ((w128 (car v116)) (x129 (cdr v116))) (let ((a w128)) (if (cons? x129) (let ((w130 (car x129)) (x131 (cdr x129))) (let ((k w130)) (if (null? x131) (progn k) (fail117)))) (fail117)))) (fail117))))) (defmacro match-one x (let ((v132 x)) (let ((fail133 (lambda () (let ((fail134 (lambda () (let ((fail135 (lambda () (let ((fail136 (lambda () (error <condition> "no matching pattern")))) (let ((x v132)) (progn (quasiquote (match-two (unquote-splicing x))))))))) (if (cons? v132) (let ((w137 (car v132)) (x138 (cdr v132))) (let ((abs w137)) (if (cons? x138) (let ((w139 (car x138)) (x140 (cdr x138))) (let ((v w139)) (if (cons? x140) (let ((w141 (car x140)) (x142 (cdr x140))) (if (cons? w141) (let ((w143 (car w141)) (x144 (cdr w141))) (let ((p w143)) (if (cons? x144) (let ((w145 (car x144)) (x146 (cdr x144))) (let ((q w145)) (let ((r x146)) (if (cons? x142) (let ((w147 (car x142)) (x148 (cdr x142))) (let ((g+s w147)) (if (cons? x148) (let ((w149 (car x148)) (x150 (cdr x148))) (let ((sk w149)) (if (cons? x150) (let ((w151 (car x150)) (x152 (cdr x150))) (let ((fk w151)) (if (cons? x152) (let ((w153 (car x152)) (x154 (cdr x152))) (let ((i w153)) (if (null? x154) (progn (quasiquote (match-check-ellipse (unquote q) (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses (unquote abs) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()) (match-two (unquote abs) (unquote v) ((unquote p) (unquote q) (unquote-splicing r)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail135)))) (fail135)))) (fail135)))) (fail135)))) (fail135))))) (fail135)))) (fail135))) (fail135)))) (fail135)))) (fail135)))))) (if (cons? v132) (let ((w155 (car v132)) (x156 (cdr v132))) (let ((abs w155)) (if (cons? x156) (let ((w157 (car x156)) (x158 (cdr x156))) (let ((v w157)) (if (cons? x158) (let ((w159 (car x158)) (x160 (cdr x158))) (if (cons? w159) (let ((w161 (car w159)) (x162 (cdr w159))) (let ((p w161)) (if (cons? x162) (let ((w163 (car x162)) (x164 (cdr x162))) (if (cons? w163) (let ((w165 (car w163)) (x166 (cdr w163))) (if (binary= w165 (quote __)) (if (cons? x166) (let ((w167 (car x166)) (x168 (cdr x166))) (let ((m w167)) (if (null? x168) (let ((r x164)) (if (cons? x160) (let ((w169 (car x160)) (x170 (cdr x160))) (let ((g+s w169)) (if (cons? x170) (let ((w171 (car x170)) (x172 (cdr x170))) (let ((sk w171)) (if (cons? x172) (let ((w173 (car x172)) (x174 (cdr x172))) (let ((fk w173)) (if (cons? x174) (let ((w175 (car x174)) (x176 (cdr x174))) (let ((i w175)) (if (null? x176) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses-n (unquote abs) (unquote m) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail134)))) (fail134)))) (fail134)))) (fail134)))) (fail134))) (fail134)))) (fail134)) (fail134))) (fail134))) (fail134)))) (fail134))) (fail134)))) (fail134)))) (fail134)))))) (if (cons? v132) (let ((w177 (car v132)) (x178 (cdr v132))) (let ((abs w177)) (if (cons? x178) (let ((w179 (car x178)) (x180 (cdr x178))) (let ((v w179)) (if (cons? x180) (let ((w181 (car x180)) (x182 (cdr x180))) (if (cons? w181) (let ((w183 (car w181)) (x184 (cdr w181))) (let ((p w183)) (if (cons? x184) (let ((w185 (car x184)) (x186 (cdr x184))) (if (cons? w185) (let ((w187 (car w185)) (x188 (cdr w185))) (if (binary= w187 (quote ..)) (if (cons? x188) (let ((w189 (car x188)) (x190 (cdr x188))) (let ((m w189)) (if (null? x190) (let ((r x186)) (if (cons? x182) (let ((w191 (car x182)) (x192 (cdr x182))) (let ((g+s w191)) (if (cons? x192) (let ((w193 (car x192)) (x194 (cdr x192))) (let ((sk w193)) (if (cons? x194) (let ((w195 (car x194)) (x196 (cdr x194))) (let ((fk w195)) (if (cons? x196) (let ((w197 (car x196)) (x198 (cdr x196))) (let ((i w197)) (if (null? x198) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses-n (unquote abs) (unquote m) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail133)))) (fail133)))) (fail133)))) (fail133)))) (fail133))) (fail133)))) (fail133)) (fail133))) (fail133))) (fail133)))) (fail133))) (fail133)))) (fail133)))) (fail133))))) (defmacro insert-abs x (let ((v199 x)) (let ((fail200 (lambda () (let ((fail201 (lambda () (let ((fail202 (lambda () (error <condition> "no matching pattern")))) (if (cons? v199) (let ((w203 (car v199)) (x204 (cdr v199))) (let ((abs w203)) (if (cons? x204) (let ((w205 (car x204)) (x206 (cdr x204))) (if (cons? w205) (let ((w207 (car w205)) (x208 (cdr w205))) (let ((n w207)) (let ((nn x208)) (if (list? nn) (if (null? x206) (progn (append (quasiquote ((unquote n) (unquote abs))) nn)) (fail202)) (fail202))))) (fail202))) (fail202)))) (fail202)))))) (if (cons? v199) (let ((w212 (car v199)) (x213 (cdr v199))) (let ((abs w212)) (if (cons? x213) (let ((w214 (car x213)) (x215 (cdr x213))) (if (cons? w214) (let ((w216 (car w214)) (x217 (cdr w214))) (let ((x w216)) (if (null? x217) (if (null? x215) (progn (quasiquote ((unquote x)))) (fail201)) (fail201)))) (fail201))) (fail201)))) (fail201)))))) (if (cons? v199) (let ((w218 (car v199)) (x219 (cdr v199))) (let ((abs w218)) (if (cons? x219) (let ((w220 (car x219)) (x221 (cdr x219))) (if (cons? w220) (let ((w222 (car w220)) (x223 (cdr w220))) (if (binary= w222 (quote progn)) (let ((l x223)) (if (null? x221) (progn (quasiquote ((quote progn) (unquote-splicing l)))) (fail200))) (fail200))) (fail200))) (fail200)))) (fail200))))) (defmacro recur x (let ((v224 x)) (let ((fail225 (lambda () (error <condition> "no matching pattern")))) (if (cons? v224) (let ((w226 (car v224)) (x227 (cdr v224))) (let ((n w226)) (if (cons? x227) (let ((w228 (car x227)) (x229 (cdr x227))) (letfuns ((loop (ls233 p-ls231 p-ls230) (if (null? ls233) (progn (let ((i (reverse p-ls231)) (a (reverse p-ls230))) (let ((code x229)) (if (list? code) (progn (quasiquote (letfuns (((unquote n) (unquote a) (unquote-splicing code))) ((unquote n) (unquote-splicing i))))) (fail225))))) (if (cons? ls233) (progn (let ((w234 (car ls233))) (if (cons? w234) (let ((w238 (car w234)) (x239 (cdr w234))) (let ((a w238)) (if (cons? x239) (let ((w240 (car x239)) (x241 (cdr x239))) (let ((i w240)) (if (null? x241) (loop (cdr ls233) (cons i p-ls231) (cons a p-ls230)) (fail225)))) (fail225)))) (fail225)))) (if else (progn (fail225)) (cond)))))) (loop w228 (quote ()) (quote ())))) (fail225)))) (fail225))))) (defmacro match-two x (let ((v242 x)) (let ((fail243 (lambda () (let ((fail244 (lambda () (let ((fail245 (lambda () (let ((fail246 (lambda () (let ((fail247 (lambda () (let ((fail248 (lambda () (let ((fail249 (lambda () (let ((fail250 (lambda () (let ((fail251 (lambda () (let ((fail252 (lambda () (let ((fail253 (lambda () (let ((fail254 (lambda () (let ((fail255 (lambda () (let ((fail256 (lambda () (let ((fail257 (lambda () (let ((fail258 (lambda () (let ((fail259 (lambda () (let ((fail260 (lambda () (let ((fail261 (lambda () (let ((fail262 (lambda () (let ((fail263 (lambda () (let ((fail264 (lambda () (let ((fail265 (lambda () (let ((fail266 (lambda () (let ((fail267 (lambda () (error <condition> "no matching pattern")))) (if (cons? v242) (let ((w268 (car v242)) (x269 (cdr v242))) (if (cons? w268) (let ((w270 (car w268)) (x271 (cdr w268))) (let ((abs w270)) (if (cons? x271) (let ((w272 (car x271)) (x273 (cdr x271))) (let ((phd w272)) (if (null? x273) (if (cons? x269) (let ((w274 (car x269)) (x275 (cdr x269))) (let ((v w274)) (if (cons? x275) (let ((w276 (car x275)) (x277 (cdr x275))) (let ((p w276)) (if (cons? x277) (let ((w278 (car x277)) (x279 (cdr x277))) (let ((g+s w278)) (if (cons? x279) (let ((w280 (car x279)) (x281 (cdr x279))) (let ((sk w280)) (if (cons? x281) (let ((w282 (car x281)) (x283 (cdr x281))) (let ((fk w282)) (if (cons? x283) (let ((w284 (car x283)) (x285 (cdr x283))) (let ((i w284)) (if (null? x285) (progn (quasiquote (match-abstract () (unquote abs) (unquote phd) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail267)))) (fail267)))) (fail267)))) (fail267)))) (fail267)))) (fail267)))) (fail267)) (fail267)))) (fail267)))) (fail267))) (fail267)))))) (if (cons? v242) (let ((w286 (car v242)) (x287 (cdr v242))) (let ((abs w286)) (if (cons? x287) (let ((w288 (car x287)) (x289 (cdr x287))) (let ((v w288)) (if (cons? x289) (let ((w290 (car x289)) (x291 (cdr x289))) (if (cons? w290) (let ((w292 (car w290)) (x293 (cdr w290))) (let ((p w292)) (if (cons? x293) (let ((w294 (car x293)) (x295 (cdr x293))) (if (binary= w294 (quote ___)) (let ((r x295)) (if (cons? x291) (let ((w296 (car x291)) (x297 (cdr x291))) (let ((g+s w296)) (if (cons? x297) (let ((w298 (car x297)) (x299 (cdr x297))) (let ((sk w298)) (if (cons? x299) (let ((w300 (car x299)) (x301 (cdr x299))) (let ((fk w300)) (if (cons? x301) (let ((w302 (car x301)) (x303 (cdr x301))) (let ((i w302)) (if (null? x303) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses (unquote abs) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i) ())))) (fail266)))) (fail266)))) (fail266)))) (fail266)))) (fail266))) (fail266))) (fail266)))) (fail266))) (fail266)))) (fail266)))) (fail266)))))) (if (cons? v242) (let ((w304 (car v242)) (x305 (cdr v242))) (let ((abs w304)) (if (cons? x305) (let ((w306 (car x305)) (x307 (cdr x305))) (let ((v w306)) (if (cons? x307) (let ((w308 (car x307)) (x309 (cdr x307))) (if (cons? w308) (let ((w310 (car w308)) (x311 (cdr w308))) (if (cons? w310) (let ((w312 (car w310)) (x313 (cdr w310))) (if (binary= w312 (quote <>)) (if (cons? x313) (let ((w314 (car x313)) (x315 (cdr x313))) (let ((f w314)) (if (cons? x315) (let ((w316 (car x315)) (x317 (cdr x315))) (let ((p w316)) (if (null? x317) (let ((l x311)) (if (cons? x309) (let ((w318 (car x309)) (x319 (cdr x309))) (let ((g+s w318)) (if (cons? x319) (let ((w320 (car x319)) (x321 (cdr x319))) (let ((sk w320)) (if (cons? x321) (let ((w322 (car x321)) (x323 (cdr x321))) (let ((fk w322)) (if (cons? x323) (let ((w324 (car x323)) (x325 (cdr x323))) (let ((i w324)) (if (null? x325) (progn (let ((res (gensym "res"))) (quasiquote (let (((unquote res) ((unquote f) (unquote v)))) (if (unquote res) (match-one (unquote abs) (car (unquote res)) (unquote p) (unquote g+s) (match-one (cdr (unquote res)) (unquote l) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))))) (fail265)))) (fail265)))) (fail265)))) (fail265)))) (fail265))) (fail265)))) (fail265)))) (fail265)) (fail265))) (fail265))) (fail265))) (fail265)))) (fail265)))) (fail265)))))) (if (cons? v242) (let ((w326 (car v242)) (x327 (cdr v242))) (let ((abs w326)) (if (cons? x327) (let ((w328 (car x327)) (x329 (cdr x327))) (let ((v w328)) (if (cons? x329) (let ((w330 (car x329)) (x331 (cdr x329))) (if (cons? w330) (let ((w332 (car w330)) (x333 (cdr w330))) (if (binary= w332 (quote =)) (if (cons? x333) (let ((w334 (car x333)) (x335 (cdr x333))) (let ((proc w334)) (if (cons? x335) (let ((w336 (car x335)) (x337 (cdr x335))) (let ((p w336)) (if (null? x337) (if (cons? x331) (let ((w338 (car x331)) (x339 (cdr x331))) (let ((g+s w338)) (let ((x x339)) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote proc) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) () (unquote-splicing x))))))))) (fail264)) (fail264)))) (fail264)))) (fail264)) (fail264))) (fail264))) (fail264)))) (fail264)))) (fail264)))))) (if (cons? v242) (let ((w340 (car v242)) (x341 (cdr v242))) (let ((abs w340)) (if (cons? x341) (let ((w342 (car x341)) (x343 (cdr x341))) (let ((v w342)) (if (cons? x343) (let ((w344 (car x343)) (x345 (cdr x343))) (if (cons? w344) (let ((w346 (car w344)) (x347 (cdr w344))) (if (binary= w346 (quote =)) (if (cons? x347) (let ((w348 (car x347)) (x349 (cdr x347))) (let ((g w348)) (if (cons? x349) (let ((w350 (car x349)) (x351 (cdr x349))) (let ((s w350)) (if (cons? x351) (let ((w352 (car x351)) (x353 (cdr x351))) (let ((p w352)) (if (null? x353) (if (cons? x345) (let ((w354 (car x345)) (x355 (cdr x345))) (let ((g+s w354)) (if (cons? x355) (let ((w356 (car x355)) (x357 (cdr x355))) (let ((sk w356)) (if (cons? x357) (let ((w358 (car x357)) (x359 (cdr x357))) (let ((fk w358)) (if (cons? x359) (let ((w360 (car x359)) (x361 (cdr x359))) (let ((i w360)) (if (null? x361) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote g) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) (((unquote g) (unquote v)) ((unquote s) (unquote v))) (unquote sk) (unquote fk) (unquote i)))))) (fail263)))) (fail263)))) (fail263)))) (fail263)))) (fail263)) (fail263)))) (fail263)))) (fail263)))) (fail263)) (fail263))) (fail263))) (fail263)))) (fail263)))) (fail263)))))) (if (cons? v242) (let ((w362 (car v242)) (x363 (cdr v242))) (let ((abs w362)) (if (cons? x363) (let ((w364 (car x363)) (x365 (cdr x363))) (let ((v w364)) (if (cons? x365) (let ((w366 (car x365)) (x367 (cdr x365))) (if (cons? w366) (let ((w368 (car w366)) (x369 (cdr w366))) (if (binary= w368 (quote =)) (if (cons? x369) (let ((w370 (car x369)) (x371 (cdr x369))) (if (binary= w370 0) (if (cons? x371) (let ((w372 (car x371)) (x373 (cdr x371))) (let ((m w372)) (if (cons? x373) (let ((w374 (car x373)) (x375 (cdr x373))) (let ((p w374)) (if (null? x375) (if (cons? x367) (let ((w376 (car x367)) (x377 (cdr x367))) (let ((g+s w376)) (if (cons? x377) (let ((w378 (car x377)) (x379 (cdr x377))) (let ((sk w378)) (if (cons? x379) (let ((w380 (car x379)) (x381 (cdr x379))) (let ((fk w380)) (if (cons? x381) (let ((w382 (car x381)) (x383 (cdr x381))) (let ((i w382)) (if (null? x383) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote m) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) (((unquote m) (unquote v)) ((setter (unquote m)) (unquote v))) (unquote sk) (unquote fk) (unquote i)))))) (fail262)))) (fail262)))) (fail262)))) (fail262)))) (fail262)) (fail262)))) (fail262)))) (fail262)) (fail262))) (fail262)) (fail262))) (fail262))) (fail262)))) (fail262)))) (fail262)))))) (if (cons? v242) (let ((w384 (car v242)) (x385 (cdr v242))) (let ((abs w384)) (if (cons? x385) (let ((w386 (car x385)) (x387 (cdr x385))) (let ((v w386)) (if (cons? x387) (let ((w388 (car x387)) (x389 (cdr x387))) (if (cons? w388) (let ((w390 (car w388)) (x391 (cdr w388))) (if (binary= w390 (quote $)) (if (cons? x391) (let ((w392 (car x391)) (x393 (cdr x391))) (let ((nn w392)) (let ((p x393)) (if (list? p) (if (cons? x389) (let ((w397 (car x389)) (x398 (cdr x389))) (let ((g+s w397)) (if (cons? x398) (let ((w399 (car x398)) (x400 (cdr x398))) (let ((sk w399)) (if (cons? x400) (let ((w401 (car x400)) (x402 (cdr x400))) (let ((fk w401)) (if (cons? x402) (let ((w403 (car x402)) (x404 (cdr x402))) (let ((i w403)) (if (null? x404) (progn (quasiquote (if ((unquote nn) (unquote v)) (match-$ (unquote abs) (and) 0 (unquote p) (unquote v) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))) (fail261)))) (fail261)))) (fail261)))) (fail261)))) (fail261)) (fail261))))) (fail261)) (fail261))) (fail261))) (fail261)))) (fail261)))) (fail261)))))) (if (cons? v242) (let ((w405 (car v242)) (x406 (cdr v242))) (let ((abs w405)) (if (cons? x406) (let ((w407 (car x406)) (x408 (cdr x406))) (let ((v w407)) (if (cons? x408) (let ((w409 (car x408)) (x410 (cdr x408))) (if (cons? w409) (let ((w411 (car w409)) (x412 (cdr w409))) (if (binary= w411 (quote $)) (if (cons? x412) (let ((w413 (car x412)) (x414 (cdr x412))) (let ((n w413)) (if (null? x414) (if (cons? x410) (let ((w415 (car x410)) (x416 (cdr x410))) (let ((g-s w415)) (if (cons? x416) (let ((w417 (car x416)) (x418 (cdr x416))) (let ((sk w417)) (if (cons? x418) (let ((w419 (car x418)) (x420 (cdr x418))) (let ((fk w419)) (if (cons? x420) (let ((w421 (car x420)) (x422 (cdr x420))) (let ((i w421)) (if (null? x422) (progn (quasiquote (if ((unquote n) (unquote v)) (insert-abs (unquote abs) (unquote sk)) (insert-abs (unquote abs) (unquote fk))))) (fail260)))) (fail260)))) (fail260)))) (fail260)))) (fail260)) (fail260)))) (fail260)) (fail260))) (fail260))) (fail260)))) (fail260)))) (fail260)))))) (if (cons? v242) (let ((w423 (car v242)) (x424 (cdr v242))) (let ((abs w423)) (if (cons? x424) (let ((w425 (car x424)) (x426 (cdr x424))) (let ((v w425)) (if (cons? x426) (let ((w427 (car x426)) (x428 (cdr x426))) (if (cons? w427) (let ((w429 (car w427)) (x430 (cdr w427))) (if (binary= w429 (quote ?)) (if (cons? x430) (let ((w431 (car x430)) (x432 (cdr x430))) (let ((pred w431)) (let ((p x432)) (if (cons? x428) (let ((w433 (car x428)) (x434 (cdr x428))) (let ((g+s w433)) (if (cons? x434) (let ((w435 (car x434)) (x436 (cdr x434))) (let ((sk w435)) (if (cons? x436) (let ((w437 (car x436)) (x438 (cdr x436))) (let ((fk w437)) (if (cons? x438) (let ((w439 (car x438)) (x440 (cdr x438))) (let ((i w439)) (if (null? x440) (progn (quasiquote (if ((unquote pred) (unquote v)) (match-one (unquote abs) (unquote v) (and (unquote-splicing p)) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))) (fail259)))) (fail259)))) (fail259)))) (fail259)))) (fail259))))) (fail259)) (fail259))) (fail259))) (fail259)))) (fail259)))) (fail259)))))) (if (cons? v242) (let ((w441 (car v242)) (x442 (cdr v242))) (let ((abs w441)) (if (cons? x442) (let ((w443 (car x442)) (x444 (cdr x442))) (let ((v w443)) (if (cons? x444) (let ((w445 (car x444)) (x446 (cdr x444))) (if (cons? w445) (let ((w447 (car w445)) (x448 (cdr w445))) (if (binary= w447 (quote set)) (if (cons? x448) (let ((w449 (car x448)) (x450 (cdr x448))) (let ((setter w449)) (if (null? x450) (if (cons? x446) (let ((w451 (car x446)) (x452 (cdr x446))) (if (cons? w451) (let ((w453 (car w451)) (x454 (cdr w451))) (let ((g w453)) (if (cons? x454) (let ((w455 (car x454)) (x456 (cdr x454))) (let ((s w455)) (if (list? s) (if (null? x456) (if (cons? x452) (let ((w460 (car x452)) (x461 (cdr x452))) (let ((sk w460)) (if (list? sk) (if (cons? x461) (let ((w465 (car x461)) (x466 (cdr x461))) (let ((fk w465)) (if (cons? x466) (let ((w467 (car x466)) (x468 (cdr x466))) (let ((i w467)) (if (null? x468) (progn (let ((x (gensym "x"))) (quasiquote (let (((unquote setter) (lambda ((unquote x)) ((unquote-splicing s) (unquote x))))) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))))) (fail258)))) (fail258)))) (fail258)) (fail258)))) (fail258)) (fail258)) (fail258)))) (fail258)))) (fail258))) (fail258)) (fail258)))) (fail258)) (fail258))) (fail258))) (fail258)))) (fail258)))) (fail258)))))) (if (cons? v242) (let ((w469 (car v242)) (x470 (cdr v242))) (let ((abs w469)) (if (cons? x470) (let ((w471 (car x470)) (x472 (cdr x470))) (let ((v w471)) (if (cons? x472) (let ((w473 (car x472)) (x474 (cdr x472))) (if (cons? w473) (let ((w475 (car w473)) (x476 (cdr w473))) (if (binary= w475 (quote get)) (if (cons? x476) (let ((w477 (car x476)) (x478 (cdr x476))) (let ((getter w477)) (if (null? x478) (if (cons? x474) (let ((w479 (car x474)) (x480 (cdr x474))) (if (cons? w479) (let ((w481 (car w479)) (x482 (cdr w479))) (let ((g w481)) (if (cons? x482) (let ((w483 (car x482)) (x484 (cdr x482))) (let ((s w483)) (if (null? x484) (if (cons? x480) (let ((w485 (car x480)) (x486 (cdr x480))) (let ((sk w485)) (if (list? sk) (if (cons? x486) (let ((w490 (car x486)) (x491 (cdr x486))) (let ((fk w490)) (if (cons? x491) (let ((w492 (car x491)) (x493 (cdr x491))) (let ((i w492)) (if (null? x493) (progn (quasiquote (let (((unquote getter) (lambda () (unquote g)))) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))))) (fail257)))) (fail257)))) (fail257)) (fail257)))) (fail257)) (fail257)))) (fail257)))) (fail257))) (fail257)) (fail257)))) (fail257)) (fail257))) (fail257))) (fail257)))) (fail257)))) (fail257)))))) (if (cons? v242) (let ((w494 (car v242)) (x495 (cdr v242))) (let ((abs w494)) (if (cons? x495) (let ((w496 (car x495)) (x497 (cdr x495))) (let ((v w496)) (if (cons? x497) (let ((w498 (car x497)) (x499 (cdr x497))) (if (cons? w498) (let ((w500 (car w498)) (x501 (cdr w498))) (if (binary= w500 (quote not)) (if (cons? x501) (let ((w502 (car x501)) (x503 (cdr x501))) (let ((p w502)) (if (null? x503) (if (cons? x499) (let ((w504 (car x499)) (x505 (cdr x499))) (let ((g+s w504)) (if (cons? x505) (let ((w506 (car x505)) (x507 (cdr x505))) (let ((sk w506)) (if (list? sk) (if (cons? x507) (let ((w511 (car x507)) (x512 (cdr x507))) (if (cons? w511) (let ((w513 (car w511)) (x514 (cdr w511))) (let ((fk w513)) (let ((fkk x514)) (if (list? fkk) (if (cons? x512) (let ((w518 (car x512)) (x519 (cdr x512))) (let ((i w518)) (if (null? x519) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-drop-ids ((unquote fk) (unquote abs) (unquote-splicing fkk))) ((unquote-splicing sk) i) i))) (fail256)))) (fail256)) (fail256))))) (fail256))) (fail256)) (fail256)))) (fail256)))) (fail256)) (fail256)))) (fail256)) (fail256))) (fail256))) (fail256)))) (fail256)))) (fail256)))))) (if (cons? v242) (let ((w520 (car v242)) (x521 (cdr v242))) (let ((abs w520)) (if (cons? x521) (let ((w522 (car x521)) (x523 (cdr x521))) (let ((v w522)) (if (cons? x523) (let ((w524 (car x523)) (x525 (cdr x523))) (if (cons? w524) (let ((w526 (car w524)) (x527 (cdr w524))) (if (binary= w526 (quote cond)) (if (cons? x527) (let ((w528 (car x527)) (x529 (cdr x527))) (let ((p w528)) (let ((ps x529)) (if (list? ps) (if (cons? x525) (let ((w533 (car x525)) (x534 (cdr x525))) (let ((g+s w533)) (if (cons? x534) (let ((w535 (car x534)) (x536 (cdr x534))) (let ((sk w535)) (if (cons? x536) (let ((w537 (car x536)) (x538 (cdr x536))) (let ((fk w537)) (if (cons? x538) (let ((w539 (car x538)) (x540 (cdr x538))) (let ((i w539)) (if (null? x540) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (abs-drop (match-one (unquote abs) (unquote v) (cond (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i)))) (fail255)))) (fail255)))) (fail255)))) (fail255)))) (fail255)) (fail255))))) (fail255)) (fail255))) (fail255))) (fail255)))) (fail255)))) (fail255)))))) (if (cons? v242) (let ((w541 (car v242)) (x542 (cdr v242))) (let ((abs w541)) (if (cons? x542) (let ((w543 (car x542)) (x544 (cdr x542))) (let ((v w543)) (if (cons? x544) (let ((w545 (car x544)) (x546 (cdr x544))) (if (cons? w545) (let ((w547 (car w545)) (x548 (cdr w545))) (if (binary= w547 (quote cond)) (if (cons? x548) (let ((w549 (car x548)) (x550 (cdr x548))) (let ((p w549)) (if (null? x550) (let ((x x546)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail254)))) (fail254)) (fail254))) (fail254))) (fail254)))) (fail254)))) (fail254)))))) (if (cons? v242) (let ((w551 (car v242)) (x552 (cdr v242))) (let ((abs w551)) (if (cons? x552) (let ((w553 (car x552)) (x554 (cdr x552))) (let ((v w553)) (if (cons? x554) (let ((w555 (car x554)) (x556 (cdr x554))) (if (cons? w555) (let ((w557 (car w555)) (x558 (cdr w555))) (if (binary= w557 (quote cond)) (if (null? x558) (if (cons? x556) (let ((w559 (car x556)) (x560 (cdr x556))) (let ((g+s w559)) (if (cons? x560) (let ((w561 (car x560)) (x562 (cdr x560))) (let ((sk w561)) (if (cons? x562) (let ((w563 (car x562)) (x564 (cdr x562))) (let ((fk w563)) (if (cons? x564) (let ((w565 (car x564)) (x566 (cdr x564))) (let ((i w565)) (if (null? x566) (progn (quasiquote (insert-abs (unquote abs) (unquote fk)))) (fail253)))) (fail253)))) (fail253)))) (fail253)))) (fail253)) (fail253)) (fail253))) (fail253))) (fail253)))) (fail253)))) (fail253)))))) (if (cons? v242) (let ((w567 (car v242)) (x568 (cdr v242))) (let ((abs w567)) (if (cons? x568) (let ((w569 (car x568)) (x570 (cdr x568))) (let ((v w569)) (if (cons? x570) (let ((w571 (car x570)) (x572 (cdr x570))) (if (cons? w571) (let ((w573 (car w571)) (x574 (cdr w571))) (if (binary= w573 (quote or)) (let ((p x574)) (if (list? p) (if (cons? x572) (let ((w578 (car x572)) (x579 (cdr x572))) (let ((g+s w578)) (if (cons? x579) (let ((w580 (car x579)) (x581 (cdr x579))) (let ((sk w580)) (if (cons? x581) (let ((w582 (car x581)) (x583 (cdr x581))) (let ((fk w582)) (if (cons? x583) (let ((w584 (car x583)) (x585 (cdr x583))) (let ((i w584)) (if (null? x585) (progn (quasiquote (match-extract-vars (unquote abs) (or (unquote-splicing p)) (abs-drop (match-gen-or (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail252)))) (fail252)))) (fail252)))) (fail252)))) (fail252)) (fail252))) (fail252))) (fail252))) (fail252)))) (fail252)))) (fail252)))))) (if (cons? v242) (let ((w586 (car v242)) (x587 (cdr v242))) (let ((abs w586)) (if (cons? x587) (let ((w588 (car x587)) (x589 (cdr x587))) (let ((v w588)) (if (cons? x589) (let ((w590 (car x589)) (x591 (cdr x589))) (if (cons? w590) (let ((w592 (car w590)) (x593 (cdr w590))) (if (binary= w592 (quote or)) (if (cons? x593) (let ((w594 (car x593)) (x595 (cdr x593))) (let ((p w594)) (if (null? x595) (let ((x x591)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail251)))) (fail251)) (fail251))) (fail251))) (fail251)))) (fail251)))) (fail251)))))) (if (cons? v242) (let ((w596 (car v242)) (x597 (cdr v242))) (let ((abs w596)) (if (cons? x597) (let ((w598 (car x597)) (x599 (cdr x597))) (let ((v w598)) (if (cons? x599) (let ((w600 (car x599)) (x601 (cdr x599))) (if (cons? w600) (let ((w602 (car w600)) (x603 (cdr w600))) (if (binary= w602 (quote or)) (if (null? x603) (if (cons? x601) (let ((w604 (car x601)) (x605 (cdr x601))) (let ((g+s w604)) (if (cons? x605) (let ((w606 (car x605)) (x607 (cdr x605))) (let ((sk w606)) (if (cons? x607) (let ((w608 (car x607)) (x609 (cdr x607))) (let ((fk w608)) (if (cons? x609) (let ((w610 (car x609)) (x611 (cdr x609))) (let ((i w610)) (if (null? x611) (progn (quasiquote (insert-abs (unquote abs) (unquote fk)))) (fail250)))) (fail250)))) (fail250)))) (fail250)))) (fail250)) (fail250)) (fail250))) (fail250))) (fail250)))) (fail250)))) (fail250)))))) (if (cons? v242) (let ((w612 (car v242)) (x613 (cdr v242))) (let ((abs w612)) (if (cons? x613) (let ((w614 (car x613)) (x615 (cdr x613))) (let ((v w614)) (if (cons? x615) (let ((w616 (car x615)) (x617 (cdr x615))) (if (cons? w616) (let ((w618 (car w616)) (x619 (cdr w616))) (if (binary= w618 (quote and)) (if (cons? x619) (let ((w620 (car x619)) (x621 (cdr x619))) (let ((p w620)) (let ((q x621)) (if (list? q) (if (cons? x617) (let ((w625 (car x617)) (x626 (cdr x617))) (let ((g+s w625)) (if (cons? x626) (let ((w627 (car x626)) (x628 (cdr x626))) (let ((sk w627)) (if (cons? x628) (let ((w629 (car x628)) (x630 (cdr x628))) (let ((fk w629)) (if (cons? x630) (let ((w631 (car x630)) (x632 (cdr x630))) (let ((i w631)) (if (null? x632) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-one (unquote v) (and (unquote-splicing q)) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)))) (fail249)))) (fail249)))) (fail249)))) (fail249)))) (fail249)) (fail249))))) (fail249)) (fail249))) (fail249))) (fail249)))) (fail249)))) (fail249)))))) (if (cons? v242) (let ((w633 (car v242)) (x634 (cdr v242))) (let ((abs w633)) (if (cons? x634) (let ((w635 (car x634)) (x636 (cdr x634))) (let ((v w635)) (if (cons? x636) (let ((w637 (car x636)) (x638 (cdr x636))) (if (cons? w637) (let ((w639 (car w637)) (x640 (cdr w637))) (if (binary= w639 (quote and)) (if (null? x640) (if (cons? x638) (let ((w641 (car x638)) (x642 (cdr x638))) (let ((g+s w641)) (if (cons? x642) (let ((w643 (car x642)) (x644 (cdr x642))) (let ((sk w643)) (if (list? sk) (if (cons? x644) (let ((w648 (car x644)) (x649 (cdr x644))) (let ((fk w648)) (if (cons? x649) (let ((w650 (car x649)) (x651 (cdr x649))) (let ((i w650)) (if (null? x651) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail248)))) (fail248)))) (fail248)) (fail248)))) (fail248)))) (fail248)) (fail248)) (fail248))) (fail248))) (fail248)))) (fail248)))) (fail248)))))) (if (cons? v242) (let ((w652 (car v242)) (x653 (cdr v242))) (let ((abs w652)) (if (cons? x653) (let ((w654 (car x653)) (x655 (cdr x653))) (let ((v w654)) (if (cons? x655) (let ((w656 (car x655)) (x657 (cdr x655))) (if (cons? w656) (let ((w658 (car w656)) (x659 (cdr w656))) (if (binary= w658 (quote quasiquote)) (if (cons? x659) (let ((w660 (car x659)) (x661 (cdr x659))) (let ((p w660)) (if (null? x661) (let ((x x657)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail247)))) (fail247)) (fail247))) (fail247))) (fail247)))) (fail247)))) (fail247)))))) (if (cons? v242) (let ((w662 (car v242)) (x663 (cdr v242))) (let ((a w662)) (if (cons? w662) (let ((w664 (car w662)) (x665 (cdr w662))) (let ((abs w664)) (if (cons? x665) (let ((w666 (car x665)) (x667 (cdr x665))) (if (cons? w666) (let ((w668 (car w666)) (x669 (cdr w666))) (if (cons? w668) (let ((w670 (car w668)) (x671 (cdr w668))) (let ((ccar w670)) (if (cons? x671) (let ((w672 (car x671)) (x673 (cdr x671))) (let ((ccdr w672)) (if (cons? x673) (let ((w674 (car x673)) (x675 (cdr x673))) (let ((pcons? w674)) (if (cons? x675) (let ((w676 (car x675)) (x677 (cdr x675))) (let ((qnull? w676)) (if (cons? x677) (let ((w678 (car x677)) (x679 (cdr x677))) (let ((qbinary= w678)) (if (null? x679) (if (cons? x669) (let ((w680 (car x669)) (x681 (cdr x669))) (let ((rr w680)) (if (null? x681) (if (null? x667) (if (cons? x663) (let ((w682 (car x663)) (x683 (cdr x663))) (let ((v w682)) (if (cons? x683) (let ((w684 (car x683)) (x685 (cdr x683))) (if (cons? w684) (let ((w686 (car w684)) (x687 (cdr w684))) (if (cons? w686) (let ((w688 (car w686)) (x689 (cdr w686))) (if (binary= w688 (quote unquote-splicing)) (if (cons? x689) (let ((w690 (car x689)) (x691 (cdr x689))) (let ((p w690)) (if (null? x691) (let ((ps x687)) (if (cons? x685) (let ((w692 (car x685)) (x693 (cdr x685))) (let ((g+s w692)) (if (cons? x693) (let ((w694 (car x693)) (x695 (cdr x693))) (let ((sk w694)) (if (cons? x695) (let ((w696 (car x695)) (x697 (cdr x695))) (let ((fk w696)) (if (cons? x697) (let ((w698 (car x697)) (x699 (cdr x697))) (let ((i w698)) (if (null? x699) (progn (let ((loop (gensym "loop")) (vv (gensym "v")) (pp (gensym "p"))) (quasiquote (recur (unquote loop) (((unquote vv) (unquote v)) ((unquote pp) (unquote p))) (if (cons? (unquote pp)) (if (and ((unquote pcons?) (unquote vv)) ((unquote qbinary=) ((unquote ccar) (unquote vv)) (car (unquote pp)))) ((unquote loop) ((unquote ccdr) (unquote vv)) (cdr (unquote pp))) (insert-abs (unquote a) (unquote fk))) (match-one (unquote a) (unquote vv) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))))) (fail246)))) (fail246)))) (fail246)))) (fail246)))) (fail246))) (fail246)))) (fail246)) (fail246))) (fail246))) (fail246))) (fail246)))) (fail246)) (fail246)) (fail246)))) (fail246)) (fail246)))) (fail246)))) (fail246)))) (fail246)))) (fail246)))) (fail246))) (fail246))) (fail246)))) (fail246)))) (fail246)))))) (if (cons? v242) (let ((w700 (car v242)) (x701 (cdr v242))) (let ((a w700)) (if (cons? w700) (let ((w702 (car w700)) (x703 (cdr w700))) (let ((qabs w702)) (if (cons? x703) (let ((w704 (car x703)) (x705 (cdr x703))) (if (cons? w704) (let ((w706 (car w704)) (x707 (cdr w704))) (if (cons? w706) (let ((w708 (car w706)) (x709 (cdr w706))) (let ((qcar w708)) (if (cons? x709) (let ((w710 (car x709)) (x711 (cdr x709))) (let ((qcdr w710)) (if (cons? x711) (let ((w712 (car x711)) (x713 (cdr x711))) (let ((qcons? w712)) (if (cons? x713) (let ((w714 (car x713)) (x715 (cdr x713))) (let ((qnull? w714)) (if (cons? x715) (let ((w716 (car x715)) (x717 (cdr x715))) (let ((qbinary= w716)) (if (null? x717) (if (cons? x707) (let ((w718 (car x707)) (x719 (cdr x707))) (let ((pp w718)) (if (null? x719) (if (null? x705) (if (cons? x701) (let ((w720 (car x701)) (x721 (cdr x701))) (let ((v w720)) (if (cons? x721) (let ((w722 (car x721)) (x723 (cdr x721))) (if (cons? w722) (let ((w724 (car w722)) (x725 (cdr w722))) (if (binary= w724 (quote unquote)) (if (cons? x725) (let ((w726 (car x725)) (x727 (cdr x725))) (let ((p w726)) (if (null? x727) (if (cons? x723) (let ((w728 (car x723)) (x729 (cdr x723))) (let ((g+s w728)) (if (cons? x729) (let ((w730 (car x729)) (x731 (cdr x729))) (let ((sk w730)) (if (list? sk) (if (cons? x731) (let ((w735 (car x731)) (x736 (cdr x731))) (let ((fk w735)) (if (cons? x736) (let ((w737 (car x736)) (x738 (cdr x736))) (let ((i w737)) (if (null? x738) (progn (quasiquote (if ((unquote qbinary=) (unquote v) (unquote p)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail245)))) (fail245)))) (fail245)) (fail245)))) (fail245)))) (fail245)) (fail245)))) (fail245)) (fail245))) (fail245))) (fail245)))) (fail245)) (fail245)) (fail245)))) (fail245)) (fail245)))) (fail245)))) (fail245)))) (fail245)))) (fail245)))) (fail245))) (fail245))) (fail245)))) (fail245)))) (fail245)))))) (if (cons? v242) (let ((w739 (car v242)) (x740 (cdr v242))) (let ((a w739)) (if (cons? w739) (let ((w741 (car w739)) (x742 (cdr w739))) (let ((qabs w741)) (if (cons? x742) (let ((w743 (car x742)) (x744 (cdr x742))) (if (cons? w743) (let ((w745 (car w743)) (x746 (cdr w743))) (if (cons? w745) (let ((w747 (car w745)) (x748 (cdr w745))) (let ((qcar w747)) (if (cons? x748) (let ((w749 (car x748)) (x750 (cdr x748))) (let ((qcdr w749)) (if (cons? x750) (let ((w751 (car x750)) (x752 (cdr x750))) (let ((qcons? w751)) (if (cons? x752) (let ((w753 (car x752)) (x754 (cdr x752))) (let ((qnull? w753)) (if (cons? x754) (let ((w755 (car x754)) (x756 (cdr x754))) (let ((qbinary= w755)) (if (null? x756) (if (cons? x746) (let ((w757 (car x746)) (x758 (cdr x746))) (let ((pp w757)) (if (null? x758) (if (null? x744) (if (cons? x740) (let ((w759 (car x740)) (x760 (cdr x740))) (let ((v w759)) (if (cons? x760) (let ((w761 (car x760)) (x762 (cdr x760))) (if (cons? w761) (let ((w763 (car w761)) (x764 (cdr w761))) (if (binary= w763 (quote quote)) (if (cons? x764) (let ((w765 (car x764)) (x766 (cdr x764))) (let ((p w765)) (if (null? x766) (if (cons? x762) (let ((w767 (car x762)) (x768 (cdr x762))) (let ((g+s w767)) (if (cons? x768) (let ((w769 (car x768)) (x770 (cdr x768))) (let ((sk w769)) (if (list? sk) (if (cons? x770) (let ((w774 (car x770)) (x775 (cdr x770))) (let ((fk w774)) (if (cons? x775) (let ((w776 (car x775)) (x777 (cdr x775))) (let ((i w776)) (if (null? x777) (progn (quasiquote (if ((unquote qbinary=) (unquote v) (quote (unquote p))) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail244)))) (fail244)))) (fail244)) (fail244)))) (fail244)))) (fail244)) (fail244)))) (fail244)) (fail244))) (fail244))) (fail244)))) (fail244)) (fail244)) (fail244)))) (fail244)) (fail244)))) (fail244)))) (fail244)))) (fail244)))) (fail244)))) (fail244))) (fail244))) (fail244)))) (fail244)))) (fail244)))))) (if (cons? v242) (let ((w778 (car v242)) (x779 (cdr v242))) (let ((a w778)) (if (cons? w778) (let ((w780 (car w778)) (x781 (cdr w778))) (let ((qabs w780)) (if (cons? x781) (let ((w782 (car x781)) (x783 (cdr x781))) (if (cons? w782) (let ((w784 (car w782)) (x785 (cdr w782))) (if (cons? w784) (let ((w786 (car w784)) (x787 (cdr w784))) (let ((qcar w786)) (if (cons? x787) (let ((w788 (car x787)) (x789 (cdr x787))) (let ((qcdr w788)) (if (cons? x789) (let ((w790 (car x789)) (x791 (cdr x789))) (let ((qcons? w790)) (if (cons? x791) (let ((w792 (car x791)) (x793 (cdr x791))) (let ((qnull? w792)) (if (cons? x793) (let ((w794 (car x793)) (x795 (cdr x793))) (let ((qbinary= w794)) (if (null? x795) (if (cons? x785) (let ((w796 (car x785)) (x797 (cdr x785))) (let ((pp w796)) (if (null? x797) (if (null? x783) (if (cons? x779) (let ((w798 (car x779)) (x799 (cdr x779))) (let ((v w798)) (if (cons? x799) (let ((w800 (car x799)) (x801 (cdr x799))) (if (null? w800) (if (cons? x801) (let ((w802 (car x801)) (x803 (cdr x801))) (let ((g+s w802)) (if (cons? x803) (let ((w804 (car x803)) (x805 (cdr x803))) (let ((sk w804)) (if (list? sk) (if (cons? x805) (let ((w809 (car x805)) (x810 (cdr x805))) (let ((fk w809)) (if (cons? x810) (let ((w811 (car x810)) (x812 (cdr x810))) (let ((i w811)) (if (null? x812) (progn (quasiquote (if ((unquote qnull?) (unquote v)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail243)))) (fail243)))) (fail243)) (fail243)))) (fail243)))) (fail243)) (fail243))) (fail243)))) (fail243)) (fail243)) (fail243)))) (fail243)) (fail243)))) (fail243)))) (fail243)))) (fail243)))) (fail243)))) (fail243))) (fail243))) (fail243)))) (fail243)))) (fail243))))) (defmacro match-gen-or x (let ((v813 x)) (let ((fail814 (lambda () (error <condition> "no matching pattern")))) (if (cons? v813) (let ((w815 (car v813)) (x816 (cdr v813))) (let ((abs w815)) (if (cons? x816) (let ((w817 (car x816)) (x818 (cdr x816))) (let ((v w817)) (if (cons? x818) (let ((w819 (car x818)) (x820 (cdr x818))) (let ((p w819)) (if (cons? x820) (let ((w821 (car x820)) (x822 (cdr x820))) (let ((g+s w821)) (if (cons? x822) (let ((w823 (car x822)) (x824 (cdr x822))) (let ((sk w823)) (if (list? sk) (if (cons? x824) (let ((w828 (car x824)) (x829 (cdr x824))) (let ((fk w828)) (if (cons? x829) (let ((w830 (car x829)) (x831 (cdr x829))) (let ((i w830)) (if (list? i) (if (cons? x831) (let ((w835 (car x831)) (x836 (cdr x831))) (letfuns ((loop (ls840 p-ls838 p-ls837) (if (null? ls840) (progn (let ((id-ls (reverse p-ls838)) (id (reverse p-ls837))) (if (null? x836) (progn (let ((sk2 (gensym "sk2"))) (quasiquote (let (((unquote sk2) (lambda (unquote id) (insert-abs (unquote abs) ((unquote-splicing sk) ((unquote-splicing i) (unquote-splicing id))))))) (match-gen-or-step (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-drop-ids ((unquote sk2) (unquote-splicing id))) (unquote fk) i))))) (fail814)))) (if (cons? ls840) (progn (let ((w841 (car ls840))) (if (cons? w841) (let ((w842 (car w841)) (x843 (cdr w841))) (let ((id w842)) (if (cons? x843) (let ((w844 (car x843)) (x845 (cdr x843))) (let ((id-ls w844)) (if (null? x845) (loop (cdr ls840) (cons id-ls p-ls838) (cons id p-ls837)) (fail814)))) (fail814)))) (fail814)))) (if else (progn (fail814)) (cond)))))) (loop w835 (quote ()) (quote ())))) (fail814)) (fail814)))) (fail814)))) (fail814)) (fail814)))) (fail814)))) (fail814)))) (fail814)))) (fail814)))) (fail814))))) (defmacro match-gen-or-step x (let ((v846 x)) (let ((fail847 (lambda () (let ((fail848 (lambda () (let ((fail849 (lambda () (error <condition> "no matching pattern")))) (if (cons? v846) (let ((w850 (car v846)) (x851 (cdr v846))) (let ((abs w850)) (if (cons? x851) (let ((w852 (car x851)) (x853 (cdr x851))) (let ((v w852)) (if (cons? x853) (let ((w854 (car x853)) (x855 (cdr x853))) (if (cons? w854) (let ((w856 (car w854)) (x857 (cdr w854))) (let ((p w856)) (let ((q x857)) (if (cons? x855) (let ((w858 (car x855)) (x859 (cdr x855))) (let ((g+s w858)) (if (cons? x859) (let ((w860 (car x859)) (x861 (cdr x859))) (let ((sk w860)) (if (cons? x861) (let ((w862 (car x861)) (x863 (cdr x861))) (let ((fk w862)) (if (cons? x863) (let ((w864 (car x863)) (x865 (cdr x863))) (let ((i w864)) (if (null? x865) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (match-gen-or-step (unquote v) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i)))) (fail849)))) (fail849)))) (fail849)))) (fail849)))) (fail849))))) (fail849))) (fail849)))) (fail849)))) (fail849)))))) (if (cons? v846) (let ((w866 (car v846)) (x867 (cdr v846))) (let ((abs w866)) (if (cons? x867) (let ((w868 (car x867)) (x869 (cdr x867))) (let ((v w868)) (if (cons? x869) (let ((w870 (car x869)) (x871 (cdr x869))) (if (cons? w870) (let ((w872 (car w870)) (x873 (cdr w870))) (let ((p w872)) (if (null? x873) (let ((x x871)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail848)))) (fail848))) (fail848)))) (fail848)))) (fail848)))))) (if (cons? v846) (let ((w874 (car v846)) (x875 (cdr v846))) (let ((abs w874)) (if (cons? x875) (let ((w876 (car x875)) (x877 (cdr x875))) (let ((v w876)) (if (cons? x877) (let ((w878 (car x877)) (x879 (cdr x877))) (if (null? w878) (if (cons? x879) (let ((w880 (car x879)) (x881 (cdr x879))) (let ((g+s w880)) (if (cons? x881) (let ((w882 (car x881)) (x883 (cdr x881))) (let ((sk w882)) (if (cons? x883) (let ((w884 (car x883)) (x885 (cdr x883))) (let ((fk w884)) (let ((x x885)) (progn (quasiquote (insert-abs (unquote abs) (unquote fk))))))) (fail847)))) (fail847)))) (fail847)) (fail847))) (fail847)))) (fail847)))) (fail847))))) (defmacro match-three x (let ((v886 x)) (let ((fail887 (lambda () (let ((fail888 (lambda () (let ((fail889 (lambda () (let ((fail890 (lambda () (let ((fail891 (lambda () (let ((fail892 (lambda () (let ((fail893 (lambda () (error <condition> "no matching pattern")))) (if (cons? v886) (let ((w894 (car v886)) (x895 (cdr v886))) (let ((a w894)) (if (cons? w894) (let ((w896 (car w894)) (x897 (cdr w894))) (let ((qabs w896)) (if (cons? x897) (let ((w898 (car x897)) (x899 (cdr x897))) (if (cons? w898) (let ((w900 (car w898)) (x901 (cdr w898))) (if (cons? w900) (let ((w902 (car w900)) (x903 (cdr w900))) (let ((qcar w902)) (if (cons? x903) (let ((w904 (car x903)) (x905 (cdr x903))) (let ((qcdr w904)) (if (cons? x905) (let ((w906 (car x905)) (x907 (cdr x905))) (let ((qcons? w906)) (if (cons? x907) (let ((w908 (car x907)) (x909 (cdr x907))) (let ((qnull? w908)) (if (cons? x909) (let ((w910 (car x909)) (x911 (cdr x909))) (let ((binary= w910)) (if (null? x911) (if (cons? x901) (let ((w912 (car x901)) (x913 (cdr x901))) (let ((qpp w912)) (if (null? x913) (if (null? x899) (if (cons? x895) (let ((w914 (car x895)) (x915 (cdr x895))) (let ((v w914)) (if (cons? x915) (let ((w916 (car x915)) (x917 (cdr x915))) (let ((x w916)) (if (cons? x917) (let ((w918 (car x917)) (x919 (cdr x917))) (let ((g+s w918)) (if (cons? x919) (let ((w920 (car x919)) (x921 (cdr x919))) (let ((sk w920)) (if (list? sk) (if (cons? x921) (let ((w925 (car x921)) (x926 (cdr x921))) (let ((fk w925)) (if (cons? x926) (let ((w927 (car x926)) (x928 (cdr x926))) (let ((id w927)) (if (list? id) (if (null? x928) (progn (if (if (symbol? x) (null? (member x id)) ()) (quasiquote (let (((unquote x) (unquote v))) (insert-abs (unquote a) ((unquote-splicing sk) ((unquote-splicing id) (unquote x)))))) (quasiquote (if ((unquote binary=) (unquote v) (unquote x)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote id))) (insert-abs (unquote a) (unquote fk)))))) (fail893)) (fail893)))) (fail893)))) (fail893)) (fail893)))) (fail893)))) (fail893)))) (fail893)))) (fail893)) (fail893)) (fail893)))) (fail893)) (fail893)))) (fail893)))) (fail893)))) (fail893)))) (fail893)))) (fail893))) (fail893))) (fail893)))) (fail893)))) (fail893)))))) (if (cons? v886) (let ((w932 (car v886)) (x933 (cdr v886))) (let ((abs w932)) (if (cons? x933) (let ((w934 (car x933)) (x935 (cdr x933))) (let ((v w934)) (if (cons? x935) (let ((w936 (car x935)) (x937 (cdr x935))) (if (binary= w936 (quote _)) (if (cons? x937) (let ((w938 (car x937)) (x939 (cdr x937))) (let ((g+s w938)) (if (cons? x939) (let ((w940 (car x939)) (x941 (cdr x939))) (let ((sk w940)) (if (list? sk) (if (cons? x941) (let ((w945 (car x941)) (x946 (cdr x941))) (let ((fk w945)) (if (cons? x946) (let ((w947 (car x946)) (x948 (cdr x946))) (let ((i w947)) (if (null? x948) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail892)))) (fail892)))) (fail892)) (fail892)))) (fail892)))) (fail892)) (fail892))) (fail892)))) (fail892)))) (fail892)))))) (if (cons? v886) (let ((w949 (car v886)) (x950 (cdr v886))) (let ((abs w949)) (if (cons? x950) (let ((w951 (car x950)) (x952 (cdr x950))) (let ((v w951)) (if (cons? x952) (let ((w953 (car x952)) (x954 (cdr x952))) (if (vector? w953) (let ((len955 (vector-size w953))) (if (>= len955 0) (letfuns ((loop957 (j958 p-ls956) (if (>= j958 len955) (let ((p (reverse p-ls956))) (if (cons? x954) (let ((w960 (car x954)) (x961 (cdr x954))) (let ((g+s w960)) (let ((x x961)) (progn (quasiquote (match-vector (unquote abs) (unquote v) 0 () (unquote p) (unquote-splicing x))))))) (fail891))) (let ((w959 (vector-ref w953 j958))) (let ((p w959)) (loop957 (+ j958 1) (cons p p-ls956))))))) (loop957 0 (quote ()))) (fail891))) (fail891))) (fail891)))) (fail891)))) (fail891)))))) (if (cons? v886) (let ((w962 (car v886)) (x963 (cdr v886))) (let ((a w962)) (if (cons? w962) (let ((w964 (car w962)) (x965 (cdr w962))) (let ((abs w964)) (if (cons? x965) (let ((w966 (car x965)) (x967 (cdr x965))) (if (cons? w966) (let ((w968 (car w966)) (x969 (cdr w966))) (if (cons? w968) (let ((w970 (car w968)) (x971 (cdr w968))) (let ((qcar w970)) (if (cons? x971) (let ((w972 (car x971)) (x973 (cdr x971))) (let ((qcdr w972)) (if (cons? x973) (let ((w974 (car x973)) (x975 (cdr x973))) (let ((qcons? w974)) (if (cons? x975) (let ((w976 (car x975)) (x977 (cdr x975))) (let ((qnull? w976)) (if (cons? x977) (let ((w978 (car x977)) (x979 (cdr x977))) (let ((qbinary= w978)) (if (null? x979) (if (cons? x969) (let ((w980 (car x969)) (x981 (cdr x969))) (let ((pp w980)) (if (null? x981) (if (null? x967) (if (cons? x963) (let ((w982 (car x963)) (x983 (cdr x963))) (let ((v w982)) (if (cons? x983) (let ((w984 (car x983)) (x985 (cdr x983))) (if (cons? w984) (let ((w986 (car w984)) (x987 (cdr w984))) (let ((p w986)) (let ((q x987)) (if (cons? x985) (let ((w988 (car x985)) (x989 (cdr x985))) (let ((g+s w988)) (if (cons? x989) (let ((w990 (car x989)) (x991 (cdr x989))) (let ((sk w990)) (if (cons? x991) (let ((w992 (car x991)) (x993 (cdr x991))) (let ((fk w992)) (if (cons? x993) (let ((w994 (car x993)) (x995 (cdr x993))) (let ((i w994)) (if (null? x995) (progn (let ((w (gensym "w")) (x (gensym "x"))) (quasiquote (if ((unquote qcons?) (unquote v)) (let (((unquote w) ((unquote qcar) (unquote v))) ((unquote x) ((unquote qcdr) (unquote v)))) (match-one (unquote a) (unquote w) (unquote p) (((unquote qcar) (unquote v)) ((setter car) (unquote v))) (match-one (unquote x) (unquote q) (((unquote qcdr) (unquote v)) ((setter cdr) (unquote v))) (unquote sk) (unquote fk)) (unquote fk) (unquote i))) (insert-abs (unquote a) (unquote fk)))))) (fail890)))) (fail890)))) (fail890)))) (fail890)))) (fail890))))) (fail890))) (fail890)))) (fail890)) (fail890)) (fail890)))) (fail890)) (fail890)))) (fail890)))) (fail890)))) (fail890)))) (fail890)))) (fail890))) (fail890))) (fail890)))) (fail890)))) (fail890)))))) (if (cons? v886) (let ((w996 (car v886)) (x997 (cdr v886))) (let ((abs w996)) (if (cons? x997) (let ((w998 (car x997)) (x999 (cdr x997))) (let ((v w998)) (if (cons? x999) (let ((w1000 (car x999)) (x1001 (cdr x999))) (if (cons? w1000) (let ((w1002 (car w1000)) (x1003 (cdr w1000))) (let ((p w1002)) (if (cons? x1003) (let ((w1004 (car x1003)) (x1005 (cdr x1003))) (if (binary= w1004 (quote ***)) (let ((q x1005)) (if (cons? x1001) (let ((w1006 (car x1001)) (x1007 (cdr x1001))) (let ((g+s w1006)) (if (cons? x1007) (let ((w1008 (car x1007)) (x1009 (cdr x1007))) (let ((sk w1008)) (if (cons? x1009) (let ((w1010 (car x1009)) (x1011 (cdr x1009))) (let ((fk w1010)) (if (cons? x1011) (let ((w1012 (car x1011)) (x1013 (cdr x1011))) (let ((i w1012)) (if (null? x1013) (progn (quasiquote (error <condition> (fmt "invalid use of *** ~a" ((unquote p) *** (unquote-splicing q)))))) (fail889)))) (fail889)))) (fail889)))) (fail889)))) (fail889))) (fail889))) (fail889)))) (fail889))) (fail889)))) (fail889)))) (fail889)))))) (if (cons? v886) (let ((w1014 (car v886)) (x1015 (cdr v886))) (let ((abs w1014)) (if (cons? x1015) (let ((w1016 (car x1015)) (x1017 (cdr x1015))) (let ((v w1016)) (if (cons? x1017) (let ((w1018 (car x1017)) (x1019 (cdr x1017))) (if (cons? w1018) (let ((w1020 (car w1018)) (x1021 (cdr w1018))) (let ((p w1020)) (if (cons? x1021) (let ((w1022 (car x1021)) (x1023 (cdr x1021))) (if (binary= w1022 (quote ***)) (if (cons? x1023) (let ((w1024 (car x1023)) (x1025 (cdr x1023))) (let ((q w1024)) (if (null? x1025) (if (cons? x1019) (let ((w1026 (car x1019)) (x1027 (cdr x1019))) (let ((g+s w1026)) (if (cons? x1027) (let ((w1028 (car x1027)) (x1029 (cdr x1027))) (let ((sk w1028)) (if (cons? x1029) (let ((w1030 (car x1029)) (x1031 (cdr x1029))) (let ((fk w1030)) (if (cons? x1031) (let ((w1032 (car x1031)) (x1033 (cdr x1031))) (let ((i w1032)) (if (null? x1033) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-gen-search (unquote v) (unquote p) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i) ()))) (fail888)))) (fail888)))) (fail888)))) (fail888)))) (fail888)) (fail888)))) (fail888)) (fail888))) (fail888)))) (fail888))) (fail888)))) (fail888)))) (fail888)))))) (if (cons? v886) (let ((w1034 (car v886)) (x1035 (cdr v886))) (let ((a w1034)) (if (cons? w1034) (let ((w1036 (car w1034)) (x1037 (cdr w1034))) (let ((abs w1036)) (if (cons? x1037) (let ((w1038 (car x1037)) (x1039 (cdr x1037))) (if (cons? w1038) (let ((w1040 (car w1038)) (x1041 (cdr w1038))) (if (cons? w1040) (let ((w1042 (car w1040)) (x1043 (cdr w1040))) (let ((qcar w1042)) (if (cons? x1043) (let ((w1044 (car x1043)) (x1045 (cdr x1043))) (let ((qcdr w1044)) (if (cons? x1045) (let ((w1046 (car x1045)) (x1047 (cdr x1045))) (let ((qcons? w1046)) (if (cons? x1047) (let ((w1048 (car x1047)) (x1049 (cdr x1047))) (let ((qnull? w1048)) (if (null? x1049) (if (cons? x1041) (let ((w1050 (car x1041)) (x1051 (cdr x1041))) (let ((rr w1050)) (if (null? x1051) (if (null? x1039) (if (cons? x1035) (let ((w1052 (car x1035)) (x1053 (cdr x1035))) (let ((v w1052)) (if (cons? x1053) (let ((w1054 (car x1053)) (x1055 (cdr x1053))) (if (cons? w1054) (let ((w1056 (car w1054)) (x1057 (cdr w1054))) (let ((p w1056)) (if (null? x1057) (if (cons? x1055) (let ((w1058 (car x1055)) (x1059 (cdr x1055))) (let ((g+s w1058)) (if (cons? x1059) (let ((w1060 (car x1059)) (x1061 (cdr x1059))) (let ((sk w1060)) (if (cons? x1061) (let ((w1062 (car x1061)) (x1063 (cdr x1061))) (let ((fk w1062)) (if (cons? x1063) (let ((w1064 (car x1063)) (x1065 (cdr x1063))) (let ((i w1064)) (if (null? x1065) (progn (let ((w (gensym "w"))) (quasiquote (if (and ((unquote qcons?) (unquote v)) ((unquote qnull?) ((unquote qcdr) (unquote v)))) (let (((unquote w) ((unquote qcar) (unquote v)))) (match-one (unquote a) (unquote w) (unquote p) (((unquote qcar) (unquote v)) ((setter car) (unquote v))) (unquote sk) (unquote fk) (unquote i))) (unquote fk))))) (fail887)))) (fail887)))) (fail887)))) (fail887)))) (fail887)) (fail887)))) (fail887))) (fail887)))) (fail887)) (fail887)) (fail887)))) (fail887)) (fail887)))) (fail887)))) (fail887)))) (fail887)))) (fail887))) (fail887))) (fail887)))) (fail887)))) (fail887))))) (defmacro match-vector x (let ((v1066 x)) (let ((fail1067 (lambda () (let ((fail1068 (lambda () (let ((fail1069 (lambda () (error <condition> "no matching pattern")))) (let ((x v1066)) (progn (quasiquote (match-vector-two (unquote-splicing x))))))))) (if (cons? v1066) (let ((w1070 (car v1066)) (x1071 (cdr v1066))) (let ((abs w1070)) (if (cons? x1071) (let ((w1072 (car x1071)) (x1073 (cdr x1071))) (let ((v w1072)) (if (cons? x1073) (let ((w1074 (car x1073)) (x1075 (cdr x1073))) (let ((n w1074)) (if (cons? x1075) (let ((w1076 (car x1075)) (x1077 (cdr x1075))) (let ((pats w1076)) (if (cons? x1077) (let ((w1078 (car x1077)) (x1079 (cdr x1077))) (if (cons? w1078) (let ((w1080 (car w1078)) (x1081 (cdr w1078))) (let ((p w1080)) (if (cons? x1081) (let ((w1082 (car x1081)) (x1083 (cdr x1081))) (if (binary= w1082 (quote ___)) (if (null? x1083) (if (cons? x1079) (let ((w1084 (car x1079)) (x1085 (cdr x1079))) (let ((sk w1084)) (if (cons? x1085) (let ((w1086 (car x1085)) (x1087 (cdr x1085))) (let ((fk w1086)) (if (cons? x1087) (let ((w1088 (car x1087)) (x1089 (cdr x1087))) (let ((i w1088)) (if (null? x1089) (progn (quasiquote (match-gen-vector-ellipses (unquote abs) (unquote v) (unquote n) (unquote pats) (unquote p) (unquote sk) (unquote fk) (unquote i)))) (fail1068)))) (fail1068)))) (fail1068)))) (fail1068)) (fail1068)) (fail1068))) (fail1068)))) (fail1068))) (fail1068)))) (fail1068)))) (fail1068)))) (fail1068)))) (fail1068)))))) (if (cons? v1066) (let ((w1090 (car v1066)) (x1091 (cdr v1066))) (let ((abs w1090)) (if (cons? x1091) (let ((w1092 (car x1091)) (x1093 (cdr x1091))) (let ((v w1092)) (if (cons? x1093) (let ((w1094 (car x1093)) (x1095 (cdr x1093))) (let ((n w1094)) (if (cons? x1095) (let ((w1096 (car x1095)) (x1097 (cdr x1095))) (let ((pats w1096)) (if (cons? x1097) (let ((w1098 (car x1097)) (x1099 (cdr x1097))) (if (cons? w1098) (let ((w1100 (car w1098)) (x1101 (cdr w1098))) (let ((p w1100)) (if (cons? x1101) (let ((w1102 (car x1101)) (x1103 (cdr x1101))) (let ((q w1102)) (if (null? x1103) (let ((x x1099)) (progn (quasiquote (match-check-ellipse (unquote q) (match-gen-vector-ellipses (unquote abs) (unquote v) (unquote n) (unquote pats) (unquote p) (unquote-splicing x)) (match-vector-two (unquote abs) (unquote v) (unquote n) (unquote pats) ((unquote p) (unquote q)) (unquote-splicing x)))))) (fail1067)))) (fail1067)))) (fail1067))) (fail1067)))) (fail1067)))) (fail1067)))) (fail1067)))) (fail1067))))) (defmacro match-vector-two x (let ((v1104 x)) (let ((fail1105 (lambda () (let ((fail1106 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1104) (let ((w1107 (car v1104)) (x1108 (cdr v1104))) (let ((abs w1107)) (if (cons? x1108) (let ((w1109 (car x1108)) (x1110 (cdr x1108))) (let ((v w1109)) (if (cons? x1110) (let ((w1111 (car x1110)) (x1112 (cdr x1110))) (let ((n w1111)) (if (cons? x1112) (let ((w1113 (car x1112)) (x1114 (cdr x1112))) (let ((pats w1113)) (if (list? pats) (if (cons? x1114) (let ((w1118 (car x1114)) (x1119 (cdr x1114))) (if (cons? w1118) (let ((w1120 (car w1118)) (x1121 (cdr w1118))) (let ((p w1120)) (let ((q x1121)) (let ((x x1119)) (progn (quasiquote (match-vector (unquote abs) (unquote v) (+ (unquote n) 1) ((unquote-splicing pats) ((unquote p) (unquote n))) (unquote q) (unquote-splicing x)))))))) (fail1106))) (fail1106)) (fail1106)))) (fail1106)))) (fail1106)))) (fail1106)))) (fail1106)))))) (if (cons? v1104) (let ((w1122 (car v1104)) (x1123 (cdr v1104))) (let ((abs w1122)) (if (cons? x1123) (let ((w1124 (car x1123)) (x1125 (cdr x1123))) (let ((v w1124)) (if (cons? x1125) (let ((w1126 (car x1125)) (x1127 (cdr x1125))) (let ((n w1126)) (if (cons? x1127) (let ((w1128 (car x1127)) (x1129 (cdr x1127))) (let ((a w1128)) (letfuns ((loop (ls1133 p-ls1131 p-ls1130) (if (null? ls1133) (progn (let ((index (reverse p-ls1131)) (pat (reverse p-ls1130))) (if (cons? x1129) (let ((w1135 (car x1129)) (x1136 (cdr x1129))) (if (null? w1135) (if (cons? x1136) (let ((w1137 (car x1136)) (x1138 (cdr x1136))) (let ((sk w1137)) (if (cons? x1138) (let ((w1139 (car x1138)) (x1140 (cdr x1138))) (let ((fk w1139)) (if (cons? x1140) (let ((w1141 (car x1140)) (x1142 (cdr x1140))) (let ((i w1141)) (if (null? x1142) (progn (let ((len (gensym "len"))) (quasiquote (if (vector? (unquote v)) (let (((unquote len) (vector-size (unquote v)))) (if (= (unquote len) (unquote n)) (match-vector-step (unquote abs) (unquote v) (unquote a) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk)))) (insert-abs (unquote abs) (unquote fk)))))) (fail1105)))) (fail1105)))) (fail1105)))) (fail1105)) (fail1105))) (fail1105)))) (if (cons? ls1133) (progn (let ((w1134 (car ls1133))) (if (cons? w1134) (let ((w1143 (car w1134)) (x1144 (cdr w1134))) (let ((pat w1143)) (if (cons? x1144) (let ((w1145 (car x1144)) (x1146 (cdr x1144))) (let ((index w1145)) (if (null? x1146) (loop (cdr ls1133) (cons index p-ls1131) (cons pat p-ls1130)) (fail1105)))) (fail1105)))) (fail1105)))) (if else (progn (fail1105)) (cond)))))) (loop w1128 (quote ()) (quote ()))))) (fail1105)))) (fail1105)))) (fail1105)))) (fail1105))))) (defmacro match-vector-step x (let ((v1147 x)) (let ((fail1148 (lambda () (let ((fail1149 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1147) (let ((w1150 (car v1147)) (x1151 (cdr v1147))) (let ((abs w1150)) (if (cons? x1151) (let ((w1152 (car x1151)) (x1153 (cdr x1151))) (let ((v w1152)) (if (cons? x1153) (let ((w1154 (car x1153)) (x1155 (cdr x1153))) (if (cons? w1154) (let ((w1156 (car w1154)) (x1157 (cdr w1154))) (if (cons? w1156) (let ((w1158 (car w1156)) (x1159 (cdr w1156))) (let ((pat w1158)) (if (cons? x1159) (let ((w1160 (car x1159)) (x1161 (cdr x1159))) (let ((index w1160)) (if (null? x1161) (let ((rest x1157)) (if (cons? x1155) (let ((w1162 (car x1155)) (x1163 (cdr x1155))) (let ((sk w1162)) (if (cons? x1163) (let ((w1164 (car x1163)) (x1165 (cdr x1163))) (let ((fk w1164)) (if (cons? x1165) (let ((w1166 (car x1165)) (x1167 (cdr x1165))) (let ((i w1166)) (if (null? x1167) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) (vector-ref (unquote v) (unquote index)))) (match-one (unquote abs) (unquote w) (unquote pat) ((vector-ref (unquote v) (unquote index)) ((setter vector-ref) (unquote v) (unquote index))) (match-vector-step (unquote v) (unquote rest) (unquote sk) (unquote fk)) (unquote fk) (unquote i)))))) (fail1149)))) (fail1149)))) (fail1149)))) (fail1149))) (fail1149)))) (fail1149)))) (fail1149))) (fail1149))) (fail1149)))) (fail1149)))) (fail1149)))))) (if (cons? v1147) (let ((w1168 (car v1147)) (x1169 (cdr v1147))) (let ((abs w1168)) (if (cons? x1169) (let ((w1170 (car x1169)) (x1171 (cdr x1169))) (let ((v w1170)) (if (cons? x1171) (let ((w1172 (car x1171)) (x1173 (cdr x1171))) (if (null? w1172) (if (cons? x1173) (let ((w1174 (car x1173)) (x1175 (cdr x1173))) (let ((sk w1174)) (if (list? sk) (if (cons? x1175) (let ((w1179 (car x1175)) (x1180 (cdr x1175))) (let ((fk w1179)) (if (cons? x1180) (let ((w1181 (car x1180)) (x1182 (cdr x1180))) (let ((i w1181)) (if (null? x1182) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail1148)))) (fail1148)))) (fail1148)) (fail1148)))) (fail1148)) (fail1148))) (fail1148)))) (fail1148)))) (fail1148))))) (defmacro match-gen-vector-ellipses x (let ((v1183 x)) (let ((fail1184 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1183) (let ((w1185 (car v1183)) (x1186 (cdr v1183))) (let ((abs w1185)) (if (cons? x1186) (let ((w1187 (car x1186)) (x1188 (cdr x1186))) (let ((v w1187)) (if (cons? x1188) (let ((w1189 (car x1188)) (x1190 (cdr x1188))) (let ((n w1189)) (if (cons? x1190) (let ((w1191 (car x1190)) (x1192 (cdr x1190))) (let ((a w1191)) (letfuns ((loop (ls1196 p-ls1194 p-ls1193) (if (null? ls1196) (progn (let ((index (reverse p-ls1194)) (pat (reverse p-ls1193))) (if (cons? x1192) (let ((w1198 (car x1192)) (x1199 (cdr x1192))) (let ((p w1198)) (if (cons? x1199) (let ((w1200 (car x1199)) (x1201 (cdr x1199))) (let ((sk w1200)) (if (cons? x1201) (let ((w1202 (car x1201)) (x1203 (cdr x1201))) (let ((fk w1202)) (if (cons? x1203) (let ((w1204 (car x1203)) (x1205 (cdr x1203))) (let ((i w1204)) (if (null? x1205) (progn (let ((len (gensym "len"))) (quasiquote (if (vector? (unquote v)) (let (((unquote len) (vector-size (unquote v)))) (if (>= (unquote len) (unquote n)) (match-vector-step (unquote abs) (unquote v) (unquote a) (match-vector-tail (unquote v) (unquote p) (unquote n) (unquote len) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk)))) (insert-abs (unquote abs) (unquote fk)))))) (fail1184)))) (fail1184)))) (fail1184)))) (fail1184)))) (fail1184)))) (if (cons? ls1196) (progn (let ((w1197 (car ls1196))) (if (cons? w1197) (let ((w1206 (car w1197)) (x1207 (cdr w1197))) (let ((pat w1206)) (if (cons? x1207) (let ((w1208 (car x1207)) (x1209 (cdr x1207))) (let ((index w1208)) (if (null? x1209) (loop (cdr ls1196) (cons index p-ls1194) (cons pat p-ls1193)) (fail1184)))) (fail1184)))) (fail1184)))) (if else (progn (fail1184)) (cond)))))) (loop w1191 (quote ()) (quote ()))))) (fail1184)))) (fail1184)))) (fail1184)))) (fail1184))))) (defmacro match-vector-tail x (let ((v1210 x)) (let ((fail1211 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1210) (let ((w1212 (car v1210)) (x1213 (cdr v1210))) (let ((abs w1212)) (if (cons? x1213) (let ((w1214 (car x1213)) (x1215 (cdr x1213))) (let ((v w1214)) (if (cons? x1215) (let ((w1216 (car x1215)) (x1217 (cdr x1215))) (let ((p w1216)) (if (cons? x1217) (let ((w1218 (car x1217)) (x1219 (cdr x1217))) (let ((n w1218)) (if (cons? x1219) (let ((w1220 (car x1219)) (x1221 (cdr x1219))) (let ((len w1220)) (if (cons? x1221) (let ((w1222 (car x1221)) (x1223 (cdr x1221))) (let ((sk w1222)) (if (cons? x1223) (let ((w1224 (car x1223)) (x1225 (cdr x1223))) (let ((fk w1224)) (if (cons? x1225) (let ((w1226 (car x1225)) (x1227 (cdr x1225))) (let ((i w1226)) (if (null? x1227) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-vector-tail-two (unquote v) (unquote p) (unquote n) (unquote len) (unquote sk) (unquote fk) (unquote i)) (unquote i) ()))) (fail1211)))) (fail1211)))) (fail1211)))) (fail1211)))) (fail1211)))) (fail1211)))) (fail1211)))) (fail1211)))) (fail1211))))) (defmacro match-vector-tail-two x (let ((v1228 x)) (let ((fail1229 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1228) (let ((w1230 (car v1228)) (x1231 (cdr v1228))) (let ((abs w1230)) (if (cons? x1231) (let ((w1232 (car x1231)) (x1233 (cdr x1231))) (let ((v w1232)) (if (cons? x1233) (let ((w1234 (car x1233)) (x1235 (cdr x1233))) (let ((p w1234)) (if (cons? x1235) (let ((w1236 (car x1235)) (x1237 (cdr x1235))) (let ((n w1236)) (if (cons? x1237) (let ((w1238 (car x1237)) (x1239 (cdr x1237))) (let ((len w1238)) (if (cons? x1239) (let ((w1240 (car x1239)) (x1241 (cdr x1239))) (let ((sk w1240)) (if (list? sk) (if (cons? x1241) (let ((w1245 (car x1241)) (x1246 (cdr x1241))) (let ((fk w1245)) (if (cons? x1246) (let ((w1247 (car x1246)) (x1248 (cdr x1246))) (let ((i w1247)) (if (cons? x1248) (let ((w1249 (car x1248)) (x1250 (cdr x1248))) (letfuns ((loop (ls1254 p-ls1252 p-ls1251) (if (null? ls1254) (progn (let ((id-ls (reverse p-ls1252)) (id (reverse p-ls1251))) (if (null? x1250) (progn (let ((loop (gensym "loop")) (j (gensym "j")) (w (gensym "w"))) (quasiquote (recur (unquote loop) (((unquote j) (unquote n)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (if (>= (unquote j) (unquote len)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))) (let (((unquote w) (vector-ref (unquote v) (unquote j)))) (match-one (unquote abs) (unquote w) (unquote p) ((vector-ref (unquote v) (unquote j)) ((setter vector-ref) (unquote v) (unquote j))) (match-drop-ids ((unquote loop) (+ (unquote j) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))))))) (fail1229)))) (if (cons? ls1254) (progn (let ((w1255 (car ls1254))) (if (cons? w1255) (let ((w1256 (car w1255)) (x1257 (cdr w1255))) (let ((id w1256)) (if (cons? x1257) (let ((w1258 (car x1257)) (x1259 (cdr x1257))) (let ((id-ls w1258)) (if (null? x1259) (loop (cdr ls1254) (cons id-ls p-ls1252) (cons id p-ls1251)) (fail1229)))) (fail1229)))) (fail1229)))) (if else (progn (fail1229)) (cond)))))) (loop w1249 (quote ()) (quote ())))) (fail1229)))) (fail1229)))) (fail1229)) (fail1229)))) (fail1229)))) (fail1229)))) (fail1229)))) (fail1229)))) (fail1229)))) (fail1229))))) (defmacro match-abstract x (let ((v1260 x)) (let ((fail1261 (lambda () (let ((fail1262 (lambda () (let ((fail1263 (lambda () (let ((fail1264 (lambda () (let ((fail1265 (lambda () (let ((fail1266 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1260) (let ((w1267 (car v1260)) (x1268 (cdr v1260))) (if (null? w1267) (if (cons? x1268) (let ((w1269 (car x1268)) (x1270 (cdr x1268))) (let ((abs w1269)) (if (cons? x1270) (let ((w1271 (car x1270)) (x1272 (cdr x1270))) (let ((phd w1271)) (if (cons? x1272) (let ((w1273 (car x1272)) (x1274 (cdr x1272))) (let ((y w1273)) (if (cons? x1274) (let ((w1275 (car x1274)) (x1276 (cdr x1274))) (let ((p w1275)) (if (cons? x1276) (let ((w1277 (car x1276)) (x1278 (cdr x1276))) (let ((g+s w1277)) (if (cons? x1278) (let ((w1279 (car x1278)) (x1280 (cdr x1278))) (let ((sk w1279)) (if (cons? x1280) (let ((w1281 (car x1280)) (x1282 (cdr x1280))) (let ((fk w1281)) (if (cons? x1282) (let ((w1283 (car x1282)) (x1284 (cdr x1282))) (let ((i w1283)) (if (null? x1284) (progn (quasiquote (match-phd () (unquote phd) (unquote abs) (unquote y) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail1266)))) (fail1266)))) (fail1266)))) (fail1266)))) (fail1266)))) (fail1266)))) (fail1266)))) (fail1266)))) (fail1266)) (fail1266))) (fail1266)))))) (if (cons? v1260) (let ((w1285 (car v1260)) (x1286 (cdr v1260))) (let ((x w1285)) (if (list? x) (if (cons? x1286) (let ((w1290 (car x1286)) (x1291 (cdr x1286))) (if (cons? w1290) (let ((w1292 (car w1290)) (x1293 (cdr w1290))) (if (cons? w1292) (let ((w1294 (car w1292)) (x1295 (cdr w1292))) (let ((a w1294)) (if (cons? x1295) (let ((w1296 (car x1295)) (x1297 (cdr x1295))) (let ((aa w1296)) (let ((as x1297)) (if (list? as) (let ((us x1293)) (if (list? us) (if (cons? x1291) (let ((w1304 (car x1291)) (x1305 (cdr x1291))) (let ((phd w1304)) (if (cons? x1305) (let ((w1306 (car x1305)) (x1307 (cdr x1305))) (let ((y w1306)) (if (cons? x1307) (let ((w1308 (car x1307)) (x1309 (cdr x1307))) (if (cons? w1308) (let ((w1310 (car w1308)) (x1311 (cdr w1308))) (let ((b w1310)) (let ((ps x1311)) (if (cons? x1309) (let ((w1312 (car x1309)) (x1313 (cdr x1309))) (let ((g+s w1312)) (if (cons? x1313) (let ((w1314 (car x1313)) (x1315 (cdr x1313))) (let ((sk w1314)) (if (cons? x1315) (let ((w1316 (car x1315)) (x1317 (cdr x1315))) (let ((fk w1316)) (if (cons? x1317) (let ((w1318 (car x1317)) (x1319 (cdr x1317))) (let ((i w1318)) (if (null? x1319) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) ((unquote a) (unquote y)))) (if (unquote ret) (let (((unquote aa) (car (unquote ret)))) (match-one ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) ((unquote aa) (unquote-splicing i)))) (insert-abs ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a) (unquote aa) (unquote-splicing as)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) ((unquote b) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1265)))) (fail1265)))) (fail1265)))) (fail1265)))) (fail1265))))) (fail1265))) (fail1265)))) (fail1265)))) (fail1265)) (fail1265))) (fail1265))))) (fail1265)))) (fail1265))) (fail1265))) (fail1265)) (fail1265)))) (fail1265)))))) (if (cons? v1260) (let ((w1320 (car v1260)) (x1321 (cdr v1260))) (let ((x w1320)) (if (list? x) (if (cons? x1321) (let ((w1325 (car x1321)) (x1326 (cdr x1321))) (if (cons? w1325) (let ((w1327 (car w1325)) (x1328 (cdr w1325))) (if (cons? w1327) (let ((w1329 (car w1327)) (x1330 (cdr w1327))) (let ((a w1329)) (if (null? x1330) (let ((us x1328)) (if (list? us) (if (cons? x1326) (let ((w1334 (car x1326)) (x1335 (cdr x1326))) (let ((phd w1334)) (if (cons? x1335) (let ((w1336 (car x1335)) (x1337 (cdr x1335))) (let ((y w1336)) (if (cons? x1337) (let ((w1338 (car x1337)) (x1339 (cdr x1337))) (if (cons? w1338) (let ((w1340 (car w1338)) (x1341 (cdr w1338))) (let ((b w1340)) (let ((ps x1341)) (if (cons? x1339) (let ((w1342 (car x1339)) (x1343 (cdr x1339))) (let ((g+s w1342)) (if (cons? x1343) (let ((w1344 (car x1343)) (x1345 (cdr x1343))) (let ((sk w1344)) (if (cons? x1345) (let ((w1346 (car x1345)) (x1347 (cdr x1345))) (let ((fk w1346)) (if (cons? x1347) (let ((w1348 (car x1347)) (x1349 (cdr x1347))) (let ((i w1348)) (if (null? x1349) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) ((unquote a) (unquote y)))) (if (unquote ret) (match-one ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) ((unquote b) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1264)))) (fail1264)))) (fail1264)))) (fail1264)))) (fail1264))))) (fail1264))) (fail1264)))) (fail1264)))) (fail1264)) (fail1264))) (fail1264)))) (fail1264))) (fail1264))) (fail1264)) (fail1264)))) (fail1264)))))) (if (cons? v1260) (let ((w1350 (car v1260)) (x1351 (cdr v1260))) (let ((x w1350)) (if (list? x) (if (cons? x1351) (let ((w1355 (car x1351)) (x1356 (cdr x1351))) (if (cons? w1355) (let ((w1357 (car w1355)) (x1358 (cdr w1355))) (if (cons? w1357) (let ((w1359 (car w1357)) (x1360 (cdr w1357))) (let ((a w1359)) (if (cons? x1360) (let ((w1361 (car x1360)) (x1362 (cdr x1360))) (let ((aa w1361)) (let ((as x1362)) (if (list? as) (let ((us x1358)) (if (list? us) (if (cons? x1356) (let ((w1369 (car x1356)) (x1370 (cdr x1356))) (let ((phd w1369)) (if (cons? x1370) (let ((w1371 (car x1370)) (x1372 (cdr x1370))) (let ((y w1371)) (if (cons? x1372) (let ((w1373 (car x1372)) (x1374 (cdr x1372))) (if (cons? w1373) (let ((w1375 (car w1373)) (x1376 (cdr w1373))) (if (cons? w1375) (let ((w1377 (car w1375)) (x1378 (cdr w1375))) (let ((b w1377)) (let ((bs x1378)) (if (list? bs) (let ((ps x1376)) (if (cons? x1374) (let ((w1382 (car x1374)) (x1383 (cdr x1374))) (let ((g+s w1382)) (if (cons? x1383) (let ((w1384 (car x1383)) (x1385 (cdr x1383))) (let ((sk w1384)) (if (cons? x1385) (let ((w1386 (car x1385)) (x1387 (cdr x1385))) (let ((fk w1386)) (if (cons? x1387) (let ((w1388 (car x1387)) (x1389 (cdr x1387))) (let ((i w1388)) (if (null? x1389) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) (((unquote a) (unquote-splicing bs)) (unquote y)))) (if (unquote ret) (let (((unquote aa) (car (unquote ret)))) (match-one ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) ((unquote aa) (unquote-splicing i)))) (insert-abs ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a) (unquote aa) (unquote-splicing as)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) (((unquote b) (unquote-splicing bs)) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1263)))) (fail1263)))) (fail1263)))) (fail1263)))) (fail1263))) (fail1263))))) (fail1263))) (fail1263))) (fail1263)))) (fail1263)))) (fail1263)) (fail1263))) (fail1263))))) (fail1263)))) (fail1263))) (fail1263))) (fail1263)) (fail1263)))) (fail1263)))))) (if (cons? v1260) (let ((w1390 (car v1260)) (x1391 (cdr v1260))) (let ((x w1390)) (if (list? x) (if (cons? x1391) (let ((w1395 (car x1391)) (x1396 (cdr x1391))) (if (cons? w1395) (let ((w1397 (car w1395)) (x1398 (cdr w1395))) (if (cons? w1397) (let ((w1399 (car w1397)) (x1400 (cdr w1397))) (let ((a w1399)) (if (null? x1400) (let ((us x1398)) (if (list? us) (if (cons? x1396) (let ((w1404 (car x1396)) (x1405 (cdr x1396))) (let ((phd w1404)) (if (cons? x1405) (let ((w1406 (car x1405)) (x1407 (cdr x1405))) (let ((y w1406)) (if (cons? x1407) (let ((w1408 (car x1407)) (x1409 (cdr x1407))) (if (cons? w1408) (let ((w1410 (car w1408)) (x1411 (cdr w1408))) (if (cons? w1410) (let ((w1412 (car w1410)) (x1413 (cdr w1410))) (let ((b w1412)) (let ((bs x1413)) (if (list? bs) (let ((ps x1411)) (if (cons? x1409) (let ((w1417 (car x1409)) (x1418 (cdr x1409))) (let ((g+s w1417)) (if (cons? x1418) (let ((w1419 (car x1418)) (x1420 (cdr x1418))) (let ((sk w1419)) (if (cons? x1420) (let ((w1421 (car x1420)) (x1422 (cdr x1420))) (let ((fk w1421)) (if (cons? x1422) (let ((w1423 (car x1422)) (x1424 (cdr x1422))) (let ((i w1423)) (if (null? x1424) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) (((unquote a) (unquote-splicing bs)) (unquote y)))) (if (unquote ret) (match-one ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) (((unquote b) (unquote-splicing bs)) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1262)))) (fail1262)))) (fail1262)))) (fail1262)))) (fail1262))) (fail1262))))) (fail1262))) (fail1262))) (fail1262)))) (fail1262)))) (fail1262)) (fail1262))) (fail1262)))) (fail1262))) (fail1262))) (fail1262)) (fail1262)))) (fail1262)))))) (if (cons? v1260) (let ((w1425 (car v1260)) (x1426 (cdr v1260))) (let ((x w1425)) (if (cons? x1426) (let ((w1427 (car x1426)) (x1428 (cdr x1426))) (if (null? w1427) (if (cons? x1428) (let ((w1429 (car x1428)) (x1430 (cdr x1428))) (let ((phd w1429)) (if (cons? x1430) (let ((w1431 (car x1430)) (x1432 (cdr x1430))) (let ((y w1431)) (if (cons? x1432) (let ((w1433 (car x1432)) (x1434 (cdr x1432))) (let ((p w1433)) (let ((l x1434)) (progn (quasiquote (match-phd () (unquote phd) (unquote x) (unquote y) (unquote p) (unquote-splicing l))))))) (fail1261)))) (fail1261)))) (fail1261)) (fail1261))) (fail1261)))) (fail1261))))) (defmacro match-phd x (let ((v1435 x)) (let ((fail1436 (lambda () (let ((fail1437 (lambda () (let ((fail1438 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1435) (let ((w1439 (car v1435)) (x1440 (cdr v1435))) (if (null? w1439) (if (cons? x1440) (let ((w1441 (car x1440)) (x1442 (cdr x1440))) (let ((phd w1441)) (if (cons? x1442) (let ((w1443 (car x1442)) (x1444 (cdr x1442))) (let ((abs w1443)) (let ((l x1444)) (progn (quasiquote (match-three ((unquote abs) (unquote phd)) (unquote-splicing l))))))) (fail1438)))) (fail1438)) (fail1438))) (fail1438)))))) (if (cons? v1435) (let ((w1445 (car v1435)) (x1446 (cdr v1435))) (let ((phd w1445)) (if (list? phd) (if (cons? x1446) (let ((w1450 (car x1446)) (x1451 (cdr x1446))) (if (cons? w1450) (let ((w1452 (car w1450)) (x1453 (cdr w1450))) (let ((c w1452)) (if (cons? x1453) (let ((w1454 (car x1453)) (x1455 (cdr x1453))) (if (cons? w1454) (let ((w1456 (car w1454)) (x1457 (cdr w1454))) (if (cons? w1456) (let ((w1458 (car w1456)) (x1459 (cdr w1456))) (let ((h w1458)) (if (cons? x1459) (let ((w1460 (car x1459)) (x1461 (cdr x1459))) (let ((a w1460)) (if (null? x1461) (let ((hh x1457)) (if (list? hh) (if (null? x1455) (if (cons? x1451) (let ((w1465 (car x1451)) (x1466 (cdr x1451))) (let ((abs w1465)) (if (cons? x1466) (let ((w1467 (car x1466)) (x1468 (cdr x1466))) (let ((v w1467)) (if (cons? x1468) (let ((w1469 (car x1468)) (x1470 (cdr x1468))) (if (cons? w1469) (let ((w1471 (car w1469)) (x1472 (cdr w1469))) (let ((h2 w1471)) (let ((l x1472)) (if (cons? x1470) (let ((w1473 (car x1470)) (x1474 (cdr x1470))) (let ((g+s w1473)) (if (cons? x1474) (let ((w1475 (car x1474)) (x1476 (cdr x1474))) (let ((sk w1475)) (if (cons? x1476) (let ((w1477 (car x1476)) (x1478 (cdr x1476))) (let ((fk w1477)) (if (cons? x1478) (let ((w1479 (car x1478)) (x1480 (cdr x1478))) (let ((i w1479)) (if (null? x1480) (progn (if (eq h h2) (quasiquote (match-one ((unquote abs) ((unquote a) (((unquote h) (unquote a)) (unquote-splicing hh) (unquote-splicing phd)))) (unquote v) (unquote l) (unquote g+s) (set-phd-sk (unquote c) (unquote sk)) (set-phd-fk (unquote c) (unquote fk)) (unquote i))) (quasiquote (match-phd (((unquote h) (unquote a)) (unquote-splicing phd)) ((unquote c) (unquote hh)) (unquote abs) (unquote v) ((unquote h2) (unquote-splicing l)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail1437)))) (fail1437)))) (fail1437)))) (fail1437)))) (fail1437))))) (fail1437))) (fail1437)))) (fail1437)))) (fail1437)) (fail1437)) (fail1437))) (fail1437)))) (fail1437)))) (fail1437))) (fail1437))) (fail1437)))) (fail1437))) (fail1437)) (fail1437)))) (fail1437)))))) (if (cons? v1435) (let ((w1481 (car v1435)) (x1482 (cdr v1435))) (let ((phd w1481)) (if (cons? x1482) (let ((w1483 (car x1482)) (x1484 (cdr x1482))) (if (cons? w1483) (let ((w1485 (car w1483)) (x1486 (cdr w1483))) (let ((c w1485)) (if (cons? x1486) (let ((w1487 (car x1486)) (x1488 (cdr x1486))) (if (null? w1487) (if (null? x1488) (if (cons? x1484) (let ((w1489 (car x1484)) (x1490 (cdr x1484))) (let ((abs w1489)) (let ((l x1490)) (progn (quasiquote (match-three ((unquote abs) ((unquote c) (unquote phd))) (unquote-splicing l))))))) (fail1436)) (fail1436)) (fail1436))) (fail1436)))) (fail1436))) (fail1436)))) (fail1436))))) (defmacro set-phd-fk x (let ((v1491 x)) (let ((fail1492 (lambda () (let ((fail1493 (lambda () (let ((fail1494 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1491) (let ((w1495 (car v1491)) (x1496 (cdr v1491))) (if (cons? w1495) (let ((w1497 (car w1495)) (x1498 (cdr w1495))) (let ((abs w1497)) (if (cons? x1498) (let ((w1499 (car x1498)) (x1500 (cdr x1498))) (if (cons? w1499) (let ((w1501 (car w1499)) (x1502 (cdr w1499))) (let ((c w1501)) (if (cons? x1502) (let ((w1503 (car x1502)) (x1504 (cdr x1502))) (let ((pp w1503)) (if (null? x1504) (if (null? x1500) (if (cons? x1496) (let ((w1505 (car x1496)) (x1506 (cdr x1496))) (let ((cc w1505)) (if (cons? x1506) (let ((w1507 (car x1506)) (x1508 (cdr x1506))) (if (cons? w1507) (let ((w1509 (car w1507)) (x1510 (cdr w1507))) (let ((fk w1509)) (let ((fkk x1510)) (if (list? fkk) (if (null? x1508) (progn (quasiquote (fk ((unquote abs) ((unquote cc) (unquote pp))) (unquote-splicing fkk)))) (fail1494)) (fail1494))))) (fail1494))) (fail1494)))) (fail1494)) (fail1494)) (fail1494)))) (fail1494)))) (fail1494))) (fail1494)))) (fail1494))) (fail1494)))))) (if (cons? v1491) (let ((w1514 (car v1491)) (x1515 (cdr v1491))) (let ((abs w1514)) (if (cons? x1515) (let ((w1516 (car x1515)) (x1517 (cdr x1515))) (let ((cc w1516)) (if (cons? x1517) (let ((w1518 (car x1517)) (x1519 (cdr x1517))) (if (cons? w1518) (let ((w1520 (car w1518)) (x1521 (cdr w1518))) (let ((fk w1520)) (if (null? x1521) (if (null? x1519) (progn (quasiquote ((unquote fk)))) (fail1493)) (fail1493)))) (fail1493))) (fail1493)))) (fail1493)))) (fail1493)))))) (if (cons? v1491) (let ((w1522 (car v1491)) (x1523 (cdr v1491))) (let ((abs w1522)) (if (cons? x1523) (let ((w1524 (car x1523)) (x1525 (cdr x1523))) (let ((cc w1524)) (if (cons? x1525) (let ((w1526 (car x1525)) (x1527 (cdr x1525))) (if (cons? w1526) (let ((w1528 (car w1526)) (x1529 (cdr w1526))) (if (binary= w1528 (quote progn)) (let ((l x1529)) (if (null? x1527) (progn (quasiquote (progn (unquote-splicing l)))) (fail1492))) (fail1492))) (fail1492))) (fail1492)))) (fail1492)))) (fail1492))))) (defmacro set-phd-sk x (let ((v1530 x)) (let ((fail1531 (lambda () (let ((fail1532 (lambda () (let ((fail1533 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1530) (let ((w1534 (car v1530)) (x1535 (cdr v1530))) (if (cons? w1534) (let ((w1536 (car w1534)) (x1537 (cdr w1534))) (let ((abs w1536)) (if (cons? x1537) (let ((w1538 (car x1537)) (x1539 (cdr x1537))) (if (cons? w1538) (let ((w1540 (car w1538)) (x1541 (cdr w1538))) (let ((c w1540)) (if (cons? x1541) (let ((w1542 (car x1541)) (x1543 (cdr x1541))) (let ((pp w1542)) (if (null? x1543) (if (null? x1539) (if (cons? x1535) (let ((w1544 (car x1535)) (x1545 (cdr x1535))) (let ((cc w1544)) (if (cons? x1545) (let ((w1546 (car x1545)) (x1547 (cdr x1545))) (if (cons? w1546) (let ((w1548 (car w1546)) (x1549 (cdr w1546))) (let ((fk w1548)) (let ((fkk x1549)) (if (list? fkk) (let ((i x1547)) (if (list? i) (progn (quasiquote ((unquote fk) ((unquote abs) ((unquote cc) (unquote pp))) (unquote-splicing fkk) (unquote-splicing i)))) (fail1533))) (fail1533))))) (fail1533))) (fail1533)))) (fail1533)) (fail1533)) (fail1533)))) (fail1533)))) (fail1533))) (fail1533)))) (fail1533))) (fail1533)))))) (if (cons? v1530) (let ((w1556 (car v1530)) (x1557 (cdr v1530))) (let ((abs w1556)) (if (cons? x1557) (let ((w1558 (car x1557)) (x1559 (cdr x1557))) (let ((cc w1558)) (if (cons? x1559) (let ((w1560 (car x1559)) (x1561 (cdr x1559))) (if (cons? w1560) (let ((w1562 (car w1560)) (x1563 (cdr w1560))) (let ((fk w1562)) (if (null? x1563) (let ((i x1561)) (if (list? i) (progn (quasiquote ((unquote fk)))) (fail1532))) (fail1532)))) (fail1532))) (fail1532)))) (fail1532)))) (fail1532)))))) (if (cons? v1530) (let ((w1567 (car v1530)) (x1568 (cdr v1530))) (let ((abs w1567)) (if (cons? x1568) (let ((w1569 (car x1568)) (x1570 (cdr x1568))) (let ((cc w1569)) (if (cons? x1570) (let ((w1571 (car x1570)) (x1572 (cdr x1570))) (if (cons? w1571) (let ((w1573 (car w1571)) (x1574 (cdr w1571))) (if (binary= w1573 (quote progn)) (let ((l x1574)) (let ((i x1572)) (if (list? i) (progn (quasiquote (progn (unquote-splicing l)))) (fail1531)))) (fail1531))) (fail1531))) (fail1531)))) (fail1531)))) (fail1531))))) (defmacro match-$ x (let ((v1578 x)) (let ((fail1579 (lambda () (let ((fail1580 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1578) (let ((w1581 (car v1578)) (x1582 (cdr v1578))) (if (cons? x1582) (let ((w1583 (car x1582)) (x1584 (cdr x1582))) (let ((abs w1583)) (if (cons? x1584) (let ((w1585 (car x1584)) (x1586 (cdr x1584))) (let ((newpat w1585)) (if (cons? x1586) (let ((w1587 (car x1586)) (x1588 (cdr x1586))) (let ((m w1587)) (if (cons? x1588) (let ((w1589 (car x1588)) (x1590 (cdr x1588))) (if (null? w1589) (if (cons? x1590) (let ((w1591 (car x1590)) (x1592 (cdr x1590))) (let ((v w1591)) (if (cons? x1592) (let ((w1593 (car x1592)) (x1594 (cdr x1592))) (let ((kt w1593)) (if (cons? x1594) (let ((w1595 (car x1594)) (x1596 (cdr x1594))) (let ((ke w1595)) (if (cons? x1596) (let ((w1597 (car x1596)) (x1598 (cdr x1596))) (let ((i w1597)) (if (null? x1598) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote newpat) () (unquote kt) (unquote ke) (unquote i)))) (fail1580)))) (fail1580)))) (fail1580)))) (fail1580)))) (fail1580)) (fail1580))) (fail1580)))) (fail1580)))) (fail1580)))) (fail1580))) (fail1580)))))) (if (cons? v1578) (let ((w1599 (car v1578)) (x1600 (cdr v1578))) (let ((abs w1599)) (if (cons? x1600) (let ((w1601 (car x1600)) (x1602 (cdr x1600))) (let ((a w1601)) (if (list? a) (if (cons? x1602) (let ((w1606 (car x1602)) (x1607 (cdr x1602))) (let ((m w1606)) (if (cons? x1607) (let ((w1608 (car x1607)) (x1609 (cdr x1607))) (if (cons? w1608) (let ((w1610 (car w1608)) (x1611 (cdr w1608))) (let ((p1 w1610)) (let ((p2 x1611)) (if (list? p2) (let ((v x1609)) (progn (quasiquote (match-$ (unquote abs) ((unquote-splicing a) (= 0 (unquote m) (unquote p1))) (unquote (+ m 1)) (unquote p2) (unquote-splicing v))))) (fail1579))))) (fail1579))) (fail1579)))) (fail1579)) (fail1579)))) (fail1579)))) (fail1579))))) (defmacro match-gen-ellipses x (let ((v1615 x)) (let ((fail1616 (lambda () (let ((fail1617 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1615) (let ((w1618 (car v1615)) (x1619 (cdr v1615))) (let ((abs w1618)) (if (cons? x1619) (let ((w1620 (car x1619)) (x1621 (cdr x1619))) (let ((v w1620)) (if (cons? x1621) (let ((w1622 (car x1621)) (x1623 (cdr x1621))) (let ((p w1622)) (if (cons? x1623) (let ((w1624 (car x1623)) (x1625 (cdr x1623))) (let ((r w1624)) (if (cons? x1625) (let ((w1626 (car x1625)) (x1627 (cdr x1625))) (let ((g+s w1626)) (if (cons? x1627) (let ((w1628 (car x1627)) (x1629 (cdr x1627))) (let ((sk w1628)) (if (list? sk) (if (cons? x1629) (let ((w1633 (car x1629)) (x1634 (cdr x1629))) (let ((fk w1633)) (if (cons? x1634) (let ((w1635 (car x1634)) (x1636 (cdr x1634))) (let ((i w1635)) (if (cons? x1636) (let ((w1637 (car x1636)) (x1638 (cdr x1636))) (letfuns ((loop (ls1642 p-ls1640 p-ls1639) (if (null? ls1642) (progn (let ((id-ls (reverse p-ls1640)) (id (reverse p-ls1639))) (if (null? x1638) (progn (let ((tail-len (gensym "tail-len")) (len (gensym "len")) (n (gensym "n")) (ls (gensym "ls")) (w (gensym "w"))) (quasiquote (match-verify-no-ellipses (unquote r) (let* (((unquote tail-len) (size (quote (unquote r)))) ((unquote ls) (unquote v)) ((unquote len) (size (unquote ls)))) (if (< (unquote len) (unquote tail-len)) (insert-abs (unquote abs) (unquote fk)) (recur loop (((unquote ls) (unquote ls)) ((unquote n) (unquote len)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((= (unquote n) (unquote tail-len)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (match-one (unquote abs) (unquote ls) (unquote r) (() ()) (unquote sk) (unquote fk) (unquote i)))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote n) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))))) (fail1617)))) (if (cons? ls1642) (progn (let ((w1643 (car ls1642))) (if (cons? w1643) (let ((w1644 (car w1643)) (x1645 (cdr w1643))) (let ((id w1644)) (if (cons? x1645) (let ((w1646 (car x1645)) (x1647 (cdr x1645))) (let ((id-ls w1646)) (if (null? x1647) (loop (cdr ls1642) (cons id-ls p-ls1640) (cons id p-ls1639)) (fail1617)))) (fail1617)))) (fail1617)))) (if else (progn (fail1617)) (cond)))))) (loop w1637 (quote ()) (quote ())))) (fail1617)))) (fail1617)))) (fail1617)) (fail1617)))) (fail1617)))) (fail1617)))) (fail1617)))) (fail1617)))) (fail1617)))) (fail1617)))))) (if (cons? v1615) (let ((w1648 (car v1615)) (x1649 (cdr v1615))) (let ((abs w1648)) (if (cons? x1649) (let ((w1650 (car x1649)) (x1651 (cdr x1649))) (let ((v w1650)) (if (cons? x1651) (let ((w1652 (car x1651)) (x1653 (cdr x1651))) (let ((p w1652)) (if (cons? x1653) (let ((w1654 (car x1653)) (x1655 (cdr x1653))) (if (null? w1654) (if (cons? x1655) (let ((w1656 (car x1655)) (x1657 (cdr x1655))) (let ((g+s w1656)) (if (cons? x1657) (let ((w1658 (car x1657)) (x1659 (cdr x1657))) (let ((sk w1658)) (if (list? sk) (if (cons? x1659) (let ((w1663 (car x1659)) (x1664 (cdr x1659))) (let ((fk w1663)) (if (cons? x1664) (let ((w1665 (car x1664)) (x1666 (cdr x1664))) (let ((i w1665)) (if (cons? x1666) (let ((w1667 (car x1666)) (x1668 (cdr x1666))) (letfuns ((loop (ls1672 p-ls1670 p-ls1669) (if (null? ls1672) (progn (let ((id-ls (reverse p-ls1670)) (id (reverse p-ls1669))) (if (null? x1668) (progn (let ((ls (gensym "ls")) (w (gensym "w"))) (quasiquote (match-check-identifier (unquote p) (let (((unquote p) (unquote v))) (if (list? (unquote p)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote abs) (unquote fk)))) (recur loop (((unquote ls) (unquote v)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((null? (unquote ls)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))) (fail1616)))) (if (cons? ls1672) (progn (let ((w1673 (car ls1672))) (if (cons? w1673) (let ((w1674 (car w1673)) (x1675 (cdr w1673))) (let ((id w1674)) (if (cons? x1675) (let ((w1676 (car x1675)) (x1677 (cdr x1675))) (let ((id-ls w1676)) (if (null? x1677) (loop (cdr ls1672) (cons id-ls p-ls1670) (cons id p-ls1669)) (fail1616)))) (fail1616)))) (fail1616)))) (if else (progn (fail1616)) (cond)))))) (loop w1667 (quote ()) (quote ())))) (fail1616)))) (fail1616)))) (fail1616)) (fail1616)))) (fail1616)))) (fail1616)) (fail1616))) (fail1616)))) (fail1616)))) (fail1616)))) (fail1616))))) (defmacro match-gen-ellipses-n x (let ((v1678 x)) (let ((fail1679 (lambda () (let ((fail1680 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1678) (let ((w1681 (car v1678)) (x1682 (cdr v1678))) (let ((abs w1681)) (if (cons? x1682) (let ((w1683 (car x1682)) (x1684 (cdr x1682))) (let ((m w1683)) (if (cons? x1684) (let ((w1685 (car x1684)) (x1686 (cdr x1684))) (let ((v w1685)) (if (cons? x1686) (let ((w1687 (car x1686)) (x1688 (cdr x1686))) (let ((p w1687)) (if (cons? x1688) (let ((w1689 (car x1688)) (x1690 (cdr x1688))) (let ((r w1689)) (if (cons? x1690) (let ((w1691 (car x1690)) (x1692 (cdr x1690))) (let ((g+s w1691)) (if (cons? x1692) (let ((w1693 (car x1692)) (x1694 (cdr x1692))) (let ((sk w1693)) (if (list? sk) (if (cons? x1694) (let ((w1698 (car x1694)) (x1699 (cdr x1694))) (let ((fk w1698)) (if (cons? x1699) (let ((w1700 (car x1699)) (x1701 (cdr x1699))) (let ((i w1700)) (if (cons? x1701) (let ((w1702 (car x1701)) (x1703 (cdr x1701))) (letfuns ((loop (ls1707 p-ls1705 p-ls1704) (if (null? ls1707) (progn (let ((id-ls (reverse p-ls1705)) (id (reverse p-ls1704))) (if (null? x1703) (progn (let ((tail-len (gensym "tail-len")) (len (gensym "len")) (n (gensym "n")) (ls (gensym "ls")) (im (gensym "im")) (w (gensym "w"))) (quasiquote (match-verify-no-ellipses (unquote r) (let* (((unquote tail-len) (size (quote (unquote r)))) ((unquote ls) (unquote v)) ((unquote len) (size (unquote ls)))) (if (< (unquote len) (unquote tail-len)) (insert-abs (unquote abs) (unquote fk)) (recur loop (((unquote ls) (unquote ls)) ((unquote n) (unquote len)) ((unquote im) (unquote m)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((= (unquote n) (unquote tail-len)) (if (> (unquote im) 0) (insert-abs (unquote abs) (unquote fk)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (match-one (unquote abs) (unquote ls) (unquote r) (() ()) (unquote sk) (unquote fk) (unquote i))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote n) 1) (- (unquote im) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))))) (fail1680)))) (if (cons? ls1707) (progn (let ((w1708 (car ls1707))) (if (cons? w1708) (let ((w1709 (car w1708)) (x1710 (cdr w1708))) (let ((id w1709)) (if (cons? x1710) (let ((w1711 (car x1710)) (x1712 (cdr x1710))) (let ((id-ls w1711)) (if (null? x1712) (loop (cdr ls1707) (cons id-ls p-ls1705) (cons id p-ls1704)) (fail1680)))) (fail1680)))) (fail1680)))) (if else (progn (fail1680)) (cond)))))) (loop w1702 (quote ()) (quote ())))) (fail1680)))) (fail1680)))) (fail1680)) (fail1680)))) (fail1680)))) (fail1680)))) (fail1680)))) (fail1680)))) (fail1680)))) (fail1680)))) (fail1680)))))) (if (cons? v1678) (let ((w1713 (car v1678)) (x1714 (cdr v1678))) (let ((abs w1713)) (if (cons? x1714) (let ((w1715 (car x1714)) (x1716 (cdr x1714))) (let ((n w1715)) (if (cons? x1716) (let ((w1717 (car x1716)) (x1718 (cdr x1716))) (let ((v w1717)) (if (cons? x1718) (let ((w1719 (car x1718)) (x1720 (cdr x1718))) (let ((p w1719)) (if (cons? x1720) (let ((w1721 (car x1720)) (x1722 (cdr x1720))) (if (null? w1721) (if (cons? x1722) (let ((w1723 (car x1722)) (x1724 (cdr x1722))) (let ((g+s w1723)) (if (cons? x1724) (let ((w1725 (car x1724)) (x1726 (cdr x1724))) (let ((sk w1725)) (if (list? sk) (if (cons? x1726) (let ((w1730 (car x1726)) (x1731 (cdr x1726))) (let ((fk w1730)) (if (cons? x1731) (let ((w1732 (car x1731)) (x1733 (cdr x1731))) (let ((i w1732)) (if (cons? x1733) (let ((w1734 (car x1733)) (x1735 (cdr x1733))) (letfuns ((loop (ls1739 p-ls1737 p-ls1736) (if (null? ls1739) (progn (let ((id-ls (reverse p-ls1737)) (id (reverse p-ls1736))) (if (null? x1735) (progn (let ((ls (gensym "ls")) (in (gensym "in")) (w (gensym "w"))) (quasiquote (match-check-identifier (unquote p) (let (((unquote p) (unquote v))) (if (list? (unquote p)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote abs) (unquote fk)))) (recur loop (((unquote ls) (unquote v)) ((unquote in) (unquote n)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((null? (unquote ls)) (if (> (unquote in) 0) (insert-abs (unquote abs) (unquote fk)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) ((setter car) (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote in) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))) (fail1679)))) (if (cons? ls1739) (progn (let ((w1740 (car ls1739))) (if (cons? w1740) (let ((w1741 (car w1740)) (x1742 (cdr w1740))) (let ((id w1741)) (if (cons? x1742) (let ((w1743 (car x1742)) (x1744 (cdr x1742))) (let ((id-ls w1743)) (if (null? x1744) (loop (cdr ls1739) (cons id-ls p-ls1737) (cons id p-ls1736)) (fail1679)))) (fail1679)))) (fail1679)))) (if else (progn (fail1679)) (cond)))))) (loop w1734 (quote ()) (quote ())))) (fail1679)))) (fail1679)))) (fail1679)) (fail1679)))) (fail1679)))) (fail1679)) (fail1679))) (fail1679)))) (fail1679)))) (fail1679)))) (fail1679)))) (fail1679))))) (defmacro match-verify-no-ellipses x (let ((v1745 x)) (let ((fail1746 (lambda () (let ((fail1747 (lambda () (let ((fail1748 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1745) (let ((w1749 (car v1745)) (x1750 (cdr v1745))) (let ((x w1749)) (if (cons? x1750) (let ((w1751 (car x1750)) (x1752 (cdr x1750))) (let ((sk w1751)) (if (null? x1752) (progn (quasiquote (error <condition> (fmt "dotted tail not allowed after ellipse ~a" (unquote x))))) (fail1748)))) (fail1748)))) (fail1748)))))) (if (cons? v1745) (let ((w1753 (car v1745)) (x1754 (cdr v1745))) (if (null? w1753) (if (cons? x1754) (let ((w1755 (car x1754)) (x1756 (cdr x1754))) (let ((sk w1755)) (if (null? x1756) (progn sk) (fail1747)))) (fail1747)) (fail1747))) (fail1747)))))) (if (cons? v1745) (let ((w1757 (car v1745)) (x1758 (cdr v1745))) (if (cons? w1757) (let ((w1759 (car w1757)) (x1760 (cdr w1757))) (let ((x w1759)) (let ((y x1760)) (if (cons? x1758) (let ((w1761 (car x1758)) (x1762 (cdr x1758))) (let ((sk w1761)) (if (null? x1762) (progn (quasiquote (match-check-ellipse (unquote x) (error <condition> "multiple ellipse patterns not allowed at same level") (match-verify-no-ellipses (unquote y) (unquote sk))))) (fail1746)))) (fail1746))))) (fail1746))) (fail1746))))) (defmacro match-drop-ids x (let ((v1763 x)) (let ((fail1764 (lambda () (let ((fail1765 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1763) (let ((w1766 (car v1763)) (x1767 (cdr v1763))) (let ((abs w1766)) (if (cons? x1767) (let ((w1768 (car x1767)) (x1769 (cdr x1767))) (let ((expr w1768)) (let ((ids x1769)) (if (list? ids) (progn expr) (fail1765))))) (fail1765)))) (fail1765)))))) (if (cons? v1763) (let ((w1773 (car v1763)) (x1774 (cdr v1763))) (let ((expr w1773)) (if (null? x1774) (progn expr) (fail1764)))) (fail1764))))) (defmacro match-gen-search x (let ((v1775 x)) (let ((fail1776 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1775) (let ((w1777 (car v1775)) (x1778 (cdr v1775))) (let ((abs w1777)) (if (cons? x1778) (let ((w1779 (car x1778)) (x1780 (cdr x1778))) (let ((v w1779)) (if (cons? x1780) (let ((w1781 (car x1780)) (x1782 (cdr x1780))) (let ((p w1781)) (if (cons? x1782) (let ((w1783 (car x1782)) (x1784 (cdr x1782))) (let ((q w1783)) (if (cons? x1784) (let ((w1785 (car x1784)) (x1786 (cdr x1784))) (let ((g+s w1785)) (if (cons? x1786) (let ((w1787 (car x1786)) (x1788 (cdr x1786))) (let ((sk w1787)) (if (cons? x1788) (let ((w1789 (car x1788)) (x1790 (cdr x1788))) (let ((fk w1789)) (if (cons? x1790) (let ((w1791 (car x1790)) (x1792 (cdr x1790))) (let ((i w1791)) (if (cons? x1792) (let ((w1793 (car x1792)) (x1794 (cdr x1792))) (letfuns ((loop (ls1798 p-ls1796 p-ls1795) (if (null? ls1798) (progn (let ((id-ls (reverse p-ls1796)) (id (reverse p-ls1795))) (if (null? x1794) (progn (let ((try (gensym "try")) (next (gensym "next")) (ls (gensym "ls")) (w (gensym "w")) (loop (gensym "loop")) (u (gensym "u")) (fail (gensym "fail"))) (let ((ret (quasiquote (letfuns (((unquote try) ((unquote w) (unquote fail) (unquote-splicing id-ls)) (match-one (unquote abs) (unquote w) (unquote q) (unquote g+s) (match-drop-ids (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (unquote sk))) (match-drop-ids ((unquote next) (unquote w) (unquote fail) (unquote-splicing id-ls))) (unquote i))) ((unquote next) ((unquote w) (unquote fail) (unquote-splicing id-ls)) (if (not (cons? (unquote w))) ((unquote fail)) (let (((unquote u) (car (unquote w)))) (match-one (unquote abs) (unquote u) (unquote p) ((car (unquote w)) ((setter car) (unquote w))) (match-drop-ids (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id-ls) (cons (unquote id) (unquote id-ls))))) id id-ls)) (recur (unquote loop) (((unquote ls) (cdr (unquote w)))) (if (cons? (unquote ls)) ((unquote try) (car (unquote ls)) (lambda () ((unquote loop) (cdr (unquote ls)))) (unquote-splicing id-ls)) ((unquote fail)))))) (match-drop-ids ((unquote fail))) (unquote i)))))) (let (unquote (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls)) ((unquote try) (unquote v) (lambda () (insert-abs (unquote abs) (unquote fk))) (unquote-splicing id-ls))))))) ret))) (fail1776)))) (if (cons? ls1798) (progn (let ((w1799 (car ls1798))) (if (cons? w1799) (let ((w1800 (car w1799)) (x1801 (cdr w1799))) (let ((id w1800)) (if (cons? x1801) (let ((w1802 (car x1801)) (x1803 (cdr x1801))) (let ((id-ls w1802)) (if (null? x1803) (loop (cdr ls1798) (cons id-ls p-ls1796) (cons id p-ls1795)) (fail1776)))) (fail1776)))) (fail1776)))) (if else (progn (fail1776)) (cond)))))) (loop w1793 (quote ()) (quote ())))) (fail1776)))) (fail1776)))) (fail1776)))) (fail1776)))) (fail1776)))) (fail1776)))) (fail1776)))) (fail1776)))) (fail1776))))) (defmacro match-quasiquote x (let ((v1804 x)) (let ((fail1805 (lambda () (let ((fail1806 (lambda () (let ((fail1807 (lambda () (let ((fail1808 (lambda () (let ((fail1809 (lambda () (let ((fail1810 (lambda () (let ((fail1811 (lambda () (let ((fail1812 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1804) (let ((w1813 (car v1804)) (x1814 (cdr v1804))) (let ((abs w1813)) (if (cons? x1814) (let ((w1815 (car x1814)) (x1816 (cdr x1814))) (let ((v w1815)) (if (cons? x1816) (let ((w1817 (car x1816)) (x1818 (cdr x1816))) (let ((x w1817)) (if (cons? x1818) (let ((w1819 (car x1818)) (x1820 (cdr x1818))) (let ((g+s w1819)) (if (cons? x1820) (let ((w1821 (car x1820)) (x1822 (cdr x1820))) (let ((sk w1821)) (if (cons? x1822) (let ((w1823 (car x1822)) (x1824 (cdr x1822))) (let ((fk w1823)) (if (cons? x1824) (let ((w1825 (car x1824)) (x1826 (cdr x1824))) (let ((i w1825)) (let ((depth x1826)) (progn (quasiquote (match-one (unquote abs) (unquote v) (quote (unquote x)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))))) (fail1812)))) (fail1812)))) (fail1812)))) (fail1812)))) (fail1812)))) (fail1812)))) (fail1812)))))) (if (cons? v1804) (let ((w1827 (car v1804)) (x1828 (cdr v1804))) (let ((abs w1827)) (if (cons? x1828) (let ((w1829 (car x1828)) (x1830 (cdr x1828))) (let ((v w1829)) (if (cons? x1830) (let ((w1831 (car x1830)) (x1832 (cdr x1830))) (if (vector? w1831) (let ((len1833 (vector-size w1831))) (if (>= len1833 0) (letfuns ((loop1835 (j1836 p-ls1834) (if (>= j1836 len1833) (let ((elt (reverse p-ls1834))) (if (cons? x1832) (let ((w1838 (car x1832)) (x1839 (cdr x1832))) (let ((g+s w1838)) (if (cons? x1839) (let ((w1840 (car x1839)) (x1841 (cdr x1839))) (let ((sk w1840)) (if (cons? x1841) (let ((w1842 (car x1841)) (x1843 (cdr x1841))) (let ((fk w1842)) (if (cons? x1843) (let ((w1844 (car x1843)) (x1845 (cdr x1843))) (let ((i w1844)) (let ((depth x1845)) (progn (let ((ls (gensym "ls"))) (quasiquote (if (vector? (unquote v)) (let (((unquote ls) (convert (unquote v) <list>))) (match-quasiquote (unquote abs) (unquote ls) (unquote elt) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))) (insert-abs (unquote abs) (unquote fk))))))))) (fail1811)))) (fail1811)))) (fail1811)))) (fail1811))) (let ((w1837 (vector-ref w1831 j1836))) (let ((elt w1837)) (loop1835 (+ j1836 1) (cons elt p-ls1834))))))) (loop1835 0 (quote ()))) (fail1811))) (fail1811))) (fail1811)))) (fail1811)))) (fail1811)))))) (if (cons? v1804) (let ((w1846 (car v1804)) (x1847 (cdr v1804))) (let ((a w1846)) (if (cons? w1846) (let ((w1848 (car w1846)) (x1849 (cdr w1846))) (let ((abs w1848)) (if (cons? x1849) (let ((w1850 (car x1849)) (x1851 (cdr x1849))) (if (cons? w1850) (let ((w1852 (car w1850)) (x1853 (cdr w1850))) (if (cons? w1852) (let ((w1854 (car w1852)) (x1855 (cdr w1852))) (let ((qcar w1854)) (if (cons? x1855) (let ((w1856 (car x1855)) (x1857 (cdr x1855))) (let ((qcdr w1856)) (if (cons? x1857) (let ((w1858 (car x1857)) (x1859 (cdr x1857))) (let ((qcons? w1858)) (if (cons? x1859) (let ((w1860 (car x1859)) (x1861 (cdr x1859))) (let ((qnull? w1860)) (if (cons? x1861) (let ((w1862 (car x1861)) (x1863 (cdr x1861))) (let ((qbinary= w1862)) (if (null? x1863) (if (cons? x1853) (let ((w1864 (car x1853)) (x1865 (cdr x1853))) (let ((pp w1864)) (if (null? x1865) (if (null? x1851) (if (cons? x1847) (let ((w1866 (car x1847)) (x1867 (cdr x1847))) (let ((v w1866)) (if (cons? x1867) (let ((w1868 (car x1867)) (x1869 (cdr x1867))) (if (cons? w1868) (let ((w1870 (car w1868)) (x1871 (cdr w1868))) (let ((p w1870)) (let ((q x1871)) (if (cons? x1869) (let ((w1872 (car x1869)) (x1873 (cdr x1869))) (let ((g+s w1872)) (if (cons? x1873) (let ((w1874 (car x1873)) (x1875 (cdr x1873))) (let ((sk w1874)) (if (cons? x1875) (let ((w1876 (car x1875)) (x1877 (cdr x1875))) (let ((fk w1876)) (if (cons? x1877) (let ((w1878 (car x1877)) (x1879 (cdr x1877))) (let ((i w1878)) (let ((depth x1879)) (progn (let ((w (gensym "w"))) (quasiquote (if ((unquote qcons?) (unquote v)) (let (((unquote w) ((unquote qcar) (unquote v))) ((unquote x) ((unquote qcdr) (unquote v)))) (match-quasiquote (unquote a) (unquote w) (unquote p) (unquote g+s) (match-quasiquote-step (unquote x) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote depth)) (unquote fk) (unquote i) (unquote-splicing depth))) (insert-abs (unquote a) (unquote fk))))))))) (fail1810)))) (fail1810)))) (fail1810)))) (fail1810))))) (fail1810))) (fail1810)))) (fail1810)) (fail1810)) (fail1810)))) (fail1810)) (fail1810)))) (fail1810)))) (fail1810)))) (fail1810)))) (fail1810)))) (fail1810))) (fail1810))) (fail1810)))) (fail1810)))) (fail1810)))))) (if (cons? v1804) (let ((w1880 (car v1804)) (x1881 (cdr v1804))) (let ((abs w1880)) (if (cons? x1881) (let ((w1882 (car x1881)) (x1883 (cdr x1881))) (let ((v w1882)) (if (cons? x1883) (let ((w1884 (car x1883)) (x1885 (cdr x1883))) (if (cons? w1884) (let ((w1886 (car w1884)) (x1887 (cdr w1884))) (if (binary= w1886 (quote unquote-splicing)) (if (cons? x1887) (let ((w1888 (car x1887)) (x1889 (cdr x1887))) (let ((p w1888)) (if (null? x1889) (if (cons? x1885) (let ((w1890 (car x1885)) (x1891 (cdr x1885))) (let ((g+s w1890)) (if (cons? x1891) (let ((w1892 (car x1891)) (x1893 (cdr x1891))) (let ((sk w1892)) (if (cons? x1893) (let ((w1894 (car x1893)) (x1895 (cdr x1893))) (let ((fk w1894)) (if (cons? x1895) (let ((w1896 (car x1895)) (x1897 (cdr x1895))) (let ((i w1896)) (if (cons? x1897) (let ((w1898 (car x1897)) (x1899 (cdr x1897))) (let ((x w1898)) (let ((depth x1899)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))))))) (fail1809)))) (fail1809)))) (fail1809)))) (fail1809)))) (fail1809)) (fail1809)))) (fail1809)) (fail1809))) (fail1809))) (fail1809)))) (fail1809)))) (fail1809)))))) (if (cons? v1804) (let ((w1900 (car v1804)) (x1901 (cdr v1804))) (let ((abs w1900)) (if (cons? x1901) (let ((w1902 (car x1901)) (x1903 (cdr x1901))) (let ((v w1902)) (if (cons? x1903) (let ((w1904 (car x1903)) (x1905 (cdr x1903))) (if (cons? w1904) (let ((w1906 (car w1904)) (x1907 (cdr w1904))) (if (binary= w1906 (quote unquote)) (if (cons? x1907) (let ((w1908 (car x1907)) (x1909 (cdr x1907))) (let ((p w1908)) (if (null? x1909) (if (cons? x1905) (let ((w1910 (car x1905)) (x1911 (cdr x1905))) (let ((g+s w1910)) (if (cons? x1911) (let ((w1912 (car x1911)) (x1913 (cdr x1911))) (let ((sk w1912)) (if (cons? x1913) (let ((w1914 (car x1913)) (x1915 (cdr x1913))) (let ((fk w1914)) (if (cons? x1915) (let ((w1916 (car x1915)) (x1917 (cdr x1915))) (let ((i w1916)) (if (cons? x1917) (let ((w1918 (car x1917)) (x1919 (cdr x1917))) (let ((x w1918)) (let ((depth x1919)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))))))) (fail1808)))) (fail1808)))) (fail1808)))) (fail1808)))) (fail1808)) (fail1808)))) (fail1808)) (fail1808))) (fail1808))) (fail1808)))) (fail1808)))) (fail1808)))))) (if (cons? v1804) (let ((w1920 (car v1804)) (x1921 (cdr v1804))) (let ((abs w1920)) (if (cons? x1921) (let ((w1922 (car x1921)) (x1923 (cdr x1921))) (let ((v w1922)) (if (cons? x1923) (let ((w1924 (car x1923)) (x1925 (cdr x1923))) (if (cons? w1924) (let ((w1926 (car w1924)) (x1927 (cdr w1924))) (if (binary= w1926 (quote quasiquote)) (if (cons? x1927) (let ((w1928 (car x1927)) (x1929 (cdr x1927))) (let ((p w1928)) (if (null? x1929) (if (cons? x1925) (let ((w1930 (car x1925)) (x1931 (cdr x1925))) (let ((g+s w1930)) (if (cons? x1931) (let ((w1932 (car x1931)) (x1933 (cdr x1931))) (let ((sk w1932)) (if (cons? x1933) (let ((w1934 (car x1933)) (x1935 (cdr x1933))) (let ((fk w1934)) (if (cons? x1935) (let ((w1936 (car x1935)) (x1937 (cdr x1935))) (let ((i w1936)) (let ((depth x1937)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote ()) (unquote-splicing depth))))))) (fail1807)))) (fail1807)))) (fail1807)))) (fail1807)) (fail1807)))) (fail1807)) (fail1807))) (fail1807))) (fail1807)))) (fail1807)))) (fail1807)))))) (if (cons? v1804) (let ((w1938 (car v1804)) (x1939 (cdr v1804))) (let ((a w1938)) (if (cons? w1938) (let ((w1940 (car w1938)) (x1941 (cdr w1938))) (let ((abs w1940)) (if (cons? x1941) (let ((w1942 (car x1941)) (x1943 (cdr x1941))) (if (cons? w1942) (let ((w1944 (car w1942)) (x1945 (cdr w1942))) (if (cons? w1944) (let ((w1946 (car w1944)) (x1947 (cdr w1944))) (let ((qcar w1946)) (if (cons? x1947) (let ((w1948 (car x1947)) (x1949 (cdr x1947))) (let ((qcdr w1948)) (if (cons? x1949) (let ((w1950 (car x1949)) (x1951 (cdr x1949))) (let ((qcons? w1950)) (if (cons? x1951) (let ((w1952 (car x1951)) (x1953 (cdr x1951))) (let ((qnull? w1952)) (if (cons? x1953) (let ((w1954 (car x1953)) (x1955 (cdr x1953))) (let ((qbinary= w1954)) (if (null? x1955) (if (cons? x1945) (let ((w1956 (car x1945)) (x1957 (cdr x1945))) (let ((pp w1956)) (if (null? x1957) (if (null? x1943) (if (cons? x1939) (let ((w1958 (car x1939)) (x1959 (cdr x1939))) (let ((v w1958)) (if (cons? x1959) (let ((w1960 (car x1959)) (x1961 (cdr x1959))) (if (cons? w1960) (let ((w1962 (car w1960)) (x1963 (cdr w1960))) (if (cons? w1962) (let ((w1964 (car w1962)) (x1965 (cdr w1962))) (if (binary= w1964 (quote unquote-splicing)) (if (cons? x1965) (let ((w1966 (car x1965)) (x1967 (cdr x1965))) (let ((p w1966)) (if (null? x1967) (let ((rest x1963)) (if (cons? x1961) (let ((w1968 (car x1961)) (x1969 (cdr x1961))) (let ((g+s w1968)) (if (cons? x1969) (let ((w1970 (car x1969)) (x1971 (cdr x1969))) (let ((sk w1970)) (if (cons? x1971) (let ((w1972 (car x1971)) (x1973 (cdr x1971))) (let ((fk w1972)) (if (cons? x1973) (let ((w1974 (car x1973)) (x1975 (cdr x1973))) (let ((i w1974)) (if (null? x1975) (progn (let ((tmp (gensym "tmp"))) (quasiquote (if ((unquote qcons?) (unquote v)) (match-one (unquote a) (unquote v) ((unquote p) (unquote-splicing tmp)) (match-quasiquote (unquote tmp) (unquote rest) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote a) (unquote fk)))))) (fail1806)))) (fail1806)))) (fail1806)))) (fail1806)))) (fail1806))) (fail1806)))) (fail1806)) (fail1806))) (fail1806))) (fail1806))) (fail1806)))) (fail1806)) (fail1806)) (fail1806)))) (fail1806)) (fail1806)))) (fail1806)))) (fail1806)))) (fail1806)))) (fail1806)))) (fail1806))) (fail1806))) (fail1806)))) (fail1806)))) (fail1806)))))) (if (cons? v1804) (let ((w1976 (car v1804)) (x1977 (cdr v1804))) (let ((abs w1976)) (if (cons? x1977) (let ((w1978 (car x1977)) (x1979 (cdr x1977))) (let ((v w1978)) (if (cons? x1979) (let ((w1980 (car x1979)) (x1981 (cdr x1979))) (if (cons? w1980) (let ((w1982 (car w1980)) (x1983 (cdr w1980))) (if (binary= w1982 (quote unquote)) (if (cons? x1983) (let ((w1984 (car x1983)) (x1985 (cdr x1983))) (let ((p w1984)) (if (null? x1985) (if (cons? x1981) (let ((w1986 (car x1981)) (x1987 (cdr x1981))) (let ((g+s w1986)) (if (cons? x1987) (let ((w1988 (car x1987)) (x1989 (cdr x1987))) (let ((sk w1988)) (if (cons? x1989) (let ((w1990 (car x1989)) (x1991 (cdr x1989))) (let ((fk w1990)) (if (cons? x1991) (let ((w1992 (car x1991)) (x1993 (cdr x1991))) (let ((i w1992)) (if (null? x1993) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail1805)))) (fail1805)))) (fail1805)))) (fail1805)))) (fail1805)) (fail1805)))) (fail1805)) (fail1805))) (fail1805))) (fail1805)))) (fail1805)))) (fail1805))))) (defmacro match-quasiquote-step x (let ((v1994 x)) (let ((fail1995 (lambda () (error <condition> "no matching pattern")))) (if (cons? v1994) (let ((w1996 (car v1994)) (x1997 (cdr v1994))) (let ((abs w1996)) (if (cons? x1997) (let ((w1998 (car x1997)) (x1999 (cdr x1997))) (let ((x w1998)) (if (cons? x1999) (let ((w2000 (car x1999)) (x2001 (cdr x1999))) (let ((q w2000)) (if (cons? x2001) (let ((w2002 (car x2001)) (x2003 (cdr x2001))) (let ((g+s w2002)) (if (cons? x2003) (let ((w2004 (car x2003)) (x2005 (cdr x2003))) (let ((sk w2004)) (if (cons? x2005) (let ((w2006 (car x2005)) (x2007 (cdr x2005))) (let ((fk w2006)) (if (cons? x2007) (let ((w2008 (car x2007)) (x2009 (cdr x2007))) (let ((depth w2008)) (if (cons? x2009) (let ((w2010 (car x2009)) (x2011 (cdr x2009))) (let ((i w2010)) (if (null? x2011) (progn (quasiquote (match-quasiquote (unquote abs) (unquote x) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth)))) (fail1995)))) (fail1995)))) (fail1995)))) (fail1995)))) (fail1995)))) (fail1995)))) (fail1995)))) (fail1995)))) (fail1995))))) (defmacro match-extract-vars x (let ((v2012 x)) (let ((fail2013 (lambda () (let ((fail2014 (lambda () (let ((fail2015 (lambda () (let ((fail2016 (lambda () (let ((fail2017 (lambda () (let ((fail2018 (lambda () (let ((fail2019 (lambda () (let ((fail2020 (lambda () (let ((fail2021 (lambda () (let ((fail2022 (lambda () (let ((fail2023 (lambda () (let ((fail2024 (lambda () (let ((fail2025 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2012) (let ((w2026 (car v2012)) (x2027 (cdr v2012))) (if (cons? w2026) (let ((w2028 (car w2026)) (x2029 (cdr w2026))) (let ((abs w2028)) (if (cons? x2029) (let ((w2030 (car x2029)) (x2031 (cdr x2029))) (let ((phd w2030)) (if (null? x2031) (if (cons? x2027) (let ((w2032 (car x2027)) (x2033 (cdr x2027))) (let ((p w2032)) (if (cons? x2033) (let ((w2034 (car x2033)) (x2035 (cdr x2033))) (let ((k w2034)) (if (cons? x2035) (let ((w2036 (car x2035)) (x2037 (cdr x2035))) (let ((i w2036)) (if (cons? x2037) (let ((w2038 (car x2037)) (x2039 (cdr x2037))) (let ((v w2038)) (if (null? x2039) (progn (quasiquote (abs-extract-vars () (unquote abs) (unquote phd) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail2025)))) (fail2025)))) (fail2025)))) (fail2025)))) (fail2025)) (fail2025)))) (fail2025)))) (fail2025))) (fail2025)))))) (if (cons? v2012) (let ((w2040 (car v2012)) (x2041 (cdr v2012))) (let ((abs w2040)) (if (cons? x2041) (let ((w2042 (car x2041)) (x2043 (cdr x2041))) (if (cons? w2042) (let ((w2044 (car w2042)) (x2045 (cdr w2042))) (if (binary= w2044 (quote <>)) (if (cons? x2045) (let ((w2046 (car x2045)) (x2047 (cdr x2045))) (let ((f w2046)) (if (cons? x2047) (let ((w2048 (car x2047)) (x2049 (cdr x2047))) (let ((p w2048)) (if (null? x2049) (if (cons? x2043) (let ((w2050 (car x2043)) (x2051 (cdr x2043))) (let ((k w2050)) (if (cons? x2051) (let ((w2052 (car x2051)) (x2053 (cdr x2051))) (let ((i w2052)) (if (cons? x2053) (let ((w2054 (car x2053)) (x2055 (cdr x2053))) (let ((v w2054)) (if (null? x2055) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail2024)))) (fail2024)))) (fail2024)))) (fail2024)) (fail2024)))) (fail2024)))) (fail2024)) (fail2024))) (fail2024))) (fail2024)))) (fail2024)))))) (if (cons? v2012) (let ((w2056 (car v2012)) (x2057 (cdr v2012))) (let ((abs w2056)) (if (cons? x2057) (let ((w2058 (car x2057)) (x2059 (cdr x2057))) (if (cons? w2058) (let ((w2060 (car w2058)) (x2061 (cdr w2058))) (if (binary= w2060 (quote not)) (let ((p x2061)) (let ((x x2059)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail2023))) (fail2023))) (fail2023)))) (fail2023)))))) (if (cons? v2012) (let ((w2062 (car v2012)) (x2063 (cdr v2012))) (let ((abs w2062)) (if (cons? x2063) (let ((w2064 (car x2063)) (x2065 (cdr x2063))) (if (cons? w2064) (let ((w2066 (car w2064)) (x2067 (cdr w2064))) (if (binary= w2066 (quote or)) (let ((p x2067)) (let ((x x2065)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail2022))) (fail2022))) (fail2022)))) (fail2022)))))) (if (cons? v2012) (let ((w2068 (car v2012)) (x2069 (cdr v2012))) (let ((abs w2068)) (if (cons? x2069) (let ((w2070 (car x2069)) (x2071 (cdr x2069))) (if (cons? w2070) (let ((w2072 (car w2070)) (x2073 (cdr w2070))) (if (binary= w2072 (quote and)) (let ((p x2073)) (let ((x x2071)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail2021))) (fail2021))) (fail2021)))) (fail2021)))))) (if (cons? v2012) (let ((w2074 (car v2012)) (x2075 (cdr v2012))) (let ((abs w2074)) (if (cons? x2075) (let ((w2076 (car x2075)) (x2077 (cdr x2075))) (if (cons? w2076) (let ((w2078 (car w2076)) (x2079 (cdr w2076))) (if (binary= w2078 (quote quasiquote)) (if (cons? x2079) (let ((w2080 (car x2079)) (x2081 (cdr x2079))) (let ((x w2080)) (if (null? x2081) (if (cons? x2077) (let ((w2082 (car x2077)) (x2083 (cdr x2077))) (let ((k w2082)) (if (cons? x2083) (let ((w2084 (car x2083)) (x2085 (cdr x2083))) (let ((i w2084)) (if (cons? x2085) (let ((w2086 (car x2085)) (x2087 (cdr x2085))) (let ((v w2086)) (if (null? x2087) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (t)))) (fail2020)))) (fail2020)))) (fail2020)))) (fail2020)) (fail2020)))) (fail2020)) (fail2020))) (fail2020))) (fail2020)))) (fail2020)))))) (if (cons? v2012) (let ((w2088 (car v2012)) (x2089 (cdr v2012))) (let ((abs w2088)) (if (cons? x2089) (let ((w2090 (car x2089)) (x2091 (cdr x2089))) (if (cons? w2090) (let ((w2092 (car w2090)) (x2093 (cdr w2090))) (if (binary= w2092 (quote unquote-splicing)) (if (cons? x2093) (let ((w2094 (car x2093)) (x2095 (cdr x2093))) (let ((x w2094)) (if (null? x2095) (if (cons? x2091) (let ((w2096 (car x2091)) (x2097 (cdr x2091))) (if (cons? w2096) (let ((w2098 (car w2096)) (x2099 (cdr w2096))) (let ((k w2098)) (let ((kk x2099)) (if (list? kk) (if (cons? x2097) (let ((w2103 (car x2097)) (x2104 (cdr x2097))) (let ((i w2103)) (if (cons? x2104) (let ((w2105 (car x2104)) (x2106 (cdr x2104))) (let ((v w2105)) (if (null? x2106) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2019)))) (fail2019)))) (fail2019)) (fail2019))))) (fail2019))) (fail2019)) (fail2019)))) (fail2019)) (fail2019))) (fail2019))) (fail2019)))) (fail2019)))))) (if (cons? v2012) (let ((w2107 (car v2012)) (x2108 (cdr v2012))) (let ((abs w2107)) (if (cons? x2108) (let ((w2109 (car x2108)) (x2110 (cdr x2108))) (if (cons? w2109) (let ((w2111 (car w2109)) (x2112 (cdr w2109))) (if (binary= w2111 (quote unquote)) (if (cons? x2112) (let ((w2113 (car x2112)) (x2114 (cdr x2112))) (let ((x w2113)) (if (null? x2114) (if (cons? x2110) (let ((w2115 (car x2110)) (x2116 (cdr x2110))) (if (cons? w2115) (let ((w2117 (car w2115)) (x2118 (cdr w2115))) (let ((k w2117)) (let ((kk x2118)) (if (list? kk) (if (cons? x2116) (let ((w2122 (car x2116)) (x2123 (cdr x2116))) (let ((i w2122)) (if (cons? x2123) (let ((w2124 (car x2123)) (x2125 (cdr x2123))) (let ((v w2124)) (if (null? x2125) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2018)))) (fail2018)))) (fail2018)) (fail2018))))) (fail2018))) (fail2018)) (fail2018)))) (fail2018)) (fail2018))) (fail2018))) (fail2018)))) (fail2018)))))) (if (cons? v2012) (let ((w2126 (car v2012)) (x2127 (cdr v2012))) (let ((abs w2126)) (if (cons? x2127) (let ((w2128 (car x2127)) (x2129 (cdr x2127))) (if (cons? w2128) (let ((w2130 (car w2128)) (x2131 (cdr w2128))) (if (binary= w2130 (quote quote)) (if (cons? x2131) (let ((w2132 (car x2131)) (x2133 (cdr x2131))) (let ((x w2132)) (if (null? x2133) (if (cons? x2129) (let ((w2134 (car x2129)) (x2135 (cdr x2129))) (if (cons? w2134) (let ((w2136 (car w2134)) (x2137 (cdr w2134))) (let ((k w2136)) (let ((kk x2137)) (if (list? kk) (if (cons? x2135) (let ((w2141 (car x2135)) (x2142 (cdr x2135))) (let ((i w2141)) (if (cons? x2142) (let ((w2143 (car x2142)) (x2144 (cdr x2142))) (let ((v w2143)) (if (null? x2144) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2017)))) (fail2017)))) (fail2017)) (fail2017))))) (fail2017))) (fail2017)) (fail2017)))) (fail2017)) (fail2017))) (fail2017))) (fail2017)))) (fail2017)))))) (if (cons? v2012) (let ((w2145 (car v2012)) (x2146 (cdr v2012))) (let ((abs w2145)) (if (cons? x2146) (let ((w2147 (car x2146)) (x2148 (cdr x2146))) (if (cons? w2147) (let ((w2149 (car w2147)) (x2150 (cdr w2147))) (if (binary= w2149 (quote =)) (if (cons? x2150) (let ((w2151 (car x2150)) (x2152 (cdr x2150))) (let ((u w2151)) (if (cons? x2152) (let ((w2153 (car x2152)) (x2154 (cdr x2152))) (let ((m w2153)) (if (cons? x2154) (let ((w2155 (car x2154)) (x2156 (cdr x2154))) (let ((p w2155)) (if (null? x2156) (let ((x x2148)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x))))) (fail2016)))) (fail2016)))) (fail2016)))) (fail2016)) (fail2016))) (fail2016))) (fail2016)))) (fail2016)))))) (if (cons? v2012) (let ((w2157 (car v2012)) (x2158 (cdr v2012))) (let ((abs w2157)) (if (cons? x2158) (let ((w2159 (car x2158)) (x2160 (cdr x2158))) (if (cons? w2159) (let ((w2161 (car w2159)) (x2162 (cdr w2159))) (if (binary= w2161 (quote =)) (if (cons? x2162) (let ((w2163 (car x2162)) (x2164 (cdr x2162))) (let ((proc w2163)) (if (cons? x2164) (let ((w2165 (car x2164)) (x2166 (cdr x2164))) (let ((p w2165)) (if (null? x2166) (let ((x x2160)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x))))) (fail2015)))) (fail2015)))) (fail2015)) (fail2015))) (fail2015))) (fail2015)))) (fail2015)))))) (if (cons? v2012) (let ((w2167 (car v2012)) (x2168 (cdr v2012))) (let ((abs w2167)) (if (cons? x2168) (let ((w2169 (car x2168)) (x2170 (cdr x2168))) (if (cons? w2169) (let ((w2171 (car w2169)) (x2172 (cdr w2169))) (if (binary= w2171 (quote $)) (if (cons? x2172) (let ((w2173 (car x2172)) (x2174 (cdr x2172))) (let ((rec w2173)) (let ((p x2174)) (let ((x x2170)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))))) (fail2014)) (fail2014))) (fail2014))) (fail2014)))) (fail2014)))))) (if (cons? v2012) (let ((w2175 (car v2012)) (x2176 (cdr v2012))) (let ((abs w2175)) (if (cons? x2176) (let ((w2177 (car x2176)) (x2178 (cdr x2176))) (if (cons? w2177) (let ((w2179 (car w2177)) (x2180 (cdr w2177))) (if (binary= w2179 (quote ?)) (if (cons? x2180) (let ((w2181 (car x2180)) (x2182 (cdr x2180))) (let ((pred w2181)) (let ((p x2182)) (let ((x x2178)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))))) (fail2013)) (fail2013))) (fail2013))) (fail2013)))) (fail2013))))) (defmacro match-extract-vars2 x (let ((v2183 x)) (let ((fail2184 (lambda () (let ((fail2185 (lambda () (let ((fail2186 (lambda () (let ((fail2187 (lambda () (let ((fail2188 (lambda () (let ((fail2189 (lambda () (let ((fail2190 (lambda () (let ((fail2191 (lambda () (let ((fail2192 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2183) (let ((w2193 (car v2183)) (x2194 (cdr v2183))) (let ((abs w2193)) (if (cons? x2194) (let ((w2195 (car x2194)) (x2196 (cdr x2194))) (let ((p w2195)) (if (cons? x2196) (let ((w2197 (car x2196)) (x2198 (cdr x2196))) (if (cons? w2197) (let ((w2199 (car w2197)) (x2200 (cdr w2197))) (let ((k w2199)) (let ((kk x2200)) (if (list? kk) (if (cons? x2198) (let ((w2204 (car x2198)) (x2205 (cdr x2198))) (let ((i w2204)) (if (list? i) (if (cons? x2205) (let ((w2209 (car x2205)) (x2210 (cdr x2205))) (let ((v w2209)) (if (null? x2210) (progn (let ((p-ls (gensym "p-ls"))) (if (let ((G002211 (member p i))) (if G002211 G002211 (null? (symbol? p)))) (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v))) (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (((unquote p) (unquote p-ls)) (unquote-splicing v))))))) (fail2192)))) (fail2192)) (fail2192)))) (fail2192)) (fail2192))))) (fail2192))) (fail2192)))) (fail2192)))) (fail2192)))))) (if (cons? v2183) (let ((w2212 (car v2183)) (x2213 (cdr v2183))) (let ((abs w2212)) (if (cons? x2213) (let ((w2214 (car x2213)) (x2215 (cdr x2213))) (if (binary= w2214 (quote ***)) (if (cons? x2215) (let ((w2216 (car x2215)) (x2217 (cdr x2215))) (if (cons? w2216) (let ((w2218 (car w2216)) (x2219 (cdr w2216))) (let ((k w2218)) (let ((kk x2219)) (if (list? kk) (if (cons? x2217) (let ((w2223 (car x2217)) (x2224 (cdr x2217))) (let ((i w2223)) (if (cons? x2224) (let ((w2225 (car x2224)) (x2226 (cdr x2224))) (let ((v w2225)) (if (null? x2226) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2191)))) (fail2191)))) (fail2191)) (fail2191))))) (fail2191))) (fail2191)) (fail2191))) (fail2191)))) (fail2191)))))) (if (cons? v2183) (let ((w2227 (car v2183)) (x2228 (cdr v2183))) (let ((abs w2227)) (if (cons? x2228) (let ((w2229 (car x2228)) (x2230 (cdr x2228))) (if (cons? w2229) (let ((w2231 (car w2229)) (x2232 (cdr w2229))) (if (binary= w2231 (quote __)) (if (cons? x2232) (let ((w2233 (car x2232)) (x2234 (cdr x2232))) (let ((m w2233)) (if (null? x2234) (if (cons? x2230) (let ((w2235 (car x2230)) (x2236 (cdr x2230))) (if (cons? w2235) (let ((w2237 (car w2235)) (x2238 (cdr w2235))) (let ((k w2237)) (let ((kk x2238)) (if (list? kk) (if (cons? x2236) (let ((w2242 (car x2236)) (x2243 (cdr x2236))) (let ((i w2242)) (if (cons? x2243) (let ((w2244 (car x2243)) (x2245 (cdr x2243))) (let ((v w2244)) (if (null? x2245) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2190)))) (fail2190)))) (fail2190)) (fail2190))))) (fail2190))) (fail2190)) (fail2190)))) (fail2190)) (fail2190))) (fail2190))) (fail2190)))) (fail2190)))))) (if (cons? v2183) (let ((w2246 (car v2183)) (x2247 (cdr v2183))) (let ((abs w2246)) (if (cons? x2247) (let ((w2248 (car x2247)) (x2249 (cdr x2247))) (if (cons? w2248) (let ((w2250 (car w2248)) (x2251 (cdr w2248))) (if (binary= w2250 (quote ..)) (if (cons? x2251) (let ((w2252 (car x2251)) (x2253 (cdr x2251))) (let ((m w2252)) (if (null? x2253) (if (cons? x2249) (let ((w2254 (car x2249)) (x2255 (cdr x2249))) (if (cons? w2254) (let ((w2256 (car w2254)) (x2257 (cdr w2254))) (let ((k w2256)) (let ((kk x2257)) (if (list? kk) (if (cons? x2255) (let ((w2261 (car x2255)) (x2262 (cdr x2255))) (let ((i w2261)) (if (cons? x2262) (let ((w2263 (car x2262)) (x2264 (cdr x2262))) (let ((v w2263)) (if (null? x2264) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2189)))) (fail2189)))) (fail2189)) (fail2189))))) (fail2189))) (fail2189)) (fail2189)))) (fail2189)) (fail2189))) (fail2189))) (fail2189)))) (fail2189)))))) (if (cons? v2183) (let ((w2265 (car v2183)) (x2266 (cdr v2183))) (let ((abs w2265)) (if (cons? x2266) (let ((w2267 (car x2266)) (x2268 (cdr x2266))) (if (binary= w2267 (quote ___)) (if (cons? x2268) (let ((w2269 (car x2268)) (x2270 (cdr x2268))) (if (cons? w2269) (let ((w2271 (car w2269)) (x2272 (cdr w2269))) (let ((k w2271)) (let ((kk x2272)) (if (list? kk) (if (cons? x2270) (let ((w2276 (car x2270)) (x2277 (cdr x2270))) (let ((i w2276)) (if (cons? x2277) (let ((w2278 (car x2277)) (x2279 (cdr x2277))) (let ((v w2278)) (if (null? x2279) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2188)))) (fail2188)))) (fail2188)) (fail2188))))) (fail2188))) (fail2188)) (fail2188))) (fail2188)))) (fail2188)))))) (if (cons? v2183) (let ((w2280 (car v2183)) (x2281 (cdr v2183))) (let ((abs w2280)) (if (cons? x2281) (let ((w2282 (car x2281)) (x2283 (cdr x2281))) (if (binary= w2282 (quote _)) (if (cons? x2283) (let ((w2284 (car x2283)) (x2285 (cdr x2283))) (if (cons? w2284) (let ((w2286 (car w2284)) (x2287 (cdr w2284))) (let ((k w2286)) (let ((kk x2287)) (if (list? kk) (if (cons? x2285) (let ((w2291 (car x2285)) (x2292 (cdr x2285))) (let ((i w2291)) (if (cons? x2292) (let ((w2293 (car x2292)) (x2294 (cdr x2292))) (let ((v w2293)) (if (null? x2294) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2187)))) (fail2187)))) (fail2187)) (fail2187))))) (fail2187))) (fail2187)) (fail2187))) (fail2187)))) (fail2187)))))) (if (cons? v2183) (let ((w2295 (car v2183)) (x2296 (cdr v2183))) (let ((abs w2295)) (if (cons? x2296) (let ((w2297 (car x2296)) (x2298 (cdr x2296))) (if (vector? w2297) (let ((len2299 (vector-size w2297))) (if (>= len2299 0) (letfuns ((loop2301 (j2302 p-ls2300) (if (>= j2302 len2299) (let ((p (reverse p-ls2300))) (let ((x x2298)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (let ((w2303 (vector-ref w2297 j2302))) (let ((p w2303)) (loop2301 (+ j2302 1) (cons p p-ls2300))))))) (loop2301 0 (quote ()))) (fail2186))) (fail2186))) (fail2186)))) (fail2186)))))) (if (cons? v2183) (let ((w2304 (car v2183)) (x2305 (cdr v2183))) (let ((abs w2304)) (if (cons? x2305) (let ((w2306 (car x2305)) (x2307 (cdr x2305))) (if (cons? w2306) (let ((w2308 (car w2306)) (x2309 (cdr w2306))) (let ((p w2308)) (let ((q x2309)) (if (cons? x2307) (let ((w2310 (car x2307)) (x2311 (cdr x2307))) (let ((k w2310)) (if (cons? x2311) (let ((w2312 (car x2311)) (x2313 (cdr x2311))) (let ((i w2312)) (if (cons? x2313) (let ((w2314 (car x2313)) (x2315 (cdr x2313))) (let ((v w2314)) (if (null? x2315) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-extract-vars-step (unquote q) (unquote k) (unquote i) (unquote v)) (unquote i) ()))) (fail2185)))) (fail2185)))) (fail2185)))) (fail2185))))) (fail2185))) (fail2185)))) (fail2185)))))) (if (cons? v2183) (let ((w2316 (car v2183)) (x2317 (cdr v2183))) (let ((abs w2316)) (if (cons? x2317) (let ((w2318 (car x2317)) (x2319 (cdr x2317))) (if (cons? w2318) (let ((w2320 (car w2318)) (x2321 (cdr w2318))) (let ((p w2320)) (if (cons? x2321) (let ((w2322 (car x2321)) (x2323 (cdr x2321))) (let ((q w2322)) (let ((r x2323)) (if (cons? x2319) (let ((w2324 (car x2319)) (x2325 (cdr x2319))) (let ((k w2324)) (if (cons? x2325) (let ((w2326 (car x2325)) (x2327 (cdr x2325))) (let ((i w2326)) (if (cons? x2327) (let ((w2328 (car x2327)) (x2329 (cdr x2327))) (let ((v w2328)) (if (null? x2329) (progn (quasiquote (match-check-ellipse (unquote q) (match-extract-vars (unquote abs) ((unquote p) (unquote-splicing r)) (unquote k) (unquote i) (unquote v)) (match-extract-vars (unquote abs) (unquote p) (match-extract-vars-step ((unquote q) (unquote-splicing r)) (unquote k) (unquote i) (unquote v)) (unquote i) ())))) (fail2184)))) (fail2184)))) (fail2184)))) (fail2184))))) (fail2184)))) (fail2184))) (fail2184)))) (fail2184))))) (defmacro abs-extract-vars x (let ((v2330 x)) (let ((fail2331 (lambda () (let ((fail2332 (lambda () (let ((fail2333 (lambda () (let ((fail2334 (lambda () (let ((fail2335 (lambda () (let ((fail2336 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2330) (let ((w2337 (car v2330)) (x2338 (cdr v2330))) (if (null? w2337) (if (cons? x2338) (let ((w2339 (car x2338)) (x2340 (cdr x2338))) (let ((a w2339)) (if (cons? x2340) (let ((w2341 (car x2340)) (x2342 (cdr x2340))) (let ((phd w2341)) (if (cons? x2342) (let ((w2343 (car x2342)) (x2344 (cdr x2342))) (let ((p w2343)) (if (cons? x2344) (let ((w2345 (car x2344)) (x2346 (cdr x2344))) (let ((k w2345)) (if (cons? x2346) (let ((w2347 (car x2346)) (x2348 (cdr x2346))) (let ((i w2347)) (if (cons? x2348) (let ((w2349 (car x2348)) (x2350 (cdr x2348))) (let ((v w2349)) (if (null? x2350) (progn (quasiquote (match-extract-phd () (unquote phd) (unquote a) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail2336)))) (fail2336)))) (fail2336)))) (fail2336)))) (fail2336)))) (fail2336)))) (fail2336)) (fail2336))) (fail2336)))))) (if (cons? v2330) (let ((w2351 (car v2330)) (x2352 (cdr v2330))) (let ((abs w2351)) (if (list? abs) (if (cons? x2352) (let ((w2356 (car x2352)) (x2357 (cdr x2352))) (if (cons? w2356) (let ((w2358 (car w2356)) (x2359 (cdr w2356))) (if (cons? w2358) (let ((w2360 (car w2358)) (x2361 (cdr w2358))) (let ((a w2360)) (if (null? x2361) (let ((us x2359)) (if (list? us) (if (cons? x2357) (let ((w2365 (car x2357)) (x2366 (cdr x2357))) (let ((phd w2365)) (if (cons? x2366) (let ((w2367 (car x2366)) (x2368 (cdr x2366))) (if (cons? w2367) (let ((w2369 (car w2367)) (x2370 (cdr w2367))) (let ((b w2369)) (let ((w x2370)) (if (list? w) (if (cons? x2368) (let ((w2374 (car x2368)) (x2375 (cdr x2368))) (let ((k w2374)) (if (cons? x2375) (let ((w2376 (car x2375)) (x2377 (cdr x2375))) (let ((i w2376)) (if (cons? x2377) (let ((w2378 (car x2377)) (x2379 (cdr x2377))) (let ((v w2378)) (if (null? x2379) (progn (if (eq a b) (quasiquote (match-extract-vars ((((unquote a)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (unquote v))) (quasiquote (abs-extract-vars (((unquote a)) (unquote-splicing abs)) (unquote us) (unquote phd) ((unquote b) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2335)))) (fail2335)))) (fail2335)))) (fail2335)) (fail2335))))) (fail2335))) (fail2335)))) (fail2335)) (fail2335))) (fail2335)))) (fail2335))) (fail2335))) (fail2335)) (fail2335)))) (fail2335)))))) (if (cons? v2330) (let ((w2380 (car v2330)) (x2381 (cdr v2330))) (let ((abs w2380)) (if (list? abs) (if (cons? x2381) (let ((w2385 (car x2381)) (x2386 (cdr x2381))) (if (cons? w2385) (let ((w2387 (car w2385)) (x2388 (cdr w2385))) (if (cons? w2387) (let ((w2389 (car w2387)) (x2390 (cdr w2387))) (let ((a w2389)) (if (cons? x2390) (let ((w2391 (car x2390)) (x2392 (cdr x2390))) (let ((x w2391)) (let ((xs x2392)) (let ((us x2388)) (if (list? us) (if (cons? x2386) (let ((w2396 (car x2386)) (x2397 (cdr x2386))) (let ((phd w2396)) (if (cons? x2397) (let ((w2398 (car x2397)) (x2399 (cdr x2397))) (if (cons? w2398) (let ((w2400 (car w2398)) (x2401 (cdr w2398))) (let ((b w2400)) (let ((w x2401)) (if (list? w) (if (cons? x2399) (let ((w2405 (car x2399)) (x2406 (cdr x2399))) (let ((k w2405)) (if (cons? x2406) (let ((w2407 (car x2406)) (x2408 (cdr x2406))) (let ((i w2407)) (if (cons? x2408) (let ((w2409 (car x2408)) (x2410 (cdr x2408))) (let ((v w2409)) (if (null? x2410) (progn (if (eq a b) (let ((x-ls (gensym "x-ls"))) (quasiquote (match-extract-vars ((((unquote a) (unquote-splicing xs)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (((unquote x) (unquote x-ls)) (unquote-splicing v))))) (quasiquote (abs-extract-vars (((unquote a) (unquote x) (unquote-splicing xs)) (unquote-splicing abs)) (unquote us) (unquote phd) ((unquote b) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2334)))) (fail2334)))) (fail2334)))) (fail2334)) (fail2334))))) (fail2334))) (fail2334)))) (fail2334)) (fail2334)))))) (fail2334)))) (fail2334))) (fail2334))) (fail2334)) (fail2334)))) (fail2334)))))) (if (cons? v2330) (let ((w2411 (car v2330)) (x2412 (cdr v2330))) (let ((abs w2411)) (if (list? abs) (if (cons? x2412) (let ((w2416 (car x2412)) (x2417 (cdr x2412))) (if (cons? w2416) (let ((w2418 (car w2416)) (x2419 (cdr w2416))) (if (cons? w2418) (let ((w2420 (car w2418)) (x2421 (cdr w2418))) (let ((a w2420)) (if (null? x2421) (let ((us x2419)) (if (list? us) (if (cons? x2417) (let ((w2425 (car x2417)) (x2426 (cdr x2417))) (let ((phd w2425)) (if (cons? x2426) (let ((w2427 (car x2426)) (x2428 (cdr x2426))) (if (cons? w2427) (let ((w2429 (car w2427)) (x2430 (cdr w2427))) (if (cons? w2429) (let ((w2431 (car w2429)) (x2432 (cdr w2429))) (let ((b w2431)) (let ((bs x2432)) (if (list? bs) (let ((w x2430)) (if (list? w) (if (cons? x2428) (let ((w2439 (car x2428)) (x2440 (cdr x2428))) (let ((k w2439)) (if (cons? x2440) (let ((w2441 (car x2440)) (x2442 (cdr x2440))) (let ((i w2441)) (if (cons? x2442) (let ((w2443 (car x2442)) (x2444 (cdr x2442))) (let ((v w2443)) (if (null? x2444) (progn (if (eq a b) (quasiquote (match-extract-vars ((((unquote a)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (unquote v))) (quasiquote (abs-extract-vars (((unquote a)) (unquote-splicing abs)) (unquote us) (unquote phd) (((unquote b) (unquote-splicing bs)) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2333)))) (fail2333)))) (fail2333)))) (fail2333)) (fail2333))) (fail2333))))) (fail2333))) (fail2333))) (fail2333)))) (fail2333)) (fail2333))) (fail2333)))) (fail2333))) (fail2333))) (fail2333)) (fail2333)))) (fail2333)))))) (if (cons? v2330) (let ((w2445 (car v2330)) (x2446 (cdr v2330))) (let ((abs w2445)) (if (list? abs) (if (cons? x2446) (let ((w2450 (car x2446)) (x2451 (cdr x2446))) (if (cons? w2450) (let ((w2452 (car w2450)) (x2453 (cdr w2450))) (if (cons? w2452) (let ((w2454 (car w2452)) (x2455 (cdr w2452))) (let ((a w2454)) (if (cons? x2455) (let ((w2456 (car x2455)) (x2457 (cdr x2455))) (let ((x w2456)) (let ((xs x2457)) (let ((us x2453)) (if (list? us) (if (cons? x2451) (let ((w2461 (car x2451)) (x2462 (cdr x2451))) (let ((phd w2461)) (if (cons? x2462) (let ((w2463 (car x2462)) (x2464 (cdr x2462))) (if (cons? w2463) (let ((w2465 (car w2463)) (x2466 (cdr w2463))) (if (cons? w2465) (let ((w2467 (car w2465)) (x2468 (cdr w2465))) (let ((b w2467)) (let ((bs x2468)) (if (list? bs) (let ((w x2466)) (if (list? w) (if (cons? x2464) (let ((w2475 (car x2464)) (x2476 (cdr x2464))) (let ((k w2475)) (if (cons? x2476) (let ((w2477 (car x2476)) (x2478 (cdr x2476))) (let ((i w2477)) (if (cons? x2478) (let ((w2479 (car x2478)) (x2480 (cdr x2478))) (let ((v w2479)) (if (null? x2480) (progn (if (eq a b) (let ((x-ls (gensym "x-ls"))) (quasiquote (match-extract-vars ((((unquote a) (unquote-splicing xs)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (((unquote x) (unquote x-ls)) (unquote-splicing v))))) (quasiquote (abs-extract-vars (((unquote a) (unquote x) (unquote-splicing xs)) (unquote-splicing abs)) (unquote us) (unquote phd) (((unquote b) (unquote-splicing bs)) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail2332)))) (fail2332)))) (fail2332)))) (fail2332)) (fail2332))) (fail2332))))) (fail2332))) (fail2332))) (fail2332)))) (fail2332)) (fail2332)))))) (fail2332)))) (fail2332))) (fail2332))) (fail2332)) (fail2332)))) (fail2332)))))) (if (cons? v2330) (let ((w2481 (car v2330)) (x2482 (cdr v2330))) (let ((abs w2481)) (if (cons? x2482) (let ((w2483 (car x2482)) (x2484 (cdr x2482))) (if (null? w2483) (if (cons? x2484) (let ((w2485 (car x2484)) (x2486 (cdr x2484))) (let ((phd w2485)) (if (cons? x2486) (let ((w2487 (car x2486)) (x2488 (cdr x2486))) (let ((p w2487)) (let ((l x2488)) (progn (quasiquote (match-extract-phd () (unquote phd) (unquote abs) (unquote p) (unquote-splicing l))))))) (fail2331)))) (fail2331)) (fail2331))) (fail2331)))) (fail2331))))) (defmacro match-extract-phd x (let ((v2489 x)) (let ((fail2490 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2489) (let ((w2491 (car v2489)) (x2492 (cdr v2489))) (if (cons? x2492) (let ((w2493 (car x2492)) (x2494 (cdr x2492))) (let ((phd w2493)) (if (cons? x2494) (let ((w2495 (car x2494)) (x2496 (cdr x2494))) (let ((abs w2495)) (let ((l x2496)) (progn (quasiquote (match-extract-vars2 ((unquote abs) (unquote phd)) (unquote-splicing l))))))) (fail2490)))) (fail2490))) (fail2490))))) (defmacro match-extract-vars-step x (let ((v2497 x)) (let ((fail2498 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2497) (let ((w2499 (car v2497)) (x2500 (cdr v2497))) (let ((abs w2499)) (if (cons? x2500) (let ((w2501 (car x2500)) (x2502 (cdr x2500))) (let ((p w2501)) (if (cons? x2502) (let ((w2503 (car x2502)) (x2504 (cdr x2502))) (let ((k w2503)) (if (cons? x2504) (let ((w2505 (car x2504)) (x2506 (cdr x2504))) (let ((i w2505)) (if (cons? x2506) (let ((w2507 (car x2506)) (x2508 (cdr x2506))) (let ((v w2507)) (if (cons? x2508) (let ((w2509 (car x2508)) (x2510 (cdr x2508))) (let ((a w2509)) (letfuns ((loop (ls2514 p-ls2512 p-ls2511) (if (null? ls2514) (progn (let ((v2-ls (reverse p-ls2512)) (v2 (reverse p-ls2511))) (if (null? x2510) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote k) ((unquote-splicing v2) (unquote-splicing i)) ((unquote-splicing a) (unquote-splicing v))))) (fail2498)))) (if (cons? ls2514) (progn (let ((w2515 (car ls2514))) (if (cons? w2515) (let ((w2516 (car w2515)) (x2517 (cdr w2515))) (let ((v2 w2516)) (if (cons? x2517) (let ((w2518 (car x2517)) (x2519 (cdr x2517))) (let ((v2-ls w2518)) (if (null? x2519) (loop (cdr ls2514) (cons v2-ls p-ls2512) (cons v2 p-ls2511)) (fail2498)))) (fail2498)))) (fail2498)))) (if else (progn (fail2498)) (cond)))))) (loop w2509 (quote ()) (quote ()))))) (fail2498)))) (fail2498)))) (fail2498)))) (fail2498)))) (fail2498)))) (fail2498))))) (defmacro match-extract-quasiquote-vars x (let ((v2520 x)) (let ((fail2521 (lambda () (let ((fail2522 (lambda () (let ((fail2523 (lambda () (let ((fail2524 (lambda () (let ((fail2525 (lambda () (let ((fail2526 (lambda () (let ((fail2527 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2520) (let ((w2528 (car v2520)) (x2529 (cdr v2520))) (let ((abs w2528)) (if (cons? x2529) (let ((w2530 (car x2529)) (x2531 (cdr x2529))) (let ((x w2530)) (if (cons? x2531) (let ((w2532 (car x2531)) (x2533 (cdr x2531))) (if (cons? w2532) (let ((w2534 (car w2532)) (x2535 (cdr w2532))) (let ((k w2534)) (let ((kk x2535)) (if (list? kk) (if (cons? x2533) (let ((w2539 (car x2533)) (x2540 (cdr x2533))) (let ((i w2539)) (if (cons? x2540) (let ((w2541 (car x2540)) (x2542 (cdr x2540))) (let ((v w2541)) (if (cons? x2542) (let ((w2543 (car x2542)) (x2544 (cdr x2542))) (if (cons? w2543) (let ((w2545 (car w2543)) (x2546 (cdr w2543))) (let ((t w2545)) (let ((d x2546)) (if (null? x2544) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail2527))))) (fail2527))) (fail2527)))) (fail2527)))) (fail2527)) (fail2527))))) (fail2527))) (fail2527)))) (fail2527)))) (fail2527)))))) (if (cons? v2520) (let ((w2547 (car v2520)) (x2548 (cdr v2520))) (let ((abs w2547)) (if (cons? x2548) (let ((w2549 (car x2548)) (x2550 (cdr x2548))) (if (vector? w2549) (let ((len2551 (vector-size w2549))) (if (>= len2551 0) (letfuns ((loop2553 (j2554 p-ls2552) (if (>= j2554 len2551) (let ((x (reverse p-ls2552))) (if (cons? x2550) (let ((w2556 (car x2550)) (x2557 (cdr x2550))) (let ((k w2556)) (if (cons? x2557) (let ((w2558 (car x2557)) (x2559 (cdr x2557))) (let ((i w2558)) (if (cons? x2559) (let ((w2560 (car x2559)) (x2561 (cdr x2559))) (let ((v w2560)) (if (cons? x2561) (let ((w2562 (car x2561)) (x2563 (cdr x2561))) (if (cons? w2562) (let ((w2564 (car w2562)) (x2565 (cdr w2562))) (let ((t w2564)) (let ((d x2565)) (if (null? x2563) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail2526))))) (fail2526))) (fail2526)))) (fail2526)))) (fail2526)))) (fail2526))) (let ((w2555 (vector-ref w2549 j2554))) (let ((x w2555)) (loop2553 (+ j2554 1) (cons x p-ls2552))))))) (loop2553 0 (quote ()))) (fail2526))) (fail2526))) (fail2526)))) (fail2526)))))) (if (cons? v2520) (let ((w2566 (car v2520)) (x2567 (cdr v2520))) (let ((abs w2566)) (if (cons? x2567) (let ((w2568 (car x2567)) (x2569 (cdr x2567))) (if (cons? w2568) (let ((w2570 (car w2568)) (x2571 (cdr w2568))) (let ((x w2570)) (let ((y x2571)) (if (cons? x2569) (let ((w2572 (car x2569)) (x2573 (cdr x2569))) (let ((k w2572)) (if (cons? x2573) (let ((w2574 (car x2573)) (x2575 (cdr x2573))) (let ((i w2574)) (if (cons? x2575) (let ((w2576 (car x2575)) (x2577 (cdr x2575))) (let ((v w2576)) (if (cons? x2577) (let ((w2578 (car x2577)) (x2579 (cdr x2577))) (if (cons? w2578) (let ((w2580 (car w2578)) (x2581 (cdr w2578))) (let ((t w2580)) (let ((d x2581)) (if (null? x2579) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (match-extract-quasiquote-vars-step (unquote y) (unquote k) (unquote i) (unquote v) (unquote d)) (unquote i) ()))) (fail2525))))) (fail2525))) (fail2525)))) (fail2525)))) (fail2525)))) (fail2525))))) (fail2525))) (fail2525)))) (fail2525)))))) (if (cons? v2520) (let ((w2582 (car v2520)) (x2583 (cdr v2520))) (let ((abs w2582)) (if (cons? x2583) (let ((w2584 (car x2583)) (x2585 (cdr x2583))) (if (cons? w2584) (let ((w2586 (car w2584)) (x2587 (cdr w2584))) (if (binary= w2586 (quote uunquote)) (if (cons? x2587) (let ((w2588 (car x2587)) (x2589 (cdr x2587))) (let ((x w2588)) (if (null? x2589) (if (cons? x2585) (let ((w2590 (car x2585)) (x2591 (cdr x2585))) (let ((k w2590)) (if (cons? x2591) (let ((w2592 (car x2591)) (x2593 (cdr x2591))) (let ((i w2592)) (if (cons? x2593) (let ((w2594 (car x2593)) (x2595 (cdr x2593))) (let ((v w2594)) (if (cons? x2595) (let ((w2596 (car x2595)) (x2597 (cdr x2595))) (if (cons? w2596) (let ((w2598 (car w2596)) (x2599 (cdr w2596))) (let ((t w2598)) (let ((d x2599)) (if (null? x2597) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail2524))))) (fail2524))) (fail2524)))) (fail2524)))) (fail2524)))) (fail2524)) (fail2524)))) (fail2524)) (fail2524))) (fail2524))) (fail2524)))) (fail2524)))))) (if (cons? v2520) (let ((w2600 (car v2520)) (x2601 (cdr v2520))) (let ((abs w2600)) (if (cons? x2601) (let ((w2602 (car x2601)) (x2603 (cdr x2601))) (if (cons? w2602) (let ((w2604 (car w2602)) (x2605 (cdr w2602))) (if (binary= w2604 (quote uunquote)) (if (cons? x2605) (let ((w2606 (car x2605)) (x2607 (cdr x2605))) (let ((x w2606)) (if (null? x2607) (if (cons? x2603) (let ((w2608 (car x2603)) (x2609 (cdr x2603))) (let ((k w2608)) (if (cons? x2609) (let ((w2610 (car x2609)) (x2611 (cdr x2609))) (let ((i w2610)) (if (cons? x2611) (let ((w2612 (car x2611)) (x2613 (cdr x2611))) (let ((v w2612)) (if (cons? x2613) (let ((w2614 (car x2613)) (x2615 (cdr x2613))) (if (cons? w2614) (let ((w2616 (car w2614)) (x2617 (cdr w2614))) (let ((t w2616)) (if (null? x2617) (if (null? x2615) (progn (quasiquote (match-extract-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v)))) (fail2523)) (fail2523)))) (fail2523))) (fail2523)))) (fail2523)))) (fail2523)))) (fail2523)) (fail2523)))) (fail2523)) (fail2523))) (fail2523))) (fail2523)))) (fail2523)))))) (if (cons? v2520) (let ((w2618 (car v2520)) (x2619 (cdr v2520))) (let ((abs w2618)) (if (cons? x2619) (let ((w2620 (car x2619)) (x2621 (cdr x2619))) (if (cons? w2620) (let ((w2622 (car w2620)) (x2623 (cdr w2620))) (let ((sk22625 (lambda () (if (cons? x2623) (let ((w2626 (car x2623)) (x2627 (cdr x2623))) (let ((x w2626)) (if (null? x2627) (if (cons? x2621) (let ((w2628 (car x2621)) (x2629 (cdr x2621))) (let ((k w2628)) (if (cons? x2629) (let ((w2630 (car x2629)) (x2631 (cdr x2629))) (let ((i w2630)) (if (cons? x2631) (let ((w2632 (car x2631)) (x2633 (cdr x2631))) (let ((v w2632)) (if (cons? x2633) (let ((w2634 (car x2633)) (x2635 (cdr x2633))) (let ((d w2634)) (if (null? x2635) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) ((quote uunquote) (unquote x)) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail2522)))) (fail2522)))) (fail2522)))) (fail2522)))) (fail2522)) (fail2522)))) (fail2522))))) (if (binary= w2622 (quote unquote)) (sk22625) (if (binary= w2622 (quote unquote-splicing)) (sk22625) (fail2522))))) (fail2522))) (fail2522)))) (fail2522)))))) (if (cons? v2520) (let ((w2636 (car v2520)) (x2637 (cdr v2520))) (let ((abs w2636)) (if (cons? x2637) (let ((w2638 (car x2637)) (x2639 (cdr x2637))) (if (cons? w2638) (let ((w2640 (car w2638)) (x2641 (cdr w2638))) (if (binary= w2640 (quote quasiquote)) (if (cons? x2641) (let ((w2642 (car x2641)) (x2643 (cdr x2641))) (let ((x w2642)) (if (null? x2643) (if (cons? x2639) (let ((w2644 (car x2639)) (x2645 (cdr x2639))) (let ((k w2644)) (if (cons? x2645) (let ((w2646 (car x2645)) (x2647 (cdr x2645))) (let ((i w2646)) (if (cons? x2647) (let ((w2648 (car x2647)) (x2649 (cdr x2647))) (let ((v w2648)) (if (cons? x2649) (let ((w2650 (car x2649)) (x2651 (cdr x2649))) (let ((d w2650)) (if (null? x2651) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (t (unquote-splicing d))))) (fail2521)))) (fail2521)))) (fail2521)))) (fail2521)))) (fail2521)) (fail2521)))) (fail2521)) (fail2521))) (fail2521))) (fail2521)))) (fail2521))))) (defmacro match-extract-quasiquote-vars-step x (let ((v2652 x)) (let ((fail2653 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2652) (let ((w2654 (car v2652)) (x2655 (cdr v2652))) (if (cons? x2655) (let ((w2656 (car x2655)) (x2657 (cdr x2655))) (let ((abs w2656)) (if (cons? x2657) (let ((w2658 (car x2657)) (x2659 (cdr x2657))) (let ((x w2658)) (if (cons? x2659) (let ((w2660 (car x2659)) (x2661 (cdr x2659))) (let ((k w2660)) (if (cons? x2661) (let ((w2662 (car x2661)) (x2663 (cdr x2661))) (let ((i w2662)) (if (cons? x2663) (let ((w2664 (car x2663)) (x2665 (cdr x2663))) (let ((v w2664)) (if (cons? x2665) (let ((w2666 (car x2665)) (x2667 (cdr x2665))) (let ((d w2666)) (if (cons? x2667) (let ((w2668 (car x2667)) (x2669 (cdr x2667))) (let ((a w2668)) (letfuns ((loop (ls2673 p-ls2671 p-ls2670) (if (null? ls2673) (progn (let ((v2-ls (reverse p-ls2671)) (v2 (reverse p-ls2670))) (if (null? x2669) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) ((unquote-splicing v2) (unquote-splicing i)) ((unquote-splicing a) (unquote-splicing v)) (unquote d)))) (fail2653)))) (if (cons? ls2673) (progn (let ((w2674 (car ls2673))) (if (cons? w2674) (let ((w2675 (car w2674)) (x2676 (cdr w2674))) (let ((v2 w2675)) (if (cons? x2676) (let ((w2677 (car x2676)) (x2678 (cdr x2676))) (let ((v2-ls w2677)) (if (null? x2678) (loop (cdr ls2673) (cons v2-ls p-ls2671) (cons v2 p-ls2670)) (fail2653)))) (fail2653)))) (fail2653)))) (if else (progn (fail2653)) (cond)))))) (loop w2668 (quote ()) (quote ()))))) (fail2653)))) (fail2653)))) (fail2653)))) (fail2653)))) (fail2653)))) (fail2653)))) (fail2653))) (fail2653))))) (defmacro match-check-ellipse x (let ((v2679 x)) (let ((fail2680 (lambda () (let ((fail2681 (lambda () (let ((fail2682 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2679) (let ((w2683 (car v2679)) (x2684 (cdr v2679))) (let ((id w2683)) (if (cons? x2684) (let ((w2685 (car x2684)) (x2686 (cdr x2684))) (let ((success-k w2685)) (if (cons? x2686) (let ((w2687 (car x2686)) (x2688 (cdr x2686))) (let ((failure-k w2687)) (if (null? x2688) (progn (if (let ((G002689 (binary= id (quote ...)))) (if G002689 G002689 (binary= id (quote ___)))) success-k failure-k)) (fail2682)))) (fail2682)))) (fail2682)))) (fail2682)))))) (if (cons? v2679) (let ((w2690 (car v2679)) (x2691 (cdr v2679))) (if (vector? w2690) (let ((len2692 (vector-size w2690))) (if (>= len2692 0) (letfuns ((loop2694 (j2695 p-ls2693) (if (>= j2695 len2692) (let ((a (reverse p-ls2693))) (if (cons? x2691) (let ((w2697 (car x2691)) (x2698 (cdr x2691))) (let ((success-k w2697)) (if (cons? x2698) (let ((w2699 (car x2698)) (x2700 (cdr x2698))) (let ((failure-k w2699)) (if (null? x2700) (progn failure-k) (fail2681)))) (fail2681)))) (fail2681))) (let ((w2696 (vector-ref w2690 j2695))) (let ((a w2696)) (loop2694 (+ j2695 1) (cons a p-ls2693))))))) (loop2694 0 (quote ()))) (fail2681))) (fail2681))) (fail2681)))))) (if (cons? v2679) (let ((w2701 (car v2679)) (x2702 (cdr v2679))) (if (cons? w2701) (let ((w2703 (car w2701)) (x2704 (cdr w2701))) (let ((a w2703)) (let ((b x2704)) (if (cons? x2702) (let ((w2705 (car x2702)) (x2706 (cdr x2702))) (let ((success-k w2705)) (if (cons? x2706) (let ((w2707 (car x2706)) (x2708 (cdr x2706))) (let ((failure-k w2707)) (if (null? x2708) (progn failure-k) (fail2680)))) (fail2680)))) (fail2680))))) (fail2680))) (fail2680))))) (defmacro match-check-identifier x (let ((v2709 x)) (let ((fail2710 (lambda () (let ((fail2711 (lambda () (let ((fail2712 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2709) (let ((w2713 (car v2709)) (x2714 (cdr v2709))) (let ((x w2713)) (if (cons? x2714) (let ((w2715 (car x2714)) (x2716 (cdr x2714))) (let ((success-k w2715)) (if (cons? x2716) (let ((w2717 (car x2716)) (x2718 (cdr x2716))) (let ((failure-k w2717)) (if (null? x2718) (progn (if (symbol? x) success-k failure-k)) (fail2712)))) (fail2712)))) (fail2712)))) (fail2712)))))) (if (cons? v2709) (let ((w2719 (car v2709)) (x2720 (cdr v2709))) (if (vector? w2719) (let ((len2721 (vector-size w2719))) (if (>= len2721 0) (letfuns ((loop2723 (j2724 p-ls2722) (if (>= j2724 len2721) (let ((x (reverse p-ls2722))) (if (cons? x2720) (let ((w2726 (car x2720)) (x2727 (cdr x2720))) (let ((success-k w2726)) (if (cons? x2727) (let ((w2728 (car x2727)) (x2729 (cdr x2727))) (let ((failure-k w2728)) (if (null? x2729) (progn failure-k) (fail2711)))) (fail2711)))) (fail2711))) (let ((w2725 (vector-ref w2719 j2724))) (let ((x w2725)) (loop2723 (+ j2724 1) (cons x p-ls2722))))))) (loop2723 0 (quote ()))) (fail2711))) (fail2711))) (fail2711)))))) (if (cons? v2709) (let ((w2730 (car v2709)) (x2731 (cdr v2709))) (if (cons? w2730) (let ((w2732 (car w2730)) (x2733 (cdr w2730))) (let ((x w2732)) (let ((y x2733)) (if (cons? x2731) (let ((w2734 (car x2731)) (x2735 (cdr x2731))) (let ((success-k w2734)) (if (cons? x2735) (let ((w2736 (car x2735)) (x2737 (cdr x2735))) (let ((failure-k w2736)) (if (null? x2737) (progn failure-k) (fail2710)))) (fail2710)))) (fail2710))))) (fail2710))) (fail2710))))) (defmacro defmatchfun args (let ((name (car args)) (arg (gensym "arg")) (matchers (cdr args))) (if (symbol? name) (quasiquote (deflocal (unquote name) (named-lambda (unquote name) ((unquote arg)) (smatch (unquote arg) (unquote-splicing matchers))))) (if (eq (car name) (quote setter)) (quasiquote ((setter setter) (unquote (cadr name)) (named-lambda (unquote name) ((unquote arg)) (smatch (unquote arg) (unquote-splicing matchers))))) (error <condition> "bad defmatchfun syntax"))))) (defmacro match-lambda matchers (let ((x (gensym "arg"))) (quasiquote (lambda ((unquote x)) (smatch (unquote x) (unquote-splicing matchers)))))) (defmacro match-lambda* matchers (let ((x (gensym "arg"))) (quasiquote (lambda (unquote x) (smatch (unquote x) (unquote-splicing matchers)))))) (defmacro match-let x (let ((v2738 x)) (let ((fail2739 (lambda () (let ((fail2740 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2738) (let ((w2741 (car v2738)) (x2742 (cdr v2738))) (let ((loop w2741)) (let ((rest x2742)) (progn (quasiquote (match-named-let loop () (unquote-splicing rest))))))) (fail2740)))))) (if (cons? v2738) (let ((w2743 (car v2738)) (x2744 (cdr v2738))) (let ((vars w2743)) (if (list? vars) (let ((body x2744)) (progn (quasiquote (match-let/helper let () () (unquote vars) (unquote-splicing body))))) (fail2739)))) (fail2739))))) (defmacro match-letfuns x (let ((v2748 x)) (let ((fail2749 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2748) (let ((w2750 (car v2748)) (x2751 (cdr v2748))) (let ((vars w2750)) (let ((body x2751)) (progn (quasiquote (match-let/helper letfuns () () (unquote vars) (unquote-splicing body))))))) (fail2749))))) (defmacro match-let/helper x (let ((v2752 x)) (let ((fail2753 (lambda () (let ((fail2754 (lambda () (let ((fail2755 (lambda () (let ((fail2756 (lambda () (let ((fail2757 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2752) (let ((w2758 (car v2752)) (x2759 (cdr v2752))) (let ((let w2758)) (if (cons? x2759) (let ((w2760 (car x2759)) (x2761 (cdr x2759))) (let ((v w2760)) (if (list? v) (if (cons? x2761) (let ((w2765 (car x2761)) (x2766 (cdr x2761))) (let ((p w2765)) (if (list? p) (if (cons? x2766) (let ((w2770 (car x2766)) (x2771 (cdr x2766))) (if (cons? w2770) (let ((w2772 (car w2770)) (x2773 (cdr w2770))) (if (cons? w2772) (let ((w2774 (car w2772)) (x2775 (cdr w2772))) (let ((a w2774)) (if (cons? x2775) (let ((w2776 (car x2775)) (x2777 (cdr x2775))) (let ((expr w2776)) (if (null? x2777) (let ((rest x2773)) (let ((body x2771)) (progn (quasiquote (match-let/helper (unquote let) ((unquote-splicing v) ((unquote a) (unquote expr))) (unquote p) (unquote rest) (unquote-splicing body)))))) (fail2757)))) (fail2757)))) (fail2757))) (fail2757))) (fail2757)) (fail2757)))) (fail2757)) (fail2757)))) (fail2757)))) (fail2757)))))) (if (cons? v2752) (let ((w2778 (car v2752)) (x2779 (cdr v2752))) (let ((let w2778)) (if (cons? x2779) (let ((w2780 (car x2779)) (x2781 (cdr x2779))) (let ((v w2780)) (if (list? v) (if (cons? x2781) (let ((w2785 (car x2781)) (x2786 (cdr x2781))) (let ((p w2785)) (if (list? p) (if (cons? x2786) (let ((w2790 (car x2786)) (x2791 (cdr x2786))) (if (cons? w2790) (let ((w2792 (car w2790)) (x2793 (cdr w2790))) (if (cons? w2792) (let ((w2794 (car w2792)) (x2795 (cdr w2792))) (if (vector? w2794) (let ((len2796 (vector-size w2794))) (if (>= len2796 0) (letfuns ((loop2798 (j2799 p-ls2797) (if (>= j2799 len2796) (let ((a (reverse p-ls2797))) (if (cons? x2795) (let ((w2801 (car x2795)) (x2802 (cdr x2795))) (let ((expr w2801)) (if (null? x2802) (let ((rest x2793)) (let ((body x2791)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-let/helper let ((unquote-splicing v) ((unquote tmp) (unquote expr))) ((unquote-splicing p) (#((unquote-splicing a)) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail2756)))) (fail2756))) (let ((w2800 (vector-ref w2794 j2799))) (let ((a w2800)) (loop2798 (+ j2799 1) (cons a p-ls2797))))))) (loop2798 0 (quote ()))) (fail2756))) (fail2756))) (fail2756))) (fail2756))) (fail2756)) (fail2756)))) (fail2756)) (fail2756)))) (fail2756)))) (fail2756)))))) (if (cons? v2752) (let ((w2803 (car v2752)) (x2804 (cdr v2752))) (let ((let w2803)) (if (cons? x2804) (let ((w2805 (car x2804)) (x2806 (cdr x2804))) (let ((v w2805)) (if (list? v) (if (cons? x2806) (let ((w2810 (car x2806)) (x2811 (cdr x2806))) (let ((p w2810)) (if (list? p) (if (cons? x2811) (let ((w2815 (car x2811)) (x2816 (cdr x2811))) (if (cons? w2815) (let ((w2817 (car w2815)) (x2818 (cdr w2815))) (if (cons? w2817) (let ((w2819 (car w2817)) (x2820 (cdr w2817))) (if (cons? w2819) (let ((w2821 (car w2819)) (x2822 (cdr w2819))) (let ((a w2821)) (let ((b x2822)) (if (cons? x2820) (let ((w2823 (car x2820)) (x2824 (cdr x2820))) (let ((expr w2823)) (if (null? x2824) (let ((rest x2818)) (let ((body x2816)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-let/helper let ((unquote-splicing v) ((unquote tmp) (unquote expr))) ((unquote-splicing p) (((unquote a) (unquote-splicing b)) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail2755)))) (fail2755))))) (fail2755))) (fail2755))) (fail2755))) (fail2755)) (fail2755)))) (fail2755)) (fail2755)))) (fail2755)))) (fail2755)))))) (if (cons? v2752) (let ((w2825 (car v2752)) (x2826 (cdr v2752))) (let ((let w2825)) (if (cons? x2826) (let ((w2827 (car x2826)) (x2828 (cdr x2826))) (let ((a w2827)) (letfuns ((loop (ls2832 p-ls2830 p-ls2829) (if (null? ls2832) (progn (let ((expr (reverse p-ls2830)) (var (reverse p-ls2829))) (if (cons? x2828) (let ((w2834 (car x2828)) (x2835 (cdr x2828))) (let ((b w2834)) (letfuns ((loop (ls2839 p-ls2837 p-ls2836) (if (null? ls2839) (progn (let ((tmp (reverse p-ls2837)) (pat (reverse p-ls2836))) (if (cons? x2835) (let ((w2841 (car x2835)) (x2842 (cdr x2835))) (if (null? w2841) (let ((body x2842)) (progn (quasiquote ((unquote let) (unquote a) (match-let* (unquote b) (unquote-splicing body)))))) (fail2754))) (fail2754)))) (if (cons? ls2839) (progn (let ((w2840 (car ls2839))) (if (cons? w2840) (let ((w2843 (car w2840)) (x2844 (cdr w2840))) (let ((pat w2843)) (if (cons? x2844) (let ((w2845 (car x2844)) (x2846 (cdr x2844))) (let ((tmp w2845)) (if (null? x2846) (loop (cdr ls2839) (cons tmp p-ls2837) (cons pat p-ls2836)) (fail2754)))) (fail2754)))) (fail2754)))) (if else (progn (fail2754)) (cond)))))) (loop w2834 (quote ()) (quote ()))))) (fail2754)))) (if (cons? ls2832) (progn (let ((w2833 (car ls2832))) (if (cons? w2833) (let ((w2847 (car w2833)) (x2848 (cdr w2833))) (let ((var w2847)) (if (cons? x2848) (let ((w2849 (car x2848)) (x2850 (cdr x2848))) (let ((expr w2849)) (if (null? x2850) (loop (cdr ls2832) (cons expr p-ls2830) (cons var p-ls2829)) (fail2754)))) (fail2754)))) (fail2754)))) (if else (progn (fail2754)) (cond)))))) (loop w2827 (quote ()) (quote ()))))) (fail2754)))) (fail2754)))))) (if (cons? v2752) (let ((w2851 (car v2752)) (x2852 (cdr v2752))) (let ((let w2851)) (if (cons? x2852) (let ((w2853 (car x2852)) (x2854 (cdr x2852))) (let ((a w2853)) (letfuns ((loop (ls2858 p-ls2856 p-ls2855) (if (null? ls2858) (progn (let ((expr (reverse p-ls2856)) (var (reverse p-ls2855))) (if (cons? x2854) (let ((w2860 (car x2854)) (x2861 (cdr x2854))) (if (null? w2860) (if (cons? x2861) (let ((w2862 (car x2861)) (x2863 (cdr x2861))) (if (null? w2862) (let ((body x2863)) (progn (quasiquote ((unquote let) (unquote a) (unquote-splicing body))))) (fail2753))) (fail2753)) (fail2753))) (fail2753)))) (if (cons? ls2858) (progn (let ((w2859 (car ls2858))) (if (cons? w2859) (let ((w2864 (car w2859)) (x2865 (cdr w2859))) (let ((var w2864)) (if (cons? x2865) (let ((w2866 (car x2865)) (x2867 (cdr x2865))) (let ((expr w2866)) (if (null? x2867) (loop (cdr ls2858) (cons expr p-ls2856) (cons var p-ls2855)) (fail2753)))) (fail2753)))) (fail2753)))) (if else (progn (fail2753)) (cond)))))) (loop w2853 (quote ()) (quote ()))))) (fail2753)))) (fail2753))))) (defmacro match-named-let x (let ((v2868 x)) (let ((fail2869 (lambda () (let ((fail2870 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2868) (let ((w2871 (car v2868)) (x2872 (cdr v2868))) (if (cons? x2872) (let ((w2873 (car x2872)) (x2874 (cdr x2872))) (let ((loop w2873)) (if (cons? x2874) (let ((w2875 (car x2874)) (x2876 (cdr x2874))) (let ((v w2875)) (if (list? v) (if (cons? x2876) (let ((w2880 (car x2876)) (x2881 (cdr x2876))) (if (cons? w2880) (let ((w2882 (car w2880)) (x2883 (cdr w2880))) (if (cons? w2882) (let ((w2884 (car w2882)) (x2885 (cdr w2882))) (let ((pat w2884)) (if (cons? x2885) (let ((w2886 (car x2885)) (x2887 (cdr x2885))) (let ((expr w2886)) (if (null? x2887) (let ((rest x2883)) (let ((body x2881)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-named-let (unquote loop) ((unquote-splicing v) ((unquote pat) (unquote expr) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail2870)))) (fail2870)))) (fail2870))) (fail2870))) (fail2870)) (fail2870)))) (fail2870)))) (fail2870))) (fail2870)))))) (if (cons? v2868) (let ((w2888 (car v2868)) (x2889 (cdr v2868))) (let ((loop w2888)) (if (cons? x2889) (let ((w2890 (car x2889)) (x2891 (cdr x2889))) (letfuns ((loop (ls2896 p-ls2894 p-ls2893 p-ls2892) (if (null? ls2896) (progn (let ((var (reverse p-ls2894)) (expr (reverse p-ls2893)) (pat (reverse p-ls2892))) (if (cons? x2891) (let ((w2898 (car x2891)) (x2899 (cdr x2891))) (if (null? w2898) (let ((body x2899)) (progn (quasiquote (recur loop (unquote (map (lambda (var expr) (quasiquote ((unquote var) (unquote expr)))) var expr)) (match-let (unquote (map (lambda (pat var) (quasiquote ((unquote pat) (unquote var)))) pat var)) (unquote-splicing body)))))) (fail2869))) (fail2869)))) (if (cons? ls2896) (progn (let ((w2897 (car ls2896))) (if (cons? w2897) (let ((w2900 (car w2897)) (x2901 (cdr w2897))) (let ((pat w2900)) (if (cons? x2901) (let ((w2902 (car x2901)) (x2903 (cdr x2901))) (let ((expr w2902)) (if (cons? x2903) (let ((w2904 (car x2903)) (x2905 (cdr x2903))) (let ((var w2904)) (if (null? x2905) (loop (cdr ls2896) (cons var p-ls2894) (cons expr p-ls2893) (cons pat p-ls2892)) (fail2869)))) (fail2869)))) (fail2869)))) (fail2869)))) (if else (progn (fail2869)) (cond)))))) (loop w2890 (quote ()) (quote ()) (quote ())))) (fail2869)))) (fail2869))))) (defmacro match-let* x (let ((v2906 x)) (let ((fail2907 (lambda () (let ((fail2908 (lambda () (error <condition> "no matching pattern")))) (if (cons? v2906) (let ((w2909 (car v2906)) (x2910 (cdr v2906))) (if (cons? w2909) (let ((w2911 (car w2909)) (x2912 (cdr w2909))) (if (cons? w2911) (let ((w2913 (car w2911)) (x2914 (cdr w2911))) (let ((pat w2913)) (if (cons? x2914) (let ((w2915 (car x2914)) (x2916 (cdr x2914))) (let ((expr w2915)) (if (null? x2916) (let ((rest x2912)) (let ((body x2910)) (progn (quasiquote (smatch (unquote expr) ((unquote pat) (match-let* (unquote rest) (unquote-splicing body)))))))) (fail2908)))) (fail2908)))) (fail2908))) (fail2908))) (fail2908)))))) (if (cons? v2906) (let ((w2917 (car v2906)) (x2918 (cdr v2906))) (if (null? w2917) (let ((body x2918)) (progn (quasiquote (progn (unquote-splicing body))))) (fail2907))) (fail2907))))))