(defmodule smatch0 (syntax (syntax-0) import (level-0) export (smatch0)) (defsyntax smatch0 X (let ((v21882 X)) (let ((fail21883 (lambda () (let ((fail21884 (lambda () (let ((fail21885 (lambda () (let ((fail21886 (lambda () (let ((fail21887 (lambda () (let ((fail21888 (lambda () (let ((fail21889 (lambda () (error <condition> "no matching pattern")))) (let ((l v21882)) (if (list? l) (progn (quasiquote (match* (() ((car cdr cons? null? binary=) ())) (unquote-splicing l)))) (fail21889))))))) (if (cons? v21882) (let ((w21894 (car v21882)) (x21895 (cdr v21882))) (if (binary= w21894 (quote -phd)) (if (cons? x21895) (let ((w21896 (car x21895)) (x21897 (cdr x21895))) (let ((p w21896)) (let ((l x21897)) (progn (quasiquote (match* (() (unquote p)) (unquote-splicing l))))))) (fail21888)) (fail21888))) (fail21888)))))) (if (cons? v21882) (let ((w21898 (car v21882)) (x21899 (cdr v21882))) (if (binary= w21898 (quote -abs)) (if (cons? x21899) (let ((w21900 (car x21899)) (x21901 (cdr x21899))) (let ((abs w21900)) (let ((l x21901)) (progn (quasiquote (match* ((unquote abs) ((car cdr cons? null? binary=) ())) (unquote-splicing l))))))) (fail21887)) (fail21887))) (fail21887)))))) (if (cons? v21882) (let ((w21902 (car v21882)) (x21903 (cdr v21882))) (if (binary= w21902 (quote -phd)) (if (cons? x21903) (let ((w21904 (car x21903)) (x21905 (cdr x21903))) (let ((p w21904)) (if (cons? x21905) (let ((w21906 (car x21905)) (x21907 (cdr x21905))) (if (binary= w21906 (quote -abs)) (if (cons? x21907) (let ((w21908 (car x21907)) (x21909 (cdr x21907))) (let ((abs w21908)) (let ((l x21909)) (progn (quasiquote (match* ((unquote abs) (unquote p)) (unquote-splicing l))))))) (fail21886)) (fail21886))) (fail21886)))) (fail21886)) (fail21886))) (fail21886)))))) (if (cons? v21882) (let ((w21910 (car v21882)) (x21911 (cdr v21882))) (if (binary= w21910 (quote -abs)) (if (cons? x21911) (let ((w21912 (car x21911)) (x21913 (cdr x21911))) (let ((abs w21912)) (if (cons? x21913) (let ((w21914 (car x21913)) (x21915 (cdr x21913))) (if (binary= w21914 (quote -phd)) (if (cons? x21915) (let ((w21916 (car x21915)) (x21917 (cdr x21915))) (let ((p w21916)) (let ((l x21917)) (progn (quasiquote (match* ((unquote abs) (unquote p)) (unquote-splicing l))))))) (fail21885)) (fail21885))) (fail21885)))) (fail21885)) (fail21885))) (fail21885)))))) (if (cons? v21882) (let ((w21918 (car v21882)) (x21919 (cdr v21882))) (let ((atom w21918)) (if (null? x21919) (progn (error <condition> "no match clauses")) (fail21884)))) (fail21884)))))) (if (null? v21882) (progn (error <condition> "missing match expression")) (fail21883))))) (defsyntax match* X (let ((v21920 X)) (let ((fail21921 (lambda () (let ((fail21922 (lambda () (let ((fail21923 (lambda () (error <condition> "no matching pattern")))) (if (cons? v21920) (let ((w21924 (car v21920)) (x21925 (cdr v21920))) (let ((abs w21924)) (if (cons? x21925) (let ((w21926 (car x21925)) (x21927 (cdr x21925))) (let ((atom w21926)) (let ((b x21927)) (if (list? b) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote atom))) (match-next (unquote abs) (unquote v) ((unquote atom) (setq (unquote atom))) (unquote-splicing b)))))) (fail21923))))) (fail21923)))) (fail21923)))))) (if (cons? v21920) (let ((w21932 (car v21920)) (x21933 (cdr v21920))) (let ((abs w21932)) (if (cons? x21933) (let ((w21934 (car x21933)) (x21935 (cdr x21933))) (let ((a w21934)) (if (vector? w21934) (let ((len21936 (vector-size w21934))) (if (>= len21936 0) (letfuns ((loop21939 (j21940 p-ls21938) (if (>= j21940 len21936) (let ((vec (reverse p-ls21938))) (letfuns ((loop (ls21953 p-ls21950 p-ls21948 p-ls21944) (if (null? ls21953) (progn (let ((body (reverse p-ls21950)) (pat (reverse p-ls21948)) (b (reverse p-ls21944))) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote a))) (match-next (unquote abs) (unquote v) ((unquote v) (setq (unquote v))) (unquote-splicing b)))))))) (if (cons? ls21953) (progn (let ((w21954 (car ls21953))) (let ((b w21954)) (if (cons? w21954) (let ((w21955 (car w21954)) (x21956 (cdr w21954))) (let ((pat w21955)) (let ((body x21956)) (loop (cdr ls21953) (cons body p-ls21950) (cons pat p-ls21948) (cons b p-ls21944))))) (fail21922))))) (if else (progn (fail21922)) (cond)))))) (loop x21935 (quote ()) (quote ()) (quote ())))) (let ((w21941 (vector-ref w21934 j21940))) (let ((vec w21941)) (loop21939 (+ j21940 1) (cons vec p-ls21938))))))) (loop21939 0 (quote ()))) (fail21922))) (fail21922)))) (fail21922)))) (fail21922)))))) (if (cons? v21920) (let ((w21957 (car v21920)) (x21958 (cdr v21920))) (let ((abs w21957)) (if (cons? x21958) (let ((w21959 (car x21958)) (x21960 (cdr x21958))) (let ((app w21959)) (if (list? app) (letfuns ((loop (ls21976 p-ls21973 p-ls21971 p-ls21967) (if (null? ls21976) (progn (let ((body (reverse p-ls21973)) (pat (reverse p-ls21971)) (a (reverse p-ls21967))) (progn (let ((v (gensym "v"))) (quasiquote (let (((unquote v) (unquote app))) (match-next (unquote abs) (unquote v) ((unquote app) (setq (unquote app))) (unquote-splicing a)))))))) (if (cons? ls21976) (progn (let ((w21977 (car ls21976))) (let ((a w21977)) (if (cons? w21977) (let ((w21978 (car w21977)) (x21979 (cdr w21977))) (let ((pat w21978)) (let ((body x21979)) (loop (cdr ls21976) (cons body p-ls21973) (cons pat p-ls21971) (cons a p-ls21967))))) (fail21921))))) (if else (progn (fail21921)) (cond)))))) (loop x21960 (quote ()) (quote ()) (quote ()))) (fail21921)))) (fail21921)))) (fail21921))))) (defsyntax match-next X (let ((v21980 X)) (let ((fail21981 (lambda () (let ((fail21982 (lambda () (let ((fail21983 (lambda () (error <condition> "no matching pattern")))) (if (cons? v21980) (let ((w21984 (car v21980)) (x21985 (cdr v21980))) (let ((abs w21984)) (if (cons? x21985) (let ((w21986 (car x21985)) (x21987 (cdr x21985))) (let ((v w21986)) (if (cons? x21987) (let ((w21988 (car x21987)) (x21989 (cdr x21987))) (let ((g+s w21988)) (if (cons? x21989) (let ((w21990 (car x21989)) (x21991 (cdr x21989))) (if (cons? w21990) (let ((w21992 (car w21990)) (x21993 (cdr w21990))) (let ((pat w21992)) (let ((body x21993)) (let ((rest x21991)) (progn (let ((failure (gensym "fail"))) (quasiquote (match-next (unquote abs) (unquote v) (unquote g+s) ((unquote pat) (=> (unquote failure)) (unquote-splicing body)) (unquote-splicing rest))))))))) (fail21983))) (fail21983)))) (fail21983)))) (fail21983)))) (fail21983)))))) (if (cons? v21980) (let ((w21994 (car v21980)) (x21995 (cdr v21980))) (let ((abs w21994)) (if (cons? x21995) (let ((w21996 (car x21995)) (x21997 (cdr x21995))) (let ((v w21996)) (if (cons? x21997) (let ((w21998 (car x21997)) (x21999 (cdr x21997))) (let ((g+s w21998)) (if (cons? x21999) (let ((w22000 (car x21999)) (x22001 (cdr x21999))) (if (cons? w22000) (let ((w22002 (car w22000)) (x22003 (cdr w22000))) (let ((pat w22002)) (if (cons? x22003) (let ((w22004 (car x22003)) (x22005 (cdr x22003))) (if (cons? w22004) (let ((w22006 (car w22004)) (x22007 (cdr w22004))) (if (binary= w22006 (quote =>)) (if (cons? x22007) (let ((w22008 (car x22007)) (x22009 (cdr x22007))) (let ((failure w22008)) (if (null? x22009) (let ((body x22005)) (let ((rest x22001)) (progn (quasiquote (let (((unquote failure) (lambda () (match-next (unquote abs) (unquote v) (unquote g+s) (unquote-splicing rest))))) (match-one (unquote abs) (unquote v) (unquote pat) (unquote g+s) (match-drop-ids (progn (unquote-splicing body))) (match-drop-ids ((unquote failure))) ())))))) (fail21982)))) (fail21982)) (fail21982))) (fail21982))) (fail21982)))) (fail21982))) (fail21982)))) (fail21982)))) (fail21982)))) (fail21982)))))) (if (cons? v21980) (let ((w22010 (car v21980)) (x22011 (cdr v21980))) (let ((abs w22010)) (if (cons? x22011) (let ((w22012 (car x22011)) (x22013 (cdr x22011))) (let ((v w22012)) (if (cons? x22013) (let ((w22014 (car x22013)) (x22015 (cdr x22013))) (let ((g+s w22014)) (if (null? x22015) (progn (quasiquote (error <condition> "no matching pattern"))) (fail21981)))) (fail21981)))) (fail21981)))) (fail21981))))) (defsyntax abs-drop x (let ((v22016 x)) (let ((fail22017 (lambda () (let ((fail22018 (lambda () (error <condition> "no matching pattern")))) (if (cons? v22016) (let ((w22019 (car v22016)) (x22020 (cdr v22016))) (let ((a w22019)) (if (cons? x22020) (let ((w22021 (car x22020)) (x22022 (cdr x22020))) (let ((k w22021)) (if (list? k) (if (cons? x22022) (let ((w22027 (car x22022)) (x22028 (cdr x22022))) (let ((v w22027)) (if (null? x22028) (progn (append k (quasiquote ((unquote v))))) (fail22018)))) (fail22018)) (fail22018)))) (fail22018)))) (fail22018)))))) (if (cons? v22016) (let ((w22029 (car v22016)) (x22030 (cdr v22016))) (let ((a w22029)) (if (cons? x22030) (let ((w22031 (car x22030)) (x22032 (cdr x22030))) (let ((k w22031)) (if (null? x22032) (progn k) (fail22017)))) (fail22017)))) (fail22017))))) (defsyntax match-one x (let ((v22033 x)) (let ((fail22034 (lambda () (let ((fail22035 (lambda () (error <condition> "no matching pattern")))) (let ((x v22033)) (progn (quasiquote (match-two (unquote-splicing x))))))))) (if (cons? v22033) (let ((w22036 (car v22033)) (x22037 (cdr v22033))) (let ((abs w22036)) (if (cons? x22037) (let ((w22038 (car x22037)) (x22039 (cdr x22037))) (let ((v w22038)) (if (cons? x22039) (let ((w22040 (car x22039)) (x22041 (cdr x22039))) (if (cons? w22040) (let ((w22042 (car w22040)) (x22043 (cdr w22040))) (let ((p w22042)) (if (cons? x22043) (let ((w22044 (car x22043)) (x22045 (cdr x22043))) (let ((q w22044)) (let ((r x22045)) (if (cons? x22041) (let ((w22046 (car x22041)) (x22047 (cdr x22041))) (let ((g+s w22046)) (if (cons? x22047) (let ((w22048 (car x22047)) (x22049 (cdr x22047))) (let ((sk w22048)) (if (cons? x22049) (let ((w22050 (car x22049)) (x22051 (cdr x22049))) (let ((fk w22050)) (if (cons? x22051) (let ((w22052 (car x22051)) (x22053 (cdr x22051))) (let ((i w22052)) (if (null? x22053) (progn (quasiquote (match-check-ellipse (unquote q) (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses (unquote abs) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()) (match-two (unquote abs) (unquote v) ((unquote p) (unquote q) (unquote-splicing r)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail22034)))) (fail22034)))) (fail22034)))) (fail22034)))) (fail22034))))) (fail22034)))) (fail22034))) (fail22034)))) (fail22034)))) (fail22034))))) (defsyntax insert-abs x (let ((v22054 x)) (let ((fail22055 (lambda () (let ((fail22056 (lambda () (let ((fail22057 (lambda () (error <condition> "no matching pattern")))) (if (cons? v22054) (let ((w22058 (car v22054)) (x22059 (cdr v22054))) (let ((abs w22058)) (if (cons? x22059) (let ((w22060 (car x22059)) (x22061 (cdr x22059))) (if (cons? w22060) (let ((w22062 (car w22060)) (x22063 (cdr w22060))) (let ((n w22062)) (let ((nn x22063)) (if (list? nn) (if (null? x22061) (progn (append (quasiquote ((unquote n) (unquote abs))) nn)) (fail22057)) (fail22057))))) (fail22057))) (fail22057)))) (fail22057)))))) (if (cons? v22054) (let ((w22068 (car v22054)) (x22069 (cdr v22054))) (let ((abs w22068)) (if (cons? x22069) (let ((w22070 (car x22069)) (x22071 (cdr x22069))) (if (cons? w22070) (let ((w22072 (car w22070)) (x22073 (cdr w22070))) (let ((x w22072)) (if (null? x22073) (if (null? x22071) (progn (quasiquote ((unquote x)))) (fail22056)) (fail22056)))) (fail22056))) (fail22056)))) (fail22056)))))) (if (cons? v22054) (let ((w22074 (car v22054)) (x22075 (cdr v22054))) (let ((abs w22074)) (if (cons? x22075) (let ((w22076 (car x22075)) (x22077 (cdr x22075))) (if (cons? w22076) (let ((w22078 (car w22076)) (x22079 (cdr w22076))) (if (binary= w22078 (quote progn)) (let ((l x22079)) (if (null? x22077) (progn (quasiquote ((quote progn) (unquote-splicing l)))) (fail22055))) (fail22055))) (fail22055))) (fail22055)))) (fail22055))))) (defsyntax recur x (let ((v22080 x)) (let ((fail22081 (lambda () (error <condition> "no matching pattern")))) (if (cons? v22080) (let ((w22082 (car v22080)) (x22083 (cdr v22080))) (let ((n w22082)) (if (cons? x22083) (let ((w22084 (car x22083)) (x22085 (cdr x22083))) (letfuns ((loop (ls22094 p-ls22091 p-ls22088) (if (null? ls22094) (progn (let ((i (reverse p-ls22091)) (a (reverse p-ls22088))) (let ((code x22085)) (if (list? code) (progn (quasiquote (letfuns (((unquote n) (unquote a) (unquote-splicing code))) ((unquote n) (unquote-splicing i))))) (fail22081))))) (if (cons? ls22094) (progn (let ((w22095 (car ls22094))) (if (cons? w22095) (let ((w22100 (car w22095)) (x22101 (cdr w22095))) (let ((a w22100)) (if (cons? x22101) (let ((w22102 (car x22101)) (x22103 (cdr x22101))) (let ((i w22102)) (if (null? x22103) (loop (cdr ls22094) (cons i p-ls22091) (cons a p-ls22088)) (fail22081)))) (fail22081)))) (fail22081)))) (if else (progn (fail22081)) (cond)))))) (loop w22084 (quote ()) (quote ())))) (fail22081)))) (fail22081))))) (defsyntax match-two x (let ((v22104 x)) (let ((fail22105 (lambda () (let ((fail22106 (lambda () (let ((fail22107 (lambda () (let ((fail22108 (lambda () (let ((fail22109 (lambda () (let ((fail22110 (lambda () (let ((fail22111 (lambda () (let ((fail22112 (lambda () (let ((fail22113 (lambda () (let ((fail22114 (lambda () (let ((fail22115 (lambda () (let ((fail22116 (lambda () (let ((fail22117 (lambda () (let ((fail22118 (lambda () (let ((fail22119 (lambda () (let ((fail22120 (lambda () (let ((fail22121 (lambda () (let ((fail22122 (lambda () (let ((fail22123 (lambda () (let ((fail22124 (lambda () (let ((fail22125 (lambda () (let ((fail22126 (lambda () (let ((fail22127 (lambda () (let ((fail22128 (lambda () (let ((fail22129 (lambda () (error <condition> "no matching pattern")))) (if (cons? v22104) (let ((w22130 (car v22104)) (x22131 (cdr v22104))) (if (cons? w22130) (let ((w22132 (car w22130)) (x22133 (cdr w22130))) (let ((abs w22132)) (if (cons? x22133) (let ((w22134 (car x22133)) (x22135 (cdr x22133))) (let ((phd w22134)) (if (null? x22135) (if (cons? x22131) (let ((w22136 (car x22131)) (x22137 (cdr x22131))) (let ((v w22136)) (if (cons? x22137) (let ((w22138 (car x22137)) (x22139 (cdr x22137))) (let ((p w22138)) (if (cons? x22139) (let ((w22140 (car x22139)) (x22141 (cdr x22139))) (let ((g+s w22140)) (if (cons? x22141) (let ((w22142 (car x22141)) (x22143 (cdr x22141))) (let ((sk w22142)) (if (cons? x22143) (let ((w22144 (car x22143)) (x22145 (cdr x22143))) (let ((fk w22144)) (if (cons? x22145) (let ((w22146 (car x22145)) (x22147 (cdr x22145))) (let ((i w22146)) (if (null? x22147) (progn (quasiquote (match-abstract () (unquote abs) (unquote phd) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail22129)))) (fail22129)))) (fail22129)))) (fail22129)))) (fail22129)))) (fail22129)))) (fail22129)) (fail22129)))) (fail22129)))) (fail22129))) (fail22129)))))) (if (cons? v22104) (let ((w22148 (car v22104)) (x22149 (cdr v22104))) (let ((abs w22148)) (if (cons? x22149) (let ((w22150 (car x22149)) (x22151 (cdr x22149))) (let ((v w22150)) (if (cons? x22151) (let ((w22152 (car x22151)) (x22153 (cdr x22151))) (if (cons? w22152) (let ((w22154 (car w22152)) (x22155 (cdr w22152))) (let ((p w22154)) (if (cons? x22155) (let ((w22156 (car x22155)) (x22157 (cdr x22155))) (if (binary= w22156 (quote ___)) (let ((r x22157)) (if (cons? x22153) (let ((w22158 (car x22153)) (x22159 (cdr x22153))) (let ((g+s w22158)) (if (cons? x22159) (let ((w22160 (car x22159)) (x22161 (cdr x22159))) (let ((sk w22160)) (if (cons? x22161) (let ((w22162 (car x22161)) (x22163 (cdr x22161))) (let ((fk w22162)) (if (cons? x22163) (let ((w22164 (car x22163)) (x22165 (cdr x22163))) (let ((i w22164)) (if (null? x22165) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (abs-drop (match-gen-ellipses (unquote abs) (unquote v) (unquote p) (unquote r) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i) ())))) (fail22128)))) (fail22128)))) (fail22128)))) (fail22128)))) (fail22128))) (fail22128))) (fail22128)))) (fail22128))) (fail22128)))) (fail22128)))) (fail22128)))))) (if (cons? v22104) (let ((w22166 (car v22104)) (x22167 (cdr v22104))) (let ((abs w22166)) (if (cons? x22167) (let ((w22168 (car x22167)) (x22169 (cdr x22167))) (let ((v w22168)) (if (cons? x22169) (let ((w22170 (car x22169)) (x22171 (cdr x22169))) (if (cons? w22170) (let ((w22172 (car w22170)) (x22173 (cdr w22170))) (if (cons? w22172) (let ((w22174 (car w22172)) (x22175 (cdr w22172))) (if (binary= w22174 (quote <>)) (if (cons? x22175) (let ((w22176 (car x22175)) (x22177 (cdr x22175))) (let ((f w22176)) (if (cons? x22177) (let ((w22178 (car x22177)) (x22179 (cdr x22177))) (let ((p w22178)) (if (null? x22179) (let ((l x22173)) (if (cons? x22171) (let ((w22180 (car x22171)) (x22181 (cdr x22171))) (let ((g+s w22180)) (if (cons? x22181) (let ((w22182 (car x22181)) (x22183 (cdr x22181))) (let ((sk w22182)) (if (cons? x22183) (let ((w22184 (car x22183)) (x22185 (cdr x22183))) (let ((fk w22184)) (if (cons? x22185) (let ((w22186 (car x22185)) (x22187 (cdr x22185))) (let ((i w22186)) (if (null? x22187) (progn (let ((res (gensym "res"))) (quasiquote (let (((unquote res) ((unquote f) (unquote v)))) (if (unquote res) (match-one (unquote abs) (car (unquote res)) (unquote p) (unquote g+s) (match-one (cdr (unquote res)) (unquote l) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))))) (fail22127)))) (fail22127)))) (fail22127)))) (fail22127)))) (fail22127))) (fail22127)))) (fail22127)))) (fail22127)) (fail22127))) (fail22127))) (fail22127))) (fail22127)))) (fail22127)))) (fail22127)))))) (if (cons? v22104) (let ((w22188 (car v22104)) (x22189 (cdr v22104))) (let ((abs w22188)) (if (cons? x22189) (let ((w22190 (car x22189)) (x22191 (cdr x22189))) (let ((v w22190)) (if (cons? x22191) (let ((w22192 (car x22191)) (x22193 (cdr x22191))) (if (cons? w22192) (let ((w22194 (car w22192)) (x22195 (cdr w22192))) (if (binary= w22194 (quote =)) (if (cons? x22195) (let ((w22196 (car x22195)) (x22197 (cdr x22195))) (let ((proc w22196)) (if (cons? x22197) (let ((w22198 (car x22197)) (x22199 (cdr x22197))) (let ((p w22198)) (if (null? x22199) (if (cons? x22193) (let ((w22200 (car x22193)) (x22201 (cdr x22193))) (let ((g+s w22200)) (let ((x x22201)) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote proc) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) () (unquote-splicing x))))))))) (fail22126)) (fail22126)))) (fail22126)))) (fail22126)) (fail22126))) (fail22126))) (fail22126)))) (fail22126)))) (fail22126)))))) (if (cons? v22104) (let ((w22202 (car v22104)) (x22203 (cdr v22104))) (let ((abs w22202)) (if (cons? x22203) (let ((w22204 (car x22203)) (x22205 (cdr x22203))) (let ((v w22204)) (if (cons? x22205) (let ((w22206 (car x22205)) (x22207 (cdr x22205))) (if (cons? w22206) (let ((w22208 (car w22206)) (x22209 (cdr w22206))) (if (binary= w22208 (quote =)) (if (cons? x22209) (let ((w22210 (car x22209)) (x22211 (cdr x22209))) (let ((g w22210)) (if (cons? x22211) (let ((w22212 (car x22211)) (x22213 (cdr x22211))) (let ((s w22212)) (if (cons? x22213) (let ((w22214 (car x22213)) (x22215 (cdr x22213))) (let ((p w22214)) (if (null? x22215) (if (cons? x22207) (let ((w22216 (car x22207)) (x22217 (cdr x22207))) (let ((g+s w22216)) (if (cons? x22217) (let ((w22218 (car x22217)) (x22219 (cdr x22217))) (let ((sk w22218)) (if (cons? x22219) (let ((w22220 (car x22219)) (x22221 (cdr x22219))) (let ((fk w22220)) (if (cons? x22221) (let ((w22222 (car x22221)) (x22223 (cdr x22221))) (let ((i w22222)) (if (null? x22223) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) ((unquote g) (unquote v)))) (match-one (unquote abs) (unquote w) (unquote p) (((unquote g) (unquote v)) ((unquote s) (unquote v))) (unquote sk) (unquote fk) (unquote i)))))) (fail22125)))) (fail22125)))) (fail22125)))) (fail22125)))) (fail22125)) (fail22125)))) (fail22125)))) (fail22125)))) (fail22125)) (fail22125))) (fail22125))) (fail22125)))) (fail22125)))) (fail22125)))))) (if (cons? v22104) (let ((w22224 (car v22104)) (x22225 (cdr v22104))) (let ((abs w22224)) (if (cons? x22225) (let ((w22226 (car x22225)) (x22227 (cdr x22225))) (let ((v w22226)) (if (cons? x22227) (let ((w22228 (car x22227)) (x22229 (cdr x22227))) (if (cons? w22228) (let ((w22230 (car w22228)) (x22231 (cdr w22228))) (if (binary= w22230 (quote =)) (if (cons? x22231) (let ((w22232 (car x22231)) (x22233 (cdr x22231))) (if (binary= w22232 0) (if (cons? x22233) (let ((w22234 (car x22233)) (x22235 (cdr x22233))) (let ((m w22234)) (if (cons? x22235) (let ((w22236 (car x22235)) (x22237 (cdr x22235))) (let ((p w22236)) (if (null? x22237) (if (cons? x22229) (let ((w22238 (car x22229)) (x22239 (cdr x22229))) (let ((g+s w22238)) (if (cons? x22239) (let ((w22240 (car x22239)) (x22241 (cdr x22239))) (let ((sk w22240)) (if (cons? x22241) (let ((w22242 (car x22241)) (x22243 (cdr x22241))) (let ((fk w22242)) (if (cons? x22243) (let ((w22244 (car x22243)) (x22245 (cdr x22243))) (let ((i w22244)) (if (null? x22245) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) (struct-ref (unquote v) (unquote m)))) (match-one (unquote abs) (unquote w) (unquote p) ((struct-ref (unquote v) (unquote m)) (struct-setq (unquote v) (unquote m))) (unquote sk) (unquote fk) (unquote i)))))) (fail22124)))) (fail22124)))) (fail22124)))) (fail22124)))) (fail22124)) (fail22124)))) (fail22124)))) (fail22124)) (fail22124))) (fail22124)) (fail22124))) (fail22124))) (fail22124)))) (fail22124)))) (fail22124)))))) (if (cons? v22104) (let ((w22246 (car v22104)) (x22247 (cdr v22104))) (let ((abs w22246)) (if (cons? x22247) (let ((w22248 (car x22247)) (x22249 (cdr x22247))) (let ((v w22248)) (if (cons? x22249) (let ((w22250 (car x22249)) (x22251 (cdr x22249))) (if (cons? w22250) (let ((w22252 (car w22250)) (x22253 (cdr w22250))) (if (binary= w22252 (quote $)) (if (cons? x22253) (let ((w22254 (car x22253)) (x22255 (cdr x22253))) (let ((nn w22254)) (let ((p x22255)) (if (list? p) (if (cons? x22251) (let ((w22260 (car x22251)) (x22261 (cdr x22251))) (let ((g+s w22260)) (if (cons? x22261) (let ((w22262 (car x22261)) (x22263 (cdr x22261))) (let ((sk w22262)) (if (cons? x22263) (let ((w22264 (car x22263)) (x22265 (cdr x22263))) (let ((fk w22264)) (if (cons? x22265) (let ((w22266 (car x22265)) (x22267 (cdr x22265))) (let ((i w22266)) (if (null? x22267) (progn (quasiquote (if ((unquote nn) (unquote v)) (match-$ (unquote abs) (and) 0 (unquote p) (unquote v) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))) (fail22123)))) (fail22123)))) (fail22123)))) (fail22123)))) (fail22123)) (fail22123))))) (fail22123)) (fail22123))) (fail22123))) (fail22123)))) (fail22123)))) (fail22123)))))) (if (cons? v22104) (let ((w22268 (car v22104)) (x22269 (cdr v22104))) (let ((abs w22268)) (if (cons? x22269) (let ((w22270 (car x22269)) (x22271 (cdr x22269))) (let ((v w22270)) (if (cons? x22271) (let ((w22272 (car x22271)) (x22273 (cdr x22271))) (if (cons? w22272) (let ((w22274 (car w22272)) (x22275 (cdr w22272))) (if (binary= w22274 (quote $)) (if (cons? x22275) (let ((w22276 (car x22275)) (x22277 (cdr x22275))) (let ((n w22276)) (if (null? x22277) (if (cons? x22273) (let ((w22278 (car x22273)) (x22279 (cdr x22273))) (let ((g-s w22278)) (if (cons? x22279) (let ((w22280 (car x22279)) (x22281 (cdr x22279))) (let ((sk w22280)) (if (cons? x22281) (let ((w22282 (car x22281)) (x22283 (cdr x22281))) (let ((fk w22282)) (if (cons? x22283) (let ((w22284 (car x22283)) (x22285 (cdr x22283))) (let ((i w22284)) (if (null? x22285) (progn (quasiquote (if ((unquote n) (unquote v)) (insert-abs (unquote abs) (unquote sk)) (insert-abs (unquote abs) (unquote fk))))) (fail22122)))) (fail22122)))) (fail22122)))) (fail22122)))) (fail22122)) (fail22122)))) (fail22122)) (fail22122))) (fail22122))) (fail22122)))) (fail22122)))) (fail22122)))))) (if (cons? v22104) (let ((w22286 (car v22104)) (x22287 (cdr v22104))) (let ((abs w22286)) (if (cons? x22287) (let ((w22288 (car x22287)) (x22289 (cdr x22287))) (let ((v w22288)) (if (cons? x22289) (let ((w22290 (car x22289)) (x22291 (cdr x22289))) (if (cons? w22290) (let ((w22292 (car w22290)) (x22293 (cdr w22290))) (if (binary= w22292 (quote ?)) (if (cons? x22293) (let ((w22294 (car x22293)) (x22295 (cdr x22293))) (let ((pred w22294)) (let ((p x22295)) (if (cons? x22291) (let ((w22296 (car x22291)) (x22297 (cdr x22291))) (let ((g+s w22296)) (if (cons? x22297) (let ((w22298 (car x22297)) (x22299 (cdr x22297))) (let ((sk w22298)) (if (cons? x22299) (let ((w22300 (car x22299)) (x22301 (cdr x22299))) (let ((fk w22300)) (if (cons? x22301) (let ((w22302 (car x22301)) (x22303 (cdr x22301))) (let ((i w22302)) (if (null? x22303) (progn (quasiquote (if ((unquote pred) (unquote v)) (match-one (unquote abs) (unquote v) (and (unquote-splicing p)) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk))))) (fail22121)))) (fail22121)))) (fail22121)))) (fail22121)))) (fail22121))))) (fail22121)) (fail22121))) (fail22121))) (fail22121)))) (fail22121)))) (fail22121)))))) (if (cons? v22104) (let ((w22304 (car v22104)) (x22305 (cdr v22104))) (let ((abs w22304)) (if (cons? x22305) (let ((w22306 (car x22305)) (x22307 (cdr x22305))) (let ((v w22306)) (if (cons? x22307) (let ((w22308 (car x22307)) (x22309 (cdr x22307))) (if (cons? w22308) (let ((w22310 (car w22308)) (x22311 (cdr w22308))) (if (binary= w22310 (quote setq)) (if (cons? x22311) (let ((w22312 (car x22311)) (x22313 (cdr x22311))) (let ((setter w22312)) (if (null? x22313) (if (cons? x22309) (let ((w22314 (car x22309)) (x22315 (cdr x22309))) (if (cons? w22314) (let ((w22316 (car w22314)) (x22317 (cdr w22314))) (let ((g w22316)) (if (cons? x22317) (let ((w22318 (car x22317)) (x22319 (cdr x22317))) (let ((s w22318)) (if (list? s) (if (null? x22319) (if (cons? x22315) (let ((w22324 (car x22315)) (x22325 (cdr x22315))) (let ((sk w22324)) (if (list? sk) (if (cons? x22325) (let ((w22330 (car x22325)) (x22331 (cdr x22325))) (let ((fk w22330)) (if (cons? x22331) (let ((w22332 (car x22331)) (x22333 (cdr x22331))) (let ((i w22332)) (if (null? x22333) (progn (let ((setter (gensym "set")) (x (gensym "x"))) (quasiquote (let (((unquote setter) (lambda ((unquote x)) ((unquote-splicing s) (unquote x))))) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))))) (fail22120)))) (fail22120)))) (fail22120)) (fail22120)))) (fail22120)) (fail22120)) (fail22120)))) (fail22120)))) (fail22120))) (fail22120)) (fail22120)))) (fail22120)) (fail22120))) (fail22120))) (fail22120)))) (fail22120)))) (fail22120)))))) (if (cons? v22104) (let ((w22334 (car v22104)) (x22335 (cdr v22104))) (let ((abs w22334)) (if (cons? x22335) (let ((w22336 (car x22335)) (x22337 (cdr x22335))) (let ((v w22336)) (if (cons? x22337) (let ((w22338 (car x22337)) (x22339 (cdr x22337))) (if (cons? w22338) (let ((w22340 (car w22338)) (x22341 (cdr w22338))) (if (binary= w22340 (quote get!)) (if (cons? x22341) (let ((w22342 (car x22341)) (x22343 (cdr x22341))) (let ((getter w22342)) (if (null? x22343) (if (cons? x22339) (let ((w22344 (car x22339)) (x22345 (cdr x22339))) (if (cons? w22344) (let ((w22346 (car w22344)) (x22347 (cdr w22344))) (let ((g w22346)) (if (cons? x22347) (let ((w22348 (car x22347)) (x22349 (cdr x22347))) (let ((s w22348)) (if (null? x22349) (if (cons? x22345) (let ((w22350 (car x22345)) (x22351 (cdr x22345))) (let ((sk w22350)) (if (list? sk) (if (cons? x22351) (let ((w22356 (car x22351)) (x22357 (cdr x22351))) (let ((fk w22356)) (if (cons? x22357) (let ((w22358 (car x22357)) (x22359 (cdr x22357))) (let ((i w22358)) (if (null? x22359) (progn (let ((getter (gensym "get"))) (quasiquote (let (((unquote getter) (lambda () (unquote g)))) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))))) (fail22119)))) (fail22119)))) (fail22119)) (fail22119)))) (fail22119)) (fail22119)))) (fail22119)))) (fail22119))) (fail22119)) (fail22119)))) (fail22119)) (fail22119))) (fail22119))) (fail22119)))) (fail22119)))) (fail22119)))))) (if (cons? v22104) (let ((w22360 (car v22104)) (x22361 (cdr v22104))) (let ((abs w22360)) (if (cons? x22361) (let ((w22362 (car x22361)) (x22363 (cdr x22361))) (let ((v w22362)) (if (cons? x22363) (let ((w22364 (car x22363)) (x22365 (cdr x22363))) (if (cons? w22364) (let ((w22366 (car w22364)) (x22367 (cdr w22364))) (if (binary= w22366 (quote not)) (if (cons? x22367) (let ((w22368 (car x22367)) (x22369 (cdr x22367))) (let ((p w22368)) (if (null? x22369) (if (cons? x22365) (let ((w22370 (car x22365)) (x22371 (cdr x22365))) (let ((g+s w22370)) (if (cons? x22371) (let ((w22372 (car x22371)) (x22373 (cdr x22371))) (let ((sk w22372)) (if (list? sk) (if (cons? x22373) (let ((w22378 (car x22373)) (x22379 (cdr x22373))) (if (cons? w22378) (let ((w22380 (car w22378)) (x22381 (cdr w22378))) (let ((fk w22380)) (let ((fkk x22381)) (if (list? fkk) (if (cons? x22379) (let ((w22386 (car x22379)) (x22387 (cdr x22379))) (let ((i w22386)) (if (null? x22387) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-drop-ids ((unquote fk) (unquote abs) (unquote-splicing fkk))) ((unquote-splicing sk) i) i))) (fail22118)))) (fail22118)) (fail22118))))) (fail22118))) (fail22118)) (fail22118)))) (fail22118)))) (fail22118)) (fail22118)))) (fail22118)) (fail22118))) (fail22118))) (fail22118)))) (fail22118)))) (fail22118)))))) (if (cons? v22104) (let ((w22388 (car v22104)) (x22389 (cdr v22104))) (let ((abs w22388)) (if (cons? x22389) (let ((w22390 (car x22389)) (x22391 (cdr x22389))) (let ((v w22390)) (if (cons? x22391) (let ((w22392 (car x22391)) (x22393 (cdr x22391))) (if (cons? w22392) (let ((w22394 (car w22392)) (x22395 (cdr w22392))) (if (binary= w22394 (quote cond)) (if (cons? x22395) (let ((w22396 (car x22395)) (x22397 (cdr x22395))) (let ((p w22396)) (let ((ps x22397)) (if (list? ps) (if (cons? x22393) (let ((w22402 (car x22393)) (x22403 (cdr x22393))) (let ((g+s w22402)) (if (cons? x22403) (let ((w22404 (car x22403)) (x22405 (cdr x22403))) (let ((sk w22404)) (if (cons? x22405) (let ((w22406 (car x22405)) (x22407 (cdr x22405))) (let ((fk w22406)) (if (cons? x22407) (let ((w22408 (car x22407)) (x22409 (cdr x22407))) (let ((i w22408)) (if (null? x22409) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (abs-drop (match-one (unquote abs) (unquote v) (cond (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i)))) (fail22117)))) (fail22117)))) (fail22117)))) (fail22117)))) (fail22117)) (fail22117))))) (fail22117)) (fail22117))) (fail22117))) (fail22117)))) (fail22117)))) (fail22117)))))) (if (cons? v22104) (let ((w22410 (car v22104)) (x22411 (cdr v22104))) (let ((abs w22410)) (if (cons? x22411) (let ((w22412 (car x22411)) (x22413 (cdr x22411))) (let ((v w22412)) (if (cons? x22413) (let ((w22414 (car x22413)) (x22415 (cdr x22413))) (if (cons? w22414) (let ((w22416 (car w22414)) (x22417 (cdr w22414))) (if (binary= w22416 (quote cond)) (if (cons? x22417) (let ((w22418 (car x22417)) (x22419 (cdr x22417))) (let ((p w22418)) (if (null? x22419) (let ((x x22415)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail22116)))) (fail22116)) (fail22116))) (fail22116))) (fail22116)))) (fail22116)))) (fail22116)))))) (if (cons? v22104) (let ((w22420 (car v22104)) (x22421 (cdr v22104))) (let ((abs w22420)) (if (cons? x22421) (let ((w22422 (car x22421)) (x22423 (cdr x22421))) (let ((v w22422)) (if (cons? x22423) (let ((w22424 (car x22423)) (x22425 (cdr x22423))) (if (cons? w22424) (let ((w22426 (car w22424)) (x22427 (cdr w22424))) (if (binary= w22426 (quote cond)) (if (null? x22427) (if (cons? x22425) (let ((w22428 (car x22425)) (x22429 (cdr x22425))) (let ((g+s w22428)) (if (cons? x22429) (let ((w22430 (car x22429)) (x22431 (cdr x22429))) (let ((sk w22430)) (if (cons? x22431) (let ((w22432 (car x22431)) (x22433 (cdr x22431))) (let ((fk w22432)) (if (cons? x22433) (let ((w22434 (car x22433)) (x22435 (cdr x22433))) (let ((i w22434)) (if (null? x22435) (progn (quasiquote (insert-abs (unquote abs) (unquote fk)))) (fail22115)))) (fail22115)))) (fail22115)))) (fail22115)))) (fail22115)) (fail22115)) (fail22115))) (fail22115))) (fail22115)))) (fail22115)))) (fail22115)))))) (if (cons? v22104) (let ((w22436 (car v22104)) (x22437 (cdr v22104))) (let ((abs w22436)) (if (cons? x22437) (let ((w22438 (car x22437)) (x22439 (cdr x22437))) (let ((v w22438)) (if (cons? x22439) (let ((w22440 (car x22439)) (x22441 (cdr x22439))) (if (cons? w22440) (let ((w22442 (car w22440)) (x22443 (cdr w22440))) (if (binary= w22442 (quote or)) (let ((p x22443)) (if (list? p) (if (cons? x22441) (let ((w22448 (car x22441)) (x22449 (cdr x22441))) (let ((g+s w22448)) (if (cons? x22449) (let ((w22450 (car x22449)) (x22451 (cdr x22449))) (let ((sk w22450)) (if (cons? x22451) (let ((w22452 (car x22451)) (x22453 (cdr x22451))) (let ((fk w22452)) (if (cons? x22453) (let ((w22454 (car x22453)) (x22455 (cdr x22453))) (let ((i w22454)) (if (null? x22455) (progn (quasiquote (match-extract-vars (unquote abs) (or (unquote-splicing p)) (abs-drop (match-gen-or (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i))) (unquote i) ()))) (fail22114)))) (fail22114)))) (fail22114)))) (fail22114)))) (fail22114)) (fail22114))) (fail22114))) (fail22114))) (fail22114)))) (fail22114)))) (fail22114)))))) (if (cons? v22104) (let ((w22456 (car v22104)) (x22457 (cdr v22104))) (let ((abs w22456)) (if (cons? x22457) (let ((w22458 (car x22457)) (x22459 (cdr x22457))) (let ((v w22458)) (if (cons? x22459) (let ((w22460 (car x22459)) (x22461 (cdr x22459))) (if (cons? w22460) (let ((w22462 (car w22460)) (x22463 (cdr w22460))) (if (binary= w22462 (quote or)) (if (cons? x22463) (let ((w22464 (car x22463)) (x22465 (cdr x22463))) (let ((p w22464)) (if (null? x22465) (let ((x x22461)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail22113)))) (fail22113)) (fail22113))) (fail22113))) (fail22113)))) (fail22113)))) (fail22113)))))) (if (cons? v22104) (let ((w22466 (car v22104)) (x22467 (cdr v22104))) (let ((abs w22466)) (if (cons? x22467) (let ((w22468 (car x22467)) (x22469 (cdr x22467))) (let ((v w22468)) (if (cons? x22469) (let ((w22470 (car x22469)) (x22471 (cdr x22469))) (if (cons? w22470) (let ((w22472 (car w22470)) (x22473 (cdr w22470))) (if (binary= w22472 (quote or)) (if (null? x22473) (if (cons? x22471) (let ((w22474 (car x22471)) (x22475 (cdr x22471))) (let ((g+s w22474)) (if (cons? x22475) (let ((w22476 (car x22475)) (x22477 (cdr x22475))) (let ((sk w22476)) (if (cons? x22477) (let ((w22478 (car x22477)) (x22479 (cdr x22477))) (let ((fk w22478)) (if (cons? x22479) (let ((w22480 (car x22479)) (x22481 (cdr x22479))) (let ((i w22480)) (if (null? x22481) (progn (quasiquote (insert-abs (unquote abs) (unquote fk)))) (fail22112)))) (fail22112)))) (fail22112)))) (fail22112)))) (fail22112)) (fail22112)) (fail22112))) (fail22112))) (fail22112)))) (fail22112)))) (fail22112)))))) (if (cons? v22104) (let ((w22482 (car v22104)) (x22483 (cdr v22104))) (let ((abs w22482)) (if (cons? x22483) (let ((w22484 (car x22483)) (x22485 (cdr x22483))) (let ((v w22484)) (if (cons? x22485) (let ((w22486 (car x22485)) (x22487 (cdr x22485))) (if (cons? w22486) (let ((w22488 (car w22486)) (x22489 (cdr w22486))) (if (binary= w22488 (quote and)) (if (cons? x22489) (let ((w22490 (car x22489)) (x22491 (cdr x22489))) (let ((p w22490)) (let ((q x22491)) (if (list? q) (if (cons? x22487) (let ((w22496 (car x22487)) (x22497 (cdr x22487))) (let ((g+s w22496)) (if (cons? x22497) (let ((w22498 (car x22497)) (x22499 (cdr x22497))) (let ((sk w22498)) (if (cons? x22499) (let ((w22500 (car x22499)) (x22501 (cdr x22499))) (let ((fk w22500)) (if (cons? x22501) (let ((w22502 (car x22501)) (x22503 (cdr x22501))) (let ((i w22502)) (if (null? x22503) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-one (unquote v) (and (unquote-splicing q)) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)))) (fail22111)))) (fail22111)))) (fail22111)))) (fail22111)))) (fail22111)) (fail22111))))) (fail22111)) (fail22111))) (fail22111))) (fail22111)))) (fail22111)))) (fail22111)))))) (if (cons? v22104) (let ((w22504 (car v22104)) (x22505 (cdr v22104))) (let ((abs w22504)) (if (cons? x22505) (let ((w22506 (car x22505)) (x22507 (cdr x22505))) (let ((v w22506)) (if (cons? x22507) (let ((w22508 (car x22507)) (x22509 (cdr x22507))) (if (cons? w22508) (let ((w22510 (car w22508)) (x22511 (cdr w22508))) (if (binary= w22510 (quote and)) (if (null? x22511) (if (cons? x22509) (let ((w22512 (car x22509)) (x22513 (cdr x22509))) (let ((g+s w22512)) (if (cons? x22513) (let ((w22514 (car x22513)) (x22515 (cdr x22513))) (let ((sk w22514)) (if (list? sk) (if (cons? x22515) (let ((w22520 (car x22515)) (x22521 (cdr x22515))) (let ((fk w22520)) (if (cons? x22521) (let ((w22522 (car x22521)) (x22523 (cdr x22521))) (let ((i w22522)) (if (null? x22523) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail22110)))) (fail22110)))) (fail22110)) (fail22110)))) (fail22110)))) (fail22110)) (fail22110)) (fail22110))) (fail22110))) (fail22110)))) (fail22110)))) (fail22110)))))) (if (cons? v22104) (let ((w22524 (car v22104)) (x22525 (cdr v22104))) (let ((abs w22524)) (if (cons? x22525) (let ((w22526 (car x22525)) (x22527 (cdr x22525))) (let ((v w22526)) (if (cons? x22527) (let ((w22528 (car x22527)) (x22529 (cdr x22527))) (if (cons? w22528) (let ((w22530 (car w22528)) (x22531 (cdr w22528))) (if (binary= w22530 (quote quasiquote)) (if (cons? x22531) (let ((w22532 (car x22531)) (x22533 (cdr x22531))) (let ((p w22532)) (if (null? x22533) (let ((x x22529)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail22109)))) (fail22109)) (fail22109))) (fail22109))) (fail22109)))) (fail22109)))) (fail22109)))))) (if (cons? v22104) (let ((w22534 (car v22104)) (x22535 (cdr v22104))) (let ((a w22534)) (if (cons? w22534) (let ((w22536 (car w22534)) (x22537 (cdr w22534))) (let ((abs w22536)) (if (cons? x22537) (let ((w22538 (car x22537)) (x22539 (cdr x22537))) (if (cons? w22538) (let ((w22540 (car w22538)) (x22541 (cdr w22538))) (if (cons? w22540) (let ((w22542 (car w22540)) (x22543 (cdr w22540))) (let ((ccar w22542)) (if (cons? x22543) (let ((w22544 (car x22543)) (x22545 (cdr x22543))) (let ((ccdr w22544)) (if (cons? x22545) (let ((w22546 (car x22545)) (x22547 (cdr x22545))) (let ((pcons? w22546)) (if (cons? x22547) (let ((w22548 (car x22547)) (x22549 (cdr x22547))) (let ((qnull? w22548)) (if (cons? x22549) (let ((w22550 (car x22549)) (x22551 (cdr x22549))) (let ((qbinary= w22550)) (if (null? x22551) (if (cons? x22541) (let ((w22552 (car x22541)) (x22553 (cdr x22541))) (let ((rr w22552)) (if (null? x22553) (if (null? x22539) (if (cons? x22535) (let ((w22554 (car x22535)) (x22555 (cdr x22535))) (let ((v w22554)) (if (cons? x22555) (let ((w22556 (car x22555)) (x22557 (cdr x22555))) (if (cons? w22556) (let ((w22558 (car w22556)) (x22559 (cdr w22556))) (if (cons? w22558) (let ((w22560 (car w22558)) (x22561 (cdr w22558))) (if (binary= w22560 (quote unquote-splicing)) (if (cons? x22561) (let ((w22562 (car x22561)) (x22563 (cdr x22561))) (let ((p w22562)) (if (null? x22563) (let ((ps x22559)) (if (cons? x22557) (let ((w22564 (car x22557)) (x22565 (cdr x22557))) (let ((g+s w22564)) (if (cons? x22565) (let ((w22566 (car x22565)) (x22567 (cdr x22565))) (let ((sk w22566)) (if (cons? x22567) (let ((w22568 (car x22567)) (x22569 (cdr x22567))) (let ((fk w22568)) (if (cons? x22569) (let ((w22570 (car x22569)) (x22571 (cdr x22569))) (let ((i w22570)) (if (null? x22571) (progn (let ((loop (gensym "loop")) (vv (gensym "v")) (pp (gensym "p"))) (quasiquote (recur (unquote loop) (((unquote vv) (unquote v)) ((unquote pp) (unquote p))) (if (cons? (unquote pp)) (if (and ((unquote pcons?) (unquote vv)) ((unquote qbinary=) ((unquote ccar) (unquote vv)) (car (unquote pp)))) ((unquote loop) ((unquote ccdr) (unquote vv)) (cdr (unquote pp))) (insert-abs (unquote a) (unquote fk))) (match-one (unquote a) (unquote vv) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))))) (fail22108)))) (fail22108)))) (fail22108)))) (fail22108)))) (fail22108))) (fail22108)))) (fail22108)) (fail22108))) (fail22108))) (fail22108))) (fail22108)))) (fail22108)) (fail22108)) (fail22108)))) (fail22108)) (fail22108)))) (fail22108)))) (fail22108)))) (fail22108)))) (fail22108)))) (fail22108))) (fail22108))) (fail22108)))) (fail22108)))) (fail22108)))))) (if (cons? v22104) (let ((w22572 (car v22104)) (x22573 (cdr v22104))) (let ((a w22572)) (if (cons? w22572) (let ((w22574 (car w22572)) (x22575 (cdr w22572))) (let ((qabs w22574)) (if (cons? x22575) (let ((w22576 (car x22575)) (x22577 (cdr x22575))) (if (cons? w22576) (let ((w22578 (car w22576)) (x22579 (cdr w22576))) (if (cons? w22578) (let ((w22580 (car w22578)) (x22581 (cdr w22578))) (let ((qcar w22580)) (if (cons? x22581) (let ((w22582 (car x22581)) (x22583 (cdr x22581))) (let ((qcdr w22582)) (if (cons? x22583) (let ((w22584 (car x22583)) (x22585 (cdr x22583))) (let ((qcons? w22584)) (if (cons? x22585) (let ((w22586 (car x22585)) (x22587 (cdr x22585))) (let ((qnull? w22586)) (if (cons? x22587) (let ((w22588 (car x22587)) (x22589 (cdr x22587))) (let ((qbinary= w22588)) (if (null? x22589) (if (cons? x22579) (let ((w22590 (car x22579)) (x22591 (cdr x22579))) (let ((pp w22590)) (if (null? x22591) (if (null? x22577) (if (cons? x22573) (let ((w22592 (car x22573)) (x22593 (cdr x22573))) (let ((v w22592)) (if (cons? x22593) (let ((w22594 (car x22593)) (x22595 (cdr x22593))) (if (cons? w22594) (let ((w22596 (car w22594)) (x22597 (cdr w22594))) (if (binary= w22596 (quote unquote)) (if (cons? x22597) (let ((w22598 (car x22597)) (x22599 (cdr x22597))) (let ((p w22598)) (if (null? x22599) (if (cons? x22595) (let ((w22600 (car x22595)) (x22601 (cdr x22595))) (let ((g+s w22600)) (if (cons? x22601) (let ((w22602 (car x22601)) (x22603 (cdr x22601))) (let ((sk w22602)) (if (list? sk) (if (cons? x22603) (let ((w22608 (car x22603)) (x22609 (cdr x22603))) (let ((fk w22608)) (if (cons? x22609) (let ((w22610 (car x22609)) (x22611 (cdr x22609))) (let ((i w22610)) (if (null? x22611) (progn (quasiquote (if ((unquote qbinary=) (unquote v) (unquote p)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail22107)))) (fail22107)))) (fail22107)) (fail22107)))) (fail22107)))) (fail22107)) (fail22107)))) (fail22107)) (fail22107))) (fail22107))) (fail22107)))) (fail22107)) (fail22107)) (fail22107)))) (fail22107)) (fail22107)))) (fail22107)))) (fail22107)))) (fail22107)))) (fail22107)))) (fail22107))) (fail22107))) (fail22107)))) (fail22107)))) (fail22107)))))) (if (cons? v22104) (let ((w22612 (car v22104)) (x22613 (cdr v22104))) (let ((a w22612)) (if (cons? w22612) (let ((w22614 (car w22612)) (x22615 (cdr w22612))) (let ((qabs w22614)) (if (cons? x22615) (let ((w22616 (car x22615)) (x22617 (cdr x22615))) (if (cons? w22616) (let ((w22618 (car w22616)) (x22619 (cdr w22616))) (if (cons? w22618) (let ((w22620 (car w22618)) (x22621 (cdr w22618))) (let ((qcar w22620)) (if (cons? x22621) (let ((w22622 (car x22621)) (x22623 (cdr x22621))) (let ((qcdr w22622)) (if (cons? x22623) (let ((w22624 (car x22623)) (x22625 (cdr x22623))) (let ((qcons? w22624)) (if (cons? x22625) (let ((w22626 (car x22625)) (x22627 (cdr x22625))) (let ((qnull? w22626)) (if (cons? x22627) (let ((w22628 (car x22627)) (x22629 (cdr x22627))) (let ((qbinary= w22628)) (if (null? x22629) (if (cons? x22619) (let ((w22630 (car x22619)) (x22631 (cdr x22619))) (let ((pp w22630)) (if (null? x22631) (if (null? x22617) (if (cons? x22613) (let ((w22632 (car x22613)) (x22633 (cdr x22613))) (let ((v w22632)) (if (cons? x22633) (let ((w22634 (car x22633)) (x22635 (cdr x22633))) (if (cons? w22634) (let ((w22636 (car w22634)) (x22637 (cdr w22634))) (if (binary= w22636 (quote quote)) (if (cons? x22637) (let ((w22638 (car x22637)) (x22639 (cdr x22637))) (let ((p w22638)) (if (null? x22639) (if (cons? x22635) (let ((w22640 (car x22635)) (x22641 (cdr x22635))) (let ((g+s w22640)) (if (cons? x22641) (let ((w22642 (car x22641)) (x22643 (cdr x22641))) (let ((sk w22642)) (if (list? sk) (if (cons? x22643) (let ((w22648 (car x22643)) (x22649 (cdr x22643))) (let ((fk w22648)) (if (cons? x22649) (let ((w22650 (car x22649)) (x22651 (cdr x22649))) (let ((i w22650)) (if (null? x22651) (progn (quasiquote (if ((unquote qbinary=) (unquote v) (quote (unquote p))) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail22106)))) (fail22106)))) (fail22106)) (fail22106)))) (fail22106)))) (fail22106)) (fail22106)))) (fail22106)) (fail22106))) (fail22106))) (fail22106)))) (fail22106)) (fail22106)) (fail22106)))) (fail22106)) (fail22106)))) (fail22106)))) (fail22106)))) (fail22106)))) (fail22106)))) (fail22106))) (fail22106))) (fail22106)))) (fail22106)))) (fail22106)))))) (if (cons? v22104) (let ((w22652 (car v22104)) (x22653 (cdr v22104))) (let ((a w22652)) (if (cons? w22652) (let ((w22654 (car w22652)) (x22655 (cdr w22652))) (let ((qabs w22654)) (if (cons? x22655) (let ((w22656 (car x22655)) (x22657 (cdr x22655))) (if (cons? w22656) (let ((w22658 (car w22656)) (x22659 (cdr w22656))) (if (cons? w22658) (let ((w22660 (car w22658)) (x22661 (cdr w22658))) (let ((qcar w22660)) (if (cons? x22661) (let ((w22662 (car x22661)) (x22663 (cdr x22661))) (let ((qcdr w22662)) (if (cons? x22663) (let ((w22664 (car x22663)) (x22665 (cdr x22663))) (let ((qcons? w22664)) (if (cons? x22665) (let ((w22666 (car x22665)) (x22667 (cdr x22665))) (let ((qnull? w22666)) (if (cons? x22667) (let ((w22668 (car x22667)) (x22669 (cdr x22667))) (let ((qbinary= w22668)) (if (null? x22669) (if (cons? x22659) (let ((w22670 (car x22659)) (x22671 (cdr x22659))) (let ((pp w22670)) (if (null? x22671) (if (null? x22657) (if (cons? x22653) (let ((w22672 (car x22653)) (x22673 (cdr x22653))) (let ((v w22672)) (if (cons? x22673) (let ((w22674 (car x22673)) (x22675 (cdr x22673))) (if (null? w22674) (if (cons? x22675) (let ((w22676 (car x22675)) (x22677 (cdr x22675))) (let ((g+s w22676)) (if (cons? x22677) (let ((w22678 (car x22677)) (x22679 (cdr x22677))) (let ((sk w22678)) (if (list? sk) (if (cons? x22679) (let ((w22684 (car x22679)) (x22685 (cdr x22679))) (let ((fk w22684)) (if (cons? x22685) (let ((w22686 (car x22685)) (x22687 (cdr x22685))) (let ((i w22686)) (if (null? x22687) (progn (quasiquote (if ((unquote qnull?) (unquote v)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote a) (unquote fk))))) (fail22105)))) (fail22105)))) (fail22105)) (fail22105)))) (fail22105)))) (fail22105)) (fail22105))) (fail22105)))) (fail22105)) (fail22105)) (fail22105)))) (fail22105)) (fail22105)))) (fail22105)))) (fail22105)))) (fail22105)))) (fail22105)))) (fail22105))) (fail22105))) (fail22105)))) (fail22105)))) (fail22105))))) (defsyntax match-gen-or x (let ((v22688 x)) (let ((fail22689 (lambda () (error <condition> "no matching pattern")))) (if (cons? v22688) (let ((w22690 (car v22688)) (x22691 (cdr v22688))) (let ((abs w22690)) (if (cons? x22691) (let ((w22692 (car x22691)) (x22693 (cdr x22691))) (let ((v w22692)) (if (cons? x22693) (let ((w22694 (car x22693)) (x22695 (cdr x22693))) (let ((p w22694)) (if (cons? x22695) (let ((w22696 (car x22695)) (x22697 (cdr x22695))) (let ((g+s w22696)) (if (cons? x22697) (let ((w22698 (car x22697)) (x22699 (cdr x22697))) (let ((sk w22698)) (if (list? sk) (if (cons? x22699) (let ((w22704 (car x22699)) (x22705 (cdr x22699))) (let ((fk w22704)) (if (cons? x22705) (let ((w22706 (car x22705)) (x22707 (cdr x22705))) (let ((i w22706)) (if (list? i) (if (cons? x22707) (let ((w22712 (car x22707)) (x22713 (cdr x22707))) (letfuns ((loop (ls22722 p-ls22719 p-ls22716) (if (null? ls22722) (progn (let ((id-ls (reverse p-ls22719)) (id (reverse p-ls22716))) (if (null? x22713) (progn (let ((sk2 (gensym "sk2"))) (quasiquote (let (((unquote sk2) (lambda (unquote id) (insert-abs (unquote abs) ((unquote-splicing sk) ((unquote-splicing i) (unquote-splicing id))))))) (match-gen-or-step (unquote abs) (unquote v) (unquote p) (unquote g+s) (match-drop-ids ((unquote sk2) (unquote-splicing id))) (unquote fk) i))))) (fail22689)))) (if (cons? ls22722) (progn (let ((w22723 (car ls22722))) (if (cons? w22723) (let ((w22724 (car w22723)) (x22725 (cdr w22723))) (let ((id w22724)) (if (cons? x22725) (let ((w22726 (car x22725)) (x22727 (cdr x22725))) (let ((id-ls w22726)) (if (null? x22727) (loop (cdr ls22722) (cons id-ls p-ls22719) (cons id p-ls22716)) (fail22689)))) (fail22689)))) (fail22689)))) (if else (progn (fail22689)) (cond)))))) (loop w22712 (quote ()) (quote ())))) (fail22689)) (fail22689)))) (fail22689)))) (fail22689)) (fail22689)))) (fail22689)))) (fail22689)))) (fail22689)))) (fail22689)))) (fail22689))))) (defsyntax match-gen-or-step x (let ((v22728 x)) (let ((fail22729 (lambda () (let ((fail22730 (lambda () (let ((fail22731 (lambda () (error <condition> "no matching pattern")))) (if (cons? v22728) (let ((w22732 (car v22728)) (x22733 (cdr v22728))) (let ((abs w22732)) (if (cons? x22733) (let ((w22734 (car x22733)) (x22735 (cdr x22733))) (let ((v w22734)) (if (cons? x22735) (let ((w22736 (car x22735)) (x22737 (cdr x22735))) (if (cons? w22736) (let ((w22738 (car w22736)) (x22739 (cdr w22736))) (let ((p w22738)) (let ((q x22739)) (if (cons? x22737) (let ((w22740 (car x22737)) (x22741 (cdr x22737))) (let ((g+s w22740)) (if (cons? x22741) (let ((w22742 (car x22741)) (x22743 (cdr x22741))) (let ((sk w22742)) (if (cons? x22743) (let ((w22744 (car x22743)) (x22745 (cdr x22743))) (let ((fk w22744)) (if (cons? x22745) (let ((w22746 (car x22745)) (x22747 (cdr x22745))) (let ((i w22746)) (if (null? x22747) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (match-gen-or-step (unquote v) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i)))) (fail22731)))) (fail22731)))) (fail22731)))) (fail22731)))) (fail22731))))) (fail22731))) (fail22731)))) (fail22731)))) (fail22731)))))) (if (cons? v22728) (let ((w22748 (car v22728)) (x22749 (cdr v22728))) (let ((abs w22748)) (if (cons? x22749) (let ((w22750 (car x22749)) (x22751 (cdr x22749))) (let ((v w22750)) (if (cons? x22751) (let ((w22752 (car x22751)) (x22753 (cdr x22751))) (if (cons? w22752) (let ((w22754 (car w22752)) (x22755 (cdr w22752))) (let ((p w22754)) (if (null? x22755) (let ((x x22753)) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote-splicing x))))) (fail22730)))) (fail22730))) (fail22730)))) (fail22730)))) (fail22730)))))) (if (cons? v22728) (let ((w22756 (car v22728)) (x22757 (cdr v22728))) (let ((abs w22756)) (if (cons? x22757) (let ((w22758 (car x22757)) (x22759 (cdr x22757))) (let ((v w22758)) (if (cons? x22759) (let ((w22760 (car x22759)) (x22761 (cdr x22759))) (if (null? w22760) (if (cons? x22761) (let ((w22762 (car x22761)) (x22763 (cdr x22761))) (let ((g+s w22762)) (if (cons? x22763) (let ((w22764 (car x22763)) (x22765 (cdr x22763))) (let ((sk w22764)) (if (cons? x22765) (let ((w22766 (car x22765)) (x22767 (cdr x22765))) (let ((fk w22766)) (let ((x x22767)) (progn (quasiquote (insert-abs (unquote abs) (unquote fk))))))) (fail22729)))) (fail22729)))) (fail22729)) (fail22729))) (fail22729)))) (fail22729)))) (fail22729))))) (defsyntax match-three x (let ((v22768 x)) (let ((fail22769 (lambda () (let ((fail22770 (lambda () (let ((fail22771 (lambda () (let ((fail22772 (lambda () (let ((fail22773 (lambda () (let ((fail22774 (lambda () (let ((fail22775 (lambda () (error <condition> "no matching pattern")))) (if (cons? v22768) (let ((w22776 (car v22768)) (x22777 (cdr v22768))) (let ((a w22776)) (if (cons? w22776) (let ((w22778 (car w22776)) (x22779 (cdr w22776))) (let ((qabs w22778)) (if (cons? x22779) (let ((w22780 (car x22779)) (x22781 (cdr x22779))) (if (cons? w22780) (let ((w22782 (car w22780)) (x22783 (cdr w22780))) (if (cons? w22782) (let ((w22784 (car w22782)) (x22785 (cdr w22782))) (let ((qcar w22784)) (if (cons? x22785) (let ((w22786 (car x22785)) (x22787 (cdr x22785))) (let ((qcdr w22786)) (if (cons? x22787) (let ((w22788 (car x22787)) (x22789 (cdr x22787))) (let ((qcons? w22788)) (if (cons? x22789) (let ((w22790 (car x22789)) (x22791 (cdr x22789))) (let ((qnull? w22790)) (if (cons? x22791) (let ((w22792 (car x22791)) (x22793 (cdr x22791))) (let ((binary= w22792)) (if (null? x22793) (if (cons? x22783) (let ((w22794 (car x22783)) (x22795 (cdr x22783))) (let ((qpp w22794)) (if (null? x22795) (if (null? x22781) (if (cons? x22777) (let ((w22796 (car x22777)) (x22797 (cdr x22777))) (let ((v w22796)) (if (cons? x22797) (let ((w22798 (car x22797)) (x22799 (cdr x22797))) (let ((x w22798)) (if (cons? x22799) (let ((w22800 (car x22799)) (x22801 (cdr x22799))) (let ((g+s w22800)) (if (cons? x22801) (let ((w22802 (car x22801)) (x22803 (cdr x22801))) (let ((sk w22802)) (if (list? sk) (if (cons? x22803) (let ((w22808 (car x22803)) (x22809 (cdr x22803))) (let ((fk w22808)) (if (cons? x22809) (let ((w22810 (car x22809)) (x22811 (cdr x22809))) (let ((id w22810)) (if (list? id) (if (null? x22811) (progn (if (if (symbol? x) (null? (member x id)) ()) (quasiquote (let (((unquote x) (unquote v))) (insert-abs (unquote a) ((unquote-splicing sk) ((unquote-splicing id) (unquote x)))))) (quasiquote (if ((unquote binary=) (unquote v) (unquote x)) (insert-abs (unquote a) ((unquote-splicing sk) (unquote id))) (insert-abs (unquote a) (unquote fk)))))) (fail22775)) (fail22775)))) (fail22775)))) (fail22775)) (fail22775)))) (fail22775)))) (fail22775)))) (fail22775)))) (fail22775)) (fail22775)) (fail22775)))) (fail22775)) (fail22775)))) (fail22775)))) (fail22775)))) (fail22775)))) (fail22775)))) (fail22775))) (fail22775))) (fail22775)))) (fail22775)))) (fail22775)))))) (if (cons? v22768) (let ((w22816 (car v22768)) (x22817 (cdr v22768))) (let ((abs w22816)) (if (cons? x22817) (let ((w22818 (car x22817)) (x22819 (cdr x22817))) (let ((v w22818)) (if (cons? x22819) (let ((w22820 (car x22819)) (x22821 (cdr x22819))) (if (binary= w22820 (quote _)) (if (cons? x22821) (let ((w22822 (car x22821)) (x22823 (cdr x22821))) (let ((g+s w22822)) (if (cons? x22823) (let ((w22824 (car x22823)) (x22825 (cdr x22823))) (let ((sk w22824)) (if (list? sk) (if (cons? x22825) (let ((w22830 (car x22825)) (x22831 (cdr x22825))) (let ((fk w22830)) (if (cons? x22831) (let ((w22832 (car x22831)) (x22833 (cdr x22831))) (let ((i w22832)) (if (null? x22833) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail22774)))) (fail22774)))) (fail22774)) (fail22774)))) (fail22774)))) (fail22774)) (fail22774))) (fail22774)))) (fail22774)))) (fail22774)))))) (if (cons? v22768) (let ((w22834 (car v22768)) (x22835 (cdr v22768))) (let ((abs w22834)) (if (cons? x22835) (let ((w22836 (car x22835)) (x22837 (cdr x22835))) (let ((v w22836)) (if (cons? x22837) (let ((w22838 (car x22837)) (x22839 (cdr x22837))) (if (vector? w22838) (let ((len22840 (vector-size w22838))) (if (>= len22840 0) (letfuns ((loop22843 (j22844 p-ls22842) (if (>= j22844 len22840) (let ((p (reverse p-ls22842))) (if (cons? x22839) (let ((w22846 (car x22839)) (x22847 (cdr x22839))) (let ((g+s w22846)) (let ((x x22847)) (progn (quasiquote (match-vector (unquote abs) (unquote v) 0 () (unquote p) (unquote-splicing x))))))) (fail22773))) (let ((w22845 (vector-ref w22838 j22844))) (let ((p w22845)) (loop22843 (+ j22844 1) (cons p p-ls22842))))))) (loop22843 0 (quote ()))) (fail22773))) (fail22773))) (fail22773)))) (fail22773)))) (fail22773)))))) (if (cons? v22768) (let ((w22848 (car v22768)) (x22849 (cdr v22768))) (let ((a w22848)) (if (cons? w22848) (let ((w22850 (car w22848)) (x22851 (cdr w22848))) (let ((abs w22850)) (if (cons? x22851) (let ((w22852 (car x22851)) (x22853 (cdr x22851))) (if (cons? w22852) (let ((w22854 (car w22852)) (x22855 (cdr w22852))) (if (cons? w22854) (let ((w22856 (car w22854)) (x22857 (cdr w22854))) (let ((qcar w22856)) (if (cons? x22857) (let ((w22858 (car x22857)) (x22859 (cdr x22857))) (let ((qcdr w22858)) (if (cons? x22859) (let ((w22860 (car x22859)) (x22861 (cdr x22859))) (let ((qcons? w22860)) (if (cons? x22861) (let ((w22862 (car x22861)) (x22863 (cdr x22861))) (let ((qnull? w22862)) (if (cons? x22863) (let ((w22864 (car x22863)) (x22865 (cdr x22863))) (let ((qbinary= w22864)) (if (null? x22865) (if (cons? x22855) (let ((w22866 (car x22855)) (x22867 (cdr x22855))) (let ((pp w22866)) (if (null? x22867) (if (null? x22853) (if (cons? x22849) (let ((w22868 (car x22849)) (x22869 (cdr x22849))) (let ((v w22868)) (if (cons? x22869) (let ((w22870 (car x22869)) (x22871 (cdr x22869))) (if (cons? w22870) (let ((w22872 (car w22870)) (x22873 (cdr w22870))) (let ((p w22872)) (let ((q x22873)) (if (cons? x22871) (let ((w22874 (car x22871)) (x22875 (cdr x22871))) (let ((g+s w22874)) (if (cons? x22875) (let ((w22876 (car x22875)) (x22877 (cdr x22875))) (let ((sk w22876)) (if (cons? x22877) (let ((w22878 (car x22877)) (x22879 (cdr x22877))) (let ((fk w22878)) (if (cons? x22879) (let ((w22880 (car x22879)) (x22881 (cdr x22879))) (let ((i w22880)) (if (null? x22881) (progn (let ((w (gensym "w")) (x (gensym "x"))) (quasiquote (if ((unquote qcons?) (unquote v)) (let (((unquote w) ((unquote qcar) (unquote v))) ((unquote x) ((unquote qcdr) (unquote v)))) (match-one (unquote a) (unquote w) (unquote p) (((unquote qcar) (unquote v)) (set-car! (unquote v))) (match-one (unquote x) (unquote q) (((unquote qcdr) (unquote v)) (set-cdr! (unquote v))) (unquote sk) (unquote fk)) (unquote fk) (unquote i))) (insert-abs (unquote a) (unquote fk)))))) (fail22772)))) (fail22772)))) (fail22772)))) (fail22772)))) (fail22772))))) (fail22772))) (fail22772)))) (fail22772)) (fail22772)) (fail22772)))) (fail22772)) (fail22772)))) (fail22772)))) (fail22772)))) (fail22772)))) (fail22772)))) (fail22772))) (fail22772))) (fail22772)))) (fail22772)))) (fail22772)))))) (if (cons? v22768) (let ((w22882 (car v22768)) (x22883 (cdr v22768))) (let ((abs w22882)) (if (cons? x22883) (let ((w22884 (car x22883)) (x22885 (cdr x22883))) (let ((v w22884)) (if (cons? x22885) (let ((w22886 (car x22885)) (x22887 (cdr x22885))) (if (cons? w22886) (let ((w22888 (car w22886)) (x22889 (cdr w22886))) (let ((p w22888)) (if (cons? x22889) (let ((w22890 (car x22889)) (x22891 (cdr x22889))) (if (binary= w22890 (quote ***)) (let ((q x22891)) (if (cons? x22887) (let ((w22892 (car x22887)) (x22893 (cdr x22887))) (let ((g+s w22892)) (if (cons? x22893) (let ((w22894 (car x22893)) (x22895 (cdr x22893))) (let ((sk w22894)) (if (cons? x22895) (let ((w22896 (car x22895)) (x22897 (cdr x22895))) (let ((fk w22896)) (if (cons? x22897) (let ((w22898 (car x22897)) (x22899 (cdr x22897))) (let ((i w22898)) (if (null? x22899) (progn (quasiquote (error <condition> (fmt "invalid use of *** ~a" ((unquote p) *** (unquote-splicing q)))))) (fail22771)))) (fail22771)))) (fail22771)))) (fail22771)))) (fail22771))) (fail22771))) (fail22771)))) (fail22771))) (fail22771)))) (fail22771)))) (fail22771)))))) (if (cons? v22768) (let ((w22900 (car v22768)) (x22901 (cdr v22768))) (let ((abs w22900)) (if (cons? x22901) (let ((w22902 (car x22901)) (x22903 (cdr x22901))) (let ((v w22902)) (if (cons? x22903) (let ((w22904 (car x22903)) (x22905 (cdr x22903))) (if (cons? w22904) (let ((w22906 (car w22904)) (x22907 (cdr w22904))) (let ((p w22906)) (if (cons? x22907) (let ((w22908 (car x22907)) (x22909 (cdr x22907))) (if (binary= w22908 (quote ***)) (if (cons? x22909) (let ((w22910 (car x22909)) (x22911 (cdr x22909))) (let ((q w22910)) (if (null? x22911) (if (cons? x22905) (let ((w22912 (car x22905)) (x22913 (cdr x22905))) (let ((g+s w22912)) (if (cons? x22913) (let ((w22914 (car x22913)) (x22915 (cdr x22913))) (let ((sk w22914)) (if (cons? x22915) (let ((w22916 (car x22915)) (x22917 (cdr x22915))) (let ((fk w22916)) (if (cons? x22917) (let ((w22918 (car x22917)) (x22919 (cdr x22917))) (let ((i w22918)) (if (null? x22919) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-gen-search (unquote v) (unquote p) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (unquote i) ()))) (fail22770)))) (fail22770)))) (fail22770)))) (fail22770)))) (fail22770)) (fail22770)))) (fail22770)) (fail22770))) (fail22770)))) (fail22770))) (fail22770)))) (fail22770)))) (fail22770)))))) (if (cons? v22768) (let ((w22920 (car v22768)) (x22921 (cdr v22768))) (let ((a w22920)) (if (cons? w22920) (let ((w22922 (car w22920)) (x22923 (cdr w22920))) (let ((abs w22922)) (if (cons? x22923) (let ((w22924 (car x22923)) (x22925 (cdr x22923))) (if (cons? w22924) (let ((w22926 (car w22924)) (x22927 (cdr w22924))) (if (cons? w22926) (let ((w22928 (car w22926)) (x22929 (cdr w22926))) (let ((qcar w22928)) (if (cons? x22929) (let ((w22930 (car x22929)) (x22931 (cdr x22929))) (let ((qcdr w22930)) (if (cons? x22931) (let ((w22932 (car x22931)) (x22933 (cdr x22931))) (let ((qcons? w22932)) (if (cons? x22933) (let ((w22934 (car x22933)) (x22935 (cdr x22933))) (let ((qnull? w22934)) (if (null? x22935) (if (cons? x22927) (let ((w22936 (car x22927)) (x22937 (cdr x22927))) (let ((rr w22936)) (if (null? x22937) (if (null? x22925) (if (cons? x22921) (let ((w22938 (car x22921)) (x22939 (cdr x22921))) (let ((v w22938)) (if (cons? x22939) (let ((w22940 (car x22939)) (x22941 (cdr x22939))) (if (cons? w22940) (let ((w22942 (car w22940)) (x22943 (cdr w22940))) (let ((p w22942)) (if (null? x22943) (if (cons? x22941) (let ((w22944 (car x22941)) (x22945 (cdr x22941))) (let ((g+s w22944)) (if (cons? x22945) (let ((w22946 (car x22945)) (x22947 (cdr x22945))) (let ((sk w22946)) (if (cons? x22947) (let ((w22948 (car x22947)) (x22949 (cdr x22947))) (let ((fk w22948)) (if (cons? x22949) (let ((w22950 (car x22949)) (x22951 (cdr x22949))) (let ((i w22950)) (if (null? x22951) (progn (let ((w (gensym "w"))) (quasiquote (if (and ((unquote qcons?) (unquote v)) ((unquote qnull?) ((unquote qcdr) (unquote v)))) (let (((unquote w) ((unquote qcar) (unquote v)))) (match-one (unquote a) (unquote w) (unquote p) (((unquote qcar) (unquote v)) (set-car! (unquote v))) (unquote sk) (unquote fk) (unquote i))) (unquote fk))))) (fail22769)))) (fail22769)))) (fail22769)))) (fail22769)))) (fail22769)) (fail22769)))) (fail22769))) (fail22769)))) (fail22769)) (fail22769)) (fail22769)))) (fail22769)) (fail22769)))) (fail22769)))) (fail22769)))) (fail22769)))) (fail22769))) (fail22769))) (fail22769)))) (fail22769)))) (fail22769))))) (defsyntax match-vector x (let ((v22952 x)) (let ((fail22953 (lambda () (let ((fail22954 (lambda () (let ((fail22955 (lambda () (error <condition> "no matching pattern")))) (let ((x v22952)) (progn (quasiquote (match-vector-two (unquote-splicing x))))))))) (if (cons? v22952) (let ((w22956 (car v22952)) (x22957 (cdr v22952))) (let ((abs w22956)) (if (cons? x22957) (let ((w22958 (car x22957)) (x22959 (cdr x22957))) (let ((v w22958)) (if (cons? x22959) (let ((w22960 (car x22959)) (x22961 (cdr x22959))) (let ((n w22960)) (if (cons? x22961) (let ((w22962 (car x22961)) (x22963 (cdr x22961))) (let ((pats w22962)) (if (cons? x22963) (let ((w22964 (car x22963)) (x22965 (cdr x22963))) (if (cons? w22964) (let ((w22966 (car w22964)) (x22967 (cdr w22964))) (let ((p w22966)) (if (cons? x22967) (let ((w22968 (car x22967)) (x22969 (cdr x22967))) (if (binary= w22968 (quote ___)) (if (null? x22969) (if (cons? x22965) (let ((w22970 (car x22965)) (x22971 (cdr x22965))) (let ((sk w22970)) (if (cons? x22971) (let ((w22972 (car x22971)) (x22973 (cdr x22971))) (let ((fk w22972)) (if (cons? x22973) (let ((w22974 (car x22973)) (x22975 (cdr x22973))) (let ((i w22974)) (if (null? x22975) (progn (quasiquote (match-gen-vector-ellipses (unquote abs) (unquote v) (unquote n) (unquote pats) (unquote p) (unquote sk) (unquote fk) (unquote i)))) (fail22954)))) (fail22954)))) (fail22954)))) (fail22954)) (fail22954)) (fail22954))) (fail22954)))) (fail22954))) (fail22954)))) (fail22954)))) (fail22954)))) (fail22954)))) (fail22954)))))) (if (cons? v22952) (let ((w22976 (car v22952)) (x22977 (cdr v22952))) (let ((abs w22976)) (if (cons? x22977) (let ((w22978 (car x22977)) (x22979 (cdr x22977))) (let ((v w22978)) (if (cons? x22979) (let ((w22980 (car x22979)) (x22981 (cdr x22979))) (let ((n w22980)) (if (cons? x22981) (let ((w22982 (car x22981)) (x22983 (cdr x22981))) (let ((pats w22982)) (if (cons? x22983) (let ((w22984 (car x22983)) (x22985 (cdr x22983))) (if (cons? w22984) (let ((w22986 (car w22984)) (x22987 (cdr w22984))) (let ((p w22986)) (if (cons? x22987) (let ((w22988 (car x22987)) (x22989 (cdr x22987))) (let ((q w22988)) (if (null? x22989) (let ((x x22985)) (progn (quasiquote (match-check-ellipse (unquote q) (match-gen-vector-ellipses (unquote abs) (unquote v) (unquote n) (unquote pats) (unquote p) (unquote-splicing x)) (match-vector-two (unquote abs) (unquote v) (unquote n) (unquote pats) ((unquote p) (unquote q)) (unquote-splicing x)))))) (fail22953)))) (fail22953)))) (fail22953))) (fail22953)))) (fail22953)))) (fail22953)))) (fail22953)))) (fail22953))))) (defsyntax match-vector-two x (let ((v22990 x)) (let ((fail22991 (lambda () (let ((fail22992 (lambda () (error <condition> "no matching pattern")))) (if (cons? v22990) (let ((w22993 (car v22990)) (x22994 (cdr v22990))) (let ((abs w22993)) (if (cons? x22994) (let ((w22995 (car x22994)) (x22996 (cdr x22994))) (let ((v w22995)) (if (cons? x22996) (let ((w22997 (car x22996)) (x22998 (cdr x22996))) (let ((n w22997)) (if (cons? x22998) (let ((w22999 (car x22998)) (x23000 (cdr x22998))) (let ((pats w22999)) (if (list? pats) (if (cons? x23000) (let ((w23005 (car x23000)) (x23006 (cdr x23000))) (if (cons? w23005) (let ((w23007 (car w23005)) (x23008 (cdr w23005))) (let ((p w23007)) (let ((q x23008)) (let ((x x23006)) (progn (quasiquote (match-vector (unquote abs) (unquote v) (+ (unquote n) 1) ((unquote-splicing pats) ((unquote p) (unquote n))) (unquote q) (unquote-splicing x)))))))) (fail22992))) (fail22992)) (fail22992)))) (fail22992)))) (fail22992)))) (fail22992)))) (fail22992)))))) (if (cons? v22990) (let ((w23009 (car v22990)) (x23010 (cdr v22990))) (let ((abs w23009)) (if (cons? x23010) (let ((w23011 (car x23010)) (x23012 (cdr x23010))) (let ((v w23011)) (if (cons? x23012) (let ((w23013 (car x23012)) (x23014 (cdr x23012))) (let ((n w23013)) (if (cons? x23014) (let ((w23015 (car x23014)) (x23016 (cdr x23014))) (let ((a w23015)) (letfuns ((loop (ls23025 p-ls23022 p-ls23019) (if (null? ls23025) (progn (let ((index (reverse p-ls23022)) (pat (reverse p-ls23019))) (if (cons? x23016) (let ((w23027 (car x23016)) (x23028 (cdr x23016))) (if (null? w23027) (if (cons? x23028) (let ((w23029 (car x23028)) (x23030 (cdr x23028))) (let ((sk w23029)) (if (cons? x23030) (let ((w23031 (car x23030)) (x23032 (cdr x23030))) (let ((fk w23031)) (if (cons? x23032) (let ((w23033 (car x23032)) (x23034 (cdr x23032))) (let ((i w23033)) (if (null? x23034) (progn (let ((len (gensym "len"))) (quasiquote (if (vector? (unquote v)) (let (((unquote len) (vector-size (unquote v)))) (if (= (unquote len) (unquote n)) (match-vector-step (unquote abs) (unquote v) (unquote a) (unquote sk) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk)))) (insert-abs (unquote abs) (unquote fk)))))) (fail22991)))) (fail22991)))) (fail22991)))) (fail22991)) (fail22991))) (fail22991)))) (if (cons? ls23025) (progn (let ((w23026 (car ls23025))) (if (cons? w23026) (let ((w23035 (car w23026)) (x23036 (cdr w23026))) (let ((pat w23035)) (if (cons? x23036) (let ((w23037 (car x23036)) (x23038 (cdr x23036))) (let ((index w23037)) (if (null? x23038) (loop (cdr ls23025) (cons index p-ls23022) (cons pat p-ls23019)) (fail22991)))) (fail22991)))) (fail22991)))) (if else (progn (fail22991)) (cond)))))) (loop w23015 (quote ()) (quote ()))))) (fail22991)))) (fail22991)))) (fail22991)))) (fail22991))))) (defsyntax match-vector-step x (let ((v23039 x)) (let ((fail23040 (lambda () (let ((fail23041 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23039) (let ((w23042 (car v23039)) (x23043 (cdr v23039))) (let ((abs w23042)) (if (cons? x23043) (let ((w23044 (car x23043)) (x23045 (cdr x23043))) (let ((v w23044)) (if (cons? x23045) (let ((w23046 (car x23045)) (x23047 (cdr x23045))) (if (cons? w23046) (let ((w23048 (car w23046)) (x23049 (cdr w23046))) (if (cons? w23048) (let ((w23050 (car w23048)) (x23051 (cdr w23048))) (let ((pat w23050)) (if (cons? x23051) (let ((w23052 (car x23051)) (x23053 (cdr x23051))) (let ((index w23052)) (if (null? x23053) (let ((rest x23049)) (if (cons? x23047) (let ((w23054 (car x23047)) (x23055 (cdr x23047))) (let ((sk w23054)) (if (cons? x23055) (let ((w23056 (car x23055)) (x23057 (cdr x23055))) (let ((fk w23056)) (if (cons? x23057) (let ((w23058 (car x23057)) (x23059 (cdr x23057))) (let ((i w23058)) (if (null? x23059) (progn (let ((w (gensym "w"))) (quasiquote (let (((unquote w) (vector-ref (unquote v) (unquote index)))) (match-one (unquote abs) (unquote w) (unquote pat) ((vector-ref (unquote v) (unquote index)) ((setter vector-ref) (unquote v) (unquote index))) (match-vector-step (unquote v) (unquote rest) (unquote sk) (unquote fk)) (unquote fk) (unquote i)))))) (fail23041)))) (fail23041)))) (fail23041)))) (fail23041))) (fail23041)))) (fail23041)))) (fail23041))) (fail23041))) (fail23041)))) (fail23041)))) (fail23041)))))) (if (cons? v23039) (let ((w23060 (car v23039)) (x23061 (cdr v23039))) (let ((abs w23060)) (if (cons? x23061) (let ((w23062 (car x23061)) (x23063 (cdr x23061))) (let ((v w23062)) (if (cons? x23063) (let ((w23064 (car x23063)) (x23065 (cdr x23063))) (if (null? w23064) (if (cons? x23065) (let ((w23066 (car x23065)) (x23067 (cdr x23065))) (let ((sk w23066)) (if (list? sk) (if (cons? x23067) (let ((w23072 (car x23067)) (x23073 (cdr x23067))) (let ((fk w23072)) (if (cons? x23073) (let ((w23074 (car x23073)) (x23075 (cdr x23073))) (let ((i w23074)) (if (null? x23075) (progn (quasiquote (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) (fail23040)))) (fail23040)))) (fail23040)) (fail23040)))) (fail23040)) (fail23040))) (fail23040)))) (fail23040)))) (fail23040))))) (defsyntax match-gen-vector-ellipses x (let ((v23076 x)) (let ((fail23077 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23076) (let ((w23078 (car v23076)) (x23079 (cdr v23076))) (let ((abs w23078)) (if (cons? x23079) (let ((w23080 (car x23079)) (x23081 (cdr x23079))) (let ((v w23080)) (if (cons? x23081) (let ((w23082 (car x23081)) (x23083 (cdr x23081))) (let ((n w23082)) (if (cons? x23083) (let ((w23084 (car x23083)) (x23085 (cdr x23083))) (let ((a w23084)) (letfuns ((loop (ls23094 p-ls23091 p-ls23088) (if (null? ls23094) (progn (let ((index (reverse p-ls23091)) (pat (reverse p-ls23088))) (if (cons? x23085) (let ((w23096 (car x23085)) (x23097 (cdr x23085))) (let ((p w23096)) (if (cons? x23097) (let ((w23098 (car x23097)) (x23099 (cdr x23097))) (let ((sk w23098)) (if (cons? x23099) (let ((w23100 (car x23099)) (x23101 (cdr x23099))) (let ((fk w23100)) (if (cons? x23101) (let ((w23102 (car x23101)) (x23103 (cdr x23101))) (let ((i w23102)) (if (null? x23103) (progn (let ((len (gensym "len"))) (quasiquote (if (vector? (unquote v)) (let (((unquote len) (vector-size (unquote v)))) (if (>= (unquote len) (unquote n)) (match-vector-step (unquote abs) (unquote v) (unquote a) (match-vector-tail (unquote v) (unquote p) (unquote n) (unquote len) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote abs) (unquote fk)))) (insert-abs (unquote abs) (unquote fk)))))) (fail23077)))) (fail23077)))) (fail23077)))) (fail23077)))) (fail23077)))) (if (cons? ls23094) (progn (let ((w23095 (car ls23094))) (if (cons? w23095) (let ((w23104 (car w23095)) (x23105 (cdr w23095))) (let ((pat w23104)) (if (cons? x23105) (let ((w23106 (car x23105)) (x23107 (cdr x23105))) (let ((index w23106)) (if (null? x23107) (loop (cdr ls23094) (cons index p-ls23091) (cons pat p-ls23088)) (fail23077)))) (fail23077)))) (fail23077)))) (if else (progn (fail23077)) (cond)))))) (loop w23084 (quote ()) (quote ()))))) (fail23077)))) (fail23077)))) (fail23077)))) (fail23077))))) (defsyntax match-vector-tail x (let ((v23108 x)) (let ((fail23109 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23108) (let ((w23110 (car v23108)) (x23111 (cdr v23108))) (let ((abs w23110)) (if (cons? x23111) (let ((w23112 (car x23111)) (x23113 (cdr x23111))) (let ((v w23112)) (if (cons? x23113) (let ((w23114 (car x23113)) (x23115 (cdr x23113))) (let ((p w23114)) (if (cons? x23115) (let ((w23116 (car x23115)) (x23117 (cdr x23115))) (let ((n w23116)) (if (cons? x23117) (let ((w23118 (car x23117)) (x23119 (cdr x23117))) (let ((len w23118)) (if (cons? x23119) (let ((w23120 (car x23119)) (x23121 (cdr x23119))) (let ((sk w23120)) (if (cons? x23121) (let ((w23122 (car x23121)) (x23123 (cdr x23121))) (let ((fk w23122)) (if (cons? x23123) (let ((w23124 (car x23123)) (x23125 (cdr x23123))) (let ((i w23124)) (if (null? x23125) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-vector-tail-two (unquote v) (unquote p) (unquote n) (unquote len) (unquote sk) (unquote fk) (unquote i)) (unquote i) ()))) (fail23109)))) (fail23109)))) (fail23109)))) (fail23109)))) (fail23109)))) (fail23109)))) (fail23109)))) (fail23109)))) (fail23109))))) (defsyntax match-vector-tail-two x (let ((v23126 x)) (let ((fail23127 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23126) (let ((w23128 (car v23126)) (x23129 (cdr v23126))) (let ((abs w23128)) (if (cons? x23129) (let ((w23130 (car x23129)) (x23131 (cdr x23129))) (let ((v w23130)) (if (cons? x23131) (let ((w23132 (car x23131)) (x23133 (cdr x23131))) (let ((p w23132)) (if (cons? x23133) (let ((w23134 (car x23133)) (x23135 (cdr x23133))) (let ((n w23134)) (if (cons? x23135) (let ((w23136 (car x23135)) (x23137 (cdr x23135))) (let ((len w23136)) (if (cons? x23137) (let ((w23138 (car x23137)) (x23139 (cdr x23137))) (let ((sk w23138)) (if (list? sk) (if (cons? x23139) (let ((w23144 (car x23139)) (x23145 (cdr x23139))) (let ((fk w23144)) (if (cons? x23145) (let ((w23146 (car x23145)) (x23147 (cdr x23145))) (let ((i w23146)) (if (cons? x23147) (let ((w23148 (car x23147)) (x23149 (cdr x23147))) (letfuns ((loop (ls23158 p-ls23155 p-ls23152) (if (null? ls23158) (progn (let ((id-ls (reverse p-ls23155)) (id (reverse p-ls23152))) (if (null? x23149) (progn (let ((loop (gensym "loop")) (j (gensym "j")) (w (gensym "w"))) (quasiquote (recur (unquote loop) (((unquote j) (unquote n)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (if (>= (unquote j) (unquote len)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i)))) (let (((unquote w) (vector-ref (unquote v) (unquote j)))) (match-one (unquote abs) (unquote w) (unquote p) ((vector-ref (unquote v) (unquote j)) ((setter vector-ref) (unquote v) (unquote j))) (match-drop-ids ((unquote loop) (+ (unquote j) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))))))) (fail23127)))) (if (cons? ls23158) (progn (let ((w23159 (car ls23158))) (if (cons? w23159) (let ((w23160 (car w23159)) (x23161 (cdr w23159))) (let ((id w23160)) (if (cons? x23161) (let ((w23162 (car x23161)) (x23163 (cdr x23161))) (let ((id-ls w23162)) (if (null? x23163) (loop (cdr ls23158) (cons id-ls p-ls23155) (cons id p-ls23152)) (fail23127)))) (fail23127)))) (fail23127)))) (if else (progn (fail23127)) (cond)))))) (loop w23148 (quote ()) (quote ())))) (fail23127)))) (fail23127)))) (fail23127)) (fail23127)))) (fail23127)))) (fail23127)))) (fail23127)))) (fail23127)))) (fail23127)))) (fail23127))))) (defsyntax match-abstract x (let ((v23164 x)) (let ((fail23165 (lambda () (let ((fail23166 (lambda () (let ((fail23167 (lambda () (let ((fail23168 (lambda () (let ((fail23169 (lambda () (let ((fail23170 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23164) (let ((w23171 (car v23164)) (x23172 (cdr v23164))) (if (null? w23171) (if (cons? x23172) (let ((w23173 (car x23172)) (x23174 (cdr x23172))) (let ((abs w23173)) (if (cons? x23174) (let ((w23175 (car x23174)) (x23176 (cdr x23174))) (let ((phd w23175)) (if (cons? x23176) (let ((w23177 (car x23176)) (x23178 (cdr x23176))) (let ((y w23177)) (if (cons? x23178) (let ((w23179 (car x23178)) (x23180 (cdr x23178))) (let ((p w23179)) (if (cons? x23180) (let ((w23181 (car x23180)) (x23182 (cdr x23180))) (let ((g+s w23181)) (if (cons? x23182) (let ((w23183 (car x23182)) (x23184 (cdr x23182))) (let ((sk w23183)) (if (cons? x23184) (let ((w23185 (car x23184)) (x23186 (cdr x23184))) (let ((fk w23185)) (if (cons? x23186) (let ((w23187 (car x23186)) (x23188 (cdr x23186))) (let ((i w23187)) (if (null? x23188) (progn (quasiquote (match-phd () (unquote phd) (unquote abs) (unquote y) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail23170)))) (fail23170)))) (fail23170)))) (fail23170)))) (fail23170)))) (fail23170)))) (fail23170)))) (fail23170)))) (fail23170)) (fail23170))) (fail23170)))))) (if (cons? v23164) (let ((w23189 (car v23164)) (x23190 (cdr v23164))) (let ((x w23189)) (if (list? x) (if (cons? x23190) (let ((w23195 (car x23190)) (x23196 (cdr x23190))) (if (cons? w23195) (let ((w23197 (car w23195)) (x23198 (cdr w23195))) (if (cons? w23197) (let ((w23199 (car w23197)) (x23200 (cdr w23197))) (let ((a w23199)) (if (cons? x23200) (let ((w23201 (car x23200)) (x23202 (cdr x23200))) (let ((aa w23201)) (let ((as x23202)) (if (list? as) (let ((us x23198)) (if (list? us) (if (cons? x23196) (let ((w23211 (car x23196)) (x23212 (cdr x23196))) (let ((phd w23211)) (if (cons? x23212) (let ((w23213 (car x23212)) (x23214 (cdr x23212))) (let ((y w23213)) (if (cons? x23214) (let ((w23215 (car x23214)) (x23216 (cdr x23214))) (if (cons? w23215) (let ((w23217 (car w23215)) (x23218 (cdr w23215))) (let ((b w23217)) (let ((ps x23218)) (if (cons? x23216) (let ((w23219 (car x23216)) (x23220 (cdr x23216))) (let ((g+s w23219)) (if (cons? x23220) (let ((w23221 (car x23220)) (x23222 (cdr x23220))) (let ((sk w23221)) (if (cons? x23222) (let ((w23223 (car x23222)) (x23224 (cdr x23222))) (let ((fk w23223)) (if (cons? x23224) (let ((w23225 (car x23224)) (x23226 (cdr x23224))) (let ((i w23225)) (if (null? x23226) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) ((unquote a) (unquote y)))) (if (unquote ret) (let (((unquote aa) (car (unquote ret)))) (match-one ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) ((unquote aa) (unquote-splicing i)))) (insert-abs ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a) (unquote aa) (unquote-splicing as)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) ((unquote b) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail23169)))) (fail23169)))) (fail23169)))) (fail23169)))) (fail23169))))) (fail23169))) (fail23169)))) (fail23169)))) (fail23169)) (fail23169))) (fail23169))))) (fail23169)))) (fail23169))) (fail23169))) (fail23169)) (fail23169)))) (fail23169)))))) (if (cons? v23164) (let ((w23227 (car v23164)) (x23228 (cdr v23164))) (let ((x w23227)) (if (list? x) (if (cons? x23228) (let ((w23233 (car x23228)) (x23234 (cdr x23228))) (if (cons? w23233) (let ((w23235 (car w23233)) (x23236 (cdr w23233))) (if (cons? w23235) (let ((w23237 (car w23235)) (x23238 (cdr w23235))) (let ((a w23237)) (if (null? x23238) (let ((us x23236)) (if (list? us) (if (cons? x23234) (let ((w23243 (car x23234)) (x23244 (cdr x23234))) (let ((phd w23243)) (if (cons? x23244) (let ((w23245 (car x23244)) (x23246 (cdr x23244))) (let ((y w23245)) (if (cons? x23246) (let ((w23247 (car x23246)) (x23248 (cdr x23246))) (if (cons? w23247) (let ((w23249 (car w23247)) (x23250 (cdr w23247))) (let ((b w23249)) (let ((ps x23250)) (if (cons? x23248) (let ((w23251 (car x23248)) (x23252 (cdr x23248))) (let ((g+s w23251)) (if (cons? x23252) (let ((w23253 (car x23252)) (x23254 (cdr x23252))) (let ((sk w23253)) (if (cons? x23254) (let ((w23255 (car x23254)) (x23256 (cdr x23254))) (let ((fk w23255)) (if (cons? x23256) (let ((w23257 (car x23256)) (x23258 (cdr x23256))) (let ((i w23257)) (if (null? x23258) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) ((unquote a) (unquote y)))) (if (unquote ret) (match-one ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) ((unquote b) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail23168)))) (fail23168)))) (fail23168)))) (fail23168)))) (fail23168))))) (fail23168))) (fail23168)))) (fail23168)))) (fail23168)) (fail23168))) (fail23168)))) (fail23168))) (fail23168))) (fail23168)) (fail23168)))) (fail23168)))))) (if (cons? v23164) (let ((w23259 (car v23164)) (x23260 (cdr v23164))) (let ((x w23259)) (if (list? x) (if (cons? x23260) (let ((w23265 (car x23260)) (x23266 (cdr x23260))) (if (cons? w23265) (let ((w23267 (car w23265)) (x23268 (cdr w23265))) (if (cons? w23267) (let ((w23269 (car w23267)) (x23270 (cdr w23267))) (let ((a w23269)) (if (cons? x23270) (let ((w23271 (car x23270)) (x23272 (cdr x23270))) (let ((aa w23271)) (let ((as x23272)) (if (list? as) (let ((us x23268)) (if (list? us) (if (cons? x23266) (let ((w23281 (car x23266)) (x23282 (cdr x23266))) (let ((phd w23281)) (if (cons? x23282) (let ((w23283 (car x23282)) (x23284 (cdr x23282))) (let ((y w23283)) (if (cons? x23284) (let ((w23285 (car x23284)) (x23286 (cdr x23284))) (if (cons? w23285) (let ((w23287 (car w23285)) (x23288 (cdr w23285))) (if (cons? w23287) (let ((w23289 (car w23287)) (x23290 (cdr w23287))) (let ((b w23289)) (let ((bs x23290)) (if (list? bs) (let ((ps x23288)) (if (cons? x23286) (let ((w23295 (car x23286)) (x23296 (cdr x23286))) (let ((g+s w23295)) (if (cons? x23296) (let ((w23297 (car x23296)) (x23298 (cdr x23296))) (let ((sk w23297)) (if (cons? x23298) (let ((w23299 (car x23298)) (x23300 (cdr x23298))) (let ((fk w23299)) (if (cons? x23300) (let ((w23301 (car x23300)) (x23302 (cdr x23300))) (let ((i w23301)) (if (null? x23302) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) (((unquote a) (unquote-splicing bs)) (unquote y)))) (if (unquote ret) (let (((unquote aa) (car (unquote ret)))) (match-one ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) ((unquote aa) (unquote-splicing i)))) (insert-abs ((((unquote a) (unquote-splicing as)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a) (unquote aa) (unquote-splicing as)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) (((unquote b) (unquote-splicing bs)) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail23167)))) (fail23167)))) (fail23167)))) (fail23167)))) (fail23167))) (fail23167))))) (fail23167))) (fail23167))) (fail23167)))) (fail23167)))) (fail23167)) (fail23167))) (fail23167))))) (fail23167)))) (fail23167))) (fail23167))) (fail23167)) (fail23167)))) (fail23167)))))) (if (cons? v23164) (let ((w23303 (car v23164)) (x23304 (cdr v23164))) (let ((x w23303)) (if (list? x) (if (cons? x23304) (let ((w23309 (car x23304)) (x23310 (cdr x23304))) (if (cons? w23309) (let ((w23311 (car w23309)) (x23312 (cdr w23309))) (if (cons? w23311) (let ((w23313 (car w23311)) (x23314 (cdr w23311))) (let ((a w23313)) (if (null? x23314) (let ((us x23312)) (if (list? us) (if (cons? x23310) (let ((w23319 (car x23310)) (x23320 (cdr x23310))) (let ((phd w23319)) (if (cons? x23320) (let ((w23321 (car x23320)) (x23322 (cdr x23320))) (let ((y w23321)) (if (cons? x23322) (let ((w23323 (car x23322)) (x23324 (cdr x23322))) (if (cons? w23323) (let ((w23325 (car w23323)) (x23326 (cdr w23323))) (if (cons? w23325) (let ((w23327 (car w23325)) (x23328 (cdr w23325))) (let ((b w23327)) (let ((bs x23328)) (if (list? bs) (let ((ps x23326)) (if (cons? x23324) (let ((w23333 (car x23324)) (x23334 (cdr x23324))) (let ((g+s w23333)) (if (cons? x23334) (let ((w23335 (car x23334)) (x23336 (cdr x23334))) (let ((sk w23335)) (if (cons? x23336) (let ((w23337 (car x23336)) (x23338 (cdr x23336))) (let ((fk w23337)) (if (cons? x23338) (let ((w23339 (car x23338)) (x23340 (cdr x23338))) (let ((i w23339)) (if (null? x23340) (progn (if (eq a b) (let ((ret (gensym "ret"))) (quasiquote (let (((unquote ret) (((unquote a) (unquote-splicing bs)) (unquote y)))) (if (unquote ret) (match-one ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (cdr (unquote ret)) (unquote ps) (unquote g+s) (unquote sk) (unquote fk) (unquote i)) (insert-abs ((((unquote a)) (unquote-splicing us) (unquote-splicing x)) (unquote phd)) (unquote fk)))))) (quasiquote (match-abstract (((unquote a)) (unquote-splicing x)) (unquote us) (unquote phd) (unquote y) (((unquote b) (unquote-splicing bs)) (unquote-splicing ps)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail23166)))) (fail23166)))) (fail23166)))) (fail23166)))) (fail23166))) (fail23166))))) (fail23166))) (fail23166))) (fail23166)))) (fail23166)))) (fail23166)) (fail23166))) (fail23166)))) (fail23166))) (fail23166))) (fail23166)) (fail23166)))) (fail23166)))))) (if (cons? v23164) (let ((w23341 (car v23164)) (x23342 (cdr v23164))) (let ((x w23341)) (if (cons? x23342) (let ((w23343 (car x23342)) (x23344 (cdr x23342))) (if (null? w23343) (if (cons? x23344) (let ((w23345 (car x23344)) (x23346 (cdr x23344))) (let ((phd w23345)) (if (cons? x23346) (let ((w23347 (car x23346)) (x23348 (cdr x23346))) (let ((y w23347)) (if (cons? x23348) (let ((w23349 (car x23348)) (x23350 (cdr x23348))) (let ((p w23349)) (let ((l x23350)) (progn (quasiquote (match-phd () (unquote phd) (unquote x) (unquote y) (unquote p) (unquote-splicing l))))))) (fail23165)))) (fail23165)))) (fail23165)) (fail23165))) (fail23165)))) (fail23165))))) (defsyntax match-phd x (let ((v23351 x)) (let ((fail23352 (lambda () (let ((fail23353 (lambda () (let ((fail23354 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23351) (let ((w23355 (car v23351)) (x23356 (cdr v23351))) (if (null? w23355) (if (cons? x23356) (let ((w23357 (car x23356)) (x23358 (cdr x23356))) (let ((phd w23357)) (if (cons? x23358) (let ((w23359 (car x23358)) (x23360 (cdr x23358))) (let ((abs w23359)) (let ((l x23360)) (progn (quasiquote (match-three ((unquote abs) (unquote phd)) (unquote-splicing l))))))) (fail23354)))) (fail23354)) (fail23354))) (fail23354)))))) (if (cons? v23351) (let ((w23361 (car v23351)) (x23362 (cdr v23351))) (let ((phd w23361)) (if (list? phd) (if (cons? x23362) (let ((w23367 (car x23362)) (x23368 (cdr x23362))) (if (cons? w23367) (let ((w23369 (car w23367)) (x23370 (cdr w23367))) (let ((c w23369)) (if (cons? x23370) (let ((w23371 (car x23370)) (x23372 (cdr x23370))) (if (cons? w23371) (let ((w23373 (car w23371)) (x23374 (cdr w23371))) (if (cons? w23373) (let ((w23375 (car w23373)) (x23376 (cdr w23373))) (let ((h w23375)) (if (cons? x23376) (let ((w23377 (car x23376)) (x23378 (cdr x23376))) (let ((a w23377)) (if (null? x23378) (let ((hh x23374)) (if (list? hh) (if (null? x23372) (if (cons? x23368) (let ((w23383 (car x23368)) (x23384 (cdr x23368))) (let ((abs w23383)) (if (cons? x23384) (let ((w23385 (car x23384)) (x23386 (cdr x23384))) (let ((v w23385)) (if (cons? x23386) (let ((w23387 (car x23386)) (x23388 (cdr x23386))) (if (cons? w23387) (let ((w23389 (car w23387)) (x23390 (cdr w23387))) (let ((h2 w23389)) (let ((l x23390)) (if (cons? x23388) (let ((w23391 (car x23388)) (x23392 (cdr x23388))) (let ((g+s w23391)) (if (cons? x23392) (let ((w23393 (car x23392)) (x23394 (cdr x23392))) (let ((sk w23393)) (if (cons? x23394) (let ((w23395 (car x23394)) (x23396 (cdr x23394))) (let ((fk w23395)) (if (cons? x23396) (let ((w23397 (car x23396)) (x23398 (cdr x23396))) (let ((i w23397)) (if (null? x23398) (progn (if (eq h h2) (quasiquote (match-one ((unquote abs) ((unquote a) (((unquote h) (unquote a)) (unquote-splicing hh) (unquote-splicing phd)))) (unquote v) (unquote l) (unquote g+s) (set-phd-sk (unquote c) (unquote sk)) (set-phd-fk (unquote c) (unquote fk)) (unquote i))) (quasiquote (match-phd (((unquote h) (unquote a)) (unquote-splicing phd)) ((unquote c) (unquote hh)) (unquote abs) (unquote v) ((unquote h2) (unquote-splicing l)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))) (fail23353)))) (fail23353)))) (fail23353)))) (fail23353)))) (fail23353))))) (fail23353))) (fail23353)))) (fail23353)))) (fail23353)) (fail23353)) (fail23353))) (fail23353)))) (fail23353)))) (fail23353))) (fail23353))) (fail23353)))) (fail23353))) (fail23353)) (fail23353)))) (fail23353)))))) (if (cons? v23351) (let ((w23399 (car v23351)) (x23400 (cdr v23351))) (let ((phd w23399)) (if (cons? x23400) (let ((w23401 (car x23400)) (x23402 (cdr x23400))) (if (cons? w23401) (let ((w23403 (car w23401)) (x23404 (cdr w23401))) (let ((c w23403)) (if (cons? x23404) (let ((w23405 (car x23404)) (x23406 (cdr x23404))) (if (null? w23405) (if (null? x23406) (if (cons? x23402) (let ((w23407 (car x23402)) (x23408 (cdr x23402))) (let ((abs w23407)) (let ((l x23408)) (progn (quasiquote (match-three ((unquote abs) ((unquote c) (unquote phd))) (unquote-splicing l))))))) (fail23352)) (fail23352)) (fail23352))) (fail23352)))) (fail23352))) (fail23352)))) (fail23352))))) (defsyntax set-phd-fk x (let ((v23409 x)) (let ((fail23410 (lambda () (let ((fail23411 (lambda () (let ((fail23412 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23409) (let ((w23413 (car v23409)) (x23414 (cdr v23409))) (if (cons? w23413) (let ((w23415 (car w23413)) (x23416 (cdr w23413))) (let ((abs w23415)) (if (cons? x23416) (let ((w23417 (car x23416)) (x23418 (cdr x23416))) (if (cons? w23417) (let ((w23419 (car w23417)) (x23420 (cdr w23417))) (let ((c w23419)) (if (cons? x23420) (let ((w23421 (car x23420)) (x23422 (cdr x23420))) (let ((pp w23421)) (if (null? x23422) (if (null? x23418) (if (cons? x23414) (let ((w23423 (car x23414)) (x23424 (cdr x23414))) (let ((cc w23423)) (if (cons? x23424) (let ((w23425 (car x23424)) (x23426 (cdr x23424))) (if (cons? w23425) (let ((w23427 (car w23425)) (x23428 (cdr w23425))) (let ((fk w23427)) (let ((fkk x23428)) (if (list? fkk) (if (null? x23426) (progn (quasiquote (fk ((unquote abs) ((unquote cc) (unquote pp))) (unquote-splicing fkk)))) (fail23412)) (fail23412))))) (fail23412))) (fail23412)))) (fail23412)) (fail23412)) (fail23412)))) (fail23412)))) (fail23412))) (fail23412)))) (fail23412))) (fail23412)))))) (if (cons? v23409) (let ((w23433 (car v23409)) (x23434 (cdr v23409))) (let ((abs w23433)) (if (cons? x23434) (let ((w23435 (car x23434)) (x23436 (cdr x23434))) (let ((cc w23435)) (if (cons? x23436) (let ((w23437 (car x23436)) (x23438 (cdr x23436))) (if (cons? w23437) (let ((w23439 (car w23437)) (x23440 (cdr w23437))) (let ((fk w23439)) (if (null? x23440) (if (null? x23438) (progn (quasiquote ((unquote fk)))) (fail23411)) (fail23411)))) (fail23411))) (fail23411)))) (fail23411)))) (fail23411)))))) (if (cons? v23409) (let ((w23441 (car v23409)) (x23442 (cdr v23409))) (let ((abs w23441)) (if (cons? x23442) (let ((w23443 (car x23442)) (x23444 (cdr x23442))) (let ((cc w23443)) (if (cons? x23444) (let ((w23445 (car x23444)) (x23446 (cdr x23444))) (if (cons? w23445) (let ((w23447 (car w23445)) (x23448 (cdr w23445))) (if (binary= w23447 (quote progn)) (let ((l x23448)) (if (null? x23446) (progn (quasiquote (progn (unquote-splicing l)))) (fail23410))) (fail23410))) (fail23410))) (fail23410)))) (fail23410)))) (fail23410))))) (defsyntax set-phd-sk x (let ((v23449 x)) (let ((fail23450 (lambda () (let ((fail23451 (lambda () (let ((fail23452 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23449) (let ((w23453 (car v23449)) (x23454 (cdr v23449))) (if (cons? w23453) (let ((w23455 (car w23453)) (x23456 (cdr w23453))) (let ((abs w23455)) (if (cons? x23456) (let ((w23457 (car x23456)) (x23458 (cdr x23456))) (if (cons? w23457) (let ((w23459 (car w23457)) (x23460 (cdr w23457))) (let ((c w23459)) (if (cons? x23460) (let ((w23461 (car x23460)) (x23462 (cdr x23460))) (let ((pp w23461)) (if (null? x23462) (if (null? x23458) (if (cons? x23454) (let ((w23463 (car x23454)) (x23464 (cdr x23454))) (let ((cc w23463)) (if (cons? x23464) (let ((w23465 (car x23464)) (x23466 (cdr x23464))) (if (cons? w23465) (let ((w23467 (car w23465)) (x23468 (cdr w23465))) (let ((fk w23467)) (let ((fkk x23468)) (if (list? fkk) (let ((i x23466)) (if (list? i) (progn (quasiquote ((unquote fk) ((unquote abs) ((unquote cc) (unquote pp))) (unquote-splicing fkk) (unquote-splicing i)))) (fail23452))) (fail23452))))) (fail23452))) (fail23452)))) (fail23452)) (fail23452)) (fail23452)))) (fail23452)))) (fail23452))) (fail23452)))) (fail23452))) (fail23452)))))) (if (cons? v23449) (let ((w23477 (car v23449)) (x23478 (cdr v23449))) (let ((abs w23477)) (if (cons? x23478) (let ((w23479 (car x23478)) (x23480 (cdr x23478))) (let ((cc w23479)) (if (cons? x23480) (let ((w23481 (car x23480)) (x23482 (cdr x23480))) (if (cons? w23481) (let ((w23483 (car w23481)) (x23484 (cdr w23481))) (let ((fk w23483)) (if (null? x23484) (let ((i x23482)) (if (list? i) (progn (quasiquote ((unquote fk)))) (fail23451))) (fail23451)))) (fail23451))) (fail23451)))) (fail23451)))) (fail23451)))))) (if (cons? v23449) (let ((w23489 (car v23449)) (x23490 (cdr v23449))) (let ((abs w23489)) (if (cons? x23490) (let ((w23491 (car x23490)) (x23492 (cdr x23490))) (let ((cc w23491)) (if (cons? x23492) (let ((w23493 (car x23492)) (x23494 (cdr x23492))) (if (cons? w23493) (let ((w23495 (car w23493)) (x23496 (cdr w23493))) (if (binary= w23495 (quote progn)) (let ((l x23496)) (let ((i x23494)) (if (list? i) (progn (quasiquote (progn (unquote-splicing l)))) (fail23450)))) (fail23450))) (fail23450))) (fail23450)))) (fail23450)))) (fail23450))))) (defsyntax match-$ x (let ((v23501 x)) (let ((fail23502 (lambda () (let ((fail23503 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23501) (let ((w23504 (car v23501)) (x23505 (cdr v23501))) (if (cons? x23505) (let ((w23506 (car x23505)) (x23507 (cdr x23505))) (let ((abs w23506)) (if (cons? x23507) (let ((w23508 (car x23507)) (x23509 (cdr x23507))) (let ((newpat w23508)) (if (cons? x23509) (let ((w23510 (car x23509)) (x23511 (cdr x23509))) (let ((m w23510)) (if (cons? x23511) (let ((w23512 (car x23511)) (x23513 (cdr x23511))) (if (null? w23512) (if (cons? x23513) (let ((w23514 (car x23513)) (x23515 (cdr x23513))) (let ((v w23514)) (if (cons? x23515) (let ((w23516 (car x23515)) (x23517 (cdr x23515))) (let ((kt w23516)) (if (cons? x23517) (let ((w23518 (car x23517)) (x23519 (cdr x23517))) (let ((ke w23518)) (if (cons? x23519) (let ((w23520 (car x23519)) (x23521 (cdr x23519))) (let ((i w23520)) (if (null? x23521) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote newpat) () (unquote kt) (unquote ke) (unquote i)))) (fail23503)))) (fail23503)))) (fail23503)))) (fail23503)))) (fail23503)) (fail23503))) (fail23503)))) (fail23503)))) (fail23503)))) (fail23503))) (fail23503)))))) (if (cons? v23501) (let ((w23522 (car v23501)) (x23523 (cdr v23501))) (let ((abs w23522)) (if (cons? x23523) (let ((w23524 (car x23523)) (x23525 (cdr x23523))) (let ((a w23524)) (if (list? a) (if (cons? x23525) (let ((w23530 (car x23525)) (x23531 (cdr x23525))) (let ((m w23530)) (if (cons? x23531) (let ((w23532 (car x23531)) (x23533 (cdr x23531))) (if (cons? w23532) (let ((w23534 (car w23532)) (x23535 (cdr w23532))) (let ((p1 w23534)) (let ((p2 x23535)) (if (list? p2) (let ((v x23533)) (progn (quasiquote (match-$ (unquote abs) ((unquote-splicing a) (= 0 (unquote m) (unquote p1))) (unquote (+ m 1)) (unquote p2) (unquote-splicing v))))) (fail23502))))) (fail23502))) (fail23502)))) (fail23502)) (fail23502)))) (fail23502)))) (fail23502))))) (defsyntax match-gen-ellipses x (let ((v23540 x)) (let ((fail23541 (lambda () (let ((fail23542 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23540) (let ((w23543 (car v23540)) (x23544 (cdr v23540))) (let ((abs w23543)) (if (cons? x23544) (let ((w23545 (car x23544)) (x23546 (cdr x23544))) (let ((v w23545)) (if (cons? x23546) (let ((w23547 (car x23546)) (x23548 (cdr x23546))) (let ((p w23547)) (if (cons? x23548) (let ((w23549 (car x23548)) (x23550 (cdr x23548))) (let ((r w23549)) (if (cons? x23550) (let ((w23551 (car x23550)) (x23552 (cdr x23550))) (let ((g+s w23551)) (if (cons? x23552) (let ((w23553 (car x23552)) (x23554 (cdr x23552))) (let ((sk w23553)) (if (list? sk) (if (cons? x23554) (let ((w23559 (car x23554)) (x23560 (cdr x23554))) (let ((fk w23559)) (if (cons? x23560) (let ((w23561 (car x23560)) (x23562 (cdr x23560))) (let ((i w23561)) (if (cons? x23562) (let ((w23563 (car x23562)) (x23564 (cdr x23562))) (letfuns ((loop (ls23573 p-ls23570 p-ls23567) (if (null? ls23573) (progn (let ((id-ls (reverse p-ls23570)) (id (reverse p-ls23567))) (if (null? x23564) (progn (let ((tail-len (gensym "tail-len")) (len (gensym "len")) (n (gensym "n")) (ls (gensym "ls")) (w (gensym "w"))) (quasiquote (match-verify-no-ellipses (unquote r) (let* (((unquote tail-len) (length (quote (unquote r)))) ((unquote ls) (unquote v)) ((unquote len) (length (unquote ls)))) (if (< (unquote len) (unquote tail-len)) (unquote fk) (recur loop (((unquote ls) (unquote ls)) ((unquote n) (unquote len)) (unquote-splicing (map (lambda (id-ls) (quasiquote (id-ls (quote ())))) id-ls))) (cond ((= (unquote n) (unquote tail-len)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (match-one (unquote abs) (unquote ls) (unquote r) (() ()) (unquote sk) (unquote fk) (unquote i)))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) (set-car! (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (- (unquote n) 1) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls))))))) (unquote fk) (unquote i))))) (else (unquote fk)))))))))) (fail23542)))) (if (cons? ls23573) (progn (let ((w23574 (car ls23573))) (if (cons? w23574) (let ((w23575 (car w23574)) (x23576 (cdr w23574))) (let ((id w23575)) (if (cons? x23576) (let ((w23577 (car x23576)) (x23578 (cdr x23576))) (let ((id-ls w23577)) (if (null? x23578) (loop (cdr ls23573) (cons id-ls p-ls23570) (cons id p-ls23567)) (fail23542)))) (fail23542)))) (fail23542)))) (if else (progn (fail23542)) (cond)))))) (loop w23563 (quote ()) (quote ())))) (fail23542)))) (fail23542)))) (fail23542)) (fail23542)))) (fail23542)))) (fail23542)))) (fail23542)))) (fail23542)))) (fail23542)))) (fail23542)))))) (if (cons? v23540) (let ((w23579 (car v23540)) (x23580 (cdr v23540))) (let ((abs w23579)) (if (cons? x23580) (let ((w23581 (car x23580)) (x23582 (cdr x23580))) (let ((v w23581)) (if (cons? x23582) (let ((w23583 (car x23582)) (x23584 (cdr x23582))) (let ((p w23583)) (if (cons? x23584) (let ((w23585 (car x23584)) (x23586 (cdr x23584))) (if (null? w23585) (if (cons? x23586) (let ((w23587 (car x23586)) (x23588 (cdr x23586))) (let ((g+s w23587)) (if (cons? x23588) (let ((w23589 (car x23588)) (x23590 (cdr x23588))) (let ((sk w23589)) (if (list? sk) (if (cons? x23590) (let ((w23595 (car x23590)) (x23596 (cdr x23590))) (let ((fk w23595)) (if (cons? x23596) (let ((w23597 (car x23596)) (x23598 (cdr x23596))) (let ((i w23597)) (if (cons? x23598) (let ((w23599 (car x23598)) (x23600 (cdr x23598))) (letfuns ((loop (ls23609 p-ls23606 p-ls23603) (if (null? ls23609) (progn (let ((id-ls (reverse p-ls23606)) (id (reverse p-ls23603))) (if (null? x23600) (progn (let ((ls (gensym "ls")) (w (gensym "w"))) (quasiquote (match-check-identifier (unquote p) (let (((unquote p) (unquote v))) (if (list? (unquote p)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))) (insert-abs (unquote abs) (unquote fk)))) (recur loop (((unquote ls) (unquote v)) (unquote-splicing (map (lambda (id-ls) (quasiquote ((unquote id-ls) (quote ())))) id-ls))) (cond ((null? (unquote ls)) (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))) id id-ls)) (insert-abs (unquote abs) ((unquote-splicing sk) (unquote i))))) ((cons? (unquote ls)) (let (((unquote w) (car (unquote ls)))) (match-one (unquote abs) (unquote w) (unquote p) ((car (unquote ls)) (set-car! (unquote ls))) (match-drop-ids (loop (cdr (unquote ls)) (unquote-splicing (map (lambda (id id-ls) (quasiquote (cons (unquote id) (unquote id-ls)))) id id-ls)))) (unquote fk) (unquote i)))) (else (insert-abs (unquote abs) (unquote fk))))))))) (fail23541)))) (if (cons? ls23609) (progn (let ((w23610 (car ls23609))) (if (cons? w23610) (let ((w23611 (car w23610)) (x23612 (cdr w23610))) (let ((id w23611)) (if (cons? x23612) (let ((w23613 (car x23612)) (x23614 (cdr x23612))) (let ((id-ls w23613)) (if (null? x23614) (loop (cdr ls23609) (cons id-ls p-ls23606) (cons id p-ls23603)) (fail23541)))) (fail23541)))) (fail23541)))) (if else (progn (fail23541)) (cond)))))) (loop w23599 (quote ()) (quote ())))) (fail23541)))) (fail23541)))) (fail23541)) (fail23541)))) (fail23541)))) (fail23541)) (fail23541))) (fail23541)))) (fail23541)))) (fail23541)))) (fail23541))))) (defsyntax match-verify-no-ellipses x (let ((v23615 x)) (let ((fail23616 (lambda () (let ((fail23617 (lambda () (let ((fail23618 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23615) (let ((w23619 (car v23615)) (x23620 (cdr v23615))) (let ((x w23619)) (if (cons? x23620) (let ((w23621 (car x23620)) (x23622 (cdr x23620))) (let ((sk w23621)) (if (null? x23622) (progn (quasiquote (error <condition> (fmt "dotted tail not allowed after ellipse ~a" (unquote x))))) (fail23618)))) (fail23618)))) (fail23618)))))) (if (cons? v23615) (let ((w23623 (car v23615)) (x23624 (cdr v23615))) (if (null? w23623) (if (cons? x23624) (let ((w23625 (car x23624)) (x23626 (cdr x23624))) (let ((sk w23625)) (if (null? x23626) (progn sk) (fail23617)))) (fail23617)) (fail23617))) (fail23617)))))) (if (cons? v23615) (let ((w23627 (car v23615)) (x23628 (cdr v23615))) (if (cons? w23627) (let ((w23629 (car w23627)) (x23630 (cdr w23627))) (let ((x w23629)) (let ((y x23630)) (if (cons? x23628) (let ((w23631 (car x23628)) (x23632 (cdr x23628))) (let ((sk w23631)) (if (null? x23632) (progn (quasiquote (match-check-ellipse (unquote x) (error <condition> "multiple ellipse patterns not allowed at same level") (match-verify-no-ellipses (unquote y) (unquote sk))))) (fail23616)))) (fail23616))))) (fail23616))) (fail23616))))) (defsyntax match-drop-ids x (let ((v23633 x)) (let ((fail23634 (lambda () (let ((fail23635 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23633) (let ((w23636 (car v23633)) (x23637 (cdr v23633))) (let ((abs w23636)) (if (cons? x23637) (let ((w23638 (car x23637)) (x23639 (cdr x23637))) (let ((expr w23638)) (let ((ids x23639)) (if (list? ids) (progn expr) (fail23635))))) (fail23635)))) (fail23635)))))) (if (cons? v23633) (let ((w23644 (car v23633)) (x23645 (cdr v23633))) (let ((expr w23644)) (if (null? x23645) (progn expr) (fail23634)))) (fail23634))))) (defsyntax match-gen-search x (let ((v23646 x)) (let ((fail23647 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23646) (let ((w23648 (car v23646)) (x23649 (cdr v23646))) (let ((abs w23648)) (if (cons? x23649) (let ((w23650 (car x23649)) (x23651 (cdr x23649))) (let ((v w23650)) (if (cons? x23651) (let ((w23652 (car x23651)) (x23653 (cdr x23651))) (let ((p w23652)) (if (cons? x23653) (let ((w23654 (car x23653)) (x23655 (cdr x23653))) (let ((q w23654)) (if (cons? x23655) (let ((w23656 (car x23655)) (x23657 (cdr x23655))) (let ((g+s w23656)) (if (cons? x23657) (let ((w23658 (car x23657)) (x23659 (cdr x23657))) (let ((sk w23658)) (if (cons? x23659) (let ((w23660 (car x23659)) (x23661 (cdr x23659))) (let ((fk w23660)) (if (cons? x23661) (let ((w23662 (car x23661)) (x23663 (cdr x23661))) (let ((i w23662)) (if (cons? x23663) (let ((w23664 (car x23663)) (x23665 (cdr x23663))) (letfuns ((loop (ls23674 p-ls23671 p-ls23668) (if (null? ls23674) (progn (let ((id-ls (reverse p-ls23671)) (id (reverse p-ls23668))) (if (null? x23665) (progn (let ((try (gensym "try")) (next (gensym "next")) (ls (gensym "ls")) (w (gensym "w")) (u (gensym "u")) (fail (gensym "fail"))) (quasiquote (letfuns (((unquote try) ((unquote w) (unquote fail) (unquote-splicing id-ls)) (match-one (unquote abs) (unquote w) (unquote q) (unquote g+s) (match-drop-ids (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id) (reverse (unquote id-ls))))))) (unquote sk))) (match-drop-ids ((unquote next) (unquote w) (unquote fail) (unquote-splicing id-ls))) (unquote i))) ((unquote next) ((unquote w) (unquote fail) (unquote-splicing id-ls)) (if (not (cons? (unquote w))) ((unquote fail)) (let (((unquote u) (car (unquote w)))) (match-one (unquote abs) (unquote u) (unquote p) ((car (unquote w)) (set-car! (unquote w))) (match-drop-ids (let (unquote (map (lambda (id id-ls) (quasiquote ((unquote id-ls) (cons (unquote id) (unquote id-ls)))) id id-ls))) (recur (unquote ls) (((unquote ls) (cdr (unquote w)))) (if (cons? (unquote ls)) ((unquote try) (car (unquote ls)) (lambda () ((unquote ls) (cdr (unquote ls)))) (unquote-splicing id-ls)) ((unquote fail)))))) ((unquote fail)) (unquote i)))))) (let (unquote (map (lambda (id-ls) (quasiquote (id-ls (quote ())))) id-ls)) ((unquote try) (unquote v) (lambda () (insert-abs (unquote abs) (unquote fk))) (unquote-splicing id-ls))))))) (fail23647)))) (if (cons? ls23674) (progn (let ((w23675 (car ls23674))) (if (cons? w23675) (let ((w23676 (car w23675)) (x23677 (cdr w23675))) (let ((id w23676)) (if (cons? x23677) (let ((w23678 (car x23677)) (x23679 (cdr x23677))) (let ((id-ls w23678)) (if (null? x23679) (loop (cdr ls23674) (cons id-ls p-ls23671) (cons id p-ls23668)) (fail23647)))) (fail23647)))) (fail23647)))) (if else (progn (fail23647)) (cond)))))) (loop w23664 (quote ()) (quote ())))) (fail23647)))) (fail23647)))) (fail23647)))) (fail23647)))) (fail23647)))) (fail23647)))) (fail23647)))) (fail23647)))) (fail23647))))) (defsyntax match-quasiquote x (let ((v23680 x)) (let ((fail23681 (lambda () (let ((fail23682 (lambda () (let ((fail23683 (lambda () (let ((fail23684 (lambda () (let ((fail23685 (lambda () (let ((fail23686 (lambda () (let ((fail23687 (lambda () (let ((fail23688 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23680) (let ((w23689 (car v23680)) (x23690 (cdr v23680))) (let ((abs w23689)) (if (cons? x23690) (let ((w23691 (car x23690)) (x23692 (cdr x23690))) (let ((v w23691)) (if (cons? x23692) (let ((w23693 (car x23692)) (x23694 (cdr x23692))) (let ((x w23693)) (if (cons? x23694) (let ((w23695 (car x23694)) (x23696 (cdr x23694))) (let ((g+s w23695)) (if (cons? x23696) (let ((w23697 (car x23696)) (x23698 (cdr x23696))) (let ((sk w23697)) (if (cons? x23698) (let ((w23699 (car x23698)) (x23700 (cdr x23698))) (let ((fk w23699)) (if (cons? x23700) (let ((w23701 (car x23700)) (x23702 (cdr x23700))) (let ((i w23701)) (let ((depth x23702)) (progn (quasiquote (match-one (unquote abs) (unquote v) (quote (unquote x)) (unquote g+s) (unquote sk) (unquote fk) (unquote i))))))) (fail23688)))) (fail23688)))) (fail23688)))) (fail23688)))) (fail23688)))) (fail23688)))) (fail23688)))))) (if (cons? v23680) (let ((w23703 (car v23680)) (x23704 (cdr v23680))) (let ((abs w23703)) (if (cons? x23704) (let ((w23705 (car x23704)) (x23706 (cdr x23704))) (let ((v w23705)) (if (cons? x23706) (let ((w23707 (car x23706)) (x23708 (cdr x23706))) (if (vector? w23707) (let ((len23709 (vector-size w23707))) (if (>= len23709 0) (letfuns ((loop23712 (j23713 p-ls23711) (if (>= j23713 len23709) (let ((elt (reverse p-ls23711))) (if (cons? x23708) (let ((w23715 (car x23708)) (x23716 (cdr x23708))) (let ((g+s w23715)) (if (cons? x23716) (let ((w23717 (car x23716)) (x23718 (cdr x23716))) (let ((sk w23717)) (if (cons? x23718) (let ((w23719 (car x23718)) (x23720 (cdr x23718))) (let ((fk w23719)) (if (cons? x23720) (let ((w23721 (car x23720)) (x23722 (cdr x23720))) (let ((i w23721)) (let ((depth x23722)) (progn (let ((ls (gensym "ls"))) (quasiquote (if (vector? (unquote v)) (let (((unquote ls) (convert (unquote v) <list>))) (match-quasiquote (unquote abs) (unquote ls) (unquote elt) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))) (insert-abs (unquote abs) (unquote fk))))))))) (fail23687)))) (fail23687)))) (fail23687)))) (fail23687))) (let ((w23714 (vector-ref w23707 j23713))) (let ((elt w23714)) (loop23712 (+ j23713 1) (cons elt p-ls23711))))))) (loop23712 0 (quote ()))) (fail23687))) (fail23687))) (fail23687)))) (fail23687)))) (fail23687)))))) (if (cons? v23680) (let ((w23723 (car v23680)) (x23724 (cdr v23680))) (let ((a w23723)) (if (cons? w23723) (let ((w23725 (car w23723)) (x23726 (cdr w23723))) (let ((abs w23725)) (if (cons? x23726) (let ((w23727 (car x23726)) (x23728 (cdr x23726))) (if (cons? w23727) (let ((w23729 (car w23727)) (x23730 (cdr w23727))) (if (cons? w23729) (let ((w23731 (car w23729)) (x23732 (cdr w23729))) (let ((qcar w23731)) (if (cons? x23732) (let ((w23733 (car x23732)) (x23734 (cdr x23732))) (let ((qcdr w23733)) (if (cons? x23734) (let ((w23735 (car x23734)) (x23736 (cdr x23734))) (let ((qcons? w23735)) (if (cons? x23736) (let ((w23737 (car x23736)) (x23738 (cdr x23736))) (let ((qnull? w23737)) (if (cons? x23738) (let ((w23739 (car x23738)) (x23740 (cdr x23738))) (let ((qbinary= w23739)) (if (null? x23740) (if (cons? x23730) (let ((w23741 (car x23730)) (x23742 (cdr x23730))) (let ((pp w23741)) (if (null? x23742) (if (null? x23728) (if (cons? x23724) (let ((w23743 (car x23724)) (x23744 (cdr x23724))) (let ((v w23743)) (if (cons? x23744) (let ((w23745 (car x23744)) (x23746 (cdr x23744))) (if (cons? w23745) (let ((w23747 (car w23745)) (x23748 (cdr w23745))) (let ((p w23747)) (let ((q x23748)) (if (cons? x23746) (let ((w23749 (car x23746)) (x23750 (cdr x23746))) (let ((g+s w23749)) (if (cons? x23750) (let ((w23751 (car x23750)) (x23752 (cdr x23750))) (let ((sk w23751)) (if (cons? x23752) (let ((w23753 (car x23752)) (x23754 (cdr x23752))) (let ((fk w23753)) (if (cons? x23754) (let ((w23755 (car x23754)) (x23756 (cdr x23754))) (let ((i w23755)) (let ((depth x23756)) (progn (let ((w (gensym "w"))) (quasiquote (if ((unquote qcons?) (unquote v)) (let (((unquote w) ((unquote qcar) (unquote v))) ((unquote x) ((unquote qcdr) (unquote v)))) (match-quasiquote (unquote a) (unquote w) (unquote p) (unquote g+s) (match-quasiquote-step (unquote x) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote depth)) (unquote fk) (unquote i) (unquote-splicing depth))) (insert-abs (unquote a) (unquote fk))))))))) (fail23686)))) (fail23686)))) (fail23686)))) (fail23686))))) (fail23686))) (fail23686)))) (fail23686)) (fail23686)) (fail23686)))) (fail23686)) (fail23686)))) (fail23686)))) (fail23686)))) (fail23686)))) (fail23686)))) (fail23686))) (fail23686))) (fail23686)))) (fail23686)))) (fail23686)))))) (if (cons? v23680) (let ((w23757 (car v23680)) (x23758 (cdr v23680))) (let ((abs w23757)) (if (cons? x23758) (let ((w23759 (car x23758)) (x23760 (cdr x23758))) (let ((v w23759)) (if (cons? x23760) (let ((w23761 (car x23760)) (x23762 (cdr x23760))) (if (cons? w23761) (let ((w23763 (car w23761)) (x23764 (cdr w23761))) (if (binary= w23763 (quote unquote-splicing)) (if (cons? x23764) (let ((w23765 (car x23764)) (x23766 (cdr x23764))) (let ((p w23765)) (if (null? x23766) (if (cons? x23762) (let ((w23767 (car x23762)) (x23768 (cdr x23762))) (let ((g+s w23767)) (if (cons? x23768) (let ((w23769 (car x23768)) (x23770 (cdr x23768))) (let ((sk w23769)) (if (cons? x23770) (let ((w23771 (car x23770)) (x23772 (cdr x23770))) (let ((fk w23771)) (if (cons? x23772) (let ((w23773 (car x23772)) (x23774 (cdr x23772))) (let ((i w23773)) (if (cons? x23774) (let ((w23775 (car x23774)) (x23776 (cdr x23774))) (let ((x w23775)) (let ((depth x23776)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))))))) (fail23685)))) (fail23685)))) (fail23685)))) (fail23685)))) (fail23685)) (fail23685)))) (fail23685)) (fail23685))) (fail23685))) (fail23685)))) (fail23685)))) (fail23685)))))) (if (cons? v23680) (let ((w23777 (car v23680)) (x23778 (cdr v23680))) (let ((abs w23777)) (if (cons? x23778) (let ((w23779 (car x23778)) (x23780 (cdr x23778))) (let ((v w23779)) (if (cons? x23780) (let ((w23781 (car x23780)) (x23782 (cdr x23780))) (if (cons? w23781) (let ((w23783 (car w23781)) (x23784 (cdr w23781))) (if (binary= w23783 (quote unquote)) (if (cons? x23784) (let ((w23785 (car x23784)) (x23786 (cdr x23784))) (let ((p w23785)) (if (null? x23786) (if (cons? x23782) (let ((w23787 (car x23782)) (x23788 (cdr x23782))) (let ((g+s w23787)) (if (cons? x23788) (let ((w23789 (car x23788)) (x23790 (cdr x23788))) (let ((sk w23789)) (if (cons? x23790) (let ((w23791 (car x23790)) (x23792 (cdr x23790))) (let ((fk w23791)) (if (cons? x23792) (let ((w23793 (car x23792)) (x23794 (cdr x23792))) (let ((i w23793)) (if (cons? x23794) (let ((w23795 (car x23794)) (x23796 (cdr x23794))) (let ((x w23795)) (let ((depth x23796)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth))))))) (fail23684)))) (fail23684)))) (fail23684)))) (fail23684)))) (fail23684)) (fail23684)))) (fail23684)) (fail23684))) (fail23684))) (fail23684)))) (fail23684)))) (fail23684)))))) (if (cons? v23680) (let ((w23797 (car v23680)) (x23798 (cdr v23680))) (let ((abs w23797)) (if (cons? x23798) (let ((w23799 (car x23798)) (x23800 (cdr x23798))) (let ((v w23799)) (if (cons? x23800) (let ((w23801 (car x23800)) (x23802 (cdr x23800))) (if (cons? w23801) (let ((w23803 (car w23801)) (x23804 (cdr w23801))) (if (binary= w23803 (quote quasiquote)) (if (cons? x23804) (let ((w23805 (car x23804)) (x23806 (cdr x23804))) (let ((p w23805)) (if (null? x23806) (if (cons? x23802) (let ((w23807 (car x23802)) (x23808 (cdr x23802))) (let ((g+s w23807)) (if (cons? x23808) (let ((w23809 (car x23808)) (x23810 (cdr x23808))) (let ((sk w23809)) (if (cons? x23810) (let ((w23811 (car x23810)) (x23812 (cdr x23810))) (let ((fk w23811)) (if (cons? x23812) (let ((w23813 (car x23812)) (x23814 (cdr x23812))) (let ((i w23813)) (let ((depth x23814)) (progn (quasiquote (match-quasiquote (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote ()) (unquote-splicing depth))))))) (fail23683)))) (fail23683)))) (fail23683)))) (fail23683)) (fail23683)))) (fail23683)) (fail23683))) (fail23683))) (fail23683)))) (fail23683)))) (fail23683)))))) (if (cons? v23680) (let ((w23815 (car v23680)) (x23816 (cdr v23680))) (let ((a w23815)) (if (cons? w23815) (let ((w23817 (car w23815)) (x23818 (cdr w23815))) (let ((abs w23817)) (if (cons? x23818) (let ((w23819 (car x23818)) (x23820 (cdr x23818))) (if (cons? w23819) (let ((w23821 (car w23819)) (x23822 (cdr w23819))) (if (cons? w23821) (let ((w23823 (car w23821)) (x23824 (cdr w23821))) (let ((qcar w23823)) (if (cons? x23824) (let ((w23825 (car x23824)) (x23826 (cdr x23824))) (let ((qcdr w23825)) (if (cons? x23826) (let ((w23827 (car x23826)) (x23828 (cdr x23826))) (let ((qcons? w23827)) (if (cons? x23828) (let ((w23829 (car x23828)) (x23830 (cdr x23828))) (let ((qnull? w23829)) (if (cons? x23830) (let ((w23831 (car x23830)) (x23832 (cdr x23830))) (let ((qbinary= w23831)) (if (null? x23832) (if (cons? x23822) (let ((w23833 (car x23822)) (x23834 (cdr x23822))) (let ((pp w23833)) (if (null? x23834) (if (null? x23820) (if (cons? x23816) (let ((w23835 (car x23816)) (x23836 (cdr x23816))) (let ((v w23835)) (if (cons? x23836) (let ((w23837 (car x23836)) (x23838 (cdr x23836))) (if (cons? w23837) (let ((w23839 (car w23837)) (x23840 (cdr w23837))) (if (cons? w23839) (let ((w23841 (car w23839)) (x23842 (cdr w23839))) (if (binary= w23841 (quote unquote-splicing)) (if (cons? x23842) (let ((w23843 (car x23842)) (x23844 (cdr x23842))) (let ((p w23843)) (if (null? x23844) (let ((rest x23840)) (if (cons? x23838) (let ((w23845 (car x23838)) (x23846 (cdr x23838))) (let ((g+s w23845)) (if (cons? x23846) (let ((w23847 (car x23846)) (x23848 (cdr x23846))) (let ((sk w23847)) (if (cons? x23848) (let ((w23849 (car x23848)) (x23850 (cdr x23848))) (let ((fk w23849)) (if (cons? x23850) (let ((w23851 (car x23850)) (x23852 (cdr x23850))) (let ((i w23851)) (if (null? x23852) (progn (let ((tmp (gensym "tmp"))) (quasiquote (if ((unquote qcons?) (unquote v)) (match-one (unquote a) (unquote v) ((unquote p) (unquote-splicing tmp)) (match-quasiquote (unquote tmp) (unquote rest) (unquote g+s) (unquote sk) (unquote fk)) (unquote fk) (unquote i)) (insert-abs (unquote a) (unquote fk)))))) (fail23682)))) (fail23682)))) (fail23682)))) (fail23682)))) (fail23682))) (fail23682)))) (fail23682)) (fail23682))) (fail23682))) (fail23682))) (fail23682)))) (fail23682)) (fail23682)) (fail23682)))) (fail23682)) (fail23682)))) (fail23682)))) (fail23682)))) (fail23682)))) (fail23682)))) (fail23682))) (fail23682))) (fail23682)))) (fail23682)))) (fail23682)))))) (if (cons? v23680) (let ((w23853 (car v23680)) (x23854 (cdr v23680))) (let ((abs w23853)) (if (cons? x23854) (let ((w23855 (car x23854)) (x23856 (cdr x23854))) (let ((v w23855)) (if (cons? x23856) (let ((w23857 (car x23856)) (x23858 (cdr x23856))) (if (cons? w23857) (let ((w23859 (car w23857)) (x23860 (cdr w23857))) (if (binary= w23859 (quote unquote)) (if (cons? x23860) (let ((w23861 (car x23860)) (x23862 (cdr x23860))) (let ((p w23861)) (if (null? x23862) (if (cons? x23858) (let ((w23863 (car x23858)) (x23864 (cdr x23858))) (let ((g+s w23863)) (if (cons? x23864) (let ((w23865 (car x23864)) (x23866 (cdr x23864))) (let ((sk w23865)) (if (cons? x23866) (let ((w23867 (car x23866)) (x23868 (cdr x23866))) (let ((fk w23867)) (if (cons? x23868) (let ((w23869 (car x23868)) (x23870 (cdr x23868))) (let ((i w23869)) (if (null? x23870) (progn (quasiquote (match-one (unquote abs) (unquote v) (unquote p) (unquote g+s) (unquote sk) (unquote fk) (unquote i)))) (fail23681)))) (fail23681)))) (fail23681)))) (fail23681)))) (fail23681)) (fail23681)))) (fail23681)) (fail23681))) (fail23681))) (fail23681)))) (fail23681)))) (fail23681))))) (defsyntax match-quasiquote-step x (let ((v23871 x)) (let ((fail23872 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23871) (let ((w23873 (car v23871)) (x23874 (cdr v23871))) (let ((abs w23873)) (if (cons? x23874) (let ((w23875 (car x23874)) (x23876 (cdr x23874))) (let ((x w23875)) (if (cons? x23876) (let ((w23877 (car x23876)) (x23878 (cdr x23876))) (let ((q w23877)) (if (cons? x23878) (let ((w23879 (car x23878)) (x23880 (cdr x23878))) (let ((g+s w23879)) (if (cons? x23880) (let ((w23881 (car x23880)) (x23882 (cdr x23880))) (let ((sk w23881)) (if (cons? x23882) (let ((w23883 (car x23882)) (x23884 (cdr x23882))) (let ((fk w23883)) (if (cons? x23884) (let ((w23885 (car x23884)) (x23886 (cdr x23884))) (let ((depth w23885)) (if (cons? x23886) (let ((w23887 (car x23886)) (x23888 (cdr x23886))) (let ((i w23887)) (if (null? x23888) (progn (quasiquote (match-quasiquote (unquote abs) (unquote x) (unquote q) (unquote g+s) (unquote sk) (unquote fk) (unquote i) (unquote-splicing depth)))) (fail23872)))) (fail23872)))) (fail23872)))) (fail23872)))) (fail23872)))) (fail23872)))) (fail23872)))) (fail23872)))) (fail23872))))) (defsyntax match-extract-vars x (let ((v23889 x)) (let ((fail23890 (lambda () (let ((fail23891 (lambda () (let ((fail23892 (lambda () (let ((fail23893 (lambda () (let ((fail23894 (lambda () (let ((fail23895 (lambda () (let ((fail23896 (lambda () (let ((fail23897 (lambda () (let ((fail23898 (lambda () (let ((fail23899 (lambda () (let ((fail23900 (lambda () (let ((fail23901 (lambda () (let ((fail23902 (lambda () (error <condition> "no matching pattern")))) (if (cons? v23889) (let ((w23903 (car v23889)) (x23904 (cdr v23889))) (if (cons? w23903) (let ((w23905 (car w23903)) (x23906 (cdr w23903))) (let ((abs w23905)) (if (cons? x23906) (let ((w23907 (car x23906)) (x23908 (cdr x23906))) (let ((phd w23907)) (if (null? x23908) (if (cons? x23904) (let ((w23909 (car x23904)) (x23910 (cdr x23904))) (let ((p w23909)) (if (cons? x23910) (let ((w23911 (car x23910)) (x23912 (cdr x23910))) (let ((k w23911)) (if (cons? x23912) (let ((w23913 (car x23912)) (x23914 (cdr x23912))) (let ((i w23913)) (if (cons? x23914) (let ((w23915 (car x23914)) (x23916 (cdr x23914))) (let ((v w23915)) (if (null? x23916) (progn (quasiquote (abs-extract-vars () (unquote abs) (unquote phd) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail23902)))) (fail23902)))) (fail23902)))) (fail23902)))) (fail23902)) (fail23902)))) (fail23902)))) (fail23902))) (fail23902)))))) (if (cons? v23889) (let ((w23917 (car v23889)) (x23918 (cdr v23889))) (let ((abs w23917)) (if (cons? x23918) (let ((w23919 (car x23918)) (x23920 (cdr x23918))) (if (cons? w23919) (let ((w23921 (car w23919)) (x23922 (cdr w23919))) (if (binary= w23921 (quote <>)) (if (cons? x23922) (let ((w23923 (car x23922)) (x23924 (cdr x23922))) (let ((f w23923)) (if (cons? x23924) (let ((w23925 (car x23924)) (x23926 (cdr x23924))) (let ((p w23925)) (if (null? x23926) (if (cons? x23920) (let ((w23927 (car x23920)) (x23928 (cdr x23920))) (let ((k w23927)) (if (cons? x23928) (let ((w23929 (car x23928)) (x23930 (cdr x23928))) (let ((i w23929)) (if (cons? x23930) (let ((w23931 (car x23930)) (x23932 (cdr x23930))) (let ((v w23931)) (if (null? x23932) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail23901)))) (fail23901)))) (fail23901)))) (fail23901)) (fail23901)))) (fail23901)))) (fail23901)) (fail23901))) (fail23901))) (fail23901)))) (fail23901)))))) (if (cons? v23889) (let ((w23933 (car v23889)) (x23934 (cdr v23889))) (let ((abs w23933)) (if (cons? x23934) (let ((w23935 (car x23934)) (x23936 (cdr x23934))) (if (cons? w23935) (let ((w23937 (car w23935)) (x23938 (cdr w23935))) (if (binary= w23937 (quote not)) (let ((p x23938)) (let ((x x23936)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail23900))) (fail23900))) (fail23900)))) (fail23900)))))) (if (cons? v23889) (let ((w23939 (car v23889)) (x23940 (cdr v23889))) (let ((abs w23939)) (if (cons? x23940) (let ((w23941 (car x23940)) (x23942 (cdr x23940))) (if (cons? w23941) (let ((w23943 (car w23941)) (x23944 (cdr w23941))) (if (binary= w23943 (quote or)) (let ((p x23944)) (let ((x x23942)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail23899))) (fail23899))) (fail23899)))) (fail23899)))))) (if (cons? v23889) (let ((w23945 (car v23889)) (x23946 (cdr v23889))) (let ((abs w23945)) (if (cons? x23946) (let ((w23947 (car x23946)) (x23948 (cdr x23946))) (if (cons? w23947) (let ((w23949 (car w23947)) (x23950 (cdr w23947))) (if (binary= w23949 (quote and)) (let ((p x23950)) (let ((x x23948)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (fail23898))) (fail23898))) (fail23898)))) (fail23898)))))) (if (cons? v23889) (let ((w23951 (car v23889)) (x23952 (cdr v23889))) (let ((abs w23951)) (if (cons? x23952) (let ((w23953 (car x23952)) (x23954 (cdr x23952))) (if (cons? w23953) (let ((w23955 (car w23953)) (x23956 (cdr w23953))) (if (binary= w23955 (quote quasiquote)) (if (cons? x23956) (let ((w23957 (car x23956)) (x23958 (cdr x23956))) (let ((x w23957)) (if (null? x23958) (if (cons? x23954) (let ((w23959 (car x23954)) (x23960 (cdr x23954))) (let ((k w23959)) (if (cons? x23960) (let ((w23961 (car x23960)) (x23962 (cdr x23960))) (let ((i w23961)) (if (cons? x23962) (let ((w23963 (car x23962)) (x23964 (cdr x23962))) (let ((v w23963)) (if (null? x23964) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (t)))) (fail23897)))) (fail23897)))) (fail23897)))) (fail23897)) (fail23897)))) (fail23897)) (fail23897))) (fail23897))) (fail23897)))) (fail23897)))))) (if (cons? v23889) (let ((w23965 (car v23889)) (x23966 (cdr v23889))) (let ((abs w23965)) (if (cons? x23966) (let ((w23967 (car x23966)) (x23968 (cdr x23966))) (if (cons? w23967) (let ((w23969 (car w23967)) (x23970 (cdr w23967))) (if (binary= w23969 (quote unquote-splicing)) (if (cons? x23970) (let ((w23971 (car x23970)) (x23972 (cdr x23970))) (let ((x w23971)) (if (null? x23972) (if (cons? x23968) (let ((w23973 (car x23968)) (x23974 (cdr x23968))) (if (cons? w23973) (let ((w23975 (car w23973)) (x23976 (cdr w23973))) (let ((k w23975)) (let ((kk x23976)) (if (list? kk) (if (cons? x23974) (let ((w23981 (car x23974)) (x23982 (cdr x23974))) (let ((i w23981)) (if (cons? x23982) (let ((w23983 (car x23982)) (x23984 (cdr x23982))) (let ((v w23983)) (if (null? x23984) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail23896)))) (fail23896)))) (fail23896)) (fail23896))))) (fail23896))) (fail23896)) (fail23896)))) (fail23896)) (fail23896))) (fail23896))) (fail23896)))) (fail23896)))))) (if (cons? v23889) (let ((w23985 (car v23889)) (x23986 (cdr v23889))) (let ((abs w23985)) (if (cons? x23986) (let ((w23987 (car x23986)) (x23988 (cdr x23986))) (if (cons? w23987) (let ((w23989 (car w23987)) (x23990 (cdr w23987))) (if (binary= w23989 (quote unquote)) (if (cons? x23990) (let ((w23991 (car x23990)) (x23992 (cdr x23990))) (let ((x w23991)) (if (null? x23992) (if (cons? x23988) (let ((w23993 (car x23988)) (x23994 (cdr x23988))) (if (cons? w23993) (let ((w23995 (car w23993)) (x23996 (cdr w23993))) (let ((k w23995)) (let ((kk x23996)) (if (list? kk) (if (cons? x23994) (let ((w24001 (car x23994)) (x24002 (cdr x23994))) (let ((i w24001)) (if (cons? x24002) (let ((w24003 (car x24002)) (x24004 (cdr x24002))) (let ((v w24003)) (if (null? x24004) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail23895)))) (fail23895)))) (fail23895)) (fail23895))))) (fail23895))) (fail23895)) (fail23895)))) (fail23895)) (fail23895))) (fail23895))) (fail23895)))) (fail23895)))))) (if (cons? v23889) (let ((w24005 (car v23889)) (x24006 (cdr v23889))) (let ((abs w24005)) (if (cons? x24006) (let ((w24007 (car x24006)) (x24008 (cdr x24006))) (if (cons? w24007) (let ((w24009 (car w24007)) (x24010 (cdr w24007))) (if (binary= w24009 (quote quote)) (if (cons? x24010) (let ((w24011 (car x24010)) (x24012 (cdr x24010))) (let ((x w24011)) (if (null? x24012) (if (cons? x24008) (let ((w24013 (car x24008)) (x24014 (cdr x24008))) (if (cons? w24013) (let ((w24015 (car w24013)) (x24016 (cdr w24013))) (let ((k w24015)) (let ((kk x24016)) (if (list? kk) (if (cons? x24014) (let ((w24021 (car x24014)) (x24022 (cdr x24014))) (let ((i w24021)) (if (cons? x24022) (let ((w24023 (car x24022)) (x24024 (cdr x24022))) (let ((v w24023)) (if (null? x24024) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail23894)))) (fail23894)))) (fail23894)) (fail23894))))) (fail23894))) (fail23894)) (fail23894)))) (fail23894)) (fail23894))) (fail23894))) (fail23894)))) (fail23894)))))) (if (cons? v23889) (let ((w24025 (car v23889)) (x24026 (cdr v23889))) (let ((abs w24025)) (if (cons? x24026) (let ((w24027 (car x24026)) (x24028 (cdr x24026))) (if (cons? w24027) (let ((w24029 (car w24027)) (x24030 (cdr w24027))) (if (binary= w24029 (quote =)) (if (cons? x24030) (let ((w24031 (car x24030)) (x24032 (cdr x24030))) (let ((u w24031)) (if (cons? x24032) (let ((w24033 (car x24032)) (x24034 (cdr x24032))) (let ((m w24033)) (if (cons? x24034) (let ((w24035 (car x24034)) (x24036 (cdr x24034))) (let ((p w24035)) (if (null? x24036) (let ((x x24028)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x))))) (fail23893)))) (fail23893)))) (fail23893)))) (fail23893)) (fail23893))) (fail23893))) (fail23893)))) (fail23893)))))) (if (cons? v23889) (let ((w24037 (car v23889)) (x24038 (cdr v23889))) (let ((abs w24037)) (if (cons? x24038) (let ((w24039 (car x24038)) (x24040 (cdr x24038))) (if (cons? w24039) (let ((w24041 (car w24039)) (x24042 (cdr w24039))) (if (binary= w24041 (quote =)) (if (cons? x24042) (let ((w24043 (car x24042)) (x24044 (cdr x24042))) (let ((proc w24043)) (if (cons? x24044) (let ((w24045 (car x24044)) (x24046 (cdr x24044))) (let ((p w24045)) (if (null? x24046) (let ((x x24040)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x))))) (fail23892)))) (fail23892)))) (fail23892)) (fail23892))) (fail23892))) (fail23892)))) (fail23892)))))) (if (cons? v23889) (let ((w24047 (car v23889)) (x24048 (cdr v23889))) (let ((abs w24047)) (if (cons? x24048) (let ((w24049 (car x24048)) (x24050 (cdr x24048))) (if (cons? w24049) (let ((w24051 (car w24049)) (x24052 (cdr w24049))) (if (binary= w24051 (quote $)) (if (cons? x24052) (let ((w24053 (car x24052)) (x24054 (cdr x24052))) (let ((rec w24053)) (let ((p x24054)) (let ((x x24050)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))))) (fail23891)) (fail23891))) (fail23891))) (fail23891)))) (fail23891)))))) (if (cons? v23889) (let ((w24055 (car v23889)) (x24056 (cdr v23889))) (let ((abs w24055)) (if (cons? x24056) (let ((w24057 (car x24056)) (x24058 (cdr x24056))) (if (cons? w24057) (let ((w24059 (car w24057)) (x24060 (cdr w24057))) (if (binary= w24059 (quote ?)) (if (cons? x24060) (let ((w24061 (car x24060)) (x24062 (cdr x24060))) (let ((pred w24061)) (let ((p x24062)) (let ((x x24058)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))))) (fail23890)) (fail23890))) (fail23890))) (fail23890)))) (fail23890))))) (defsyntax match-extract-vars2 x (let ((v24063 x)) (let ((fail24064 (lambda () (let ((fail24065 (lambda () (let ((fail24066 (lambda () (let ((fail24067 (lambda () (let ((fail24068 (lambda () (let ((fail24069 (lambda () (let ((fail24070 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24063) (let ((w24071 (car v24063)) (x24072 (cdr v24063))) (let ((abs w24071)) (if (cons? x24072) (let ((w24073 (car x24072)) (x24074 (cdr x24072))) (let ((p w24073)) (if (cons? x24074) (let ((w24075 (car x24074)) (x24076 (cdr x24074))) (if (cons? w24075) (let ((w24077 (car w24075)) (x24078 (cdr w24075))) (let ((k w24077)) (let ((kk x24078)) (if (list? kk) (if (cons? x24076) (let ((w24083 (car x24076)) (x24084 (cdr x24076))) (let ((i w24083)) (if (list? i) (if (cons? x24084) (let ((w24089 (car x24084)) (x24090 (cdr x24084))) (let ((v w24089)) (if (null? x24090) (progn (let ((p-ls (gensym "p-ls"))) (if (let ((G0024091 (member p i))) (if G0024091 G0024091 (null? (symbol? p)))) (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v))) (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (((unquote p) (unquote p-ls)) (unquote-splicing v))))))) (fail24070)))) (fail24070)) (fail24070)))) (fail24070)) (fail24070))))) (fail24070))) (fail24070)))) (fail24070)))) (fail24070)))))) (if (cons? v24063) (let ((w24092 (car v24063)) (x24093 (cdr v24063))) (let ((abs w24092)) (if (cons? x24093) (let ((w24094 (car x24093)) (x24095 (cdr x24093))) (if (binary= w24094 (quote ***)) (if (cons? x24095) (let ((w24096 (car x24095)) (x24097 (cdr x24095))) (if (cons? w24096) (let ((w24098 (car w24096)) (x24099 (cdr w24096))) (let ((k w24098)) (let ((kk x24099)) (if (list? kk) (if (cons? x24097) (let ((w24104 (car x24097)) (x24105 (cdr x24097))) (let ((i w24104)) (if (cons? x24105) (let ((w24106 (car x24105)) (x24107 (cdr x24105))) (let ((v w24106)) (if (null? x24107) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail24069)))) (fail24069)))) (fail24069)) (fail24069))))) (fail24069))) (fail24069)) (fail24069))) (fail24069)))) (fail24069)))))) (if (cons? v24063) (let ((w24108 (car v24063)) (x24109 (cdr v24063))) (let ((abs w24108)) (if (cons? x24109) (let ((w24110 (car x24109)) (x24111 (cdr x24109))) (if (binary= w24110 (quote ___)) (if (cons? x24111) (let ((w24112 (car x24111)) (x24113 (cdr x24111))) (if (cons? w24112) (let ((w24114 (car w24112)) (x24115 (cdr w24112))) (let ((k w24114)) (let ((kk x24115)) (if (list? kk) (if (cons? x24113) (let ((w24120 (car x24113)) (x24121 (cdr x24113))) (let ((i w24120)) (if (cons? x24121) (let ((w24122 (car x24121)) (x24123 (cdr x24121))) (let ((v w24122)) (if (null? x24123) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail24068)))) (fail24068)))) (fail24068)) (fail24068))))) (fail24068))) (fail24068)) (fail24068))) (fail24068)))) (fail24068)))))) (if (cons? v24063) (let ((w24124 (car v24063)) (x24125 (cdr v24063))) (let ((abs w24124)) (if (cons? x24125) (let ((w24126 (car x24125)) (x24127 (cdr x24125))) (if (binary= w24126 (quote _)) (if (cons? x24127) (let ((w24128 (car x24127)) (x24129 (cdr x24127))) (if (cons? w24128) (let ((w24130 (car w24128)) (x24131 (cdr w24128))) (let ((k w24130)) (let ((kk x24131)) (if (list? kk) (if (cons? x24129) (let ((w24136 (car x24129)) (x24137 (cdr x24129))) (let ((i w24136)) (if (cons? x24137) (let ((w24138 (car x24137)) (x24139 (cdr x24137))) (let ((v w24138)) (if (null? x24139) (progn (quasiquote (k (unquote abs) (unquote-splicing kk) (unquote v)))) (fail24067)))) (fail24067)))) (fail24067)) (fail24067))))) (fail24067))) (fail24067)) (fail24067))) (fail24067)))) (fail24067)))))) (if (cons? v24063) (let ((w24140 (car v24063)) (x24141 (cdr v24063))) (let ((abs w24140)) (if (cons? x24141) (let ((w24142 (car x24141)) (x24143 (cdr x24141))) (if (vector? w24142) (let ((len24144 (vector-size w24142))) (if (>= len24144 0) (letfuns ((loop24147 (j24148 p-ls24146) (if (>= j24148 len24144) (let ((p (reverse p-ls24146))) (let ((x x24143)) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote-splicing x)))))) (let ((w24149 (vector-ref w24142 j24148))) (let ((p w24149)) (loop24147 (+ j24148 1) (cons p p-ls24146))))))) (loop24147 0 (quote ()))) (fail24066))) (fail24066))) (fail24066)))) (fail24066)))))) (if (cons? v24063) (let ((w24150 (car v24063)) (x24151 (cdr v24063))) (let ((abs w24150)) (if (cons? x24151) (let ((w24152 (car x24151)) (x24153 (cdr x24151))) (if (cons? w24152) (let ((w24154 (car w24152)) (x24155 (cdr w24152))) (let ((p w24154)) (let ((q x24155)) (if (cons? x24153) (let ((w24156 (car x24153)) (x24157 (cdr x24153))) (let ((k w24156)) (if (cons? x24157) (let ((w24158 (car x24157)) (x24159 (cdr x24157))) (let ((i w24158)) (if (cons? x24159) (let ((w24160 (car x24159)) (x24161 (cdr x24159))) (let ((v w24160)) (if (null? x24161) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (match-extract-vars-step (unquote q) (unquote k) (unquote i) (unquote v)) (unquote i) ()))) (fail24065)))) (fail24065)))) (fail24065)))) (fail24065))))) (fail24065))) (fail24065)))) (fail24065)))))) (if (cons? v24063) (let ((w24162 (car v24063)) (x24163 (cdr v24063))) (let ((abs w24162)) (if (cons? x24163) (let ((w24164 (car x24163)) (x24165 (cdr x24163))) (if (cons? w24164) (let ((w24166 (car w24164)) (x24167 (cdr w24164))) (let ((p w24166)) (if (cons? x24167) (let ((w24168 (car x24167)) (x24169 (cdr x24167))) (let ((q w24168)) (let ((r x24169)) (if (cons? x24165) (let ((w24170 (car x24165)) (x24171 (cdr x24165))) (let ((k w24170)) (if (cons? x24171) (let ((w24172 (car x24171)) (x24173 (cdr x24171))) (let ((i w24172)) (if (cons? x24173) (let ((w24174 (car x24173)) (x24175 (cdr x24173))) (let ((v w24174)) (if (null? x24175) (progn (quasiquote (match-check-ellipse (unquote q) (match-extract-vars (unquote abs) ((unquote p) (unquote-splicing r)) (unquote k) (unquote i) (unquote v)) (match-extract-vars (unquote abs) (unquote p) (match-extract-vars-step ((unquote q) (unquote-splicing r)) (unquote k) (unquote i) (unquote v)) (unquote i) ())))) (fail24064)))) (fail24064)))) (fail24064)))) (fail24064))))) (fail24064)))) (fail24064))) (fail24064)))) (fail24064))))) (defsyntax abs-extract-vars x (let ((v24176 x)) (let ((fail24177 (lambda () (let ((fail24178 (lambda () (let ((fail24179 (lambda () (let ((fail24180 (lambda () (let ((fail24181 (lambda () (let ((fail24182 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24176) (let ((w24183 (car v24176)) (x24184 (cdr v24176))) (if (null? w24183) (if (cons? x24184) (let ((w24185 (car x24184)) (x24186 (cdr x24184))) (let ((a w24185)) (if (cons? x24186) (let ((w24187 (car x24186)) (x24188 (cdr x24186))) (let ((phd w24187)) (if (cons? x24188) (let ((w24189 (car x24188)) (x24190 (cdr x24188))) (let ((p w24189)) (if (cons? x24190) (let ((w24191 (car x24190)) (x24192 (cdr x24190))) (let ((k w24191)) (if (cons? x24192) (let ((w24193 (car x24192)) (x24194 (cdr x24192))) (let ((i w24193)) (if (cons? x24194) (let ((w24195 (car x24194)) (x24196 (cdr x24194))) (let ((v w24195)) (if (null? x24196) (progn (quasiquote (match-extract-phd () (unquote phd) (unquote a) (unquote p) (unquote k) (unquote i) (unquote v)))) (fail24182)))) (fail24182)))) (fail24182)))) (fail24182)))) (fail24182)))) (fail24182)))) (fail24182)) (fail24182))) (fail24182)))))) (if (cons? v24176) (let ((w24197 (car v24176)) (x24198 (cdr v24176))) (let ((abs w24197)) (if (list? abs) (if (cons? x24198) (let ((w24203 (car x24198)) (x24204 (cdr x24198))) (if (cons? w24203) (let ((w24205 (car w24203)) (x24206 (cdr w24203))) (if (cons? w24205) (let ((w24207 (car w24205)) (x24208 (cdr w24205))) (let ((a w24207)) (if (null? x24208) (let ((us x24206)) (if (list? us) (if (cons? x24204) (let ((w24213 (car x24204)) (x24214 (cdr x24204))) (let ((phd w24213)) (if (cons? x24214) (let ((w24215 (car x24214)) (x24216 (cdr x24214))) (if (cons? w24215) (let ((w24217 (car w24215)) (x24218 (cdr w24215))) (let ((b w24217)) (let ((w x24218)) (if (list? w) (if (cons? x24216) (let ((w24223 (car x24216)) (x24224 (cdr x24216))) (let ((k w24223)) (if (cons? x24224) (let ((w24225 (car x24224)) (x24226 (cdr x24224))) (let ((i w24225)) (if (cons? x24226) (let ((w24227 (car x24226)) (x24228 (cdr x24226))) (let ((v w24227)) (if (null? x24228) (progn (if (eq a b) (quasiquote (match-extract-vars ((((unquote a)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (unquote v))) (quasiquote (abs-extract-vars (((unquote a)) (unquote-splicing abs)) (unquote us) (unquote phd) ((unquote b) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail24181)))) (fail24181)))) (fail24181)))) (fail24181)) (fail24181))))) (fail24181))) (fail24181)))) (fail24181)) (fail24181))) (fail24181)))) (fail24181))) (fail24181))) (fail24181)) (fail24181)))) (fail24181)))))) (if (cons? v24176) (let ((w24229 (car v24176)) (x24230 (cdr v24176))) (let ((abs w24229)) (if (list? abs) (if (cons? x24230) (let ((w24235 (car x24230)) (x24236 (cdr x24230))) (if (cons? w24235) (let ((w24237 (car w24235)) (x24238 (cdr w24235))) (if (cons? w24237) (let ((w24239 (car w24237)) (x24240 (cdr w24237))) (let ((a w24239)) (if (cons? x24240) (let ((w24241 (car x24240)) (x24242 (cdr x24240))) (let ((x w24241)) (let ((xs x24242)) (let ((us x24238)) (if (list? us) (if (cons? x24236) (let ((w24247 (car x24236)) (x24248 (cdr x24236))) (let ((phd w24247)) (if (cons? x24248) (let ((w24249 (car x24248)) (x24250 (cdr x24248))) (if (cons? w24249) (let ((w24251 (car w24249)) (x24252 (cdr w24249))) (let ((b w24251)) (let ((w x24252)) (if (list? w) (if (cons? x24250) (let ((w24257 (car x24250)) (x24258 (cdr x24250))) (let ((k w24257)) (if (cons? x24258) (let ((w24259 (car x24258)) (x24260 (cdr x24258))) (let ((i w24259)) (if (cons? x24260) (let ((w24261 (car x24260)) (x24262 (cdr x24260))) (let ((v w24261)) (if (null? x24262) (progn (if (eq a b) (let ((x-ls (gensym "x-ls"))) (quasiquote (match-extract-vars ((((unquote a) (unquote-splicing xs)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (((unquote x) (unquote x-ls)) (unquote-splicing v))))) (quasiquote (abs-extract-vars (((unquote a) (unquote x) (unquote-splicing xs)) (unquote-splicing abs)) (unquote us) (unquote phd) ((unquote b) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail24180)))) (fail24180)))) (fail24180)))) (fail24180)) (fail24180))))) (fail24180))) (fail24180)))) (fail24180)) (fail24180)))))) (fail24180)))) (fail24180))) (fail24180))) (fail24180)) (fail24180)))) (fail24180)))))) (if (cons? v24176) (let ((w24263 (car v24176)) (x24264 (cdr v24176))) (let ((abs w24263)) (if (list? abs) (if (cons? x24264) (let ((w24269 (car x24264)) (x24270 (cdr x24264))) (if (cons? w24269) (let ((w24271 (car w24269)) (x24272 (cdr w24269))) (if (cons? w24271) (let ((w24273 (car w24271)) (x24274 (cdr w24271))) (let ((a w24273)) (if (null? x24274) (let ((us x24272)) (if (list? us) (if (cons? x24270) (let ((w24279 (car x24270)) (x24280 (cdr x24270))) (let ((phd w24279)) (if (cons? x24280) (let ((w24281 (car x24280)) (x24282 (cdr x24280))) (if (cons? w24281) (let ((w24283 (car w24281)) (x24284 (cdr w24281))) (if (cons? w24283) (let ((w24285 (car w24283)) (x24286 (cdr w24283))) (let ((b w24285)) (let ((bs x24286)) (if (list? bs) (let ((w x24284)) (if (list? w) (if (cons? x24282) (let ((w24295 (car x24282)) (x24296 (cdr x24282))) (let ((k w24295)) (if (cons? x24296) (let ((w24297 (car x24296)) (x24298 (cdr x24296))) (let ((i w24297)) (if (cons? x24298) (let ((w24299 (car x24298)) (x24300 (cdr x24298))) (let ((v w24299)) (if (null? x24300) (progn (if (eq a b) (quasiquote (match-extract-vars ((((unquote a)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (unquote v))) (quasiquote (abs-extract-vars (((unquote a)) (unquote-splicing abs)) (unquote us) (unquote phd) (((unquote b) (unquote-splicing bs)) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail24179)))) (fail24179)))) (fail24179)))) (fail24179)) (fail24179))) (fail24179))))) (fail24179))) (fail24179))) (fail24179)))) (fail24179)) (fail24179))) (fail24179)))) (fail24179))) (fail24179))) (fail24179)) (fail24179)))) (fail24179)))))) (if (cons? v24176) (let ((w24301 (car v24176)) (x24302 (cdr v24176))) (let ((abs w24301)) (if (list? abs) (if (cons? x24302) (let ((w24307 (car x24302)) (x24308 (cdr x24302))) (if (cons? w24307) (let ((w24309 (car w24307)) (x24310 (cdr w24307))) (if (cons? w24309) (let ((w24311 (car w24309)) (x24312 (cdr w24309))) (let ((a w24311)) (if (cons? x24312) (let ((w24313 (car x24312)) (x24314 (cdr x24312))) (let ((x w24313)) (let ((xs x24314)) (let ((us x24310)) (if (list? us) (if (cons? x24308) (let ((w24319 (car x24308)) (x24320 (cdr x24308))) (let ((phd w24319)) (if (cons? x24320) (let ((w24321 (car x24320)) (x24322 (cdr x24320))) (if (cons? w24321) (let ((w24323 (car w24321)) (x24324 (cdr w24321))) (if (cons? w24323) (let ((w24325 (car w24323)) (x24326 (cdr w24323))) (let ((b w24325)) (let ((bs x24326)) (if (list? bs) (let ((w x24324)) (if (list? w) (if (cons? x24322) (let ((w24335 (car x24322)) (x24336 (cdr x24322))) (let ((k w24335)) (if (cons? x24336) (let ((w24337 (car x24336)) (x24338 (cdr x24336))) (let ((i w24337)) (if (cons? x24338) (let ((w24339 (car x24338)) (x24340 (cdr x24338))) (let ((v w24339)) (if (null? x24340) (progn (if (eq a b) (let ((x-ls (gensym "x-ls"))) (quasiquote (match-extract-vars ((((unquote a) (unquote-splicing xs)) (unquote-splicing us) (unquote-splicing abs)) (unquote phd)) (unquote w) (unquote k) (unquote i) (((unquote x) (unquote x-ls)) (unquote-splicing v))))) (quasiquote (abs-extract-vars (((unquote a) (unquote x) (unquote-splicing xs)) (unquote-splicing abs)) (unquote us) (unquote phd) (((unquote b) (unquote-splicing bs)) (unquote-splicing w)) (unquote k) (unquote i) (unquote v))))) (fail24178)))) (fail24178)))) (fail24178)))) (fail24178)) (fail24178))) (fail24178))))) (fail24178))) (fail24178))) (fail24178)))) (fail24178)) (fail24178)))))) (fail24178)))) (fail24178))) (fail24178))) (fail24178)) (fail24178)))) (fail24178)))))) (if (cons? v24176) (let ((w24341 (car v24176)) (x24342 (cdr v24176))) (let ((abs w24341)) (if (cons? x24342) (let ((w24343 (car x24342)) (x24344 (cdr x24342))) (if (null? w24343) (if (cons? x24344) (let ((w24345 (car x24344)) (x24346 (cdr x24344))) (let ((phd w24345)) (if (cons? x24346) (let ((w24347 (car x24346)) (x24348 (cdr x24346))) (let ((p w24347)) (let ((l x24348)) (progn (quasiquote (match-extract-phd () (unquote phd) (unquote abs) (unquote p) (unquote-splicing l))))))) (fail24177)))) (fail24177)) (fail24177))) (fail24177)))) (fail24177))))) (defsyntax match-extract-phd x (let ((v24349 x)) (let ((fail24350 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24349) (let ((w24351 (car v24349)) (x24352 (cdr v24349))) (if (cons? x24352) (let ((w24353 (car x24352)) (x24354 (cdr x24352))) (let ((phd w24353)) (if (cons? x24354) (let ((w24355 (car x24354)) (x24356 (cdr x24354))) (let ((abs w24355)) (let ((l x24356)) (progn (quasiquote (match-extract-vars2 ((unquote abs) (unquote phd)) (unquote-splicing l))))))) (fail24350)))) (fail24350))) (fail24350))))) (defsyntax match-extract-vars-step x (let ((v24357 x)) (let ((fail24358 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24357) (let ((w24359 (car v24357)) (x24360 (cdr v24357))) (let ((abs w24359)) (if (cons? x24360) (let ((w24361 (car x24360)) (x24362 (cdr x24360))) (let ((p w24361)) (if (cons? x24362) (let ((w24363 (car x24362)) (x24364 (cdr x24362))) (let ((k w24363)) (if (cons? x24364) (let ((w24365 (car x24364)) (x24366 (cdr x24364))) (let ((i w24365)) (if (cons? x24366) (let ((w24367 (car x24366)) (x24368 (cdr x24366))) (let ((v w24367)) (if (cons? x24368) (let ((w24369 (car x24368)) (x24370 (cdr x24368))) (let ((a w24369)) (letfuns ((loop (ls24379 p-ls24376 p-ls24373) (if (null? ls24379) (progn (let ((v2-ls (reverse p-ls24376)) (v2 (reverse p-ls24373))) (if (null? x24370) (progn (quasiquote (match-extract-vars (unquote abs) (unquote p) (unquote k) ((unquote-splicing v2) (unquote-splicing i)) ((unquote-splicing a) (unquote-splicing v))))) (fail24358)))) (if (cons? ls24379) (progn (let ((w24380 (car ls24379))) (if (cons? w24380) (let ((w24381 (car w24380)) (x24382 (cdr w24380))) (let ((v2 w24381)) (if (cons? x24382) (let ((w24383 (car x24382)) (x24384 (cdr x24382))) (let ((v2-ls w24383)) (if (null? x24384) (loop (cdr ls24379) (cons v2-ls p-ls24376) (cons v2 p-ls24373)) (fail24358)))) (fail24358)))) (fail24358)))) (if else (progn (fail24358)) (cond)))))) (loop w24369 (quote ()) (quote ()))))) (fail24358)))) (fail24358)))) (fail24358)))) (fail24358)))) (fail24358)))) (fail24358))))) (defsyntax match-extract-quasiquote-vars x (let ((v24385 x)) (let ((fail24386 (lambda () (let ((fail24387 (lambda () (let ((fail24388 (lambda () (let ((fail24389 (lambda () (let ((fail24390 (lambda () (let ((fail24391 (lambda () (let ((fail24392 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24385) (let ((w24393 (car v24385)) (x24394 (cdr v24385))) (let ((abs w24393)) (if (cons? x24394) (let ((w24395 (car x24394)) (x24396 (cdr x24394))) (let ((x w24395)) (if (cons? x24396) (let ((w24397 (car x24396)) (x24398 (cdr x24396))) (if (cons? w24397) (let ((w24399 (car w24397)) (x24400 (cdr w24397))) (let ((k w24399)) (let ((kk x24400)) (if (list? kk) (if (cons? x24398) (let ((w24405 (car x24398)) (x24406 (cdr x24398))) (let ((i w24405)) (if (cons? x24406) (let ((w24407 (car x24406)) (x24408 (cdr x24406))) (let ((v w24407)) (if (cons? x24408) (let ((w24409 (car x24408)) (x24410 (cdr x24408))) (if (cons? w24409) (let ((w24411 (car w24409)) (x24412 (cdr w24409))) (let ((t w24411)) (let ((d x24412)) (if (null? x24410) (progn (quasiquote ((unquote k) (unquote abs) (unquote-splicing kk) (unquote v)))) (fail24392))))) (fail24392))) (fail24392)))) (fail24392)))) (fail24392)) (fail24392))))) (fail24392))) (fail24392)))) (fail24392)))) (fail24392)))))) (if (cons? v24385) (let ((w24413 (car v24385)) (x24414 (cdr v24385))) (let ((abs w24413)) (if (cons? x24414) (let ((w24415 (car x24414)) (x24416 (cdr x24414))) (if (vector? w24415) (let ((len24417 (vector-size w24415))) (if (>= len24417 0) (letfuns ((loop24420 (j24421 p-ls24419) (if (>= j24421 len24417) (let ((x (reverse p-ls24419))) (if (cons? x24416) (let ((w24423 (car x24416)) (x24424 (cdr x24416))) (let ((k w24423)) (if (cons? x24424) (let ((w24425 (car x24424)) (x24426 (cdr x24424))) (let ((i w24425)) (if (cons? x24426) (let ((w24427 (car x24426)) (x24428 (cdr x24426))) (let ((v w24427)) (if (cons? x24428) (let ((w24429 (car x24428)) (x24430 (cdr x24428))) (if (cons? w24429) (let ((w24431 (car w24429)) (x24432 (cdr w24429))) (let ((t w24431)) (let ((d x24432)) (if (null? x24430) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail24391))))) (fail24391))) (fail24391)))) (fail24391)))) (fail24391)))) (fail24391))) (let ((w24422 (vector-ref w24415 j24421))) (let ((x w24422)) (loop24420 (+ j24421 1) (cons x p-ls24419))))))) (loop24420 0 (quote ()))) (fail24391))) (fail24391))) (fail24391)))) (fail24391)))))) (if (cons? v24385) (let ((w24433 (car v24385)) (x24434 (cdr v24385))) (let ((abs w24433)) (if (cons? x24434) (let ((w24435 (car x24434)) (x24436 (cdr x24434))) (if (cons? w24435) (let ((w24437 (car w24435)) (x24438 (cdr w24435))) (let ((x w24437)) (let ((y x24438)) (if (cons? x24436) (let ((w24439 (car x24436)) (x24440 (cdr x24436))) (let ((k w24439)) (if (cons? x24440) (let ((w24441 (car x24440)) (x24442 (cdr x24440))) (let ((i w24441)) (if (cons? x24442) (let ((w24443 (car x24442)) (x24444 (cdr x24442))) (let ((v w24443)) (if (cons? x24444) (let ((w24445 (car x24444)) (x24446 (cdr x24444))) (if (cons? w24445) (let ((w24447 (car w24445)) (x24448 (cdr w24445))) (let ((t w24447)) (let ((d x24448)) (if (null? x24446) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (match-extract-quasiquote-vars-step (unquote y) (unquote k) (unquote i) (unquote v) (unquote d)) (unquote i) ()))) (fail24390))))) (fail24390))) (fail24390)))) (fail24390)))) (fail24390)))) (fail24390))))) (fail24390))) (fail24390)))) (fail24390)))))) (if (cons? v24385) (let ((w24449 (car v24385)) (x24450 (cdr v24385))) (let ((abs w24449)) (if (cons? x24450) (let ((w24451 (car x24450)) (x24452 (cdr x24450))) (if (cons? w24451) (let ((w24453 (car w24451)) (x24454 (cdr w24451))) (if (binary= w24453 (quote uunquote)) (if (cons? x24454) (let ((w24455 (car x24454)) (x24456 (cdr x24454))) (let ((x w24455)) (if (null? x24456) (if (cons? x24452) (let ((w24457 (car x24452)) (x24458 (cdr x24452))) (let ((k w24457)) (if (cons? x24458) (let ((w24459 (car x24458)) (x24460 (cdr x24458))) (let ((i w24459)) (if (cons? x24460) (let ((w24461 (car x24460)) (x24462 (cdr x24460))) (let ((v w24461)) (if (cons? x24462) (let ((w24463 (car x24462)) (x24464 (cdr x24462))) (if (cons? w24463) (let ((w24465 (car w24463)) (x24466 (cdr w24463))) (let ((t w24465)) (let ((d x24466)) (if (null? x24464) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail24389))))) (fail24389))) (fail24389)))) (fail24389)))) (fail24389)))) (fail24389)) (fail24389)))) (fail24389)) (fail24389))) (fail24389))) (fail24389)))) (fail24389)))))) (if (cons? v24385) (let ((w24467 (car v24385)) (x24468 (cdr v24385))) (let ((abs w24467)) (if (cons? x24468) (let ((w24469 (car x24468)) (x24470 (cdr x24468))) (if (cons? w24469) (let ((w24471 (car w24469)) (x24472 (cdr w24469))) (if (binary= w24471 (quote uunquote)) (if (cons? x24472) (let ((w24473 (car x24472)) (x24474 (cdr x24472))) (let ((x w24473)) (if (null? x24474) (if (cons? x24470) (let ((w24475 (car x24470)) (x24476 (cdr x24470))) (let ((k w24475)) (if (cons? x24476) (let ((w24477 (car x24476)) (x24478 (cdr x24476))) (let ((i w24477)) (if (cons? x24478) (let ((w24479 (car x24478)) (x24480 (cdr x24478))) (let ((v w24479)) (if (cons? x24480) (let ((w24481 (car x24480)) (x24482 (cdr x24480))) (if (cons? w24481) (let ((w24483 (car w24481)) (x24484 (cdr w24481))) (let ((t w24483)) (if (null? x24484) (if (null? x24482) (progn (quasiquote (match-extract-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v)))) (fail24388)) (fail24388)))) (fail24388))) (fail24388)))) (fail24388)))) (fail24388)))) (fail24388)) (fail24388)))) (fail24388)) (fail24388))) (fail24388))) (fail24388)))) (fail24388)))))) (if (cons? v24385) (let ((w24485 (car v24385)) (x24486 (cdr v24385))) (let ((abs w24485)) (if (cons? x24486) (let ((w24487 (car x24486)) (x24488 (cdr x24486))) (if (cons? w24487) (let ((w24489 (car w24487)) (x24490 (cdr w24487))) (let ((sk224495 (lambda () (if (cons? x24490) (let ((w24496 (car x24490)) (x24497 (cdr x24490))) (let ((x w24496)) (if (null? x24497) (if (cons? x24488) (let ((w24498 (car x24488)) (x24499 (cdr x24488))) (let ((k w24498)) (if (cons? x24499) (let ((w24500 (car x24499)) (x24501 (cdr x24499))) (let ((i w24500)) (if (cons? x24501) (let ((w24502 (car x24501)) (x24503 (cdr x24501))) (let ((v w24502)) (if (cons? x24503) (let ((w24504 (car x24503)) (x24505 (cdr x24503))) (let ((d w24504)) (if (null? x24505) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) ((quote uunquote) (unquote x)) (unquote k) (unquote i) (unquote v) (unquote d)))) (fail24387)))) (fail24387)))) (fail24387)))) (fail24387)))) (fail24387)) (fail24387)))) (fail24387))))) (if (binary= w24489 (quote unquote)) (sk224495) (if (binary= w24489 (quote unquote-splicing)) (sk224495) (fail24387))))) (fail24387))) (fail24387)))) (fail24387)))))) (if (cons? v24385) (let ((w24506 (car v24385)) (x24507 (cdr v24385))) (let ((abs w24506)) (if (cons? x24507) (let ((w24508 (car x24507)) (x24509 (cdr x24507))) (if (cons? w24508) (let ((w24510 (car w24508)) (x24511 (cdr w24508))) (if (binary= w24510 (quote quasiquote)) (if (cons? x24511) (let ((w24512 (car x24511)) (x24513 (cdr x24511))) (let ((x w24512)) (if (null? x24513) (if (cons? x24509) (let ((w24514 (car x24509)) (x24515 (cdr x24509))) (let ((k w24514)) (if (cons? x24515) (let ((w24516 (car x24515)) (x24517 (cdr x24515))) (let ((i w24516)) (if (cons? x24517) (let ((w24518 (car x24517)) (x24519 (cdr x24517))) (let ((v w24518)) (if (cons? x24519) (let ((w24520 (car x24519)) (x24521 (cdr x24519))) (let ((d w24520)) (if (null? x24521) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) (unquote i) (unquote v) (t (unquote-splicing d))))) (fail24386)))) (fail24386)))) (fail24386)))) (fail24386)))) (fail24386)) (fail24386)))) (fail24386)) (fail24386))) (fail24386))) (fail24386)))) (fail24386))))) (defsyntax match-extract-quasiquote-vars-step x (let ((v24522 x)) (let ((fail24523 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24522) (let ((w24524 (car v24522)) (x24525 (cdr v24522))) (if (cons? x24525) (let ((w24526 (car x24525)) (x24527 (cdr x24525))) (let ((abs w24526)) (if (cons? x24527) (let ((w24528 (car x24527)) (x24529 (cdr x24527))) (let ((x w24528)) (if (cons? x24529) (let ((w24530 (car x24529)) (x24531 (cdr x24529))) (let ((k w24530)) (if (cons? x24531) (let ((w24532 (car x24531)) (x24533 (cdr x24531))) (let ((i w24532)) (if (cons? x24533) (let ((w24534 (car x24533)) (x24535 (cdr x24533))) (let ((v w24534)) (if (cons? x24535) (let ((w24536 (car x24535)) (x24537 (cdr x24535))) (let ((d w24536)) (if (cons? x24537) (let ((w24538 (car x24537)) (x24539 (cdr x24537))) (let ((a w24538)) (letfuns ((loop (ls24548 p-ls24545 p-ls24542) (if (null? ls24548) (progn (let ((v2-ls (reverse p-ls24545)) (v2 (reverse p-ls24542))) (if (null? x24539) (progn (quasiquote (match-extract-quasiquote-vars (unquote abs) (unquote x) (unquote k) ((unquote-splicing v2) (unquote-splicing i)) ((unquote-splicing a) (unquote-splicing v)) (unquote d)))) (fail24523)))) (if (cons? ls24548) (progn (let ((w24549 (car ls24548))) (if (cons? w24549) (let ((w24550 (car w24549)) (x24551 (cdr w24549))) (let ((v2 w24550)) (if (cons? x24551) (let ((w24552 (car x24551)) (x24553 (cdr x24551))) (let ((v2-ls w24552)) (if (null? x24553) (loop (cdr ls24548) (cons v2-ls p-ls24545) (cons v2 p-ls24542)) (fail24523)))) (fail24523)))) (fail24523)))) (if else (progn (fail24523)) (cond)))))) (loop w24538 (quote ()) (quote ()))))) (fail24523)))) (fail24523)))) (fail24523)))) (fail24523)))) (fail24523)))) (fail24523)))) (fail24523))) (fail24523))))) (defsyntax match-check-ellipse x (let ((v24554 x)) (let ((fail24555 (lambda () (let ((fail24556 (lambda () (let ((fail24557 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24554) (let ((w24558 (car v24554)) (x24559 (cdr v24554))) (let ((id w24558)) (if (cons? x24559) (let ((w24560 (car x24559)) (x24561 (cdr x24559))) (let ((success-k w24560)) (if (cons? x24561) (let ((w24562 (car x24561)) (x24563 (cdr x24561))) (let ((failure-k w24562)) (if (null? x24563) (progn (if (binary= id (quote ...)) success-k failure-k)) (fail24557)))) (fail24557)))) (fail24557)))) (fail24557)))))) (if (cons? v24554) (let ((w24564 (car v24554)) (x24565 (cdr v24554))) (if (vector? w24564) (let ((len24566 (vector-size w24564))) (if (>= len24566 0) (letfuns ((loop24569 (j24570 p-ls24568) (if (>= j24570 len24566) (let ((a (reverse p-ls24568))) (if (cons? x24565) (let ((w24572 (car x24565)) (x24573 (cdr x24565))) (let ((success-k w24572)) (if (cons? x24573) (let ((w24574 (car x24573)) (x24575 (cdr x24573))) (let ((failure-k w24574)) (if (null? x24575) (progn failure-k) (fail24556)))) (fail24556)))) (fail24556))) (let ((w24571 (vector-ref w24564 j24570))) (let ((a w24571)) (loop24569 (+ j24570 1) (cons a p-ls24568))))))) (loop24569 0 (quote ()))) (fail24556))) (fail24556))) (fail24556)))))) (if (cons? v24554) (let ((w24576 (car v24554)) (x24577 (cdr v24554))) (if (cons? w24576) (let ((w24578 (car w24576)) (x24579 (cdr w24576))) (let ((a w24578)) (let ((b x24579)) (if (cons? x24577) (let ((w24580 (car x24577)) (x24581 (cdr x24577))) (let ((success-k w24580)) (if (cons? x24581) (let ((w24582 (car x24581)) (x24583 (cdr x24581))) (let ((failure-k w24582)) (if (null? x24583) (progn failure-k) (fail24555)))) (fail24555)))) (fail24555))))) (fail24555))) (fail24555))))) (defsyntax match-check-identifier x (let ((v24584 x)) (let ((fail24585 (lambda () (let ((fail24586 (lambda () (let ((fail24587 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24584) (let ((w24588 (car v24584)) (x24589 (cdr v24584))) (let ((x w24588)) (if (cons? x24589) (let ((w24590 (car x24589)) (x24591 (cdr x24589))) (let ((success-k w24590)) (if (cons? x24591) (let ((w24592 (car x24591)) (x24593 (cdr x24591))) (let ((failure-k w24592)) (if (null? x24593) (progn (if (symbol? x) success-k failure-k)) (fail24587)))) (fail24587)))) (fail24587)))) (fail24587)))))) (if (cons? v24584) (let ((w24594 (car v24584)) (x24595 (cdr v24584))) (if (vector? w24594) (let ((len24596 (vector-size w24594))) (if (>= len24596 0) (letfuns ((loop24599 (j24600 p-ls24598) (if (>= j24600 len24596) (let ((x (reverse p-ls24598))) (if (cons? x24595) (let ((w24602 (car x24595)) (x24603 (cdr x24595))) (let ((success-k w24602)) (if (cons? x24603) (let ((w24604 (car x24603)) (x24605 (cdr x24603))) (let ((failure-k w24604)) (if (null? x24605) (progn failure-k) (fail24586)))) (fail24586)))) (fail24586))) (let ((w24601 (vector-ref w24594 j24600))) (let ((x w24601)) (loop24599 (+ j24600 1) (cons x p-ls24598))))))) (loop24599 0 (quote ()))) (fail24586))) (fail24586))) (fail24586)))))) (if (cons? v24584) (let ((w24606 (car v24584)) (x24607 (cdr v24584))) (if (cons? w24606) (let ((w24608 (car w24606)) (x24609 (cdr w24606))) (let ((x w24608)) (let ((y x24609)) (if (cons? x24607) (let ((w24610 (car x24607)) (x24611 (cdr x24607))) (let ((success-k w24610)) (if (cons? x24611) (let ((w24612 (car x24611)) (x24613 (cdr x24611))) (let ((failure-k w24612)) (if (null? x24613) (progn failure-k) (fail24585)))) (fail24585)))) (fail24585))))) (fail24585))) (fail24585))))) (defsyntax match-lambda matchers (let ((x (gensym "arg"))) (quasiquote (lambda ((unquote x)) (smatch0 (unquote x) (unquote-splicing matchers)))))) (defsyntax match-lambda* matchers (let ((x (gensym "arg"))) (quasiquote (lambda (unquote x) (smatch0 (unquote x) (unquote-splicing matchers)))))) (defsyntax match-let x (let ((v24614 x)) (let ((fail24615 (lambda () (let ((fail24616 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24614) (let ((w24617 (car v24614)) (x24618 (cdr v24614))) (let ((loop w24617)) (let ((rest x24618)) (progn (quasiquote (match-named-let loop () (unquote-splicing rest))))))) (fail24616)))))) (if (cons? v24614) (let ((w24619 (car v24614)) (x24620 (cdr v24614))) (let ((vars w24619)) (if (list? vars) (let ((body x24620)) (progn (quasiquote (match-let/helper let () () (unquote vars) (unquote-splicing body))))) (fail24615)))) (fail24615))))) (defsyntax match-letrec x (let ((v24625 x)) (let ((fail24626 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24625) (let ((w24627 (car v24625)) (x24628 (cdr v24625))) (let ((vars w24627)) (let ((body x24628)) (progn (quasiquote (match-let/helper letrec () () (unquote vars) (unquote-splicing body))))))) (fail24626))))) (defsyntax match-let/helper x (let ((v24629 x)) (let ((fail24630 (lambda () (let ((fail24631 (lambda () (let ((fail24632 (lambda () (let ((fail24633 (lambda () (let ((fail24634 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24629) (let ((w24635 (car v24629)) (x24636 (cdr v24629))) (let ((let w24635)) (if (cons? x24636) (let ((w24637 (car x24636)) (x24638 (cdr x24636))) (let ((v w24637)) (if (list? v) (if (cons? x24638) (let ((w24643 (car x24638)) (x24644 (cdr x24638))) (let ((p w24643)) (if (list? p) (if (cons? x24644) (let ((w24649 (car x24644)) (x24650 (cdr x24644))) (if (cons? w24649) (let ((w24651 (car w24649)) (x24652 (cdr w24649))) (if (cons? w24651) (let ((w24653 (car w24651)) (x24654 (cdr w24651))) (let ((a w24653)) (if (cons? x24654) (let ((w24655 (car x24654)) (x24656 (cdr x24654))) (let ((expr w24655)) (if (null? x24656) (let ((rest x24652)) (let ((body x24650)) (progn (quasiquote (match-let/helper (unquote let) ((unquote-splicing v) ((unquote a) (unquote expr))) (unquote p) (unquote rest) (unquote-splicing body)))))) (fail24634)))) (fail24634)))) (fail24634))) (fail24634))) (fail24634)) (fail24634)))) (fail24634)) (fail24634)))) (fail24634)))) (fail24634)))))) (if (cons? v24629) (let ((w24657 (car v24629)) (x24658 (cdr v24629))) (let ((let w24657)) (if (cons? x24658) (let ((w24659 (car x24658)) (x24660 (cdr x24658))) (let ((v w24659)) (if (list? v) (if (cons? x24660) (let ((w24665 (car x24660)) (x24666 (cdr x24660))) (let ((p w24665)) (if (list? p) (if (cons? x24666) (let ((w24671 (car x24666)) (x24672 (cdr x24666))) (if (cons? w24671) (let ((w24673 (car w24671)) (x24674 (cdr w24671))) (if (cons? w24673) (let ((w24675 (car w24673)) (x24676 (cdr w24673))) (if (vector? w24675) (let ((len24677 (vector-size w24675))) (if (>= len24677 0) (letfuns ((loop24680 (j24681 p-ls24679) (if (>= j24681 len24677) (let ((a (reverse p-ls24679))) (if (cons? x24676) (let ((w24683 (car x24676)) (x24684 (cdr x24676))) (let ((expr w24683)) (if (null? x24684) (let ((rest x24674)) (let ((body x24672)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-let/helper let ((unquote-splicing v) ((unquote tmp) (unquote expr))) ((unquote-splicing p) (#((unquote-splicing a)) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail24633)))) (fail24633))) (let ((w24682 (vector-ref w24675 j24681))) (let ((a w24682)) (loop24680 (+ j24681 1) (cons a p-ls24679))))))) (loop24680 0 (quote ()))) (fail24633))) (fail24633))) (fail24633))) (fail24633))) (fail24633)) (fail24633)))) (fail24633)) (fail24633)))) (fail24633)))) (fail24633)))))) (if (cons? v24629) (let ((w24685 (car v24629)) (x24686 (cdr v24629))) (let ((let w24685)) (if (cons? x24686) (let ((w24687 (car x24686)) (x24688 (cdr x24686))) (let ((v w24687)) (if (list? v) (if (cons? x24688) (let ((w24693 (car x24688)) (x24694 (cdr x24688))) (let ((p w24693)) (if (list? p) (if (cons? x24694) (let ((w24699 (car x24694)) (x24700 (cdr x24694))) (if (cons? w24699) (let ((w24701 (car w24699)) (x24702 (cdr w24699))) (if (cons? w24701) (let ((w24703 (car w24701)) (x24704 (cdr w24701))) (if (cons? w24703) (let ((w24705 (car w24703)) (x24706 (cdr w24703))) (let ((a w24705)) (let ((b x24706)) (if (cons? x24704) (let ((w24707 (car x24704)) (x24708 (cdr x24704))) (let ((expr w24707)) (if (null? x24708) (let ((rest x24702)) (let ((body x24700)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-let/helper let ((unquote-splicing v) ((unquote tmp) (unquote expr))) ((unquote-splicing p) (((unquote a) (unquote-splicing b)) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail24632)))) (fail24632))))) (fail24632))) (fail24632))) (fail24632))) (fail24632)) (fail24632)))) (fail24632)) (fail24632)))) (fail24632)))) (fail24632)))))) (if (cons? v24629) (let ((w24709 (car v24629)) (x24710 (cdr v24629))) (let ((let w24709)) (if (cons? x24710) (let ((w24711 (car x24710)) (x24712 (cdr x24710))) (let ((a w24711)) (letfuns ((loop (ls24721 p-ls24718 p-ls24715) (if (null? ls24721) (progn (let ((expr (reverse p-ls24718)) (var (reverse p-ls24715))) (if (cons? x24712) (let ((w24723 (car x24712)) (x24724 (cdr x24712))) (let ((b w24723)) (letfuns ((loop (ls24733 p-ls24730 p-ls24727) (if (null? ls24733) (progn (let ((tmp (reverse p-ls24730)) (pat (reverse p-ls24727))) (if (cons? x24724) (let ((w24735 (car x24724)) (x24736 (cdr x24724))) (if (null? w24735) (let ((body x24736)) (progn (quasiquote ((unquote let) (unquote a) (match-let* (unquote b) (unquote-splicing body)))))) (fail24631))) (fail24631)))) (if (cons? ls24733) (progn (let ((w24734 (car ls24733))) (if (cons? w24734) (let ((w24737 (car w24734)) (x24738 (cdr w24734))) (let ((pat w24737)) (if (cons? x24738) (let ((w24739 (car x24738)) (x24740 (cdr x24738))) (let ((tmp w24739)) (if (null? x24740) (loop (cdr ls24733) (cons tmp p-ls24730) (cons pat p-ls24727)) (fail24631)))) (fail24631)))) (fail24631)))) (if else (progn (fail24631)) (cond)))))) (loop w24723 (quote ()) (quote ()))))) (fail24631)))) (if (cons? ls24721) (progn (let ((w24722 (car ls24721))) (if (cons? w24722) (let ((w24741 (car w24722)) (x24742 (cdr w24722))) (let ((var w24741)) (if (cons? x24742) (let ((w24743 (car x24742)) (x24744 (cdr x24742))) (let ((expr w24743)) (if (null? x24744) (loop (cdr ls24721) (cons expr p-ls24718) (cons var p-ls24715)) (fail24631)))) (fail24631)))) (fail24631)))) (if else (progn (fail24631)) (cond)))))) (loop w24711 (quote ()) (quote ()))))) (fail24631)))) (fail24631)))))) (if (cons? v24629) (let ((w24745 (car v24629)) (x24746 (cdr v24629))) (let ((let w24745)) (if (cons? x24746) (let ((w24747 (car x24746)) (x24748 (cdr x24746))) (let ((a w24747)) (letfuns ((loop (ls24757 p-ls24754 p-ls24751) (if (null? ls24757) (progn (let ((expr (reverse p-ls24754)) (var (reverse p-ls24751))) (if (cons? x24748) (let ((w24759 (car x24748)) (x24760 (cdr x24748))) (if (null? w24759) (if (cons? x24760) (let ((w24761 (car x24760)) (x24762 (cdr x24760))) (if (null? w24761) (let ((body x24762)) (progn (quasiquote ((unquote let) (unquote a) (unquote-splicing body))))) (fail24630))) (fail24630)) (fail24630))) (fail24630)))) (if (cons? ls24757) (progn (let ((w24758 (car ls24757))) (if (cons? w24758) (let ((w24763 (car w24758)) (x24764 (cdr w24758))) (let ((var w24763)) (if (cons? x24764) (let ((w24765 (car x24764)) (x24766 (cdr x24764))) (let ((expr w24765)) (if (null? x24766) (loop (cdr ls24757) (cons expr p-ls24754) (cons var p-ls24751)) (fail24630)))) (fail24630)))) (fail24630)))) (if else (progn (fail24630)) (cond)))))) (loop w24747 (quote ()) (quote ()))))) (fail24630)))) (fail24630))))) (defsyntax match-named-let x (let ((v24767 x)) (let ((fail24768 (lambda () (let ((fail24769 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24767) (let ((w24770 (car v24767)) (x24771 (cdr v24767))) (if (cons? x24771) (let ((w24772 (car x24771)) (x24773 (cdr x24771))) (let ((loop w24772)) (if (cons? x24773) (let ((w24774 (car x24773)) (x24775 (cdr x24773))) (let ((v w24774)) (if (list? v) (if (cons? x24775) (let ((w24780 (car x24775)) (x24781 (cdr x24775))) (if (cons? w24780) (let ((w24782 (car w24780)) (x24783 (cdr w24780))) (if (cons? w24782) (let ((w24784 (car w24782)) (x24785 (cdr w24782))) (let ((pat w24784)) (if (cons? x24785) (let ((w24786 (car x24785)) (x24787 (cdr x24785))) (let ((expr w24786)) (if (null? x24787) (let ((rest x24783)) (let ((body x24781)) (progn (let ((tmp (gensym "tmp"))) (quasiquote (match-named-let (unquote loop) ((unquote-splicing v) ((unquote pat) (unquote expr) (unquote tmp))) (unquote rest) (unquote-splicing body))))))) (fail24769)))) (fail24769)))) (fail24769))) (fail24769))) (fail24769)) (fail24769)))) (fail24769)))) (fail24769))) (fail24769)))))) (if (cons? v24767) (let ((w24788 (car v24767)) (x24789 (cdr v24767))) (let ((loop w24788)) (if (cons? x24789) (let ((w24790 (car x24789)) (x24791 (cdr x24789))) (letfuns ((loop (ls24803 p-ls24800 p-ls24797 p-ls24794) (if (null? ls24803) (progn (let ((var (reverse p-ls24800)) (expr (reverse p-ls24797)) (pat (reverse p-ls24794))) (if (cons? x24791) (let ((w24805 (car x24791)) (x24806 (cdr x24791))) (if (null? w24805) (let ((body x24806)) (progn (quasiquote (recur loop (unquote (map (lambda (var expr) (quasiquote ((unquote var) (unquote expr)))) var expr)) (match-let (unquote (map (lambda (pat var) (quasiquote ((unquote pat) (unquote var)))) pat var)) (unquote-splicing body)))))) (fail24768))) (fail24768)))) (if (cons? ls24803) (progn (let ((w24804 (car ls24803))) (if (cons? w24804) (let ((w24807 (car w24804)) (x24808 (cdr w24804))) (let ((pat w24807)) (if (cons? x24808) (let ((w24809 (car x24808)) (x24810 (cdr x24808))) (let ((expr w24809)) (if (cons? x24810) (let ((w24811 (car x24810)) (x24812 (cdr x24810))) (let ((var w24811)) (if (null? x24812) (loop (cdr ls24803) (cons var p-ls24800) (cons expr p-ls24797) (cons pat p-ls24794)) (fail24768)))) (fail24768)))) (fail24768)))) (fail24768)))) (if else (progn (fail24768)) (cond)))))) (loop w24790 (quote ()) (quote ()) (quote ())))) (fail24768)))) (fail24768))))) (defsyntax match-let* x (let ((v24813 x)) (let ((fail24814 (lambda () (let ((fail24815 (lambda () (error <condition> "no matching pattern")))) (if (cons? v24813) (let ((w24816 (car v24813)) (x24817 (cdr v24813))) (if (cons? w24816) (let ((w24818 (car w24816)) (x24819 (cdr w24816))) (if (cons? w24818) (let ((w24820 (car w24818)) (x24821 (cdr w24818))) (let ((pat w24820)) (if (cons? x24821) (let ((w24822 (car x24821)) (x24823 (cdr x24821))) (let ((expr w24822)) (if (null? x24823) (let ((rest x24819)) (let ((body x24817)) (progn (quasiquote (smatch0 (unquote expr) ((unquote pat) (match-let* (unquote rest) (unquote-splicing body)))))))) (fail24815)))) (fail24815)))) (fail24815))) (fail24815))) (fail24815)))))) (if (cons? v24813) (let ((w24824 (car v24813)) (x24825 (cdr v24813))) (if (null? w24824) (let ((body x24825)) (progn (quasiquote (progn (unquote-splicing body))))) (fail24814))) (fail24814))))))
