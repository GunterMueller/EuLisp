#                            -*- mode: org; -*-
#+TITLE:                         *EuLisp*
#+AUTHOR: nil
#+EMAIL: no-reply
#+OPTIONS: author:nil email:nil ^:{}

* [[file:COPYING][Copyright]]
  EuLisp is free software: you can redistribute it and/or modify it under the
  terms of the GNU General Public License as published by the Free Software
  Foundation, either version 3 of the License, or (at your option) any later
  version.

  EuLisp is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along with
  EuLisp in the file [[file:COPYING][COPYING]].  If not, see <http://www.gnu.org/licenses/>.

* Aim
  This version of the EuLisp definition and Youtoo and EuXLisp implementations
  are being developed in an attempt to reconcile the differences with the
  ultimate aim to create a consistent definition and implementations which are
  as close to EuLisp-1.0 as is possible to ascertain from the remaining
  documents related to the standardisation process:
*** Youtoo original sources
    This release of Youtoo started life as
    [[http://www.cs.bath.ac.uk/~jap/EuLisp/youtoo/youtoo0.93.tar.gz][Youtoo-0.93]]
    developed by Andreas Kind, Julian Padget and others.  More details are
    available from the original [[file:README.orig][README]] file and
    [[http://www.cs.bath.ac.uk/~jap/ak1/youtoo/][the youtoo home page]].  The
    /b2h/ and /i2doc/ tools needed to bootstrap youtoo were reverse engineered
    and provided by
    [[http://unwind-protect.org/~tkb/software.html#youtoo-and-eulisp-definition][T. Kurt
    Bond]].
*** EuXLisp original sources
    EuXLisp started life as
    [[http://www.bath.ac.uk/~masrjb/Sources/euscheme.html][Euscheme]] based on
    xscheme written by David Michael Betz and released under the 3-clause BSD
    licence, see [[file:EuXLisp/ORIGINAL_LICENCE]].  However with the inclusion
    of the GNU getopt and readline libraries this software inherits the GPL with
    which the 3-clause BSD licence is compatible and all further developments
    will be made under the terms of the GPL version 3, see
    [[file:COPYING][COPYING]].
*** EuLisp definition original sources
    The version of the EuLisp definition supplied is this release of Youtoo
    started life as EuLisp-0.99 from the pack released by Julian Padget:
    [[ftp://ftp.bath.ac.uk/pub/eulisp/definition/931202.tar.gz][931202.tar.gz]] updated following proposals and discussions also released by
    Julian Padget:
    + [[http://people.bath.ac.uk/masjap/EuLisp/][Online definition]]
    + [[ftp://ftp.bath.ac.uk/pub/eulisp/mail/nov93.gz][nov93.gz]]
    + [[ftp://ftp.bath.ac.uk/pub/eulisp/mail/dec93.gz][dec93.gz]]
    + [[ftp://ftp.bath.ac.uk/pub/eulisp/WG/adv-genarith.ps.gz][adv-genarith.ps.gz]]
    + [[ftp://ftp.bath.ac.uk/pub/eulisp/WG/eulisp-ffi.ps.gz][eulisp-ffi.ps.gz]]
    + [[ftp://ftp.bath.ac.uk/pub/eulisp/WG/eulisp-proposals.ps.gz][eulisp-proposals.ps.gz]]
    + [[ftp://ftp.bath.ac.uk/pub/eulisp/WG/genarith.ps.gz][genarith.ps.gz]]
    + [[ftp://ftp.bath.ac.uk/pub/eulisp/WG/map.ps.gz][map.ps.gz]]
    + [[ftp://ftp.bath.ac.uk/pub/eulisp/WG/stream.ps.gz][stream.ps.gz]]

* General Description
*** Youtoo
    The Youtoo system is a public domain implementation of the object-oriented
    dynamic programming language EuLisp. EuLisp is a single-valued dialect of
    Lisp with an integrated object system, a defined meta-object protocol,
    modules and a simple light-weight process mechanism (threads).

    The Youtoo compiler/interpreter compiles EuLisp into C-embedded virtual
    machine code which can be statically or dynamically linked with the virtual
    machine, the conservative garbage collector, the EuLisp language library and
    arbitrary other Lisp and foreign code (C, C++ and Fortran). Resulting
    stand-alone executables are portable, interoperable and efficient (see The
    Lisp Performance Page). The language implementation is extended towards a
    Virtual Multicomputer Architecture. Object serialization and inter-process
    communication (Sockets, MPI, Harvest Object Cache) support the migration of
    arbitray data and code.

    The system reuses ideas from the Oaklisp system written by Barak Pearlmutter
    and Kevin Lang. The meta-object protocol (=Telos=) was originally
    implemented in Common Lisp by Russell Bradford. By default, a garbage
    collector written by Hans Boehm and Alan Demers is used.
*** EuXLisp
    EuXLisp is a simple EuLisp Level 0 interpreter.  EuLisp Level 0 is a small
    and compact Lisp, but nevertheless has many interesting features, such as
    modules, an object system, and multithreading.  EuLisp Level 1 has extra
    features, the most notable being a full metaobject system which is
    implemented in Youtoo not in EuXLisp.

* Documentation
*** EuLisp definition
    is provided in both HTML and PDF formats:
    + [[file:Doc/EuLisp-0.991/html/eulisp.html][EuLisp Definition Version 0.991 (HTML)]]
    + [[file:Doc/EuLisp-0.991/eulisp.pdf][EuLisp Definition Version 0.991 (PDF)]]
*** EuLisp-1.0 Proposals
    are in the folowing
    [[file:Doc/EuLisp-0.991/Proposals/Proposals.txt][proposal document]] and
    discussed in the minutes of the
    [[file:Doc/EuLisp-0.991/Proposals/Meeting_19_11_93.txt][meeting on
    19/11/93]] and in the
    [[file:Doc/EuLisp-0.991/Proposals/nov93.txt][preceding]] and
    [[file:Doc/EuLisp-0.991/Proposals/dec93.txt][subsequent]] Email correspondence.
    The following reports are discussed in the above:
    + [[file:Doc/EuLisp-0.991/Proposals/Reports/eulisp-proposals.ps][eulisp-proposals.ps]]
    + [[file:Doc/EuLisp-0.991/Proposals/Reports/genarith.ps][genarith.ps]]
    + [[file:Doc/EuLisp-0.991/Proposals/Reports/adv-genarith.ps][adv-genarith.ps]]
    + [[file:Doc/EuLisp-0.991/Proposals/Reports/eulisp-ffi.ps][eulisp-ffi.ps]]

* Installation
  + Pull the latest version from the GitHub repository:\\
    git clone git://github.com/Henry/EuLisp.git
  + "cd" into the /EuLisp/ directory
  + Run \\
    /./configure/ \\
    and check the settings.  Edit the configure file to reflect your system if
    necessary and re-run\\
    /./configure/.
  + Run \\
    /make/
  + If you want to use shared libraries for Youtoo (which we really recommend on
    Linux, FreeBSD, Solaris and IRIX), run \\
    /make shared/ \\
    and add the directory /.../EuLisp/Lib.${ARCH}/ to the environment variable
    ~$LD_LIBRARY_PATH~.
  + You should now be able to run the =youtoo= executable \\
    /Bin.${ARCH}/youtoo/ \\
    (see next section).

* Getting Started with Youtoo
  + Run \\
    /Bin.${ARCH}/youtoo/ -help \\
    to see the compiler options.
  + In directory /Examples/Misc/ run \\
    /Bin.${ARCH}/youtoo fact -l level1/ \\
    to compile module fact into a stand-alone
    executable. With shared libraries the executable should be less the 40K.
  + Run \\
    /Bin.${ARCH}/youtoo/ \\
    without options to start the Youtoo interpreter. The read-eval-print loop
    provides extra commands (type /help:/).
  + Further information about running [[file:Youtoo/README.org][Youtoo]].

* Getting Started with EuXLisp
  EuXLisp need two paths: where to look for the compiled image, and where to
  look for modules to load:
*** Image
    First euxlisp checks the environment variable ~EU_IMAGE_PATH~ (a colon
    separated list of directory names), then a builtin path, set from
    ~IMAGE_SEARCH_PATH~ in the Makefile.
*** Modules
    ditto for environment variable ~EU_MODULE_PATH~, then builtin
    ~MODULE_SEARCH_PATH~ (e.g., you might want to provide a set of system
    supplied modules).
*** Default settings
    The default built-in settings should work for a default build with the files
    in their default locations.
*** Running the interpreter interactively
    Run /Bin.${ARCH}/euxlisp/ \\ without options to start the EuXLisp
    interpreter. The read-eval-print loop provides extra commands see
    [[file:Doc/EuLispIntro.org][EuLisp and EuXLisp introduction]].
*** Executing a module
    To execute the module =fact= in file /fact.em/ run \\
    /echo "(!> fact)"  | ../../Bin.${ARCH}/euxlisp -q/ \\
    The /echo/ pipes the load module /!>/ command to the interpreter.  In the
    future there will be a command-line option to execute a module directly.
*** See also [[file:Doc/EuLispIntro.org][EuLisp and EuXLisp introduction]].

* [[file:TODO.org][To Do]]
