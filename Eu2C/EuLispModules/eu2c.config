;;; Copyright 1994-2010 Fraunhofer ISST
;;; Copyright 2010 Henry G. Weller
;;;-----------------------------------------------------------------------------
;;  This file is part of
;;; ---                           EuLisp System 'Eu2C'
;;;-----------------------------------------------------------------------------
;;
;;  Eu2C is free software: you can redistribute it and/or modify it under the
;;  terms of the GNU General Public License version 2 as published by the Free
;;  Software Foundation.
;;
;;  Eu2C is distributed in the hope that it will be useful, but WITHOUT ANY
;;  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;;  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
;;  details.
;;
;;  You should have received a copy of the GNU General Public License along with
;;  this program.  If not, see <http://www.gnu.org/licenses/>.
;;
;;;-----------------------------------------------------------------------------
;;;  Title: Eu2C configuration file
;;;  Description:
;;    contains one form - a list of key value pairs.
;;;-----------------------------------------------------------------------------

(
 (:code-generation :c)

 ;;--- fixed-precision-integer ---
 ;; :small - fixed precision integers in 16 bit
 ;;          makes integer arithmetic a bit faster and gives an easier way for
 ;;          data exchange with C because the fixed-precision-integers are
 ;;          represented as an equivalent long int
 ;; :big   - fixed precision integers in 30 bit
 ;;          (2 bits fewer than long int of C)
 ;;          makes dynamic type checking (access to the class of an object) a
 ;;          bit faster and widens the range for fixed-precision-integers
 ;;(:fixed-precision-integer :small)
 (:fixed-precision-integer :big)

 ;;--- symbol-with-plist ---
 ;; () - symbols without property lists as defined in EuLisp
 ;; :t - symbols with property lists like in Common Lisp
 ;;      its full use requires the module 'plist'
 (:symbol-with-plist ())

 ;;--- inline ---
 ;; ()  - no inlining at all
 ;; 0   - only inlining slot-accessors and slot-default-functions if
 ;;       their "complexity" is less than 1
 ;; n   - inlining takes place if the "complexity" of the function is
 ;;       less than n
 ;;
 ;; 3 is a sure value which gives enough performance
 ;; 0 is suggested for debugging or if the code should be readable; () is also
 ;; possible but results in minimal performance
 (inline 0)

 ;;--- global optimization ---
 ;; ()  - no global optimizaton
 ;; t   - compilation with global optimization; application type schemes
 ;;       specialize the type schemes of the function definitions
 (global-optimization ())

 ;;--- break during type inference ---
 ;; t  - compilation is suspended if a type clash occurs
 ;; () - compilation is not suspended if a type clash occurs
 (ti-break ())

 ;;--- info-level ---
 ;; 0 no infos, very short warnings and errors
 ;; 1 very short infos
 ;; 2 some infos
 ;; 3 all infos
 (info-level 3)
 (system-info-level 1)

 ;;--- allocation places ----
 ;; during initialization the corresponding values for the
 ;; keys will be used for allocation
 (single-card single-card)
 (multiple-type-card multiple-type-card)
 (multiple-size-card multiple-size-card)

 ;;---description whether or not type and card descriptors should be generated
 ;; statically or during run time
 ;; generation during run time allows more flexibility but costs one
 ;; indirection per descriptor during instance allocation
 (static-mm-type t)
 (static-mm-card t)
 )
