%%% ----------------------------------------------------------------------------
\typeout{Document style `EuLisp'  - May 89, July 92, Mar 2010}

% ------------------------------------------------------------------------------
%%% Default page layout

\renewcommand{\textfraction}{.1}
\renewcommand{\topfraction}{.9}
\renewcommand{\bottomfraction}{.1}
\renewcommand{\floatpagefraction}{.9}

% ------------------------------------------------------------------------------
%%% Optional sections: optRationale/optDefinition/optPrivate

\usepackage{comment}
\excludecomment{optDefinition}
\excludecomment{optRationale}
\excludecomment{optPrivate}

% ------------------------------------------------------------------------------
%%% Macros for commonly used names

\newcommand{\telos}{{\small T}{\scriptsize ELOS}}
\newcommand{\lisp}{{\small L}{\scriptsize ISP}}
\newcommand{\lelisp}{{\small L}{\scriptsize E}$\!${\small -}$\!$\lisp}
\newcommand{\mceyx}{$\mu${\small C}{\scriptsize EYX}}
\newcommand{\eulisp}{{\small E}{\scriptsize U}$\!\!$\lisp}
\newcommand{\cl}{Common Lisp}
\newcommand{\interlisp}{{\small I}{\scriptsize nter}\lisp}
\newcommand{\clos}{{\small CLOS}}
\newcommand{\ools}{object-oriented languages}
\newcommand{\Cpp}{C\raise.22ex\hbox{+}\raise.22ex\hbox{+}}
\newcommand{\youtoo}{youtoo}

% ------------------------------------------------------------------------------
%%% General typesetting macros

\newcommand{\theclass}[1]{{\tt{}<#1>}}
\newcommand{\nil}{\syntaxref{()}}
\newcommand{\true}{\constantref{t}}
\newcommand{\Ra}{$\Rightarrow$}
\newcommand{\tts}{\phantom<\phantom<}

% ------------------------------------------------------------------------------
%%% Index typesetting

\newcommand{\ttindex}[1]{\index{general}{#1@{\tt{}#1}}}

\newcommand{\undefmod}{undefined-module}
\newcommand{\module}{\undefmod}

\newcommand{\indexfunc}[1]{\index{function}{#1@{\tt{}#1} (\module)}}
\newcommand{\indexgen}[1]{\index{generic}{#1@{\tt{}#1} (\module)}}
\newcommand{\indexmeth}[1]{\index{method}{#1@{\tt{}#1} (\module)}}
\newcommand{\indexmac}[1]{\index{macro}{#1@{\tt{}#1} (\module)}}
\newcommand{\indexconst}[1]{\index{constant}{#1@{\tt{}#1} (\module)}}
\newcommand{\indexcond}[1]{\index{condition}{#1@{\tt{}#1} (\module)}}
\newcommand{\indexcondition}[1]{\index{condition}{#1@{\tt{}#1} (\module)}}
\newcommand{\indexmodule}[1]{\index{module}{#1@{\tt{}#1} (\module)}}

\renewcommand{\printindex}[2]
{%
    \newpage%
    \twocolumn[{\Large\bf #2 \vskip4ex}]%
    \refstepcounter{clause}%
    \tocskip{\tocentryskip}%
    \addcontentsline{toc}{index}{#2}%
    \input{#1.ind}%
}

% ------------------------------------------------------------------------------
%%% Entry clause

\newcounter{entryclause}[sclause]
\renewcommand{\theentryclause}{\thesclause.\arabic{entryclause}}
\newcommand{\l@entryclause}{\@gobbletwo}
\newcommand{\entryclausemark}[1]{}

\def\@entrysect#1#2#3#4#5#6[#7]#8#9{%
    \vbox%
    {%
        \vskip5pt\vfil\hrule height.3mm%
        \orig@sect{#1}{#2}{#3}{#4}{#5}{#6}[#7]{\hbox{#8}\hfill\hbox{#9\,}}%
        \vskip8pt\vfil\hrule height.3mm%
    }%
}

\newcommand{\entryclause}[2]
{%
    \let\orig@sect=\@sect%
    \let\@sect=\@entrysect%
    \@startsection{entryclause}{3}%
    {\z@}%
    {2ex plus 1ex minus .2ex}%
    {.1ex plus .1ex}%
    {\normalsize\bf}%
    {{\tt #1}}{{\em #2}}%
    \let\@sect=\orig@sect%
}

%%%  function
\newcommand{\functionlabel}[1]{function:#1}
\newcommand{\functionlabeled}[2]
{%
    \ttindex{#1}%
    \indexfunc{#1}%
    \entryclause{#1}{function}%
    \label{\functionlabel{#2}}%
}
\newcommand{\function}[1]
{%
    \functionlabeled{#1}{#1}%
}
\newcommand{\functionref}[1]{\hyperref[\functionlabel{#1}]{{\tt #1}}}
\newcommand{\functionreflabel}[2]{\hyperref[\functionlabel{#2}]{{\tt #1}}}

%%%  Setter
\newcommand{\setterlabel}[1]{setter:#1}
\newcommand{\setter}[1]
{%
    \index{general}{setter#1@{\tt (setter #1)}}%
    \index{function}{setter#1@{\tt (setter #1)} (\module)}%
    \entryclause{(setter #1)}{setter}%
    \label{\setterlabel{#1}}%
}
\newcommand{\setterref}[1]{\hyperref[\setterlabel{#1}]{{\tt #1}}}

%%% Converter
\newcommand{\converterlabel}[1]{converter:#1}
\newcommand{\converter}[1]
{%
    \index{general}{converter#1@{\tt (converter <#1>)}}%
    \index{method}{converter#1@{\tt (converter <#1>)} (\module)}%
    \entryclause{(converter <#1>)}{converter}%
    \label{\converterlabel{#1}}%
}
\newcommand{\converterref}[1]{\hyperref[\converterlabel{#1}]{{\tt <#1>}}}

%%%  Generic
\newcommand{\genericlabel}[1]{generic:#1}
\newcommand{\genericlabeled}[2]
{%
    \ttindex{#1}%
    \indexgen{#1}%
    \entryclause{#1}{generic function}%
    \label{\genericlabel{#2}}%
}
\newcommand{\generic}[1]
{%
    \genericlabeled{#1}{#1}%
}
\newcommand{\genericref}[1]{\hyperref[\genericlabel{#1}]{{\tt #1}}}
\newcommand{\genericreflabel}[2]{\hyperref[\genericlabel{#2}]{{\tt #1}}}

%%%  Method
\newcommand{\methodlabel}[1]{method:#1}
\newcommand{\method}[1]
{%
    \ttindex{#1}%
    \indexmeth{#1}%
    \entryclause{#1}{method}%
    \label{\methodlabel{#1}}%
}
\newcommand{\methodref}[1]{\hyperref[\methodlabel{#1}]{{\tt #1}}}

%%%  Syntax form
\newcommand{\syntaxlabel}[1]{syntax:#1}
\newcommand{\syntaxform}[1]
{%
    \ttindex{#1}%
    \index{general}{syntax!#1}%
    \entryclause{#1}{syntax}%
    \label{\syntaxlabel{#1}}%
}
\newcommand{\syntaxref}[1]{\hyperref[\syntaxlabel{#1}]{{\tt{}#1}}}

%%%  Meta-syntax form
\newcommand{\metasyntaxlabel}[1]{metasyntax:#1}
\newcommand{\metasyntaxform}[1]
{%
    \ttindex{#1}%
    \index{general}{syntax!#1}%
    \entryclause{#1}{syntax}%
    \label{\metasyntaxlabel{#1}}%
}
\newcommand{\metasyntaxref}[1]{\hyperref[\metasyntaxlabel{#1}]{{\tt{}#1}}}

%%%  Keyword
\newcommand{\keywordlabel}[1]{keyword:#1}
\newcommand{\keyword}[1]
{%
    \ttindex{#1}%
    \index{general}{special form!#1}%
    \entryclause{#1}{special form}%
    \label{\keywordlabel{#1}}%
}
\newcommand{\keywordref}[1]{\hyperref[\keywordlabel{#1}]{{\tt{}#1}}}

%%%  Macro
\newcommand{\macrolabel}[1]{macro:#1}
\newcommand{\macro}[1]
{%
    \ttindex{#1}%
    \indexmac{#1}%
    \entryclause{#1}{macro}%
    \label{\macrolabel{#1}}%
}
\newcommand{\macroref}[1]{\hyperref[\macrolabel{#1}]{{\tt{}#1}}}

%%%  Defform
\newcommand{\defformlabel}[1]{defform:#1}
\newcommand{\defform}[1]
{%
    \ttindex{#1}\index{general}{defining form!#1}%
    \entryclause{#1}{defining form}%
    \label{\defformlabel{#1}}%
}
\newcommand{\defformref}[1]{\hyperref[\defformlabel{#1}]{{\tt{}#1}}}

%%%  Constant
\newcommand{\constantlabel}[1]{constant:#1}
\newcommand{\constant}[2]
{%
    \ttindex{#1}%
    \indexconst{#1}%
    \entryclause{#1}{\classref{#2}}
    \label{\constantlabel{#1}}%
}
\newcommand{\constantref}[1]{\hyperref[\constantlabel{#1}]{{\tt{}#1}}}

%%%  Class
\newcommand{\classlabel}[1]{class:#1}
\newcommand{\class}[1]
{%
    \index{general}{#1@{\tt <#1>}}%
    \index{class}{#1@{\tt{}<#1>} (\module)}%
    \entryclause{<#1>}{class}%
    \label{\classlabel{#1}}%
}
\newcommand{\classref}[1]{\hyperref[\classlabel{#1}]{{\tt{}<#1>}}}

%%% Derived class
\newcommand{\derivedclass}[2]
{%
    \index{general}{#1@{\tt <#1>}}%
    \index{class}{#1@{\tt{}<#1>} (\module)}%
    \entryclause{<#1>}{\classref{#2}}%
    \label{\classlabel{#1}}%
}

%%%  Instance
\newcommand{\instancelabel}[1]{instance:#1}
\newcommand{\instance}[2]
{
    \ttindex{#1}%
    \entryclause{#1}{\classref{#2}}%
    \label{\instancelabel{#1}}%
}
\newcommand{\instanceref}[1]{\hyperref[\instancelabel{#1}]{{\tt{}#1}}}

%%% Condition
\newcommand{\conditionlabel}[1]{condition:#1}
\newcommand{\condition}[2]
{%
    \indexcond{#1}%
    \entryclause{#1}{#2}%
    \label{\conditionlabel{#1}}%
}
\newcommand{\conditionref}[1]{\hyperref[\conditionlabel{#1}]{{\tt{}<#1>}}}

% ------------------------------------------------------------------------------
%%% Syntax
%%%  Syntax sub-clause

\newcounter{syntaxssclause}[entryclause]
\renewcommand{\thesyntaxssclause}{\theentryclause.\arabic{syntaxssclause}}
\newcommand{\l@syntaxssclause}{\@gobbletwo}
\newcommand{\syntaxssclausemark}[1]{}
\newcommand{\syntaxssclause}
{%
    \@startsection{syntaxssclause}{4}{\z@}%
    {1ex}%
    {0.1ex}%
    {\normalfont\normalsize\bfseries}%
}

% \newcommand{\syntaxssclausefont}{\mdseries}
\newcommand{\syntaxssclausefont}{\normalfont\small\bfseries$\!$}

\newcommand{\Syntax}{\syntaxssclause{\syntaxssclausefont Syntax}}
%\newcommand{\Syntax}{}

%%%  Syntax box/table (not a float)

\newcommand{\syntaxname}{Syntax}

% Dummy counter return function, syntax tables are not currently counted
\newcommand{\thesyntax}{}

\newcommand{\l@syntax}[2]{%
    \vskip \z@ \@plus.2\p@
    {%
        \leftskip 0em
        \rightskip \@tocrmarg
        \parfillskip -\rightskip
        \parindent 0em\@afterindenttrue
        \interlinepenalty\@M
        \leavevmode
        \@tempdima 2.75em
        \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
        {\let\numberline\loftnumberline \normalfont\syntaxname{} #1}\nobreak
        \loftfillnum{#2}}
}

\newcommand{\addtotoc}[3]
{%
    \addcontentsline{#1}{#2}
    {\protect\numberline{\csname the#2\endcsname}{\ignorespaces #3}}%
}

\newcommand{\@syntaxaddtolot}[1]
{%
    \addtotoc{lof}{syntax}{{\tt{}#1}}
}

\newcommand{\syntaxbox}[2][\linewidth]
{%
    \framebox[#1]%
    {%
        \usebox{#2}%
    }%
}

\newcommand{\syntaxtable}[3][\linewidth]
{%
    \@syntaxaddtolot{#2}%
    \syntaxbox[#1]{#3}%
}

%%%  Arguments

\def\argrelax#1,{\relax}

\def\choiceaux#1,#2,{\ifx#2\thend #1\let\next=\argrelax
    \else #1 $|$\let\next=\choiceaux\fi \next#2,}

\newcommand{\choice}[1]
{%
    {\rm \{}\choiceaux#1,\thend,{\rm \}}%
}

\def\oneofaux#1,#2,{\ifx#2\thend #1\let\next=\argrelax
    \else #1 $|$\let\next=\oneofaux\fi \next#2,}

\newcommand{\oneof}[1]{\oneofaux#1,\thend,}
\newcommand{\optional}[1]{{\tt[}#1\/{\tt]}}
\newcommand{\group}[1]{{\tt(}#1\/{\tt)}}

% Wrap the quote environment macros so that it can be switched-off for TeX4ht
\newcommand{\optionsquote}{\begin{quote}}
\newcommand{\stopoptionsquote}{\end{quote}}

\newcommand{\argumentlabel}[1]{{\it #1}\thinspace:}
\newenvironment{arguments}
{%
    \syntaxssclause*{\syntaxssclausefont Arguments}%
    \optionsquote%
    \list{}{\let\makelabel\argumentlabel}%
}
{%
    \endlist%
    \stopoptionsquote%
}

%%%  Generic arguments

%\def\genargshelper#1,#2,{\ifx#2\thend\let\next=\relax{{\it{}#1}\thinspace:}
%    \else\let\next=\argrelax{\tt({\it{}#1}{}#2)}\thinspace:\fi\next}
\def\genargshelper#1,#2,{\ifx#2\thend\let\next=\relax{{\it{}#1}\thinspace:}
    \else\let\next=\argrelax{\tt{\it{}#1}{}#2}\thinspace:\fi\next}
\newcommand{\genargslabel}[1]{\genargshelper#1,\thend,}
\newenvironment{genericargs}
{%
    \syntaxssclause*{\syntaxssclausefont Generic Arguments}%
    \optionsquote%
    \list{}{\let\makelabel\genargslabel}%
}
{%
    \endlist%
    \stopoptionsquote%
}

%%%  Specialized Arguments

\newenvironment{specargs}
{%
    \syntaxssclause*{\syntaxssclausefont Specialized Arguments}%
    \optionsquote%
    \list{}{\let\makelabel\genargslabel}%
}
{%
    \endlist%
    \stopoptionsquote%
}

%%%  Options

\def\optionhelper#1,#2,{{\tt{}#1}{\em{}#2}\thinspace:}
\newcommand{\optionlabel}[1]{\optionhelper#1,}
\newenvironment{initoptions}
{%
    \syntaxssclause*{\syntaxssclausefont Initialization Options}%
    \optionsquote%
    \list{}{\let\makelabel\optionlabel}%
}
{%
    \endlist%
    \stopoptionsquote%
}
\newenvironment{options}
{%
    \optionsquote%
    \list{}{\let\makelabel\optionlabel}%
}
{%
    \endlist%
    \stopoptionsquote%
}

%%%  Other

\newcommand{\result}{\syntaxssclause*{\syntaxssclausefont Result}}
\newcommand{\remarks}{\syntaxssclause*{\syntaxssclausefont Remarks}}
\newcommand{\examples}{\syntaxssclause*{\syntaxssclausefont Examples}}
\renewcommand{\seealso}{\syntaxssclause*{\syntaxssclausefont See~also}}

%%%  Sub-classes

\newcommand{\subclasslabel}[1]{{\tt{}<#1>}\thinspace:}
\newenvironment{subclasses}
{%
    %\syntaxssclause*{\syntaxssclausefont Sub-classes}%
    \optionsquote%
    \list{}{\let\makelabel\subclasslabel}%
}
{%
    \endlist%
    \stopoptionsquote%
}

%%% functions

\newcommand{\functionslabel}[1]{\indexfunc{#1}\ttindex{#1}{\tt{}#1}\thinspace:}
\newenvironment{functions}
{%
    % \syntaxssclause*{\syntaxssclausefont Sub-classes}%
    \optionsquote%
    \list{}{\let\makelabel\functionslabel}%
}
{%
    \endlist%
    \stopoptionsquote%
}

% ------------------------------------------------------------------------------
%%% Sub-definition
% Amalgam of subclause and definition to get the right level of numbering on
% the heading but no toc entry.

\newcounter{subdefinition}[entryclause]
\renewcommand{\thesubdefinition}{\theclause .\arabic{subdefinition}}
\newcommand{\l@subdefinition}{\@gobbletwo}
\newcommand{\subdefinitionmark}[1]{}
\newcommand{\subdefinition}[1]
{%
    \@startsection{subdefinition}{3}{\z@}%
    {2ex plus 1ex minus .2ex}%
    {-.5em plus -.1em minus -.1em}%
    {\normalsize\bfseries}%
    {\protect{\normalsize\bfseries#1:\thinspace}}%
}

% ------------------------------------------------------------------------------
%%% EuLisp code typesetting

% Enable white-space counting?
{\obeyspaces\gdef\enablespaces{\obeyspaces\let \@xobeysp}}

\newcommand{\enabletex}
{%
    \relax%
    \def\[{\endgroup\begingroup\def\]{\endgroup\restart}}%
}

\newcommand{\enablemacros}{\catcode`\\=0\relax}
\newcommand{\disablemacros}{\catcode`\\=\other}

\gdef\savesyntax#1{\newbox#1\global\setbox#1}

\newcommand{\syntaxfont}{\tt}
\newcommand{\syntaxcommentfont}{\it}

\newdimen\syntaxindent \syntaxindent=0.5cm%

\newcommand{\syntaxbeforehook}{\smallskip\@@par\noindent}
\newcommand{\syntaxbegineveryline}{\relax}
\newcommand{\syntaxendeveryline}{\relax}
\newcommand{\syntaxafterhook}{\smallskip\@@par}

\newif\iffirstsyntaxpar

\newcommand{\@@syntax}
{%
    \begingroup%
    \def\verbatimpar{\iffirstsyntaxpar%
        \global\firstsyntaxparfalse\syntaxbegineveryline\else%
        \syntaxendeveryline\@@par\leavevmode\syntaxbegineveryline\fi}\relax%
    \def\endsyntax{\syntaxendeveryline\endgroup\endsyntax}\frenchspacing%
    \syntaxverbatim\enablespaces\disablesyntaxcomment%
    \enabletex\disablebackslash\enablemacros%
    \syntaxfont%
}

\newcommand{\syntax}
{%
    \begingroup\syntaxbeforehook%
    \let\restart=\@@syntax%
    \def\verbatimpar{\relax}\global\firstsyntaxpartrue%
    \def\par{\verbatimpar}\obeylines%
    \def\endsyntax{\@@par\syntaxafterhook\endgroup}\relax%
    \rightskip\z@\leftskip\@totalleftmargin%
    \advance\leftskip by\syntaxindent%
    \parindent\z@\parfillskip\@flushglue%
    \parskip\z@\itemsep=\z@\parsep=\z@\@@syntax%
}

%  How to recognize comments that begin with a precise character
\newcommand{\syntaxcommentsign}{;}

{\catcode`\;=\active
 \gdef\enablesyntaxcomment{\catcode`\;=\active
    \def;{\syntaxcomment}}\relax
 \gdef\disablesyntaxcomment{\catcode`\;=\other
    \def;{\syntaxcommentsign}}}

\newcommand{\syntaxcomment}
{%
    \endgroup\begingroup%
    \def\verbatimpar{\ifmmode$\fi\endgroup\restart\verbatimpar}\relax%
    \def\endsyntax{\ifmmode$\fi\endgroup\endsyntax}\relax%
    \syntaxfont\syntaxcommentsign\@syntaxcomment%
}

% This is a special macro to handle sucessions of syntaxcommentsign
\newcommand{\@syntaxcomment}[1]
{%
    \relax%
    \if\syntaxcommentsign#1\syntaxcommentsign\let\temp=\@syntaxcomment\else%
    \ifcat\space#1\let\temp=\@syntaxcomment%
    \else\syntaxcommentfont\let\temp=#1\fi\fi\temp%
}

\chardef\other=12\relax

\newcommand{\syntaxverbatim}
{%
    \relax%
    \edef\disablebackslash{\catcode`\noexpand\\=\the\catcode`\\}\relax
    \edef\endsyntaxverbatim{\relax
        \catcode`\noexpand\\=\the\catcode`\\\relax
        \catcode`\noexpand\ =\the\catcode`\ \relax
        \catcode`\noexpand\{=\the\catcode`\{\relax
        \catcode`\noexpand\}=\the\catcode`\}\relax
        \catcode`\noexpand\$=\the\catcode`\$\relax
        \catcode`\noexpand\&=\the\catcode`\&\relax
        \catcode`\noexpand\#=\the\catcode`\#\relax
        \catcode`\noexpand\%=\the\catcode`\%\relax
        \catcode`\noexpand\~=\the\catcode`\~\relax
        \catcode`\noexpand\_=\the\catcode`\_\relax
        \catcode`\noexpand\^=\the\catcode`\^\relax}\relax
    \let\do=\@makeother\do\\\do\ \do\{\do\}\do\$\do\&\do\#\do\%\do\~\do\_\do\^%
}

\newcommand{\disablebackslash}{\apocaerror{No disablebackslash here}}

% ------------------------------------------------------------------------------
%%% Example typesetting

\renewcommand{\examplename}{Example}

\renewcommand{\theexample}
{%
    \ifnum\c@annex=0
    \arabic{example}%
    \else
    \theannex.\arabic{example}%
    \fi
}

\def\fnum@example{\examplename~\theexample}

\renewenvironment{example}
{%
    \stepcounter{yextra}%
    \refstepcounter{example}%
    \@setnoteparams%
}
{}

\newcommand{\l@example}[2]
{%
    \vskip \z@ \@plus.2\p@
    {%
        \leftskip 0em
        \rightskip \@tocrmarg
        \parfillskip -\rightskip
        \parindent 0em\@afterindenttrue
        \interlinepenalty\@M
        \leavevmode
        \@tempdima 2.75em
        \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
        {\let\numberline\loftnumberline \normalfont\examplename{} #1}\nobreak
        \loftfillnum{#2}}
}

\newcommand{\examplecaption}[1]
{%
    \addtotoc{lof}{example}{#1}%
    \@makecaption{\fnum@example}{#1}%
}


%%% Redefine the definitions environment
% Removed the spurious newline after the clause number

\renewenvironment{definitions}{%
    \setcounter{cl@level}{6}
    \ifnum\value{sssssclause}=0 \setcounter{cl@level}{5} \fi
    \ifnum\value{ssssclause}=0 \setcounter{cl@level}{4} \fi
    \ifnum\value{sssclause}=0 \setcounter{cl@level}{3} \fi
    \ifnum\value{ssclause}=0 \setcounter{cl@level}{2} \fi
    \ifnum\value{sclause}=0 \setcounter{cl@level}{1} \fi
    \ifnum\value{clause}=0 \setcounter{cl@level}{0} \fi
    \ifcase\value{cl@level} % 0, NOT YET IN A CLAUSE
    \ClassWarning{iso}{Definitions started before the initial clause}
    \renewcommand{\@defcl}[1]{\setcounter{note}{0}\setcounter{example}{0}
        \par
        \addvspace{\beforecskip}
        \@afterindentfalse
        \refstepcounter{clause}
        {\raggedright\bfseries \theclause\ ##1\\}}
    \or % 1, called in a clause
    \renewcommand{\@defcl}[1]{\setcounter{note}{0}\setcounter{example}{0}
        \par
        \addvspace{\beforescskip}
        \@afterindentfalse
        \refstepcounter{sclause}
        {\raggedright\bfseries \thesclause\ ##1\\}}
    \or % 2, called in an sclause
    \renewcommand{\@defcl}[1]{\setcounter{note}{0}\setcounter{example}{0}
        \par
        \addvspace{\beforesscskip}
        \@afterindentfalse
        \refstepcounter{ssclause}
        {\raggedright\bfseries \thessclause\ ##1\\}}
    \or % 3, called in an ssclause
    \renewcommand{\@defcl}[1]{\setcounter{note}{0}\setcounter{example}{0}
        \par
        \addvspace{\beforesscskip}
        \@afterindentfalse
        \refstepcounter{sssclause}
        {\raggedright\bfseries \thesssclause\ ##1\\}}
    \or % 4, called in an sssclause
    \renewcommand{\@defcl}[1]{\setcounter{note}{0}\setcounter{example}{0}
        \par
        \addvspace{\beforesscskip}
        \@afterindentfalse
        \refstepcounter{ssssclause}
        {\raggedright\bfseries \thessssclause\ ##1\\}}
    \or % 5, called in an ssssclause
    \renewcommand{\@defcl}[1]{\setcounter{note}{0}\setcounter{example}{0}
        \par
        \addvspace{\beforesscskip}
        \@afterindentfalse
        \refstepcounter{sssssclause}
        {\raggedright\bfseries \thesssssclause\ ##1\\}}
    \else % 5+, called in an sssssclause or lower
    \ClassWarning{iso}{Definitions too deeply nested}
    \renewcommand{\@defcl}[1]{
        \par
        \addvspace{\beforesscskip}
        \@afterindentfalse
        \refstepcounter{sssssclause}
        {\raggedright\bfseries \thesssssclause\ ##1\\}}
    \fi}%
{}
\renewcommand{\definition}[2]{\@defcl{#1} #2}

%%% ----------------------------------------------------------------------------
