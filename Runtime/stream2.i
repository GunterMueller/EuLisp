;;; EuLisp system 'youtoo'
;;;   Interface file for module stream2

(definterface stream2
  (import (telos lock condition convert dynamic stream1 string)
   syntax (_macros)
   full-import (mop-alloc mop-access mop-prim mop-key mop-class mop-init mop-inspect mop-gf mop-meth mop-defcl boot boot1 telos thread event lock let-cc dynamic condition convert stream1 fpi number integer collect callback compare copy string)
   export (
    ((name . control-block-buffer-size) (pos . 9) (origin stream2 . control-block-buffer-size) (inline (G004780 (static-ref2) (binding-ref ? <stream-control-block>) (primitive-relative-ref))) (setter (G004810 (stack-ref 1) (static-ref2) (stack-ref 2) (binding-ref ? <stream-control-block>) (set-primitive-relative-ref) (nobble 2))))
    ((name . control-block-mode) (pos . 30) (origin stream2 . control-block-mode) (inline (G004786 (static-ref1) (binding-ref ? <file-control-block>) (primitive-relative-ref))) (setter (G004816 (stack-ref 1) (static-ref1) (stack-ref 2) (binding-ref ? <file-control-block>) (set-primitive-relative-ref) (nobble 2))))
    ((name . control-block-descriptor) (pos . 42) (origin stream2 . control-block-descriptor) (inline (G004784 (static-ref0) (binding-ref ? <file-control-block>) (primitive-relative-ref))) (setter (G004814 (stack-ref 1) (static-ref0) (stack-ref 2) (binding-ref ? <file-control-block>) (set-primitive-relative-ref) (nobble 2))))
    ((name . stdout) (pos . 35) (origin stream2 . stdout))
    ((name . generic-write) (pos . 29) (origin stream2 . generic-write))
    ((name . stream-read-action) (pos . 8) (origin stream2 . stream-read-action) (inline (G004796 (static-fpi-ref 3) (binding-ref ? <stream>) (primitive-relative-ref))) (setter (G004822 (stack-ref 1) (static-fpi-ref 3) (stack-ref 2) (binding-ref ? <stream>) (set-primitive-relative-ref) (nobble 2))))
    ((name . <end-of-stream>) (pos . 7) (origin stream2 . <end-of-stream>) (class . constant))
    ((name . string-stream-p) (pos . 28) (origin stream2 . string-stream-p))
    ((name . control-block-file-name) (pos . 34) (origin stream2 . control-block-file-name) (inline (G004788 (static-ref2) (binding-ref ? <file-control-block>) (primitive-relative-ref))) (setter (G004818 (stack-ref 1) (static-ref2) (stack-ref 2) (binding-ref ? <file-control-block>) (set-primitive-relative-ref) (nobble 2))))
    ((name . file-stream-p) (pos . 16) (origin stream2 . file-stream-p))
    ((name . <stream-control-block>) (pos . 24) (origin stream2 . <stream-control-block>) (class . constant))
    ((name . <stream>) (pos . 21) (origin stream2 . <stream>) (class . constant))
    ((name . <buffered-stream>) (pos . 20) (origin stream2 . <buffered-stream>) (class . constant))
    ((name . open-file-streams) (pos . 15) (origin stream2 . open-file-streams))
    ((name . eos-default-value) (pos . 6) (origin stream2 . eos-default-value))
    ((name . disconnect) (pos . 41) (origin stream2 . disconnect))
    ((name . string-stream-string-list) (pos . 49) (origin stream2 . string-stream-string-list) (inline (G004802 (static-ref0) (binding-ref ? <string-stream>) (primitive-relative-ref))) (setter (G004828 (stack-ref 1) (static-ref0) (stack-ref 2) (binding-ref ? <string-stream>) (set-primitive-relative-ref) (nobble 2))))
    ((name . <file-stream>) (pos . 5) (origin stream2 . <file-stream>) (class . constant))
    ((name . control-block-buffer) (pos . 33) (origin stream2 . control-block-buffer) (inline (G004782 (static-fpi-ref 3) (binding-ref ? <stream-control-block>) (primitive-relative-ref))) (setter (G004812 (stack-ref 1) (static-fpi-ref 3) (stack-ref 2) (binding-ref ? <stream-control-block>) (set-primitive-relative-ref) (nobble 2))))
    ((name . to-stream) (pos . 27) (origin stream2 . to-stream))
    ((name . <file-control-block>) (pos . 4) (origin stream2 . <file-control-block>) (class . constant))
    ((name . end-of-stream) (pos . 19) (origin stream2 . end-of-stream))
    ((name . stream-lock) (pos . 32) (origin stream2 . stream-lock) (inline (G004792 (static-ref1) (binding-ref ? <stream>) (primitive-relative-ref))))
    ((name . stream-write-action) (pos . 14) (origin stream2 . stream-write-action) (inline (G004794 (static-ref2) (binding-ref ? <stream>) (primitive-relative-ref))) (setter (G004820 (stack-ref 1) (static-ref2) (stack-ref 2) (binding-ref ? <stream>) (set-primitive-relative-ref) (nobble 2))))
    ((name . streamp) (pos . 40) (origin stream2 . streamp))
    ((name . control-block-buffer-cnt) (pos . 48) (origin stream2 . control-block-buffer-cnt) (inline (G004776 (static-ref0) (binding-ref ? <stream-control-block>) (primitive-relative-ref))) (setter (G004806 (stack-ref 1) (static-ref0) (stack-ref 2) (binding-ref ? <stream-control-block>) (set-primitive-relative-ref) (nobble 2))))
    ((name . <string-stream>) (pos . 46) (origin stream2 . <string-stream>) (class . constant))
    ((name . <stream-condition>) (pos . 39) (origin stream2 . <stream-condition>) (class . constant))
    ((name . *open-file-streams*) (pos . 38) (origin stream2 . *open-file-streams*))
    ((name . stream-sink) (pos . 37) (origin stream2 . stream-sink) (inline (G004800 (static-fpi-ref 5) (binding-ref ? <stream>) (primitive-relative-ref))) (setter (G004826 (stack-ref 1) (static-fpi-ref 5) (stack-ref 2) (binding-ref ? <stream>) (set-primitive-relative-ref) (nobble 2))))
    ((name . stream-source) (pos . 23) (origin stream2 . stream-source) (inline (G004798 (static-fpi-ref 4) (binding-ref ? <stream>) (primitive-relative-ref))) (setter (G004824 (stack-ref 1) (static-fpi-ref 4) (stack-ref 2) (binding-ref ? <stream>) (set-primitive-relative-ref) (nobble 2))))
    ((name . reconnect) (pos . 18) (origin stream2 . reconnect))
    ((name . from-stream) (pos . 47) (origin stream2 . from-stream))
    ((name . stream-mode) (pos . 17) (origin stream2 . stream-mode) (inline (G004790 (static-ref0) (binding-ref ? <stream>) (primitive-relative-ref))))
    ((name . file-control-block-p) (pos . 13) (origin stream2 . file-control-block-p))
    ((name . *open-file-streams*-lock) (pos . 12) (origin stream2 . *open-file-streams*-lock) (class . constant))
    ((name . generic-connect) (pos . 44) (origin stream2 . generic-connect))
    ((name . stream-control-block-p) (pos . 31) (origin stream2 . stream-control-block-p))
    ((name . control-block-buffer-pos) (pos . 11) (origin stream2 . control-block-buffer-pos) (inline (G004778 (static-ref1) (binding-ref ? <stream-control-block>) (primitive-relative-ref))) (setter (G004808 (stack-ref 1) (static-ref1) (stack-ref 2) (binding-ref ? <stream-control-block>) (set-primitive-relative-ref) (nobble 2))))
    ((name . flush-buffer) (pos . 25) (origin stream2 . flush-buffer))
    ((name . fill-buffer) (pos . 3) (origin stream2 . fill-buffer))
    ((name . generic-read) (pos . 45) (origin stream2 . generic-read))
    ((name . stderr) (pos . 10) (origin stream2 . stderr))
    ((name . generic-prin) (pos . 2) (origin stream2 . generic-prin))
    ((name . buffered-stream-p) (pos . 22) (origin stream2 . buffered-stream-p))
    ((name . stdin) (pos . 50) (origin stream2 . stdin))
   )
   local-literals (
    (top-level . 224)
    (eos-default-value . 223)
    (stream-read-action . 222)
    (control-block-buffer-size . 221)
    (control-block-buffer-pos . 220)
    (stream-write-action . 219)
    (open-file-streams . 218)
    (stream-mode . 217)
    (stream-source . 216)
    (to-stream . 215)
    (control-block-mode . 214)
    (stream-lock . 213)
    (control-block-buffer . 212)
    (control-block-file-name . 211)
    (default-read-action . 210)
    (stream-sink . 209)
    (control-block-descriptor . 208)
    (default-write-action . 207)
    (from-stream . 206)
    (control-block-buffer-cnt . 205)
    (string-stream-string-list . 204)
    ((*end-of-stream*) . 182)
    (*end-of-stream* . 181)
    (|(setter value)| . 179)
    ("stderr" . 178)
    ("stdout" . 177)
    ("stdin" . 176)
    (|(method file-stream-p)| . 175)
    (|(method string-stream-p)| . 174)
    (|(setter string-stream-string-list)| . 173)
    (|(method buffered-stream-p)| . 172)
    (|(method streamp)| . 171)
    (|(setter stream-sink)| . 170)
    (|(setter stream-source)| . 169)
    (|(setter stream-read-action)| . 168)
    (|(setter stream-write-action)| . 167)
    (|(method initialize)| . 166)
    (|(method file-control-block-p)| . 165)
    (|(setter control-block-file-name)| . 164)
    (|(setter control-block-mode)| . 163)
    (|(setter control-block-descriptor)| . 162)
    (|(method stream-control-block-p)| . 161)
    (|(setter control-block-buffer)| . 160)
    (|(setter control-block-buffer-size)| . 159)
    (|(setter control-block-buffer-pos)| . 158)
    (|(setter control-block-buffer-cnt)| . 157)
    (disconnect . 156)
    (reconnect . 155)
    (generic-connect . 154)
    (flush-buffer . 153)
    (fill-buffer . 152)
    (generic-read . 151)
    (generic-write . 150)
    (generic-prin . 149)
    (file-stream-p . 148)
    (string-stream-p . 147)
    (buffered-stream-p . 146)
    (streamp . 145)
    (file-control-block-p . 144)
    (stream-control-block-p . 143)
    (end-of-stream . 142)
    ((value:) . 141)
    (stream-condition . 140)
    (value . 139)
    ((file-name:) . 138)
    (file-stream . 137)
    ((string:) . 136)
    (string-stream . 135)
    (string-list . 134)
    (buffered-stream . 133)
    ((mode: write-action: read-action: source: sink:) . 132)
    (stream . 131)
    (lock . 130)
    (write-action: . 129)
    (write-action . 128)
    (read-action: . 127)
    (read-action . 126)
    (source: . 125)
    (source . 124)
    (sink: . 123)
    (sink . 122)
    ((descriptor: mode: file-name:) . 121)
    (file-control-block . 120)
    (descriptor . 119)
    (mode . 118)
    (file-name . 117)
    ((size: buffer:) . 116)
    (direct-keywords: . 115)
    (direct-slots: . 114)
    (direct-superclasses: . 113)
    (stream-control-block . 112)
    (buffer-cnt . 111)
    (buffer-pos . 110)
    (default: . 109)
    (buffer-size . 108)
    (keyword: . 107)
    (buffer . 106)
    (name: . 105)
    ("" . 100)
    (anonymous . 67)
    (*clean-ups* . 66)
    (a . 65)
    (w . 64)
    (r . 63)
    (descriptor: . 62)
    (mode: . 61)
    (value: . 60)
    ("" . 59)
    (file-name: . 58)
    (size: . 55)
    (buffer: . 54)
    ("" . 53)
    (string: . 52)
   )
   literals (
   )
))
